!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
ACTIVATIONS_H	src/activations.h	2;"	d
ACTIVATION_LAYER_H	src/activation_layer.h	2;"	d
AI2_BINARY_CONVOLUTION_H	src/binary_convolution.h	2;"	d
AI2_COMMON_H	src/common.h	2;"	d
AVGPOOL_LAYER_H	src/avgpool_layer.h	2;"	d
AltRefIdx	/usr/local/cuda/include/dynlink_cuviddec.h	/^    unsigned char AltRefIdx;$/;"	m	struct:_CUVIDVP8PICPARAMS
AltRefIdx	/usr/local/cuda/include/dynlink_cuviddec.h	/^    unsigned char AltRefIdx;$/;"	m	struct:_CUVIDVP9PICPARAMS
BATCHNORM_LAYER_H	src/batchnorm_layer.h	2;"	d
BINARY_WORD	src/common.h	/^typedef uint32_t BINARY_WORD;$/;"	t
BITS_PER_BINARY_WORD	src/common.h	17;"	d
BLAS_H	src/blas.h	2;"	d
BLOCK_NUM_MAX	/usr/local/cuda/include/curand_mtgp32.h	109;"	d
BOX_H	src/box.h	2;"	d
B_VOP	/usr/local/cuda/include/dynlink_cuviddec.h	333;"	d
BackwardRefIdx	/usr/local/cuda/include/dynlink_cuviddec.h	/^    int BackwardRefIdx;         \/\/ Picture index of backward reference (B-frames)$/;"	m	struct:_CUVIDMPEG2PICPARAMS
BackwardRefIdx	/usr/local/cuda/include/dynlink_cuviddec.h	/^    int BackwardRefIdx;         \/\/ Picture index of backward reference (B-frames)$/;"	m	struct:_CUVIDMPEG4PICPARAMS
BackwardRefIdx	/usr/local/cuda/include/dynlink_cuviddec.h	/^    int BackwardRefIdx;     \/**< Picture index of backward reference (B-frames) *\/$/;"	m	struct:_CUVIDVC1PICPARAMS
BattleRoyaleWithCheese	src/compare.c	/^void BattleRoyaleWithCheese(char *filename, char *weightfile)$/;"	f
CACHE_PREFER_EQUAL	/usr/local/cuda/include/cuda_occupancy.h	/^    CACHE_PREFER_EQUAL  = 0x03  \/\/ prefer equal sized L1 cache and shared memory$/;"	e	enum:cudaOccCacheConfig_enum
CACHE_PREFER_L1	/usr/local/cuda/include/cuda_occupancy.h	/^    CACHE_PREFER_L1     = 0x02, \/\/ prefer larger L1 cache and smaller shared memory$/;"	e	enum:cudaOccCacheConfig_enum
CACHE_PREFER_NONE	/usr/local/cuda/include/cuda_occupancy.h	/^    CACHE_PREFER_NONE   = 0x00, \/\/ no preference for shared memory or L1 (default)$/;"	e	enum:cudaOccCacheConfig_enum
CACHE_PREFER_SHARED	/usr/local/cuda/include/cuda_occupancy.h	/^    CACHE_PREFER_SHARED = 0x01, \/\/ prefer larger shared memory and smaller L1 cache$/;"	e	enum:cudaOccCacheConfig_enum
CASE	src/stb_image.h	1338;"	d
CASE	src/stb_image.h	1356;"	d
CASE	src/stb_image.h	4025;"	d
CASE	src/stb_image.h	4038;"	d
CASE	src/stb_image.h	4042;"	d
CASE	src/stb_image.h	4055;"	d
CCtxAutoLock	/usr/local/cuda/include/dynlink_cuviddec.h	/^class CCtxAutoLock$/;"	c
COALESCED_MATCH_ALL_FUNCTION	/usr/local/cuda/include/cooperative_groups.h	516;"	d
COALESCED_MATCH_ALL_FUNCTION	/usr/local/cuda/include/cooperative_groups.h	544;"	d
COALESCED_MATCH_ANY_FUNCTION	/usr/local/cuda/include/cooperative_groups.h	508;"	d
COALESCED_MATCH_ANY_FUNCTION	/usr/local/cuda/include/cooperative_groups.h	543;"	d
COALESCED_SHFL_DOWN_FUNCTION	/usr/local/cuda/include/cooperative_groups.h	441;"	d
COALESCED_SHFL_DOWN_FUNCTION	/usr/local/cuda/include/cooperative_groups.h	490;"	d
COALESCED_SHFL_FUNCTION	/usr/local/cuda/include/cooperative_groups.h	424;"	d
COALESCED_SHFL_FUNCTION	/usr/local/cuda/include/cooperative_groups.h	488;"	d
COALESCED_SHFL_UP_FUNCTION	/usr/local/cuda/include/cooperative_groups.h	431;"	d
COALESCED_SHFL_UP_FUNCTION	/usr/local/cuda/include/cooperative_groups.h	489;"	d
COL2IM_H	src/col2im.h	2;"	d
COMBO	src/stb_image.h	1337;"	d
CONNECTED_LAYER_H	src/connected_layer.h	2;"	d
CONVOLUTIONAL_LAYER_H	src/convolutional_layer.h	2;"	d
COST_LAYER_H	src/cost_layer.h	2;"	d
CRNN_LAYER_H	src/crnn_layer.h	3;"	d
CROP_LAYER_H	src/crop_layer.h	2;"	d
CR_CUDART_PI	/usr/local/cuda/include/curand_poisson.h	67;"	d
CR_CUDART_TWO_TO_52	/usr/local/cuda/include/curand_poisson.h	68;"	d
CUAUDIOFORMAT	/usr/local/cuda/include/dynlink_nvcuvid.h	/^} CUAUDIOFORMAT;$/;"	t	typeref:struct:__anon129
CUBLASAPI	/usr/local/cuda/include/cublas.h	70;"	d
CUBLASAPI	/usr/local/cuda/include/cublas.h	72;"	d
CUBLASAPI	/usr/local/cuda/include/cublas.h	74;"	d
CUBLASAPI	/usr/local/cuda/include/cublas_v2.h	58;"	d
CUBLASAPI	/usr/local/cuda/include/cublas_v2.h	60;"	d
CUBLASAPI	/usr/local/cuda/include/cublas_v2.h	62;"	d
CUBLASWINAPI	/usr/local/cuda/include/cublas.h	64;"	d
CUBLASWINAPI	/usr/local/cuda/include/cublas.h	66;"	d
CUBLASWINAPI	/usr/local/cuda/include/cublas_api.h	62;"	d
CUBLASWINAPI	/usr/local/cuda/include/cublas_api.h	64;"	d
CUBLASXT_COMPLEX	/usr/local/cuda/include/cublasXt.h	/^    CUBLASXT_COMPLEX=2,$/;"	e	enum:__anon28
CUBLASXT_DOUBLE	/usr/local/cuda/include/cublasXt.h	/^    CUBLASXT_DOUBLE=1,  $/;"	e	enum:__anon28
CUBLASXT_DOUBLECOMPLEX	/usr/local/cuda/include/cublasXt.h	/^    CUBLASXT_DOUBLECOMPLEX=3,        $/;"	e	enum:__anon28
CUBLASXT_FLOAT	/usr/local/cuda/include/cublasXt.h	/^    CUBLASXT_FLOAT=0,$/;"	e	enum:__anon28
CUBLASXT_GEMM	/usr/local/cuda/include/cublasXt.h	/^    CUBLASXT_GEMM=0,$/;"	e	enum:__anon29
CUBLASXT_HEMM	/usr/local/cuda/include/cublasXt.h	/^    CUBLASXT_HEMM=4,$/;"	e	enum:__anon29
CUBLASXT_HER2K	/usr/local/cuda/include/cublasXt.h	/^    CUBLASXT_HER2K=7,        $/;"	e	enum:__anon29
CUBLASXT_HERK	/usr/local/cuda/include/cublasXt.h	/^    CUBLASXT_HERK=2,$/;"	e	enum:__anon29
CUBLASXT_HERKX	/usr/local/cuda/include/cublasXt.h	/^    CUBLASXT_HERKX=10,  $/;"	e	enum:__anon29
CUBLASXT_PINNING_DISABLED	/usr/local/cuda/include/cublasXt.h	/^    CUBLASXT_PINNING_DISABLED   = 0,  $/;"	e	enum:__anon27
CUBLASXT_PINNING_ENABLED	/usr/local/cuda/include/cublasXt.h	/^    CUBLASXT_PINNING_ENABLED    = 1        $/;"	e	enum:__anon27
CUBLASXT_ROUTINE_MAX	/usr/local/cuda/include/cublasXt.h	/^    CUBLASXT_ROUTINE_MAX=12,      $/;"	e	enum:__anon29
CUBLASXT_SPMM	/usr/local/cuda/include/cublasXt.h	/^    CUBLASXT_SPMM=8,$/;"	e	enum:__anon29
CUBLASXT_SYMM	/usr/local/cuda/include/cublasXt.h	/^    CUBLASXT_SYMM=3,$/;"	e	enum:__anon29
CUBLASXT_SYR2K	/usr/local/cuda/include/cublasXt.h	/^    CUBLASXT_SYR2K=6,  $/;"	e	enum:__anon29
CUBLASXT_SYRK	/usr/local/cuda/include/cublasXt.h	/^    CUBLASXT_SYRK=1,  $/;"	e	enum:__anon29
CUBLASXT_SYRKX	/usr/local/cuda/include/cublasXt.h	/^    CUBLASXT_SYRKX=9,$/;"	e	enum:__anon29
CUBLASXT_TRMM	/usr/local/cuda/include/cublasXt.h	/^    CUBLASXT_TRMM=11,  $/;"	e	enum:__anon29
CUBLASXT_TRSM	/usr/local/cuda/include/cublasXt.h	/^    CUBLASXT_TRSM=5,$/;"	e	enum:__anon29
CUBLAS_API_H_	/usr/local/cuda/include/cublas_api.h	58;"	d
CUBLAS_ATOMICS_ALLOWED	/usr/local/cuda/include/cublas_api.h	/^    CUBLAS_ATOMICS_ALLOWED       = 1        $/;"	e	enum:__anon36
CUBLAS_ATOMICS_NOT_ALLOWED	/usr/local/cuda/include/cublas_api.h	/^    CUBLAS_ATOMICS_NOT_ALLOWED   = 0,  $/;"	e	enum:__anon36
CUBLAS_DEFAULT_MATH	/usr/local/cuda/include/cublas_api.h	/^    CUBLAS_DEFAULT_MATH = 0,$/;"	e	enum:__anon38
CUBLAS_DIAG_NON_UNIT	/usr/local/cuda/include/cublas_api.h	/^    CUBLAS_DIAG_NON_UNIT=0, $/;"	e	enum:__anon32
CUBLAS_DIAG_UNIT	/usr/local/cuda/include/cublas_api.h	/^    CUBLAS_DIAG_UNIT=1$/;"	e	enum:__anon32
CUBLAS_FILL_MODE_LOWER	/usr/local/cuda/include/cublas_api.h	/^    CUBLAS_FILL_MODE_LOWER=0, $/;"	e	enum:__anon31
CUBLAS_FILL_MODE_UPPER	/usr/local/cuda/include/cublas_api.h	/^    CUBLAS_FILL_MODE_UPPER=1$/;"	e	enum:__anon31
CUBLAS_GEMM_ALGO0	/usr/local/cuda/include/cublas_api.h	/^    CUBLAS_GEMM_ALGO0               =  0,$/;"	e	enum:__anon37
CUBLAS_GEMM_ALGO0_TENSOR_OP	/usr/local/cuda/include/cublas_api.h	/^    CUBLAS_GEMM_ALGO0_TENSOR_OP     =  100,        $/;"	e	enum:__anon37
CUBLAS_GEMM_ALGO1	/usr/local/cuda/include/cublas_api.h	/^    CUBLAS_GEMM_ALGO1               =  1,$/;"	e	enum:__anon37
CUBLAS_GEMM_ALGO10	/usr/local/cuda/include/cublas_api.h	/^    CUBLAS_GEMM_ALGO10              =  10,   $/;"	e	enum:__anon37
CUBLAS_GEMM_ALGO11	/usr/local/cuda/include/cublas_api.h	/^    CUBLAS_GEMM_ALGO11              =  11,$/;"	e	enum:__anon37
CUBLAS_GEMM_ALGO12	/usr/local/cuda/include/cublas_api.h	/^    CUBLAS_GEMM_ALGO12              =  12,        $/;"	e	enum:__anon37
CUBLAS_GEMM_ALGO13	/usr/local/cuda/include/cublas_api.h	/^    CUBLAS_GEMM_ALGO13              =  13,        $/;"	e	enum:__anon37
CUBLAS_GEMM_ALGO14	/usr/local/cuda/include/cublas_api.h	/^    CUBLAS_GEMM_ALGO14              =  14,        $/;"	e	enum:__anon37
CUBLAS_GEMM_ALGO15	/usr/local/cuda/include/cublas_api.h	/^    CUBLAS_GEMM_ALGO15              =  15,        $/;"	e	enum:__anon37
CUBLAS_GEMM_ALGO16	/usr/local/cuda/include/cublas_api.h	/^    CUBLAS_GEMM_ALGO16              =  16,        $/;"	e	enum:__anon37
CUBLAS_GEMM_ALGO17	/usr/local/cuda/include/cublas_api.h	/^    CUBLAS_GEMM_ALGO17              =  17,        $/;"	e	enum:__anon37
CUBLAS_GEMM_ALGO1_TENSOR_OP	/usr/local/cuda/include/cublas_api.h	/^    CUBLAS_GEMM_ALGO1_TENSOR_OP     =  101,        $/;"	e	enum:__anon37
CUBLAS_GEMM_ALGO2	/usr/local/cuda/include/cublas_api.h	/^    CUBLAS_GEMM_ALGO2               =  2,$/;"	e	enum:__anon37
CUBLAS_GEMM_ALGO2_TENSOR_OP	/usr/local/cuda/include/cublas_api.h	/^    CUBLAS_GEMM_ALGO2_TENSOR_OP     =  102,        $/;"	e	enum:__anon37
CUBLAS_GEMM_ALGO3	/usr/local/cuda/include/cublas_api.h	/^    CUBLAS_GEMM_ALGO3               =  3,$/;"	e	enum:__anon37
CUBLAS_GEMM_ALGO3_TENSOR_OP	/usr/local/cuda/include/cublas_api.h	/^    CUBLAS_GEMM_ALGO3_TENSOR_OP     =  103,        $/;"	e	enum:__anon37
CUBLAS_GEMM_ALGO4	/usr/local/cuda/include/cublas_api.h	/^    CUBLAS_GEMM_ALGO4               =  4,$/;"	e	enum:__anon37
CUBLAS_GEMM_ALGO4_TENSOR_OP	/usr/local/cuda/include/cublas_api.h	/^    CUBLAS_GEMM_ALGO4_TENSOR_OP     =  104        $/;"	e	enum:__anon37
CUBLAS_GEMM_ALGO5	/usr/local/cuda/include/cublas_api.h	/^    CUBLAS_GEMM_ALGO5               =  5,$/;"	e	enum:__anon37
CUBLAS_GEMM_ALGO6	/usr/local/cuda/include/cublas_api.h	/^    CUBLAS_GEMM_ALGO6               =  6,$/;"	e	enum:__anon37
CUBLAS_GEMM_ALGO7	/usr/local/cuda/include/cublas_api.h	/^    CUBLAS_GEMM_ALGO7               =  7,$/;"	e	enum:__anon37
CUBLAS_GEMM_ALGO8	/usr/local/cuda/include/cublas_api.h	/^    CUBLAS_GEMM_ALGO8               =  8,$/;"	e	enum:__anon37
CUBLAS_GEMM_ALGO9	/usr/local/cuda/include/cublas_api.h	/^    CUBLAS_GEMM_ALGO9               =  9,$/;"	e	enum:__anon37
CUBLAS_GEMM_DEFAULT	/usr/local/cuda/include/cublas_api.h	/^    CUBLAS_GEMM_DEFAULT             = -1,$/;"	e	enum:__anon37
CUBLAS_GEMM_DEFAULT_TENSOR_OP	/usr/local/cuda/include/cublas_api.h	/^    CUBLAS_GEMM_DEFAULT_TENSOR_OP   =  99,        $/;"	e	enum:__anon37
CUBLAS_GEMM_DFALT	/usr/local/cuda/include/cublas_api.h	/^    CUBLAS_GEMM_DFALT               = -1,$/;"	e	enum:__anon37
CUBLAS_GEMM_DFALT_TENSOR_OP	/usr/local/cuda/include/cublas_api.h	/^    CUBLAS_GEMM_DFALT_TENSOR_OP     =  99,        $/;"	e	enum:__anon37
CUBLAS_H_	/usr/local/cuda/include/cublas.h	58;"	d
CUBLAS_OP_C	/usr/local/cuda/include/cublas_api.h	/^    CUBLAS_OP_C=2  $/;"	e	enum:__anon34
CUBLAS_OP_N	/usr/local/cuda/include/cublas_api.h	/^    CUBLAS_OP_N=0,  $/;"	e	enum:__anon34
CUBLAS_OP_T	/usr/local/cuda/include/cublas_api.h	/^    CUBLAS_OP_T=1,  $/;"	e	enum:__anon34
CUBLAS_POINTER_MODE_DEVICE	/usr/local/cuda/include/cublas_api.h	/^    CUBLAS_POINTER_MODE_DEVICE = 1        $/;"	e	enum:__anon35
CUBLAS_POINTER_MODE_HOST	/usr/local/cuda/include/cublas_api.h	/^    CUBLAS_POINTER_MODE_HOST   = 0,  $/;"	e	enum:__anon35
CUBLAS_SIDE_LEFT	/usr/local/cuda/include/cublas_api.h	/^    CUBLAS_SIDE_LEFT =0, $/;"	e	enum:__anon33
CUBLAS_SIDE_RIGHT	/usr/local/cuda/include/cublas_api.h	/^    CUBLAS_SIDE_RIGHT=1$/;"	e	enum:__anon33
CUBLAS_STATUS_ALLOC_FAILED	/usr/local/cuda/include/cublas_api.h	/^    CUBLAS_STATUS_ALLOC_FAILED    =3,$/;"	e	enum:__anon30
CUBLAS_STATUS_ARCH_MISMATCH	/usr/local/cuda/include/cublas_api.h	/^    CUBLAS_STATUS_ARCH_MISMATCH   =8,$/;"	e	enum:__anon30
CUBLAS_STATUS_EXECUTION_FAILED	/usr/local/cuda/include/cublas_api.h	/^    CUBLAS_STATUS_EXECUTION_FAILED=13,$/;"	e	enum:__anon30
CUBLAS_STATUS_INTERNAL_ERROR	/usr/local/cuda/include/cublas_api.h	/^    CUBLAS_STATUS_INTERNAL_ERROR  =14,$/;"	e	enum:__anon30
CUBLAS_STATUS_INVALID_VALUE	/usr/local/cuda/include/cublas_api.h	/^    CUBLAS_STATUS_INVALID_VALUE   =7,$/;"	e	enum:__anon30
CUBLAS_STATUS_LICENSE_ERROR	/usr/local/cuda/include/cublas_api.h	/^    CUBLAS_STATUS_LICENSE_ERROR   =16$/;"	e	enum:__anon30
CUBLAS_STATUS_MAPPING_ERROR	/usr/local/cuda/include/cublas_api.h	/^    CUBLAS_STATUS_MAPPING_ERROR   =11,$/;"	e	enum:__anon30
CUBLAS_STATUS_NOT_INITIALIZED	/usr/local/cuda/include/cublas_api.h	/^    CUBLAS_STATUS_NOT_INITIALIZED =1,$/;"	e	enum:__anon30
CUBLAS_STATUS_NOT_SUPPORTED	/usr/local/cuda/include/cublas_api.h	/^    CUBLAS_STATUS_NOT_SUPPORTED   =15,$/;"	e	enum:__anon30
CUBLAS_STATUS_SUCCESS	/usr/local/cuda/include/cublas_api.h	/^    CUBLAS_STATUS_SUCCESS         =0,$/;"	e	enum:__anon30
CUBLAS_TENSOR_OP_MATH	/usr/local/cuda/include/cublas_api.h	/^    CUBLAS_TENSOR_OP_MATH = 1$/;"	e	enum:__anon38
CUBLAS_V2_H_	/usr/local/cuda/include/cublas_v2.h	56;"	d
CUBLAS_XT_H_	/usr/local/cuda/include/cublasXt.h	55;"	d
CUDAAPI	/usr/local/cuda/include/cuda.h	1908;"	d
CUDAAPI	/usr/local/cuda/include/cuda.h	1910;"	d
CUDAAPI	/usr/local/cuda/include/dynlink_cuda_cuda.h	1144;"	d
CUDAAPI	/usr/local/cuda/include/dynlink_cuda_cuda.h	1146;"	d
CUDAEGL_H	/usr/local/cuda/include/cudaEGL.h	51;"	d
CUDAGL_H	/usr/local/cuda/include/cudaGL.h	51;"	d
CUDART_2_OVER_PI	/usr/local/cuda/include/math_constants.h	110;"	d
CUDART_2_OVER_PI_F	/usr/local/cuda/include/math_constants.h	69;"	d
CUDART_3PIO4	/usr/local/cuda/include/math_constants.h	109;"	d
CUDART_3PIO4_F	/usr/local/cuda/include/math_constants.h	68;"	d
CUDART_CB	/usr/local/cuda/include/cuda_runtime_api.h	2116;"	d
CUDART_CB	/usr/local/cuda/include/cuda_runtime_api.h	2118;"	d
CUDART_DBL2INT_CVT	/usr/local/cuda/include/math_constants.h	150;"	d
CUDART_DEVICE	/usr/local/cuda/include/cuda_runtime_api.h	209;"	d
CUDART_DEVICE	/usr/local/cuda/include/cuda_runtime_api.h	213;"	d
CUDART_INF	/usr/local/cuda/include/math_constants.h	91;"	d
CUDART_INF_F	/usr/local/cuda/include/math_constants.h	54;"	d
CUDART_L2E	/usr/local/cuda/include/math_constants.h	121;"	d
CUDART_L2E_F	/usr/local/cuda/include/math_constants.h	72;"	d
CUDART_L2E_HI	/usr/local/cuda/include/math_constants.h	122;"	d
CUDART_L2E_LO	/usr/local/cuda/include/math_constants.h	123;"	d
CUDART_L2T	/usr/local/cuda/include/math_constants.h	124;"	d
CUDART_L2T_F	/usr/local/cuda/include/math_constants.h	73;"	d
CUDART_LG2	/usr/local/cuda/include/math_constants.h	125;"	d
CUDART_LG2_F	/usr/local/cuda/include/math_constants.h	74;"	d
CUDART_LG2_HI	/usr/local/cuda/include/math_constants.h	126;"	d
CUDART_LG2_LO	/usr/local/cuda/include/math_constants.h	127;"	d
CUDART_LG2_X_1024	/usr/local/cuda/include/math_constants.h	141;"	d
CUDART_LG2_X_1075	/usr/local/cuda/include/math_constants.h	142;"	d
CUDART_LGE	/usr/local/cuda/include/math_constants.h	128;"	d
CUDART_LGE_F	/usr/local/cuda/include/math_constants.h	75;"	d
CUDART_LGE_HI	/usr/local/cuda/include/math_constants.h	129;"	d
CUDART_LGE_LO	/usr/local/cuda/include/math_constants.h	130;"	d
CUDART_LN2	/usr/local/cuda/include/math_constants.h	131;"	d
CUDART_LN2_F	/usr/local/cuda/include/math_constants.h	76;"	d
CUDART_LN2_HI	/usr/local/cuda/include/math_constants.h	132;"	d
CUDART_LN2_LO	/usr/local/cuda/include/math_constants.h	133;"	d
CUDART_LN2_X_1024	/usr/local/cuda/include/math_constants.h	138;"	d
CUDART_LN2_X_1025	/usr/local/cuda/include/math_constants.h	139;"	d
CUDART_LN2_X_1075	/usr/local/cuda/include/math_constants.h	140;"	d
CUDART_LNPI	/usr/local/cuda/include/math_constants.h	137;"	d
CUDART_LNPI_F	/usr/local/cuda/include/math_constants.h	78;"	d
CUDART_LNT	/usr/local/cuda/include/math_constants.h	134;"	d
CUDART_LNT_F	/usr/local/cuda/include/math_constants.h	77;"	d
CUDART_LNT_HI	/usr/local/cuda/include/math_constants.h	135;"	d
CUDART_LNT_LO	/usr/local/cuda/include/math_constants.h	136;"	d
CUDART_MAX_NORMAL_F	/usr/local/cuda/include/math_constants.h	57;"	d
CUDART_MIN_DENORM	/usr/local/cuda/include/math_constants.h	94;"	d
CUDART_MIN_DENORM_F	/usr/local/cuda/include/math_constants.h	56;"	d
CUDART_NAN	/usr/local/cuda/include/math_constants.h	92;"	d
CUDART_NAN_F	/usr/local/cuda/include/math_constants.h	55;"	d
CUDART_NEG_ZERO	/usr/local/cuda/include/math_constants.h	93;"	d
CUDART_NEG_ZERO_F	/usr/local/cuda/include/math_constants.h	58;"	d
CUDART_NORM_HUGE_F	/usr/local/cuda/include/math_constants.h	81;"	d
CUDART_ONE	/usr/local/cuda/include/math_constants.h	96;"	d
CUDART_ONE_F	/usr/local/cuda/include/math_constants.h	60;"	d
CUDART_PI	/usr/local/cuda/include/math_constants.h	111;"	d
CUDART_PIO2	/usr/local/cuda/include/math_constants.h	106;"	d
CUDART_PIO2_F	/usr/local/cuda/include/math_constants.h	67;"	d
CUDART_PIO2_HI	/usr/local/cuda/include/math_constants.h	107;"	d
CUDART_PIO2_LO	/usr/local/cuda/include/math_constants.h	108;"	d
CUDART_PIO4	/usr/local/cuda/include/math_constants.h	103;"	d
CUDART_PIO4_F	/usr/local/cuda/include/math_constants.h	66;"	d
CUDART_PIO4_HI	/usr/local/cuda/include/math_constants.h	104;"	d
CUDART_PIO4_LO	/usr/local/cuda/include/math_constants.h	105;"	d
CUDART_PI_F	/usr/local/cuda/include/math_constants.h	71;"	d
CUDART_PI_HI	/usr/local/cuda/include/math_constants.h	112;"	d
CUDART_PI_LO	/usr/local/cuda/include/math_constants.h	113;"	d
CUDART_REMQUO_BITS_F	/usr/local/cuda/include/math_constants.h	86;"	d
CUDART_REMQUO_MASK_F	/usr/local/cuda/include/math_constants.h	87;"	d
CUDART_SQRT_2OPI	/usr/local/cuda/include/math_constants.h	120;"	d
CUDART_SQRT_2PI	/usr/local/cuda/include/math_constants.h	114;"	d
CUDART_SQRT_2PI_HI	/usr/local/cuda/include/math_constants.h	115;"	d
CUDART_SQRT_2PI_LO	/usr/local/cuda/include/math_constants.h	116;"	d
CUDART_SQRT_2_OVER_PI_F	/usr/local/cuda/include/math_constants.h	70;"	d
CUDART_SQRT_HALF	/usr/local/cuda/include/math_constants.h	98;"	d
CUDART_SQRT_HALF_F	/usr/local/cuda/include/math_constants.h	61;"	d
CUDART_SQRT_HALF_HI	/usr/local/cuda/include/math_constants.h	99;"	d
CUDART_SQRT_HALF_HI_F	/usr/local/cuda/include/math_constants.h	62;"	d
CUDART_SQRT_HALF_LO	/usr/local/cuda/include/math_constants.h	100;"	d
CUDART_SQRT_HALF_LO_F	/usr/local/cuda/include/math_constants.h	63;"	d
CUDART_SQRT_PIO2	/usr/local/cuda/include/math_constants.h	117;"	d
CUDART_SQRT_PIO2_HI	/usr/local/cuda/include/math_constants.h	118;"	d
CUDART_SQRT_PIO2_LO	/usr/local/cuda/include/math_constants.h	119;"	d
CUDART_SQRT_TWO	/usr/local/cuda/include/math_constants.h	97;"	d
CUDART_SQRT_TWO_F	/usr/local/cuda/include/math_constants.h	64;"	d
CUDART_THIRD	/usr/local/cuda/include/math_constants.h	101;"	d
CUDART_THIRD_F	/usr/local/cuda/include/math_constants.h	65;"	d
CUDART_TRIG_PLOSS	/usr/local/cuda/include/math_constants.h	149;"	d
CUDART_TRIG_PLOSS_F	/usr/local/cuda/include/math_constants.h	88;"	d
CUDART_TWOTHIRD	/usr/local/cuda/include/math_constants.h	102;"	d
CUDART_TWO_TO_126_F	/usr/local/cuda/include/math_constants.h	80;"	d
CUDART_TWO_TO_23	/usr/local/cuda/include/math_constants.h	143;"	d
CUDART_TWO_TO_23_F	/usr/local/cuda/include/math_constants.h	82;"	d
CUDART_TWO_TO_24_F	/usr/local/cuda/include/math_constants.h	83;"	d
CUDART_TWO_TO_31_F	/usr/local/cuda/include/math_constants.h	84;"	d
CUDART_TWO_TO_32_F	/usr/local/cuda/include/math_constants.h	85;"	d
CUDART_TWO_TO_52	/usr/local/cuda/include/math_constants.h	144;"	d
CUDART_TWO_TO_53	/usr/local/cuda/include/math_constants.h	145;"	d
CUDART_TWO_TO_54	/usr/local/cuda/include/math_constants.h	146;"	d
CUDART_TWO_TO_M1022	/usr/local/cuda/include/math_constants.h	148;"	d
CUDART_TWO_TO_M126_F	/usr/local/cuda/include/math_constants.h	79;"	d
CUDART_TWO_TO_M54	/usr/local/cuda/include/math_constants.h	147;"	d
CUDART_VERSION	/usr/local/cuda/include/cuda_runtime_api.h	131;"	d
CUDART_ZERO	/usr/local/cuda/include/math_constants.h	95;"	d
CUDART_ZERO_F	/usr/local/cuda/include/math_constants.h	59;"	d
CUDAVDPAU_H	/usr/local/cuda/include/cudaVDPAU.h	51;"	d
CUDA_ARRAY3D_2DARRAY	/usr/local/cuda/include/cuda.h	1809;"	d
CUDA_ARRAY3D_2DARRAY	/usr/local/cuda/include/dynlink_cuda_cuda.h	1102;"	d
CUDA_ARRAY3D_2DARRAY	/usr/local/cuda/include/dynlink_cuda_cuda.h	938;"	d
CUDA_ARRAY3D_CUBEMAP	/usr/local/cuda/include/cuda.h	1823;"	d
CUDA_ARRAY3D_DEPTH_TEXTURE	/usr/local/cuda/include/cuda.h	1835;"	d
CUDA_ARRAY3D_DESCRIPTOR	/usr/local/cuda/include/cuda.h	/^} CUDA_ARRAY3D_DESCRIPTOR;$/;"	t	typeref:struct:CUDA_ARRAY3D_DESCRIPTOR_st
CUDA_ARRAY3D_DESCRIPTOR	/usr/local/cuda/include/cuda.h	11977;"	d
CUDA_ARRAY3D_DESCRIPTOR	/usr/local/cuda/include/cuda.h	12116;"	d
CUDA_ARRAY3D_DESCRIPTOR	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^} CUDA_ARRAY3D_DESCRIPTOR;$/;"	t	typeref:struct:CUDA_ARRAY3D_DESCRIPTOR_st
CUDA_ARRAY3D_DESCRIPTOR	/usr/local/cuda/include/dynlink_cuda_cuda.h	1016;"	d
CUDA_ARRAY3D_DESCRIPTOR_st	/usr/local/cuda/include/cuda.h	/^typedef struct CUDA_ARRAY3D_DESCRIPTOR_st$/;"	s
CUDA_ARRAY3D_DESCRIPTOR_st	/usr/local/cuda/include/cuda.h	11976;"	d
CUDA_ARRAY3D_DESCRIPTOR_st	/usr/local/cuda/include/cuda.h	12115;"	d
CUDA_ARRAY3D_DESCRIPTOR_st	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^typedef struct CUDA_ARRAY3D_DESCRIPTOR_st$/;"	s
CUDA_ARRAY3D_DESCRIPTOR_st	/usr/local/cuda/include/dynlink_cuda_cuda.h	1015;"	d
CUDA_ARRAY3D_LAYERED	/usr/local/cuda/include/cuda.h	1804;"	d
CUDA_ARRAY3D_LAYERED	/usr/local/cuda/include/dynlink_cuda_cuda.h	933;"	d
CUDA_ARRAY3D_SURFACE_LDST	/usr/local/cuda/include/cuda.h	1815;"	d
CUDA_ARRAY3D_SURFACE_LDST	/usr/local/cuda/include/dynlink_cuda_cuda.h	1108;"	d
CUDA_ARRAY3D_SURFACE_LDST	/usr/local/cuda/include/dynlink_cuda_cuda.h	944;"	d
CUDA_ARRAY3D_TEXTURE_GATHER	/usr/local/cuda/include/cuda.h	1829;"	d
CUDA_ARRAY_DESCRIPTOR	/usr/local/cuda/include/cuda.h	/^} CUDA_ARRAY_DESCRIPTOR;$/;"	t	typeref:struct:CUDA_ARRAY_DESCRIPTOR_st
CUDA_ARRAY_DESCRIPTOR	/usr/local/cuda/include/cuda.h	11975;"	d
CUDA_ARRAY_DESCRIPTOR	/usr/local/cuda/include/cuda.h	12114;"	d
CUDA_ARRAY_DESCRIPTOR	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^} CUDA_ARRAY_DESCRIPTOR;$/;"	t	typeref:struct:CUDA_ARRAY_DESCRIPTOR_st
CUDA_ARRAY_DESCRIPTOR	/usr/local/cuda/include/dynlink_cuda_cuda.h	1014;"	d
CUDA_ARRAY_DESCRIPTOR_st	/usr/local/cuda/include/cuda.h	/^typedef struct CUDA_ARRAY_DESCRIPTOR_st$/;"	s
CUDA_ARRAY_DESCRIPTOR_st	/usr/local/cuda/include/cuda.h	11974;"	d
CUDA_ARRAY_DESCRIPTOR_st	/usr/local/cuda/include/cuda.h	12113;"	d
CUDA_ARRAY_DESCRIPTOR_st	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^typedef struct CUDA_ARRAY_DESCRIPTOR_st$/;"	s
CUDA_ARRAY_DESCRIPTOR_st	/usr/local/cuda/include/dynlink_cuda_cuda.h	1013;"	d
CUDA_CB	/usr/local/cuda/include/cuda.h	1452;"	d
CUDA_CB	/usr/local/cuda/include/cuda.h	1454;"	d
CUDA_COOPERATIVE_LAUNCH_MULTI_DEVICE_NO_POST_LAUNCH_SYNC	/usr/local/cuda/include/cuda.h	1797;"	d
CUDA_COOPERATIVE_LAUNCH_MULTI_DEVICE_NO_PRE_LAUNCH_SYNC	/usr/local/cuda/include/cuda.h	1790;"	d
CUDA_C_16F	/usr/local/cuda/include/library_types.h	/^	CUDA_C_16F= 6,  \/* complex as a pair of half numbers *\/$/;"	e	enum:cudaDataType_t
CUDA_C_32F	/usr/local/cuda/include/library_types.h	/^	CUDA_C_32F= 4,  \/* complex as a pair of float numbers *\/$/;"	e	enum:cudaDataType_t
CUDA_C_32I	/usr/local/cuda/include/library_types.h	/^	CUDA_C_32I= 11, \/* complex as a pair of signed int numbers *\/$/;"	e	enum:cudaDataType_t
CUDA_C_32U	/usr/local/cuda/include/library_types.h	/^	CUDA_C_32U= 13  \/* complex as a pair of unsigned int numbers *\/$/;"	e	enum:cudaDataType_t
CUDA_C_64F	/usr/local/cuda/include/library_types.h	/^	CUDA_C_64F= 5,  \/* complex as a pair of double numbers *\/$/;"	e	enum:cudaDataType_t
CUDA_C_8I	/usr/local/cuda/include/library_types.h	/^	CUDA_C_8I = 7,  \/* complex as a pair of signed char numbers *\/$/;"	e	enum:cudaDataType_t
CUDA_C_8U	/usr/local/cuda/include/library_types.h	/^	CUDA_C_8U = 9,  \/* complex as a pair of unsigned char numbers *\/$/;"	e	enum:cudaDataType_t
CUDA_ERROR_ALREADY_ACQUIRED	/usr/local/cuda/include/cuda.h	/^    CUDA_ERROR_ALREADY_ACQUIRED               = 210,$/;"	e	enum:cudaError_enum
CUDA_ERROR_ALREADY_ACQUIRED	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    CUDA_ERROR_ALREADY_ACQUIRED               = 210,$/;"	e	enum:cudaError_enum
CUDA_ERROR_ALREADY_MAPPED	/usr/local/cuda/include/cuda.h	/^    CUDA_ERROR_ALREADY_MAPPED                 = 208,$/;"	e	enum:cudaError_enum
CUDA_ERROR_ALREADY_MAPPED	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    CUDA_ERROR_ALREADY_MAPPED                 = 208,$/;"	e	enum:cudaError_enum
CUDA_ERROR_ARRAY_IS_MAPPED	/usr/local/cuda/include/cuda.h	/^    CUDA_ERROR_ARRAY_IS_MAPPED                = 207,$/;"	e	enum:cudaError_enum
CUDA_ERROR_ARRAY_IS_MAPPED	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    CUDA_ERROR_ARRAY_IS_MAPPED                = 207,$/;"	e	enum:cudaError_enum
CUDA_ERROR_ASSERT	/usr/local/cuda/include/cuda.h	/^    CUDA_ERROR_ASSERT                         = 710,$/;"	e	enum:cudaError_enum
CUDA_ERROR_CONTEXT_ALREADY_CURRENT	/usr/local/cuda/include/cuda.h	/^    CUDA_ERROR_CONTEXT_ALREADY_CURRENT        = 202,$/;"	e	enum:cudaError_enum
CUDA_ERROR_CONTEXT_ALREADY_CURRENT	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    CUDA_ERROR_CONTEXT_ALREADY_CURRENT        = 202,$/;"	e	enum:cudaError_enum
CUDA_ERROR_CONTEXT_ALREADY_IN_USE	/usr/local/cuda/include/cuda.h	/^    CUDA_ERROR_CONTEXT_ALREADY_IN_USE         = 216,$/;"	e	enum:cudaError_enum
CUDA_ERROR_CONTEXT_ALREADY_IN_USE	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    CUDA_ERROR_CONTEXT_ALREADY_IN_USE         = 216,$/;"	e	enum:cudaError_enum
CUDA_ERROR_CONTEXT_IS_DESTROYED	/usr/local/cuda/include/cuda.h	/^    CUDA_ERROR_CONTEXT_IS_DESTROYED           = 709,$/;"	e	enum:cudaError_enum
CUDA_ERROR_CONTEXT_IS_DESTROYED	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    CUDA_ERROR_CONTEXT_IS_DESTROYED           = 709,$/;"	e	enum:cudaError_enum
CUDA_ERROR_COOPERATIVE_LAUNCH_TOO_LARGE	/usr/local/cuda/include/cuda.h	/^    CUDA_ERROR_COOPERATIVE_LAUNCH_TOO_LARGE   = 720,$/;"	e	enum:cudaError_enum
CUDA_ERROR_DEINITIALIZED	/usr/local/cuda/include/cuda.h	/^    CUDA_ERROR_DEINITIALIZED                  = 4,$/;"	e	enum:cudaError_enum
CUDA_ERROR_DEINITIALIZED	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    CUDA_ERROR_DEINITIALIZED                  = 4,$/;"	e	enum:cudaError_enum
CUDA_ERROR_ECC_UNCORRECTABLE	/usr/local/cuda/include/cuda.h	/^    CUDA_ERROR_ECC_UNCORRECTABLE              = 214,$/;"	e	enum:cudaError_enum
CUDA_ERROR_ECC_UNCORRECTABLE	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    CUDA_ERROR_ECC_UNCORRECTABLE              = 214,$/;"	e	enum:cudaError_enum
CUDA_ERROR_FILE_NOT_FOUND	/usr/local/cuda/include/cuda.h	/^    CUDA_ERROR_FILE_NOT_FOUND                 = 301,$/;"	e	enum:cudaError_enum
CUDA_ERROR_FILE_NOT_FOUND	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    CUDA_ERROR_FILE_NOT_FOUND                 = 301,$/;"	e	enum:cudaError_enum
CUDA_ERROR_HARDWARE_STACK_ERROR	/usr/local/cuda/include/cuda.h	/^    CUDA_ERROR_HARDWARE_STACK_ERROR           = 714,$/;"	e	enum:cudaError_enum
CUDA_ERROR_HOST_MEMORY_ALREADY_REGISTERED	/usr/local/cuda/include/cuda.h	/^    CUDA_ERROR_HOST_MEMORY_ALREADY_REGISTERED = 712,$/;"	e	enum:cudaError_enum
CUDA_ERROR_HOST_MEMORY_NOT_REGISTERED	/usr/local/cuda/include/cuda.h	/^    CUDA_ERROR_HOST_MEMORY_NOT_REGISTERED     = 713,$/;"	e	enum:cudaError_enum
CUDA_ERROR_ILLEGAL_ADDRESS	/usr/local/cuda/include/cuda.h	/^    CUDA_ERROR_ILLEGAL_ADDRESS                = 700,$/;"	e	enum:cudaError_enum
CUDA_ERROR_ILLEGAL_INSTRUCTION	/usr/local/cuda/include/cuda.h	/^    CUDA_ERROR_ILLEGAL_INSTRUCTION            = 715,$/;"	e	enum:cudaError_enum
CUDA_ERROR_INVALID_ADDRESS_SPACE	/usr/local/cuda/include/cuda.h	/^    CUDA_ERROR_INVALID_ADDRESS_SPACE          = 717,$/;"	e	enum:cudaError_enum
CUDA_ERROR_INVALID_CONTEXT	/usr/local/cuda/include/cuda.h	/^    CUDA_ERROR_INVALID_CONTEXT                = 201,$/;"	e	enum:cudaError_enum
CUDA_ERROR_INVALID_CONTEXT	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    CUDA_ERROR_INVALID_CONTEXT                = 201,$/;"	e	enum:cudaError_enum
CUDA_ERROR_INVALID_DEVICE	/usr/local/cuda/include/cuda.h	/^    CUDA_ERROR_INVALID_DEVICE                 = 101,$/;"	e	enum:cudaError_enum
CUDA_ERROR_INVALID_DEVICE	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    CUDA_ERROR_INVALID_DEVICE                 = 101,$/;"	e	enum:cudaError_enum
CUDA_ERROR_INVALID_GRAPHICS_CONTEXT	/usr/local/cuda/include/cuda.h	/^    CUDA_ERROR_INVALID_GRAPHICS_CONTEXT       = 219,$/;"	e	enum:cudaError_enum
CUDA_ERROR_INVALID_HANDLE	/usr/local/cuda/include/cuda.h	/^    CUDA_ERROR_INVALID_HANDLE                 = 400,$/;"	e	enum:cudaError_enum
CUDA_ERROR_INVALID_HANDLE	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    CUDA_ERROR_INVALID_HANDLE                 = 400,$/;"	e	enum:cudaError_enum
CUDA_ERROR_INVALID_IMAGE	/usr/local/cuda/include/cuda.h	/^    CUDA_ERROR_INVALID_IMAGE                  = 200,$/;"	e	enum:cudaError_enum
CUDA_ERROR_INVALID_IMAGE	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    CUDA_ERROR_INVALID_IMAGE                  = 200,$/;"	e	enum:cudaError_enum
CUDA_ERROR_INVALID_PC	/usr/local/cuda/include/cuda.h	/^    CUDA_ERROR_INVALID_PC                     = 718,$/;"	e	enum:cudaError_enum
CUDA_ERROR_INVALID_PTX	/usr/local/cuda/include/cuda.h	/^    CUDA_ERROR_INVALID_PTX                    = 218,$/;"	e	enum:cudaError_enum
CUDA_ERROR_INVALID_SOURCE	/usr/local/cuda/include/cuda.h	/^    CUDA_ERROR_INVALID_SOURCE                 = 300,$/;"	e	enum:cudaError_enum
CUDA_ERROR_INVALID_SOURCE	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    CUDA_ERROR_INVALID_SOURCE                 = 300,$/;"	e	enum:cudaError_enum
CUDA_ERROR_INVALID_VALUE	/usr/local/cuda/include/cuda.h	/^    CUDA_ERROR_INVALID_VALUE                  = 1,$/;"	e	enum:cudaError_enum
CUDA_ERROR_INVALID_VALUE	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    CUDA_ERROR_INVALID_VALUE                  = 1,$/;"	e	enum:cudaError_enum
CUDA_ERROR_JIT_COMPILER_NOT_FOUND	/usr/local/cuda/include/cuda.h	/^    CUDA_ERROR_JIT_COMPILER_NOT_FOUND         = 221,$/;"	e	enum:cudaError_enum
CUDA_ERROR_LAUNCH_FAILED	/usr/local/cuda/include/cuda.h	/^    CUDA_ERROR_LAUNCH_FAILED                  = 719,$/;"	e	enum:cudaError_enum
CUDA_ERROR_LAUNCH_FAILED	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    CUDA_ERROR_LAUNCH_FAILED                  = 700,$/;"	e	enum:cudaError_enum
CUDA_ERROR_LAUNCH_INCOMPATIBLE_TEXTURING	/usr/local/cuda/include/cuda.h	/^    CUDA_ERROR_LAUNCH_INCOMPATIBLE_TEXTURING  = 703,$/;"	e	enum:cudaError_enum
CUDA_ERROR_LAUNCH_INCOMPATIBLE_TEXTURING	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    CUDA_ERROR_LAUNCH_INCOMPATIBLE_TEXTURING  = 703,$/;"	e	enum:cudaError_enum
CUDA_ERROR_LAUNCH_OUT_OF_RESOURCES	/usr/local/cuda/include/cuda.h	/^    CUDA_ERROR_LAUNCH_OUT_OF_RESOURCES        = 701,$/;"	e	enum:cudaError_enum
CUDA_ERROR_LAUNCH_OUT_OF_RESOURCES	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    CUDA_ERROR_LAUNCH_OUT_OF_RESOURCES        = 701,$/;"	e	enum:cudaError_enum
CUDA_ERROR_LAUNCH_TIMEOUT	/usr/local/cuda/include/cuda.h	/^    CUDA_ERROR_LAUNCH_TIMEOUT                 = 702,$/;"	e	enum:cudaError_enum
CUDA_ERROR_LAUNCH_TIMEOUT	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    CUDA_ERROR_LAUNCH_TIMEOUT                 = 702,$/;"	e	enum:cudaError_enum
CUDA_ERROR_MAP_FAILED	/usr/local/cuda/include/cuda.h	/^    CUDA_ERROR_MAP_FAILED                     = 205,$/;"	e	enum:cudaError_enum
CUDA_ERROR_MAP_FAILED	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    CUDA_ERROR_MAP_FAILED                     = 205,$/;"	e	enum:cudaError_enum
CUDA_ERROR_MISALIGNED_ADDRESS	/usr/local/cuda/include/cuda.h	/^    CUDA_ERROR_MISALIGNED_ADDRESS             = 716,$/;"	e	enum:cudaError_enum
CUDA_ERROR_NOT_FOUND	/usr/local/cuda/include/cuda.h	/^    CUDA_ERROR_NOT_FOUND                      = 500,$/;"	e	enum:cudaError_enum
CUDA_ERROR_NOT_FOUND	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    CUDA_ERROR_NOT_FOUND                      = 500,$/;"	e	enum:cudaError_enum
CUDA_ERROR_NOT_INITIALIZED	/usr/local/cuda/include/cuda.h	/^    CUDA_ERROR_NOT_INITIALIZED                = 3,$/;"	e	enum:cudaError_enum
CUDA_ERROR_NOT_INITIALIZED	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    CUDA_ERROR_NOT_INITIALIZED                = 3,$/;"	e	enum:cudaError_enum
CUDA_ERROR_NOT_MAPPED	/usr/local/cuda/include/cuda.h	/^    CUDA_ERROR_NOT_MAPPED                     = 211,$/;"	e	enum:cudaError_enum
CUDA_ERROR_NOT_MAPPED	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    CUDA_ERROR_NOT_MAPPED                     = 211,$/;"	e	enum:cudaError_enum
CUDA_ERROR_NOT_MAPPED_AS_ARRAY	/usr/local/cuda/include/cuda.h	/^    CUDA_ERROR_NOT_MAPPED_AS_ARRAY            = 212,$/;"	e	enum:cudaError_enum
CUDA_ERROR_NOT_MAPPED_AS_ARRAY	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    CUDA_ERROR_NOT_MAPPED_AS_ARRAY            = 212,$/;"	e	enum:cudaError_enum
CUDA_ERROR_NOT_MAPPED_AS_POINTER	/usr/local/cuda/include/cuda.h	/^    CUDA_ERROR_NOT_MAPPED_AS_POINTER          = 213,$/;"	e	enum:cudaError_enum
CUDA_ERROR_NOT_MAPPED_AS_POINTER	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    CUDA_ERROR_NOT_MAPPED_AS_POINTER          = 213,$/;"	e	enum:cudaError_enum
CUDA_ERROR_NOT_PERMITTED	/usr/local/cuda/include/cuda.h	/^    CUDA_ERROR_NOT_PERMITTED                  = 800,$/;"	e	enum:cudaError_enum
CUDA_ERROR_NOT_READY	/usr/local/cuda/include/cuda.h	/^    CUDA_ERROR_NOT_READY                      = 600,$/;"	e	enum:cudaError_enum
CUDA_ERROR_NOT_READY	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    CUDA_ERROR_NOT_READY                      = 600,$/;"	e	enum:cudaError_enum
CUDA_ERROR_NOT_SUPPORTED	/usr/local/cuda/include/cuda.h	/^    CUDA_ERROR_NOT_SUPPORTED                  = 801,$/;"	e	enum:cudaError_enum
CUDA_ERROR_NO_BINARY_FOR_GPU	/usr/local/cuda/include/cuda.h	/^    CUDA_ERROR_NO_BINARY_FOR_GPU              = 209,$/;"	e	enum:cudaError_enum
CUDA_ERROR_NO_BINARY_FOR_GPU	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    CUDA_ERROR_NO_BINARY_FOR_GPU              = 209,$/;"	e	enum:cudaError_enum
CUDA_ERROR_NO_DEVICE	/usr/local/cuda/include/cuda.h	/^    CUDA_ERROR_NO_DEVICE                      = 100,$/;"	e	enum:cudaError_enum
CUDA_ERROR_NO_DEVICE	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    CUDA_ERROR_NO_DEVICE                      = 100,$/;"	e	enum:cudaError_enum
CUDA_ERROR_NVLINK_UNCORRECTABLE	/usr/local/cuda/include/cuda.h	/^    CUDA_ERROR_NVLINK_UNCORRECTABLE           = 220,$/;"	e	enum:cudaError_enum
CUDA_ERROR_OPERATING_SYSTEM	/usr/local/cuda/include/cuda.h	/^    CUDA_ERROR_OPERATING_SYSTEM               = 304,$/;"	e	enum:cudaError_enum
CUDA_ERROR_OPERATING_SYSTEM	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    CUDA_ERROR_OPERATING_SYSTEM               = 304,$/;"	e	enum:cudaError_enum
CUDA_ERROR_OUT_OF_MEMORY	/usr/local/cuda/include/cuda.h	/^    CUDA_ERROR_OUT_OF_MEMORY                  = 2,$/;"	e	enum:cudaError_enum
CUDA_ERROR_OUT_OF_MEMORY	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    CUDA_ERROR_OUT_OF_MEMORY                  = 2,$/;"	e	enum:cudaError_enum
CUDA_ERROR_PEER_ACCESS_ALREADY_ENABLED	/usr/local/cuda/include/cuda.h	/^    CUDA_ERROR_PEER_ACCESS_ALREADY_ENABLED    = 704,$/;"	e	enum:cudaError_enum
CUDA_ERROR_PEER_ACCESS_ALREADY_ENABLED	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    CUDA_ERROR_PEER_ACCESS_ALREADY_ENABLED = 704,$/;"	e	enum:cudaError_enum
CUDA_ERROR_PEER_ACCESS_NOT_ENABLED	/usr/local/cuda/include/cuda.h	/^    CUDA_ERROR_PEER_ACCESS_NOT_ENABLED        = 705,$/;"	e	enum:cudaError_enum
CUDA_ERROR_PEER_ACCESS_NOT_ENABLED	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    CUDA_ERROR_PEER_ACCESS_NOT_ENABLED    = 705,$/;"	e	enum:cudaError_enum
CUDA_ERROR_PEER_ACCESS_UNSUPPORTED	/usr/local/cuda/include/cuda.h	/^    CUDA_ERROR_PEER_ACCESS_UNSUPPORTED        = 217,$/;"	e	enum:cudaError_enum
CUDA_ERROR_PEER_MEMORY_ALREADY_REGISTERED	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    CUDA_ERROR_PEER_MEMORY_ALREADY_REGISTERED = 706,$/;"	e	enum:cudaError_enum
CUDA_ERROR_PEER_MEMORY_NOT_REGISTERED	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    CUDA_ERROR_PEER_MEMORY_NOT_REGISTERED     = 707,$/;"	e	enum:cudaError_enum
CUDA_ERROR_PRIMARY_CONTEXT_ACTIVE	/usr/local/cuda/include/cuda.h	/^    CUDA_ERROR_PRIMARY_CONTEXT_ACTIVE         = 708,$/;"	e	enum:cudaError_enum
CUDA_ERROR_PRIMARY_CONTEXT_ACTIVE	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    CUDA_ERROR_PRIMARY_CONTEXT_ACTIVE         = 708,$/;"	e	enum:cudaError_enum
CUDA_ERROR_PROFILER_ALREADY_STARTED	/usr/local/cuda/include/cuda.h	/^    CUDA_ERROR_PROFILER_ALREADY_STARTED       = 7,$/;"	e	enum:cudaError_enum
CUDA_ERROR_PROFILER_ALREADY_STARTED	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    CUDA_ERROR_PROFILER_ALREADY_STARTED       = 7,$/;"	e	enum:cudaError_enum
CUDA_ERROR_PROFILER_ALREADY_STOPPED	/usr/local/cuda/include/cuda.h	/^    CUDA_ERROR_PROFILER_ALREADY_STOPPED       = 8,$/;"	e	enum:cudaError_enum
CUDA_ERROR_PROFILER_ALREADY_STOPPED	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    CUDA_ERROR_PROFILER_ALREADY_STOPPED       = 8,$/;"	e	enum:cudaError_enum
CUDA_ERROR_PROFILER_DISABLED	/usr/local/cuda/include/cuda.h	/^    CUDA_ERROR_PROFILER_DISABLED              = 5,$/;"	e	enum:cudaError_enum
CUDA_ERROR_PROFILER_DISABLED	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    CUDA_ERROR_PROFILER_DISABLED           = 5,$/;"	e	enum:cudaError_enum
CUDA_ERROR_PROFILER_NOT_INITIALIZED	/usr/local/cuda/include/cuda.h	/^    CUDA_ERROR_PROFILER_NOT_INITIALIZED       = 6,$/;"	e	enum:cudaError_enum
CUDA_ERROR_PROFILER_NOT_INITIALIZED	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    CUDA_ERROR_PROFILER_NOT_INITIALIZED       = 6,$/;"	e	enum:cudaError_enum
CUDA_ERROR_SHARED_OBJECT_INIT_FAILED	/usr/local/cuda/include/cuda.h	/^    CUDA_ERROR_SHARED_OBJECT_INIT_FAILED      = 303,$/;"	e	enum:cudaError_enum
CUDA_ERROR_SHARED_OBJECT_INIT_FAILED	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    CUDA_ERROR_SHARED_OBJECT_INIT_FAILED      = 303,$/;"	e	enum:cudaError_enum
CUDA_ERROR_SHARED_OBJECT_SYMBOL_NOT_FOUND	/usr/local/cuda/include/cuda.h	/^    CUDA_ERROR_SHARED_OBJECT_SYMBOL_NOT_FOUND = 302,$/;"	e	enum:cudaError_enum
CUDA_ERROR_SHARED_OBJECT_SYMBOL_NOT_FOUND	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    CUDA_ERROR_SHARED_OBJECT_SYMBOL_NOT_FOUND = 302,$/;"	e	enum:cudaError_enum
CUDA_ERROR_TOO_MANY_PEERS	/usr/local/cuda/include/cuda.h	/^    CUDA_ERROR_TOO_MANY_PEERS                 = 711,$/;"	e	enum:cudaError_enum
CUDA_ERROR_UNKNOWN	/usr/local/cuda/include/cuda.h	/^    CUDA_ERROR_UNKNOWN                        = 999$/;"	e	enum:cudaError_enum
CUDA_ERROR_UNKNOWN	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    CUDA_ERROR_UNKNOWN                        = 999$/;"	e	enum:cudaError_enum
CUDA_ERROR_UNMAP_FAILED	/usr/local/cuda/include/cuda.h	/^    CUDA_ERROR_UNMAP_FAILED                   = 206,$/;"	e	enum:cudaError_enum
CUDA_ERROR_UNMAP_FAILED	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    CUDA_ERROR_UNMAP_FAILED                   = 206,$/;"	e	enum:cudaError_enum
CUDA_ERROR_UNSUPPORTED_LIMIT	/usr/local/cuda/include/cuda.h	/^    CUDA_ERROR_UNSUPPORTED_LIMIT              = 215,$/;"	e	enum:cudaError_enum
CUDA_ERROR_UNSUPPORTED_LIMIT	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    CUDA_ERROR_UNSUPPORTED_LIMIT              = 215,$/;"	e	enum:cudaError_enum
CUDA_H	src/cuda.h	2;"	d
CUDA_IPC_HANDLE_SIZE	/usr/local/cuda/include/driver_types.h	1531;"	d
CUDA_LAUNCH_PARAMS	/usr/local/cuda/include/cuda.h	/^} CUDA_LAUNCH_PARAMS;$/;"	t	typeref:struct:CUDA_LAUNCH_PARAMS_st
CUDA_LAUNCH_PARAMS_st	/usr/local/cuda/include/cuda.h	/^typedef struct CUDA_LAUNCH_PARAMS_st {$/;"	s
CUDA_MEMCPY2D	/usr/local/cuda/include/cuda.h	/^} CUDA_MEMCPY2D;$/;"	t	typeref:struct:CUDA_MEMCPY2D_st
CUDA_MEMCPY2D	/usr/local/cuda/include/cuda.h	11971;"	d
CUDA_MEMCPY2D	/usr/local/cuda/include/cuda.h	12110;"	d
CUDA_MEMCPY2D	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^} CUDA_MEMCPY2D;$/;"	t	typeref:struct:CUDA_MEMCPY2D_st
CUDA_MEMCPY2D	/usr/local/cuda/include/dynlink_cuda_cuda.h	1010;"	d
CUDA_MEMCPY2D_st	/usr/local/cuda/include/cuda.h	/^typedef struct CUDA_MEMCPY2D_st {$/;"	s
CUDA_MEMCPY2D_st	/usr/local/cuda/include/cuda.h	/^typedef struct CUDA_MEMCPY2D_st$/;"	s
CUDA_MEMCPY2D_st	/usr/local/cuda/include/cuda.h	11970;"	d
CUDA_MEMCPY2D_st	/usr/local/cuda/include/cuda.h	12109;"	d
CUDA_MEMCPY2D_st	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^typedef struct CUDA_MEMCPY2D_st$/;"	s
CUDA_MEMCPY2D_st	/usr/local/cuda/include/dynlink_cuda_cuda.h	1009;"	d
CUDA_MEMCPY3D	/usr/local/cuda/include/cuda.h	/^} CUDA_MEMCPY3D;$/;"	t	typeref:struct:CUDA_MEMCPY3D_st
CUDA_MEMCPY3D	/usr/local/cuda/include/cuda.h	11973;"	d
CUDA_MEMCPY3D	/usr/local/cuda/include/cuda.h	12112;"	d
CUDA_MEMCPY3D	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^} CUDA_MEMCPY3D;$/;"	t	typeref:struct:CUDA_MEMCPY3D_st
CUDA_MEMCPY3D	/usr/local/cuda/include/dynlink_cuda_cuda.h	1012;"	d
CUDA_MEMCPY3D_PEER	/usr/local/cuda/include/cuda.h	/^} CUDA_MEMCPY3D_PEER;$/;"	t	typeref:struct:CUDA_MEMCPY3D_PEER_st
CUDA_MEMCPY3D_PEER	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^} CUDA_MEMCPY3D_PEER;$/;"	t	typeref:struct:CUDA_MEMCPY3D_PEER_st
CUDA_MEMCPY3D_PEER_st	/usr/local/cuda/include/cuda.h	/^typedef struct CUDA_MEMCPY3D_PEER_st {$/;"	s
CUDA_MEMCPY3D_PEER_st	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^typedef struct CUDA_MEMCPY3D_PEER_st$/;"	s
CUDA_MEMCPY3D_st	/usr/local/cuda/include/cuda.h	/^typedef struct CUDA_MEMCPY3D_st {$/;"	s
CUDA_MEMCPY3D_st	/usr/local/cuda/include/cuda.h	/^typedef struct CUDA_MEMCPY3D_st$/;"	s
CUDA_MEMCPY3D_st	/usr/local/cuda/include/cuda.h	11972;"	d
CUDA_MEMCPY3D_st	/usr/local/cuda/include/cuda.h	12111;"	d
CUDA_MEMCPY3D_st	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^typedef struct CUDA_MEMCPY3D_st$/;"	s
CUDA_MEMCPY3D_st	/usr/local/cuda/include/dynlink_cuda_cuda.h	1011;"	d
CUDA_OCC_ERROR_INVALID_INPUT	/usr/local/cuda/include/cuda_occupancy.h	/^    CUDA_OCC_ERROR_INVALID_INPUT  = 1,  \/\/ input parameter is invalid$/;"	e	enum:cudaOccError_enum
CUDA_OCC_ERROR_UNKNOWN_DEVICE	/usr/local/cuda/include/cuda_occupancy.h	/^    CUDA_OCC_ERROR_UNKNOWN_DEVICE = 2,  \/\/ requested device is not supported in$/;"	e	enum:cudaOccError_enum
CUDA_OCC_SUCCESS	/usr/local/cuda/include/cuda_occupancy.h	/^    CUDA_OCC_SUCCESS              = 0,  \/\/ no error encountered$/;"	e	enum:cudaOccError_enum
CUDA_POINTER_ATTRIBUTE_P2P_TOKENS	/usr/local/cuda/include/cuda.h	/^} CUDA_POINTER_ATTRIBUTE_P2P_TOKENS;$/;"	t	typeref:struct:CUDA_POINTER_ATTRIBUTE_P2P_TOKENS_st
CUDA_POINTER_ATTRIBUTE_P2P_TOKENS_st	/usr/local/cuda/include/cuda.h	/^typedef struct CUDA_POINTER_ATTRIBUTE_P2P_TOKENS_st {$/;"	s
CUDA_RESOURCE_DESC	/usr/local/cuda/include/cuda.h	/^} CUDA_RESOURCE_DESC;$/;"	t	typeref:struct:CUDA_RESOURCE_DESC_st
CUDA_RESOURCE_DESC_st	/usr/local/cuda/include/cuda.h	/^typedef struct CUDA_RESOURCE_DESC_st$/;"	s
CUDA_RESOURCE_VIEW_DESC	/usr/local/cuda/include/cuda.h	/^} CUDA_RESOURCE_VIEW_DESC;$/;"	t	typeref:struct:CUDA_RESOURCE_VIEW_DESC_st
CUDA_RESOURCE_VIEW_DESC_st	/usr/local/cuda/include/cuda.h	/^typedef struct CUDA_RESOURCE_VIEW_DESC_st$/;"	s
CUDA_R_16F	/usr/local/cuda/include/library_types.h	/^	CUDA_R_16F= 2,  \/* real as a half *\/$/;"	e	enum:cudaDataType_t
CUDA_R_32F	/usr/local/cuda/include/library_types.h	/^	CUDA_R_32F= 0,  \/* real as a float *\/$/;"	e	enum:cudaDataType_t
CUDA_R_32I	/usr/local/cuda/include/library_types.h	/^	CUDA_R_32I= 10, \/* real as a signed int *\/$/;"	e	enum:cudaDataType_t
CUDA_R_32U	/usr/local/cuda/include/library_types.h	/^	CUDA_R_32U= 12, \/* real as a unsigned int *\/$/;"	e	enum:cudaDataType_t
CUDA_R_64F	/usr/local/cuda/include/library_types.h	/^	CUDA_R_64F= 1,  \/* real as a double *\/$/;"	e	enum:cudaDataType_t
CUDA_R_8I	/usr/local/cuda/include/library_types.h	/^	CUDA_R_8I = 3,  \/* real as a signed char *\/$/;"	e	enum:cudaDataType_t
CUDA_R_8U	/usr/local/cuda/include/library_types.h	/^	CUDA_R_8U = 8,  \/* real as a unsigned char *\/$/;"	e	enum:cudaDataType_t
CUDA_SUCCESS	/usr/local/cuda/include/cuda.h	/^    CUDA_SUCCESS                              = 0,$/;"	e	enum:cudaError_enum
CUDA_SUCCESS	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    CUDA_SUCCESS                              = 0,$/;"	e	enum:cudaError_enum
CUDA_TEXTURE_DESC	/usr/local/cuda/include/cuda.h	/^} CUDA_TEXTURE_DESC;$/;"	t	typeref:struct:CUDA_TEXTURE_DESC_st
CUDA_TEXTURE_DESC_st	/usr/local/cuda/include/cuda.h	/^typedef struct CUDA_TEXTURE_DESC_st {$/;"	s
CUDA_VERSION	/usr/local/cuda/include/cuda.h	213;"	d
CUDA_VERSION	/usr/local/cuda/include/dynlink_cuda_cuda.h	38;"	d
CUDA_XT_DESCRIPTOR_VERSION	/usr/local/cuda/include/cudalibxt.h	58;"	d
CUDNNWINAPI	/usr/local/cuda/include/cudnn.h	68;"	d
CUDNNWINAPI	/usr/local/cuda/include/cudnn.h	70;"	d
CUDNN_16BIT_INDICES	/usr/local/cuda/include/cudnn.h	/^    CUDNN_16BIT_INDICES = 2,$/;"	e	enum:__anon60
CUDNN_32BIT_INDICES	/usr/local/cuda/include/cudnn.h	/^    CUDNN_32BIT_INDICES = 0,$/;"	e	enum:__anon60
CUDNN_64BIT_INDICES	/usr/local/cuda/include/cudnn.h	/^    CUDNN_64BIT_INDICES = 1,$/;"	e	enum:__anon60
CUDNN_8BIT_INDICES	/usr/local/cuda/include/cudnn.h	/^    CUDNN_8BIT_INDICES  = 3,$/;"	e	enum:__anon60
CUDNN_ACTIVATION_CLIPPED_RELU	/usr/local/cuda/include/cudnn.h	/^    CUDNN_ACTIVATION_CLIPPED_RELU = 3,$/;"	e	enum:__anon74
CUDNN_ACTIVATION_ELU	/usr/local/cuda/include/cudnn.h	/^    CUDNN_ACTIVATION_ELU          = 4$/;"	e	enum:__anon74
CUDNN_ACTIVATION_RELU	/usr/local/cuda/include/cudnn.h	/^    CUDNN_ACTIVATION_RELU         = 1,$/;"	e	enum:__anon74
CUDNN_ACTIVATION_SIGMOID	/usr/local/cuda/include/cudnn.h	/^    CUDNN_ACTIVATION_SIGMOID      = 0,$/;"	e	enum:__anon74
CUDNN_ACTIVATION_TANH	/usr/local/cuda/include/cudnn.h	/^    CUDNN_ACTIVATION_TANH         = 2,$/;"	e	enum:__anon74
CUDNN_BATCHNORM_PER_ACTIVATION	/usr/local/cuda/include/cudnn.h	/^    CUDNN_BATCHNORM_PER_ACTIVATION     = 0,$/;"	e	enum:__anon77
CUDNN_BATCHNORM_SPATIAL	/usr/local/cuda/include/cudnn.h	/^    CUDNN_BATCHNORM_SPATIAL            = 1,$/;"	e	enum:__anon77
CUDNN_BATCHNORM_SPATIAL_PERSISTENT	/usr/local/cuda/include/cudnn.h	/^    CUDNN_BATCHNORM_SPATIAL_PERSISTENT = 2,$/;"	e	enum:__anon77
CUDNN_BIDIRECTIONAL	/usr/local/cuda/include/cudnn.h	/^   CUDNN_BIDIRECTIONAL = 1      \/* Using output concatination at each step. Do we also want to support output sum? *\/$/;"	e	enum:__anon80
CUDNN_BN_MIN_EPSILON	/usr/local/cuda/include/cudnn.h	1300;"	d
CUDNN_CONVOLUTION	/usr/local/cuda/include/cudnn.h	/^    CUDNN_CONVOLUTION       = 0,$/;"	e	enum:__anon61
CUDNN_CONVOLUTION_BWD_DATA_ALGO_0	/usr/local/cuda/include/cudnn.h	/^    CUDNN_CONVOLUTION_BWD_DATA_ALGO_0                 = 0, \/* non-deterministic *\/$/;"	e	enum:__anon69
CUDNN_CONVOLUTION_BWD_DATA_ALGO_1	/usr/local/cuda/include/cudnn.h	/^    CUDNN_CONVOLUTION_BWD_DATA_ALGO_1                 = 1,$/;"	e	enum:__anon69
CUDNN_CONVOLUTION_BWD_DATA_ALGO_COUNT	/usr/local/cuda/include/cudnn.h	/^    CUDNN_CONVOLUTION_BWD_DATA_ALGO_COUNT             = 6$/;"	e	enum:__anon69
CUDNN_CONVOLUTION_BWD_DATA_ALGO_FFT	/usr/local/cuda/include/cudnn.h	/^    CUDNN_CONVOLUTION_BWD_DATA_ALGO_FFT               = 2,$/;"	e	enum:__anon69
CUDNN_CONVOLUTION_BWD_DATA_ALGO_FFT_TILING	/usr/local/cuda/include/cudnn.h	/^    CUDNN_CONVOLUTION_BWD_DATA_ALGO_FFT_TILING        = 3,$/;"	e	enum:__anon69
CUDNN_CONVOLUTION_BWD_DATA_ALGO_WINOGRAD	/usr/local/cuda/include/cudnn.h	/^    CUDNN_CONVOLUTION_BWD_DATA_ALGO_WINOGRAD          = 4,$/;"	e	enum:__anon69
CUDNN_CONVOLUTION_BWD_DATA_ALGO_WINOGRAD_NONFUSED	/usr/local/cuda/include/cudnn.h	/^    CUDNN_CONVOLUTION_BWD_DATA_ALGO_WINOGRAD_NONFUSED = 5,$/;"	e	enum:__anon69
CUDNN_CONVOLUTION_BWD_DATA_NO_WORKSPACE	/usr/local/cuda/include/cudnn.h	/^    CUDNN_CONVOLUTION_BWD_DATA_NO_WORKSPACE             = 0,$/;"	e	enum:__anon68
CUDNN_CONVOLUTION_BWD_DATA_PREFER_FASTEST	/usr/local/cuda/include/cudnn.h	/^    CUDNN_CONVOLUTION_BWD_DATA_PREFER_FASTEST           = 1,$/;"	e	enum:__anon68
CUDNN_CONVOLUTION_BWD_DATA_SPECIFY_WORKSPACE_LIMIT	/usr/local/cuda/include/cudnn.h	/^    CUDNN_CONVOLUTION_BWD_DATA_SPECIFY_WORKSPACE_LIMIT  = 2,$/;"	e	enum:__anon68
CUDNN_CONVOLUTION_BWD_FILTER_ALGO_0	/usr/local/cuda/include/cudnn.h	/^    CUDNN_CONVOLUTION_BWD_FILTER_ALGO_0                 = 0,  \/* non-deterministic *\/$/;"	e	enum:__anon66
CUDNN_CONVOLUTION_BWD_FILTER_ALGO_1	/usr/local/cuda/include/cudnn.h	/^    CUDNN_CONVOLUTION_BWD_FILTER_ALGO_1                 = 1,$/;"	e	enum:__anon66
CUDNN_CONVOLUTION_BWD_FILTER_ALGO_3	/usr/local/cuda/include/cudnn.h	/^    CUDNN_CONVOLUTION_BWD_FILTER_ALGO_3                 = 3,  \/* non-deterministic *\/$/;"	e	enum:__anon66
CUDNN_CONVOLUTION_BWD_FILTER_ALGO_COUNT	/usr/local/cuda/include/cudnn.h	/^    CUDNN_CONVOLUTION_BWD_FILTER_ALGO_COUNT             = 7$/;"	e	enum:__anon66
CUDNN_CONVOLUTION_BWD_FILTER_ALGO_FFT	/usr/local/cuda/include/cudnn.h	/^    CUDNN_CONVOLUTION_BWD_FILTER_ALGO_FFT               = 2,$/;"	e	enum:__anon66
CUDNN_CONVOLUTION_BWD_FILTER_ALGO_FFT_TILING	/usr/local/cuda/include/cudnn.h	/^    CUDNN_CONVOLUTION_BWD_FILTER_ALGO_FFT_TILING        = 6,$/;"	e	enum:__anon66
CUDNN_CONVOLUTION_BWD_FILTER_ALGO_WINOGRAD	/usr/local/cuda/include/cudnn.h	/^    CUDNN_CONVOLUTION_BWD_FILTER_ALGO_WINOGRAD          = 4,  \/* not implemented *\/$/;"	e	enum:__anon66
CUDNN_CONVOLUTION_BWD_FILTER_ALGO_WINOGRAD_NONFUSED	/usr/local/cuda/include/cudnn.h	/^    CUDNN_CONVOLUTION_BWD_FILTER_ALGO_WINOGRAD_NONFUSED = 5,$/;"	e	enum:__anon66
CUDNN_CONVOLUTION_BWD_FILTER_NO_WORKSPACE	/usr/local/cuda/include/cudnn.h	/^    CUDNN_CONVOLUTION_BWD_FILTER_NO_WORKSPACE            = 0,$/;"	e	enum:__anon65
CUDNN_CONVOLUTION_BWD_FILTER_PREFER_FASTEST	/usr/local/cuda/include/cudnn.h	/^    CUDNN_CONVOLUTION_BWD_FILTER_PREFER_FASTEST          = 1,$/;"	e	enum:__anon65
CUDNN_CONVOLUTION_BWD_FILTER_SPECIFY_WORKSPACE_LIMIT	/usr/local/cuda/include/cudnn.h	/^    CUDNN_CONVOLUTION_BWD_FILTER_SPECIFY_WORKSPACE_LIMIT = 2,$/;"	e	enum:__anon65
CUDNN_CONVOLUTION_FWD_ALGO_COUNT	/usr/local/cuda/include/cudnn.h	/^    CUDNN_CONVOLUTION_FWD_ALGO_COUNT                 = 8$/;"	e	enum:__anon63
CUDNN_CONVOLUTION_FWD_ALGO_DIRECT	/usr/local/cuda/include/cudnn.h	/^    CUDNN_CONVOLUTION_FWD_ALGO_DIRECT                = 3,$/;"	e	enum:__anon63
CUDNN_CONVOLUTION_FWD_ALGO_FFT	/usr/local/cuda/include/cudnn.h	/^    CUDNN_CONVOLUTION_FWD_ALGO_FFT                   = 4,$/;"	e	enum:__anon63
CUDNN_CONVOLUTION_FWD_ALGO_FFT_TILING	/usr/local/cuda/include/cudnn.h	/^    CUDNN_CONVOLUTION_FWD_ALGO_FFT_TILING            = 5,$/;"	e	enum:__anon63
CUDNN_CONVOLUTION_FWD_ALGO_GEMM	/usr/local/cuda/include/cudnn.h	/^    CUDNN_CONVOLUTION_FWD_ALGO_GEMM                  = 2,$/;"	e	enum:__anon63
CUDNN_CONVOLUTION_FWD_ALGO_IMPLICIT_GEMM	/usr/local/cuda/include/cudnn.h	/^    CUDNN_CONVOLUTION_FWD_ALGO_IMPLICIT_GEMM         = 0,$/;"	e	enum:__anon63
CUDNN_CONVOLUTION_FWD_ALGO_IMPLICIT_PRECOMP_GEMM	/usr/local/cuda/include/cudnn.h	/^    CUDNN_CONVOLUTION_FWD_ALGO_IMPLICIT_PRECOMP_GEMM = 1,$/;"	e	enum:__anon63
CUDNN_CONVOLUTION_FWD_ALGO_WINOGRAD	/usr/local/cuda/include/cudnn.h	/^    CUDNN_CONVOLUTION_FWD_ALGO_WINOGRAD              = 6,$/;"	e	enum:__anon63
CUDNN_CONVOLUTION_FWD_ALGO_WINOGRAD_NONFUSED	/usr/local/cuda/include/cudnn.h	/^    CUDNN_CONVOLUTION_FWD_ALGO_WINOGRAD_NONFUSED     = 7,$/;"	e	enum:__anon63
CUDNN_CONVOLUTION_FWD_NO_WORKSPACE	/usr/local/cuda/include/cudnn.h	/^    CUDNN_CONVOLUTION_FWD_NO_WORKSPACE            = 0,$/;"	e	enum:__anon62
CUDNN_CONVOLUTION_FWD_PREFER_FASTEST	/usr/local/cuda/include/cudnn.h	/^    CUDNN_CONVOLUTION_FWD_PREFER_FASTEST          = 1,$/;"	e	enum:__anon62
CUDNN_CONVOLUTION_FWD_SPECIFY_WORKSPACE_LIMIT	/usr/local/cuda/include/cudnn.h	/^    CUDNN_CONVOLUTION_FWD_SPECIFY_WORKSPACE_LIMIT = 2,$/;"	e	enum:__anon62
CUDNN_CROSS_CORRELATION	/usr/local/cuda/include/cudnn.h	/^    CUDNN_CROSS_CORRELATION = 1$/;"	e	enum:__anon61
CUDNN_CTC_LOSS_ALGO_DETERMINISTIC	/usr/local/cuda/include/cudnn.h	/^    CUDNN_CTC_LOSS_ALGO_DETERMINISTIC = 0,$/;"	e	enum:__anon83
CUDNN_CTC_LOSS_ALGO_NON_DETERMINISTIC	/usr/local/cuda/include/cudnn.h	/^    CUDNN_CTC_LOSS_ALGO_NON_DETERMINISTIC = 1$/;"	e	enum:__anon83
CUDNN_DATA_DOUBLE	/usr/local/cuda/include/cudnn.h	/^    CUDNN_DATA_DOUBLE = 1,$/;"	e	enum:__anon52
CUDNN_DATA_FLOAT	/usr/local/cuda/include/cudnn.h	/^    CUDNN_DATA_FLOAT  = 0,$/;"	e	enum:__anon52
CUDNN_DATA_HALF	/usr/local/cuda/include/cudnn.h	/^    CUDNN_DATA_HALF   = 2,$/;"	e	enum:__anon52
CUDNN_DATA_INT32	/usr/local/cuda/include/cudnn.h	/^    CUDNN_DATA_INT32  = 4,$/;"	e	enum:__anon52
CUDNN_DATA_INT8	/usr/local/cuda/include/cudnn.h	/^    CUDNN_DATA_INT8   = 3,$/;"	e	enum:__anon52
CUDNN_DATA_INT8x4	/usr/local/cuda/include/cudnn.h	/^    CUDNN_DATA_INT8x4 = 5$/;"	e	enum:__anon52
CUDNN_DEFAULT_MATH	/usr/local/cuda/include/cudnn.h	/^    CUDNN_DEFAULT_MATH   = 0,$/;"	e	enum:__anon53
CUDNN_DETERMINISTIC	/usr/local/cuda/include/cudnn.h	/^    CUDNN_DETERMINISTIC     = 1,$/;"	e	enum:__anon55
CUDNN_DIM_MAX	/usr/local/cuda/include/cudnn.h	194;"	d
CUDNN_DIVNORM_PRECOMPUTED_MEANS	/usr/local/cuda/include/cudnn.h	/^    CUDNN_DIVNORM_PRECOMPUTED_MEANS = 0,$/;"	e	enum:__anon76
CUDNN_ERRQUERY_BLOCKING	/usr/local/cuda/include/cudnn.h	/^    CUDNN_ERRQUERY_BLOCKING     = 2,$/;"	e	enum:__anon51
CUDNN_ERRQUERY_NONBLOCKING	/usr/local/cuda/include/cudnn.h	/^    CUDNN_ERRQUERY_NONBLOCKING  = 1,$/;"	e	enum:__anon51
CUDNN_ERRQUERY_RAWCODE	/usr/local/cuda/include/cudnn.h	/^    CUDNN_ERRQUERY_RAWCODE      = 0,$/;"	e	enum:__anon51
CUDNN_GRU	/usr/local/cuda/include/cudnn.h	/^    CUDNN_GRU = 3       \/* Using h' = tanh(r * Uh(t-1) + Wx) and h = (1 - z) * h' + z * h(t-1); *\/$/;"	e	enum:__anon79
CUDNN_H_	/usr/local/cuda/include/cudnn.h	55;"	d
CUDNN_LINEAR_INPUT	/usr/local/cuda/include/cudnn.h	/^   CUDNN_LINEAR_INPUT = 0,$/;"	e	enum:__anon81
CUDNN_LRN_CROSS_CHANNEL_DIM1	/usr/local/cuda/include/cudnn.h	/^    CUDNN_LRN_CROSS_CHANNEL_DIM1 = 0,\/* Normalize across tensor's dimA[1] dimension *\/$/;"	e	enum:__anon75
CUDNN_LRN_MAX_N	/usr/local/cuda/include/cudnn.h	1184;"	d
CUDNN_LRN_MIN_BETA	/usr/local/cuda/include/cudnn.h	1186;"	d
CUDNN_LRN_MIN_K	/usr/local/cuda/include/cudnn.h	1185;"	d
CUDNN_LRN_MIN_N	/usr/local/cuda/include/cudnn.h	1183;"	d
CUDNN_LSTM	/usr/local/cuda/include/cudnn.h	/^    CUDNN_LSTM = 2,     \/* LSTM with no peephole connections *\/$/;"	e	enum:__anon79
CUDNN_MAJOR	/usr/local/cuda/include/cudnn.h	57;"	d
CUDNN_MINOR	/usr/local/cuda/include/cudnn.h	58;"	d
CUDNN_NON_DETERMINISTIC	/usr/local/cuda/include/cudnn.h	/^    CUDNN_NON_DETERMINISTIC = 0,$/;"	e	enum:__anon55
CUDNN_NOT_PROPAGATE_NAN	/usr/local/cuda/include/cudnn.h	/^    CUDNN_NOT_PROPAGATE_NAN  = 0,$/;"	e	enum:__anon54
CUDNN_OP_TENSOR_ADD	/usr/local/cuda/include/cudnn.h	/^    CUDNN_OP_TENSOR_ADD  = 0,$/;"	e	enum:__anon57
CUDNN_OP_TENSOR_MAX	/usr/local/cuda/include/cudnn.h	/^    CUDNN_OP_TENSOR_MAX  = 3,$/;"	e	enum:__anon57
CUDNN_OP_TENSOR_MIN	/usr/local/cuda/include/cudnn.h	/^    CUDNN_OP_TENSOR_MIN  = 2,$/;"	e	enum:__anon57
CUDNN_OP_TENSOR_MUL	/usr/local/cuda/include/cudnn.h	/^    CUDNN_OP_TENSOR_MUL  = 1,$/;"	e	enum:__anon57
CUDNN_OP_TENSOR_NOT	/usr/local/cuda/include/cudnn.h	/^    CUDNN_OP_TENSOR_NOT  = 5,$/;"	e	enum:__anon57
CUDNN_OP_TENSOR_SQRT	/usr/local/cuda/include/cudnn.h	/^    CUDNN_OP_TENSOR_SQRT = 4,$/;"	e	enum:__anon57
CUDNN_PATCHLEVEL	/usr/local/cuda/include/cudnn.h	59;"	d
CUDNN_POOLING_AVERAGE_COUNT_EXCLUDE_PADDING	/usr/local/cuda/include/cudnn.h	/^    CUDNN_POOLING_AVERAGE_COUNT_EXCLUDE_PADDING = 2, \/* count for average does not include padded values *\/$/;"	e	enum:__anon73
CUDNN_POOLING_AVERAGE_COUNT_INCLUDE_PADDING	/usr/local/cuda/include/cudnn.h	/^    CUDNN_POOLING_AVERAGE_COUNT_INCLUDE_PADDING = 1, \/* count for average includes padded values *\/$/;"	e	enum:__anon73
CUDNN_POOLING_MAX	/usr/local/cuda/include/cudnn.h	/^    CUDNN_POOLING_MAX     = 0,$/;"	e	enum:__anon73
CUDNN_POOLING_MAX_DETERMINISTIC	/usr/local/cuda/include/cudnn.h	/^    CUDNN_POOLING_MAX_DETERMINISTIC     = 3$/;"	e	enum:__anon73
CUDNN_PROPAGATE_NAN	/usr/local/cuda/include/cudnn.h	/^    CUDNN_PROPAGATE_NAN      = 1,$/;"	e	enum:__anon54
CUDNN_REDUCE_TENSOR_ADD	/usr/local/cuda/include/cudnn.h	/^    CUDNN_REDUCE_TENSOR_ADD          = 0,$/;"	e	enum:__anon58
CUDNN_REDUCE_TENSOR_AMAX	/usr/local/cuda/include/cudnn.h	/^    CUDNN_REDUCE_TENSOR_AMAX         = 4,$/;"	e	enum:__anon58
CUDNN_REDUCE_TENSOR_AVG	/usr/local/cuda/include/cudnn.h	/^    CUDNN_REDUCE_TENSOR_AVG          = 5,$/;"	e	enum:__anon58
CUDNN_REDUCE_TENSOR_FLATTENED_INDICES	/usr/local/cuda/include/cudnn.h	/^    CUDNN_REDUCE_TENSOR_FLATTENED_INDICES = 1,$/;"	e	enum:__anon59
CUDNN_REDUCE_TENSOR_MAX	/usr/local/cuda/include/cudnn.h	/^    CUDNN_REDUCE_TENSOR_MAX          = 3,$/;"	e	enum:__anon58
CUDNN_REDUCE_TENSOR_MIN	/usr/local/cuda/include/cudnn.h	/^    CUDNN_REDUCE_TENSOR_MIN          = 2,$/;"	e	enum:__anon58
CUDNN_REDUCE_TENSOR_MUL	/usr/local/cuda/include/cudnn.h	/^    CUDNN_REDUCE_TENSOR_MUL          = 1,$/;"	e	enum:__anon58
CUDNN_REDUCE_TENSOR_MUL_NO_ZEROS	/usr/local/cuda/include/cudnn.h	/^    CUDNN_REDUCE_TENSOR_MUL_NO_ZEROS = 8,$/;"	e	enum:__anon58
CUDNN_REDUCE_TENSOR_NORM1	/usr/local/cuda/include/cudnn.h	/^    CUDNN_REDUCE_TENSOR_NORM1        = 6,$/;"	e	enum:__anon58
CUDNN_REDUCE_TENSOR_NORM2	/usr/local/cuda/include/cudnn.h	/^    CUDNN_REDUCE_TENSOR_NORM2        = 7,$/;"	e	enum:__anon58
CUDNN_REDUCE_TENSOR_NO_INDICES	/usr/local/cuda/include/cudnn.h	/^    CUDNN_REDUCE_TENSOR_NO_INDICES        = 0,$/;"	e	enum:__anon59
CUDNN_RNN_ALGO_PERSIST_DYNAMIC	/usr/local/cuda/include/cudnn.h	/^    CUDNN_RNN_ALGO_PERSIST_DYNAMIC = 2$/;"	e	enum:__anon82
CUDNN_RNN_ALGO_PERSIST_STATIC	/usr/local/cuda/include/cudnn.h	/^    CUDNN_RNN_ALGO_PERSIST_STATIC = 1,$/;"	e	enum:__anon82
CUDNN_RNN_ALGO_STANDARD	/usr/local/cuda/include/cudnn.h	/^    CUDNN_RNN_ALGO_STANDARD = 0, $/;"	e	enum:__anon82
CUDNN_RNN_RELU	/usr/local/cuda/include/cudnn.h	/^    CUDNN_RNN_RELU = 0, \/* Stock RNN with ReLu activation *\/$/;"	e	enum:__anon79
CUDNN_RNN_TANH	/usr/local/cuda/include/cudnn.h	/^    CUDNN_RNN_TANH = 1, \/* Stock RNN with tanh activation *\/$/;"	e	enum:__anon79
CUDNN_SAMPLER_BILINEAR	/usr/local/cuda/include/cudnn.h	/^    CUDNN_SAMPLER_BILINEAR=0,$/;"	e	enum:__anon78
CUDNN_SKIP_INPUT	/usr/local/cuda/include/cudnn.h	/^   CUDNN_SKIP_INPUT = 1    $/;"	e	enum:__anon81
CUDNN_SOFTMAX_ACCURATE	/usr/local/cuda/include/cudnn.h	/^    CUDNN_SOFTMAX_ACCURATE = 1,         \/* subtract max from every point to avoid overflow *\/$/;"	e	enum:__anon71
CUDNN_SOFTMAX_FAST	/usr/local/cuda/include/cudnn.h	/^    CUDNN_SOFTMAX_FAST     = 0,         \/* straightforward implementation *\/$/;"	e	enum:__anon71
CUDNN_SOFTMAX_LOG	/usr/local/cuda/include/cudnn.h	/^    CUDNN_SOFTMAX_LOG      = 2$/;"	e	enum:__anon71
CUDNN_SOFTMAX_MODE_CHANNEL	/usr/local/cuda/include/cudnn.h	/^    CUDNN_SOFTMAX_MODE_CHANNEL = 1     \/* compute the softmax over all C for each H, W, N *\/$/;"	e	enum:__anon72
CUDNN_SOFTMAX_MODE_INSTANCE	/usr/local/cuda/include/cudnn.h	/^    CUDNN_SOFTMAX_MODE_INSTANCE = 0,   \/* compute the softmax over all C, H, W for each N *\/$/;"	e	enum:__anon72
CUDNN_STATUS_ALLOC_FAILED	/usr/local/cuda/include/cudnn.h	/^    CUDNN_STATUS_ALLOC_FAILED                 = 2,$/;"	e	enum:__anon50
CUDNN_STATUS_ARCH_MISMATCH	/usr/local/cuda/include/cudnn.h	/^    CUDNN_STATUS_ARCH_MISMATCH                = 6,$/;"	e	enum:__anon50
CUDNN_STATUS_BAD_PARAM	/usr/local/cuda/include/cudnn.h	/^    CUDNN_STATUS_BAD_PARAM                    = 3,$/;"	e	enum:__anon50
CUDNN_STATUS_EXECUTION_FAILED	/usr/local/cuda/include/cudnn.h	/^    CUDNN_STATUS_EXECUTION_FAILED             = 8,$/;"	e	enum:__anon50
CUDNN_STATUS_INTERNAL_ERROR	/usr/local/cuda/include/cudnn.h	/^    CUDNN_STATUS_INTERNAL_ERROR               = 4,$/;"	e	enum:__anon50
CUDNN_STATUS_INVALID_VALUE	/usr/local/cuda/include/cudnn.h	/^    CUDNN_STATUS_INVALID_VALUE                = 5,$/;"	e	enum:__anon50
CUDNN_STATUS_LICENSE_ERROR	/usr/local/cuda/include/cudnn.h	/^    CUDNN_STATUS_LICENSE_ERROR                = 10,$/;"	e	enum:__anon50
CUDNN_STATUS_MAPPING_ERROR	/usr/local/cuda/include/cudnn.h	/^    CUDNN_STATUS_MAPPING_ERROR                = 7,$/;"	e	enum:__anon50
CUDNN_STATUS_NOT_INITIALIZED	/usr/local/cuda/include/cudnn.h	/^    CUDNN_STATUS_NOT_INITIALIZED              = 1,$/;"	e	enum:__anon50
CUDNN_STATUS_NOT_SUPPORTED	/usr/local/cuda/include/cudnn.h	/^    CUDNN_STATUS_NOT_SUPPORTED                = 9,$/;"	e	enum:__anon50
CUDNN_STATUS_RUNTIME_FP_OVERFLOW	/usr/local/cuda/include/cudnn.h	/^    CUDNN_STATUS_RUNTIME_FP_OVERFLOW          = 13,$/;"	e	enum:__anon50
CUDNN_STATUS_RUNTIME_IN_PROGRESS	/usr/local/cuda/include/cudnn.h	/^    CUDNN_STATUS_RUNTIME_IN_PROGRESS          = 12,$/;"	e	enum:__anon50
CUDNN_STATUS_RUNTIME_PREREQUISITE_MISSING	/usr/local/cuda/include/cudnn.h	/^    CUDNN_STATUS_RUNTIME_PREREQUISITE_MISSING = 11,$/;"	e	enum:__anon50
CUDNN_STATUS_SUCCESS	/usr/local/cuda/include/cudnn.h	/^    CUDNN_STATUS_SUCCESS                      = 0,$/;"	e	enum:__anon50
CUDNN_TENSOR_NCHW	/usr/local/cuda/include/cudnn.h	/^    CUDNN_TENSOR_NCHW = 0,          \/* row major (wStride = 1, hStride = w) *\/$/;"	e	enum:__anon56
CUDNN_TENSOR_NCHW_VECT_C	/usr/local/cuda/include/cudnn.h	/^    CUDNN_TENSOR_NCHW_VECT_C = 2    \/* each image point is vector of element of C : the length of the vector is carried by the data type*\/$/;"	e	enum:__anon56
CUDNN_TENSOR_NHWC	/usr/local/cuda/include/cudnn.h	/^    CUDNN_TENSOR_NHWC = 1,          \/* feature maps interleaved ( cStride = 1 )*\/$/;"	e	enum:__anon56
CUDNN_TENSOR_OP_MATH	/usr/local/cuda/include/cudnn.h	/^    CUDNN_TENSOR_OP_MATH = 1,$/;"	e	enum:__anon53
CUDNN_UNIDIRECTIONAL	/usr/local/cuda/include/cudnn.h	/^   CUDNN_UNIDIRECTIONAL = 0,$/;"	e	enum:__anon80
CUDNN_VERSION	/usr/local/cuda/include/cudnn.h	61;"	d
CUFFTAPI	/usr/local/cuda/include/cufft.h	65;"	d
CUFFTAPI	/usr/local/cuda/include/cufft.h	67;"	d
CUFFTAPI	/usr/local/cuda/include/cufft.h	69;"	d
CUFFTAPI	/usr/local/cuda/include/cufftXt.h	63;"	d
CUFFTAPI	/usr/local/cuda/include/cufftXt.h	65;"	d
CUFFT_ALLOC_FAILED	/usr/local/cuda/include/cufft.h	/^  CUFFT_ALLOC_FAILED   = 0x2,$/;"	e	enum:cufftResult_t
CUFFT_C2C	/usr/local/cuda/include/cufft.h	/^  CUFFT_C2C = 0x29,     \/\/ Complex to Complex, interleaved$/;"	e	enum:cufftType_t
CUFFT_C2R	/usr/local/cuda/include/cufft.h	/^  CUFFT_C2R = 0x2c,     \/\/ Complex (interleaved) to Real$/;"	e	enum:cufftType_t
CUFFT_CB_LD_COMPLEX	/usr/local/cuda/include/cufftXt.h	/^    CUFFT_CB_LD_COMPLEX = 0x0,$/;"	e	enum:cufftXtCallbackType_t
CUFFT_CB_LD_COMPLEX_DOUBLE	/usr/local/cuda/include/cufftXt.h	/^    CUFFT_CB_LD_COMPLEX_DOUBLE = 0x1,$/;"	e	enum:cufftXtCallbackType_t
CUFFT_CB_LD_REAL	/usr/local/cuda/include/cufftXt.h	/^    CUFFT_CB_LD_REAL = 0x2,$/;"	e	enum:cufftXtCallbackType_t
CUFFT_CB_LD_REAL_DOUBLE	/usr/local/cuda/include/cufftXt.h	/^    CUFFT_CB_LD_REAL_DOUBLE = 0x3,$/;"	e	enum:cufftXtCallbackType_t
CUFFT_CB_ST_COMPLEX	/usr/local/cuda/include/cufftXt.h	/^    CUFFT_CB_ST_COMPLEX = 0x4,$/;"	e	enum:cufftXtCallbackType_t
CUFFT_CB_ST_COMPLEX_DOUBLE	/usr/local/cuda/include/cufftXt.h	/^    CUFFT_CB_ST_COMPLEX_DOUBLE = 0x5,$/;"	e	enum:cufftXtCallbackType_t
CUFFT_CB_ST_REAL	/usr/local/cuda/include/cufftXt.h	/^    CUFFT_CB_ST_REAL = 0x6,$/;"	e	enum:cufftXtCallbackType_t
CUFFT_CB_ST_REAL_DOUBLE	/usr/local/cuda/include/cufftXt.h	/^    CUFFT_CB_ST_REAL_DOUBLE = 0x7,$/;"	e	enum:cufftXtCallbackType_t
CUFFT_CB_UNDEFINED	/usr/local/cuda/include/cufftXt.h	/^    CUFFT_CB_UNDEFINED = 0x8$/;"	e	enum:cufftXtCallbackType_t
CUFFT_COMPATIBILITY_DEFAULT	/usr/local/cuda/include/cufft.h	135;"	d
CUFFT_COMPATIBILITY_FFTW_PADDING	/usr/local/cuda/include/cufft.h	/^    CUFFT_COMPATIBILITY_FFTW_PADDING    = 0x01    \/\/ The default value$/;"	e	enum:cufftCompatibility_t
CUFFT_COPY_DEVICE_TO_DEVICE	/usr/local/cuda/include/cufftXt.h	/^    CUFFT_COPY_DEVICE_TO_DEVICE = 0x02,$/;"	e	enum:cufftXtCopyType_t
CUFFT_COPY_DEVICE_TO_HOST	/usr/local/cuda/include/cufftXt.h	/^    CUFFT_COPY_DEVICE_TO_HOST = 0x01,$/;"	e	enum:cufftXtCopyType_t
CUFFT_COPY_HOST_TO_DEVICE	/usr/local/cuda/include/cufftXt.h	/^    CUFFT_COPY_HOST_TO_DEVICE = 0x00,$/;"	e	enum:cufftXtCopyType_t
CUFFT_COPY_UNDEFINED	/usr/local/cuda/include/cufftXt.h	/^    CUFFT_COPY_UNDEFINED = 0x03$/;"	e	enum:cufftXtCopyType_t
CUFFT_D2Z	/usr/local/cuda/include/cufft.h	/^  CUFFT_D2Z = 0x6a,     \/\/ Double to Double-Complex$/;"	e	enum:cufftType_t
CUFFT_EXEC_FAILED	/usr/local/cuda/include/cufft.h	/^  CUFFT_EXEC_FAILED    = 0x6,$/;"	e	enum:cufftResult_t
CUFFT_FORMAT_UNDEFINED	/usr/local/cuda/include/cufftXt.h	/^    CUFFT_FORMAT_UNDEFINED = 0x05$/;"	e	enum:cufftXtSubFormat_t
CUFFT_FORWARD	/usr/local/cuda/include/cufft.h	117;"	d
CUFFT_INCOMPLETE_PARAMETER_LIST	/usr/local/cuda/include/cufft.h	/^  CUFFT_INCOMPLETE_PARAMETER_LIST = 0xA,$/;"	e	enum:cufftResult_t
CUFFT_INTERNAL_ERROR	/usr/local/cuda/include/cufft.h	/^  CUFFT_INTERNAL_ERROR = 0x5,$/;"	e	enum:cufftResult_t
CUFFT_INVALID_DEVICE	/usr/local/cuda/include/cufft.h	/^  CUFFT_INVALID_DEVICE = 0xB,$/;"	e	enum:cufftResult_t
CUFFT_INVALID_PLAN	/usr/local/cuda/include/cufft.h	/^  CUFFT_INVALID_PLAN   = 0x1,$/;"	e	enum:cufftResult_t
CUFFT_INVALID_SIZE	/usr/local/cuda/include/cufft.h	/^  CUFFT_INVALID_SIZE   = 0x8,$/;"	e	enum:cufftResult_t
CUFFT_INVALID_TYPE	/usr/local/cuda/include/cufft.h	/^  CUFFT_INVALID_TYPE   = 0x3,$/;"	e	enum:cufftResult_t
CUFFT_INVALID_VALUE	/usr/local/cuda/include/cufft.h	/^  CUFFT_INVALID_VALUE  = 0x4,$/;"	e	enum:cufftResult_t
CUFFT_INVERSE	/usr/local/cuda/include/cufft.h	118;"	d
CUFFT_LICENSE_ERROR	/usr/local/cuda/include/cufft.h	/^  CUFFT_LICENSE_ERROR = 0x0F,$/;"	e	enum:cufftResult_t
CUFFT_NOT_IMPLEMENTED	/usr/local/cuda/include/cufft.h	/^  CUFFT_NOT_IMPLEMENTED = 0xE,$/;"	e	enum:cufftResult_t
CUFFT_NOT_SUPPORTED	/usr/local/cuda/include/cufft.h	/^  CUFFT_NOT_SUPPORTED = 0x10$/;"	e	enum:cufftResult_t
CUFFT_NO_WORKSPACE	/usr/local/cuda/include/cufft.h	/^  CUFFT_NO_WORKSPACE = 0xD,$/;"	e	enum:cufftResult_t
CUFFT_PARSE_ERROR	/usr/local/cuda/include/cufft.h	/^  CUFFT_PARSE_ERROR = 0xC,$/;"	e	enum:cufftResult_t
CUFFT_QUERY_1D_FACTORS	/usr/local/cuda/include/cufftXt.h	/^    CUFFT_QUERY_1D_FACTORS = 0x00,$/;"	e	enum:cufftXtQueryType_t
CUFFT_QUERY_UNDEFINED	/usr/local/cuda/include/cufftXt.h	/^    CUFFT_QUERY_UNDEFINED = 0x01$/;"	e	enum:cufftXtQueryType_t
CUFFT_R2C	/usr/local/cuda/include/cufft.h	/^  CUFFT_R2C = 0x2a,     \/\/ Real to Complex (interleaved)$/;"	e	enum:cufftType_t
CUFFT_SETUP_FAILED	/usr/local/cuda/include/cufft.h	/^  CUFFT_SETUP_FAILED   = 0x7,$/;"	e	enum:cufftResult_t
CUFFT_SUCCESS	/usr/local/cuda/include/cufft.h	/^  CUFFT_SUCCESS        = 0x0,$/;"	e	enum:cufftResult_t
CUFFT_UNALIGNED_DATA	/usr/local/cuda/include/cufft.h	/^  CUFFT_UNALIGNED_DATA = 0x9,$/;"	e	enum:cufftResult_t
CUFFT_XT_FORMAT_1D_INPUT_SHUFFLED	/usr/local/cuda/include/cufftXt.h	/^    CUFFT_XT_FORMAT_1D_INPUT_SHUFFLED = 0x04,  \/\/shuffled input order prior to execution of 1D transforms$/;"	e	enum:cufftXtSubFormat_t
CUFFT_XT_FORMAT_INPLACE	/usr/local/cuda/include/cufftXt.h	/^    CUFFT_XT_FORMAT_INPLACE = 0x02,            \/\/by default inplace is input order, which is linear across GPUs$/;"	e	enum:cufftXtSubFormat_t
CUFFT_XT_FORMAT_INPLACE_SHUFFLED	/usr/local/cuda/include/cufftXt.h	/^    CUFFT_XT_FORMAT_INPLACE_SHUFFLED = 0x03,   \/\/shuffled output order after execution of the transform$/;"	e	enum:cufftXtSubFormat_t
CUFFT_XT_FORMAT_INPUT	/usr/local/cuda/include/cufftXt.h	/^    CUFFT_XT_FORMAT_INPUT = 0x00,              \/\/by default input is in linear order across GPUs$/;"	e	enum:cufftXtSubFormat_t
CUFFT_XT_FORMAT_OUTPUT	/usr/local/cuda/include/cufftXt.h	/^    CUFFT_XT_FORMAT_OUTPUT = 0x01,             \/\/by default output is in scrambled order depending on transform$/;"	e	enum:cufftXtSubFormat_t
CUFFT_Z2D	/usr/local/cuda/include/cufft.h	/^  CUFFT_Z2D = 0x6c,     \/\/ Double-Complex to Double$/;"	e	enum:cufftType_t
CUFFT_Z2Z	/usr/local/cuda/include/cufft.h	/^  CUFFT_Z2Z = 0x69      \/\/ Double-Complex to Double-Complex$/;"	e	enum:cufftType_t
CUGLDeviceList	/usr/local/cuda/include/cudaGL.h	/^} CUGLDeviceList;$/;"	t	typeref:enum:CUGLDeviceList_enum
CUGLDeviceList_enum	/usr/local/cuda/include/cudaGL.h	/^typedef enum CUGLDeviceList_enum {$/;"	g
CUGLmap_flags	/usr/local/cuda/include/cudaGL.h	/^} CUGLmap_flags;$/;"	t	typeref:enum:CUGLmap_flags_enum
CUGLmap_flags_enum	/usr/local/cuda/include/cudaGL.h	/^typedef enum CUGLmap_flags_enum {$/;"	g
CURANDAPI	/usr/local/cuda/include/curand.h	63;"	d
CURANDAPI	/usr/local/cuda/include/curand.h	65;"	d
CURANDDISCRETE_H_	/usr/local/cuda/include/curand_discrete.h	50;"	d
CURAND_2PI	/usr/local/cuda/include/curand_globals.h	60;"	d
CURAND_2PI_DOUBLE	/usr/local/cuda/include/curand_globals.h	63;"	d
CURAND_2POW32	/usr/local/cuda/include/curand_globals.h	54;"	d
CURAND_2POW32_DOUBLE	/usr/local/cuda/include/curand_globals.h	55;"	d
CURAND_2POW32_INV	/usr/local/cuda/include/curand_globals.h	56;"	d
CURAND_2POW32_INV_2PI	/usr/local/cuda/include/curand_globals.h	59;"	d
CURAND_2POW32_INV_DOUBLE	/usr/local/cuda/include/curand_globals.h	57;"	d
CURAND_2POW53_INV_2PI_DOUBLE	/usr/local/cuda/include/curand_globals.h	61;"	d
CURAND_2POW53_INV_DOUBLE	/usr/local/cuda/include/curand_globals.h	58;"	d
CURAND_3RD	/usr/local/cuda/include/curand.h	/^    CURAND_3RD = 11,$/;"	e	enum:curandMethod
CURAND_BINARY_SEARCH	/usr/local/cuda/include/curand.h	/^    CURAND_BINARY_SEARCH = 6,$/;"	e	enum:curandMethod
CURAND_CHOOSE_BEST	/usr/local/cuda/include/curand.h	/^    CURAND_CHOOSE_BEST = 0, \/\/ choose best depends on args$/;"	e	enum:curandMethod
CURAND_DEFINITION	/usr/local/cuda/include/curand.h	/^    CURAND_DEFINITION = 12,$/;"	e	enum:curandMethod
CURAND_DEVICE_API	/usr/local/cuda/include/curand.h	/^    CURAND_DEVICE_API = 9,$/;"	e	enum:curandMethod
CURAND_DIRECTION_VECTORS_32_JOEKUO6	/usr/local/cuda/include/curand.h	/^    CURAND_DIRECTION_VECTORS_32_JOEKUO6 = 101, \/\/\/< Specific set of 32-bit direction vectors generated from polynomials recommended by S. Joe and F. Y. Kuo, for up to 20,000 dimensions$/;"	e	enum:curandDirectionVectorSet
CURAND_DIRECTION_VECTORS_64_JOEKUO6	/usr/local/cuda/include/curand.h	/^    CURAND_DIRECTION_VECTORS_64_JOEKUO6 = 103, \/\/\/< Specific set of 64-bit direction vectors generated from polynomials recommended by S. Joe and F. Y. Kuo, for up to 20,000 dimensions$/;"	e	enum:curandDirectionVectorSet
CURAND_DISCRETE_GAUSS	/usr/local/cuda/include/curand.h	/^    CURAND_DISCRETE_GAUSS = 7,$/;"	e	enum:curandMethod
CURAND_DISCRETE_H_	/usr/local/cuda/include/curand_discrete2.h	52;"	d
CURAND_FAST_REJECTION	/usr/local/cuda/include/curand.h	/^    CURAND_FAST_REJECTION = 10,$/;"	e	enum:curandMethod
CURAND_GLOBALS_H	/usr/local/cuda/include/curand_globals.h	49;"	d
CURAND_HITR	/usr/local/cuda/include/curand.h	/^    CURAND_HITR = 3,$/;"	e	enum:curandMethod
CURAND_H_	/usr/local/cuda/include/curand.h	51;"	d
CURAND_ITR	/usr/local/cuda/include/curand.h	/^    CURAND_ITR = 1,$/;"	e	enum:curandMethod
CURAND_KERNEL_H_	/usr/local/cuda/include/curand_kernel.h	52;"	d
CURAND_KNUTH	/usr/local/cuda/include/curand.h	/^    CURAND_KNUTH = 2,$/;"	e	enum:curandMethod
CURAND_LOGNORMAL_H_	/usr/local/cuda/include/curand_lognormal.h	52;"	d
CURAND_M1	/usr/local/cuda/include/curand.h	/^    CURAND_M1 = 4,$/;"	e	enum:curandMethod
CURAND_M2	/usr/local/cuda/include/curand.h	/^    CURAND_M2 = 5,$/;"	e	enum:curandMethod
CURAND_MRG32K3A_MATRICES_H_	/usr/local/cuda/include/curand_mrg32k3a.h	50;"	d
CURAND_MTGP32DC_P_11213_H	/usr/local/cuda/include/curand_mtgp32dc_p_11213.h	89;"	d
CURAND_MTGP32_H	/usr/local/cuda/include/curand_mtgp32.h	51;"	d
CURAND_MTGP32_HOST_H	/usr/local/cuda/include/curand_mtgp32_host.h	99;"	d
CURAND_MTGP32_KERNEL_H	/usr/local/cuda/include/curand_mtgp32_kernel.h	99;"	d
CURAND_NORMAL_H_	/usr/local/cuda/include/curand_normal.h	52;"	d
CURAND_NORMAL_STATIC_H	/usr/local/cuda/include/curand_normal_static.h	49;"	d
CURAND_NUM_MTGP32_PARAMS	/usr/local/cuda/include/curand_mtgp32.h	105;"	d
CURAND_ORDERING_PSEUDO_BEST	/usr/local/cuda/include/curand.h	/^    CURAND_ORDERING_PSEUDO_BEST = 100, \/\/\/< Best ordering for pseudorandom results$/;"	e	enum:curandOrdering
CURAND_ORDERING_PSEUDO_DEFAULT	/usr/local/cuda/include/curand.h	/^    CURAND_ORDERING_PSEUDO_DEFAULT = 101, \/\/\/< Specific default 4096 thread sequence for pseudorandom results$/;"	e	enum:curandOrdering
CURAND_ORDERING_PSEUDO_SEEDED	/usr/local/cuda/include/curand.h	/^    CURAND_ORDERING_PSEUDO_SEEDED = 102, \/\/\/< Specific seeding pattern for fast lower quality pseudorandom results$/;"	e	enum:curandOrdering
CURAND_ORDERING_QUASI_DEFAULT	/usr/local/cuda/include/curand.h	/^    CURAND_ORDERING_QUASI_DEFAULT = 201 \/\/\/< Specific n-dimensional ordering for quasirandom results$/;"	e	enum:curandOrdering
CURAND_PHILOX4X32_X__H_	/usr/local/cuda/include/curand_philox4x32_x.h	81;"	d
CURAND_PI_DOUBLE	/usr/local/cuda/include/curand_globals.h	62;"	d
CURAND_POISSON	/usr/local/cuda/include/curand.h	/^    CURAND_POISSON = 13$/;"	e	enum:curandMethod
CURAND_POISSON_H_	/usr/local/cuda/include/curand_poisson.h	52;"	d
CURAND_REJECTION	/usr/local/cuda/include/curand.h	/^    CURAND_REJECTION = 8,$/;"	e	enum:curandMethod
CURAND_RNG_PSEUDO_DEFAULT	/usr/local/cuda/include/curand.h	/^    CURAND_RNG_PSEUDO_DEFAULT = 100, \/\/\/< Default pseudorandom generator$/;"	e	enum:curandRngType
CURAND_RNG_PSEUDO_MRG32K3A	/usr/local/cuda/include/curand.h	/^    CURAND_RNG_PSEUDO_MRG32K3A = 121, \/\/\/< MRG32k3a pseudorandom generator$/;"	e	enum:curandRngType
CURAND_RNG_PSEUDO_MT19937	/usr/local/cuda/include/curand.h	/^    CURAND_RNG_PSEUDO_MT19937 = 142, \/\/\/< Mersenne Twister MT19937 pseudorandom generator$/;"	e	enum:curandRngType
CURAND_RNG_PSEUDO_MTGP32	/usr/local/cuda/include/curand.h	/^    CURAND_RNG_PSEUDO_MTGP32 = 141, \/\/\/< Mersenne Twister MTGP32 pseudorandom generator$/;"	e	enum:curandRngType
CURAND_RNG_PSEUDO_PHILOX4_32_10	/usr/local/cuda/include/curand.h	/^    CURAND_RNG_PSEUDO_PHILOX4_32_10 = 161, \/\/\/< PHILOX-4x32-10 pseudorandom generator$/;"	e	enum:curandRngType
CURAND_RNG_PSEUDO_XORWOW	/usr/local/cuda/include/curand.h	/^    CURAND_RNG_PSEUDO_XORWOW = 101, \/\/\/< XORWOW pseudorandom generator$/;"	e	enum:curandRngType
CURAND_RNG_QUASI_DEFAULT	/usr/local/cuda/include/curand.h	/^    CURAND_RNG_QUASI_DEFAULT = 200, \/\/\/< Default quasirandom generator$/;"	e	enum:curandRngType
CURAND_RNG_QUASI_SCRAMBLED_SOBOL32	/usr/local/cuda/include/curand.h	/^    CURAND_RNG_QUASI_SCRAMBLED_SOBOL32 = 202,  \/\/\/< Scrambled Sobol32 quasirandom generator$/;"	e	enum:curandRngType
CURAND_RNG_QUASI_SCRAMBLED_SOBOL64	/usr/local/cuda/include/curand.h	/^    CURAND_RNG_QUASI_SCRAMBLED_SOBOL64 = 204  \/\/\/< Scrambled Sobol64 quasirandom generator$/;"	e	enum:curandRngType
CURAND_RNG_QUASI_SOBOL32	/usr/local/cuda/include/curand.h	/^    CURAND_RNG_QUASI_SOBOL32 = 201, \/\/\/< Sobol32 quasirandom generator$/;"	e	enum:curandRngType
CURAND_RNG_QUASI_SOBOL64	/usr/local/cuda/include/curand.h	/^    CURAND_RNG_QUASI_SOBOL64 = 203, \/\/\/< Sobol64 quasirandom generator$/;"	e	enum:curandRngType
CURAND_RNG_TEST	/usr/local/cuda/include/curand.h	/^    CURAND_RNG_TEST = 0,$/;"	e	enum:curandRngType
CURAND_SCRAMBLED_DIRECTION_VECTORS_32_JOEKUO6	/usr/local/cuda/include/curand.h	/^    CURAND_SCRAMBLED_DIRECTION_VECTORS_32_JOEKUO6 = 102, \/\/\/< Specific set of 32-bit direction vectors generated from polynomials recommended by S. Joe and F. Y. Kuo, for up to 20,000 dimensions, and scrambled$/;"	e	enum:curandDirectionVectorSet
CURAND_SCRAMBLED_DIRECTION_VECTORS_64_JOEKUO6	/usr/local/cuda/include/curand.h	/^    CURAND_SCRAMBLED_DIRECTION_VECTORS_64_JOEKUO6 = 104 \/\/\/< Specific set of 64-bit direction vectors generated from polynomials recommended by S. Joe and F. Y. Kuo, for up to 20,000 dimensions, and scrambled$/;"	e	enum:curandDirectionVectorSet
CURAND_SOBOL_DIRECTION_VECTORS_H_	/usr/local/cuda/include/sobol_direction_vectors.h	2;"	d
CURAND_SQRT2	/usr/local/cuda/include/curand_globals.h	64;"	d
CURAND_SQRT2_DOUBLE	/usr/local/cuda/include/curand_globals.h	65;"	d
CURAND_STATUS_ALLOCATION_FAILED	/usr/local/cuda/include/curand.h	/^    CURAND_STATUS_ALLOCATION_FAILED = 102, \/\/\/< Memory allocation failed$/;"	e	enum:curandStatus
CURAND_STATUS_ARCH_MISMATCH	/usr/local/cuda/include/curand.h	/^    CURAND_STATUS_ARCH_MISMATCH = 204, \/\/\/< Architecture mismatch, GPU does not support requested feature$/;"	e	enum:curandStatus
CURAND_STATUS_DOUBLE_PRECISION_REQUIRED	/usr/local/cuda/include/curand.h	/^    CURAND_STATUS_DOUBLE_PRECISION_REQUIRED = 106, \/\/\/< GPU does not have double precision required by MRG32k3a$/;"	e	enum:curandStatus
CURAND_STATUS_INITIALIZATION_FAILED	/usr/local/cuda/include/curand.h	/^    CURAND_STATUS_INITIALIZATION_FAILED = 203, \/\/\/< Initialization of CUDA failed$/;"	e	enum:curandStatus
CURAND_STATUS_INTERNAL_ERROR	/usr/local/cuda/include/curand.h	/^    CURAND_STATUS_INTERNAL_ERROR = 999 \/\/\/< Internal library error$/;"	e	enum:curandStatus
CURAND_STATUS_LAUNCH_FAILURE	/usr/local/cuda/include/curand.h	/^    CURAND_STATUS_LAUNCH_FAILURE = 201, \/\/\/< Kernel launch failure$/;"	e	enum:curandStatus
CURAND_STATUS_LENGTH_NOT_MULTIPLE	/usr/local/cuda/include/curand.h	/^    CURAND_STATUS_LENGTH_NOT_MULTIPLE = 105, \/\/\/< Length requested is not a multple of dimension$/;"	e	enum:curandStatus
CURAND_STATUS_NOT_INITIALIZED	/usr/local/cuda/include/curand.h	/^    CURAND_STATUS_NOT_INITIALIZED = 101, \/\/\/< Generator not initialized$/;"	e	enum:curandStatus
CURAND_STATUS_OUT_OF_RANGE	/usr/local/cuda/include/curand.h	/^    CURAND_STATUS_OUT_OF_RANGE = 104, \/\/\/< Argument out of range$/;"	e	enum:curandStatus
CURAND_STATUS_PREEXISTING_FAILURE	/usr/local/cuda/include/curand.h	/^    CURAND_STATUS_PREEXISTING_FAILURE = 202, \/\/\/< Preexisting failure on library entry$/;"	e	enum:curandStatus
CURAND_STATUS_SUCCESS	/usr/local/cuda/include/curand.h	/^    CURAND_STATUS_SUCCESS = 0, \/\/\/< No errors$/;"	e	enum:curandStatus
CURAND_STATUS_TYPE_ERROR	/usr/local/cuda/include/curand.h	/^    CURAND_STATUS_TYPE_ERROR = 103, \/\/\/< Generator is wrong type$/;"	e	enum:curandStatus
CURAND_STATUS_VERSION_MISMATCH	/usr/local/cuda/include/curand.h	/^    CURAND_STATUS_VERSION_MISMATCH = 100, \/\/\/< Header file and linked library version do not match$/;"	e	enum:curandStatus
CURAND_UNIFORM_H_	/usr/local/cuda/include/curand_uniform.h	52;"	d
CURAND_XORWOW_PRECALCULATED_H_	/usr/local/cuda/include/curand_precalc.h	49;"	d
CUSOLVERAPI	/usr/local/cuda/include/cusolver_common.h	57;"	d
CUSOLVERAPI	/usr/local/cuda/include/cusolver_common.h	59;"	d
CUSOLVERDN_H_	/usr/local/cuda/include/cusolverDn.h	55;"	d
CUSOLVERRF_FACTORIZATION_ALG0	/usr/local/cuda/include/cusolverRf.h	/^    CUSOLVERRF_FACTORIZATION_ALG0 = 0, \/\/ default$/;"	e	enum:__anon89
CUSOLVERRF_FACTORIZATION_ALG1	/usr/local/cuda/include/cusolverRf.h	/^    CUSOLVERRF_FACTORIZATION_ALG1 = 1,$/;"	e	enum:__anon89
CUSOLVERRF_FACTORIZATION_ALG2	/usr/local/cuda/include/cusolverRf.h	/^    CUSOLVERRF_FACTORIZATION_ALG2 = 2,$/;"	e	enum:__anon89
CUSOLVERRF_H_	/usr/local/cuda/include/cusolverRf.h	51;"	d
CUSOLVERRF_MATRIX_FORMAT_CSC	/usr/local/cuda/include/cusolverRf.h	/^    CUSOLVERRF_MATRIX_FORMAT_CSC = 1        $/;"	e	enum:__anon87
CUSOLVERRF_MATRIX_FORMAT_CSR	/usr/local/cuda/include/cusolverRf.h	/^    CUSOLVERRF_MATRIX_FORMAT_CSR = 0, \/\/default   $/;"	e	enum:__anon87
CUSOLVERRF_NUMERIC_BOOST_NOT_USED	/usr/local/cuda/include/cusolverRf.h	/^    CUSOLVERRF_NUMERIC_BOOST_NOT_USED = 0, \/\/default$/;"	e	enum:__anon91
CUSOLVERRF_NUMERIC_BOOST_USED	/usr/local/cuda/include/cusolverRf.h	/^    CUSOLVERRF_NUMERIC_BOOST_USED = 1$/;"	e	enum:__anon91
CUSOLVERRF_RESET_VALUES_FAST_MODE_OFF	/usr/local/cuda/include/cusolverRf.h	/^    CUSOLVERRF_RESET_VALUES_FAST_MODE_OFF = 0, \/\/default   $/;"	e	enum:__anon86
CUSOLVERRF_RESET_VALUES_FAST_MODE_ON	/usr/local/cuda/include/cusolverRf.h	/^    CUSOLVERRF_RESET_VALUES_FAST_MODE_ON = 1        $/;"	e	enum:__anon86
CUSOLVERRF_TRIANGULAR_SOLVE_ALG0	/usr/local/cuda/include/cusolverRf.h	/^    CUSOLVERRF_TRIANGULAR_SOLVE_ALG0 = 0, $/;"	e	enum:__anon90
CUSOLVERRF_TRIANGULAR_SOLVE_ALG1	/usr/local/cuda/include/cusolverRf.h	/^    CUSOLVERRF_TRIANGULAR_SOLVE_ALG1 = 1, \/\/ default$/;"	e	enum:__anon90
CUSOLVERRF_TRIANGULAR_SOLVE_ALG2	/usr/local/cuda/include/cusolverRf.h	/^    CUSOLVERRF_TRIANGULAR_SOLVE_ALG2 = 2,$/;"	e	enum:__anon90
CUSOLVERRF_TRIANGULAR_SOLVE_ALG3	/usr/local/cuda/include/cusolverRf.h	/^    CUSOLVERRF_TRIANGULAR_SOLVE_ALG3 = 3$/;"	e	enum:__anon90
CUSOLVERRF_UNIT_DIAGONAL_ASSUMED_L	/usr/local/cuda/include/cusolverRf.h	/^    CUSOLVERRF_UNIT_DIAGONAL_ASSUMED_L = 2,        $/;"	e	enum:__anon88
CUSOLVERRF_UNIT_DIAGONAL_ASSUMED_U	/usr/local/cuda/include/cusolverRf.h	/^    CUSOLVERRF_UNIT_DIAGONAL_ASSUMED_U = 3        $/;"	e	enum:__anon88
CUSOLVERRF_UNIT_DIAGONAL_STORED_L	/usr/local/cuda/include/cusolverRf.h	/^    CUSOLVERRF_UNIT_DIAGONAL_STORED_L = 0, \/\/default   $/;"	e	enum:__anon88
CUSOLVERRF_UNIT_DIAGONAL_STORED_U	/usr/local/cuda/include/cusolverRf.h	/^    CUSOLVERRF_UNIT_DIAGONAL_STORED_U = 1, $/;"	e	enum:__anon88
CUSOLVERSP_H_	/usr/local/cuda/include/cusolverSp.h	51;"	d
CUSOLVERSP_LOWLEVEL_PREVIEW_H_	/usr/local/cuda/include/cusolverSp_LOWLEVEL_PREVIEW.h	51;"	d
CUSOLVER_COMMON_H_	/usr/local/cuda/include/cusolver_common.h	51;"	d
CUSOLVER_EIG_MODE_NOVECTOR	/usr/local/cuda/include/cusolver_common.h	/^    CUSOLVER_EIG_MODE_NOVECTOR=0,$/;"	e	enum:__anon94
CUSOLVER_EIG_MODE_VECTOR	/usr/local/cuda/include/cusolver_common.h	/^    CUSOLVER_EIG_MODE_VECTOR=1$/;"	e	enum:__anon94
CUSOLVER_EIG_TYPE_1	/usr/local/cuda/include/cusolver_common.h	/^    CUSOLVER_EIG_TYPE_1=1,$/;"	e	enum:__anon93
CUSOLVER_EIG_TYPE_2	/usr/local/cuda/include/cusolver_common.h	/^    CUSOLVER_EIG_TYPE_2=2,$/;"	e	enum:__anon93
CUSOLVER_EIG_TYPE_3	/usr/local/cuda/include/cusolver_common.h	/^    CUSOLVER_EIG_TYPE_3=3$/;"	e	enum:__anon93
CUSOLVER_STATUS_ALLOC_FAILED	/usr/local/cuda/include/cusolver_common.h	/^    CUSOLVER_STATUS_ALLOC_FAILED=2,$/;"	e	enum:__anon92
CUSOLVER_STATUS_ARCH_MISMATCH	/usr/local/cuda/include/cusolver_common.h	/^    CUSOLVER_STATUS_ARCH_MISMATCH=4,$/;"	e	enum:__anon92
CUSOLVER_STATUS_EXECUTION_FAILED	/usr/local/cuda/include/cusolver_common.h	/^    CUSOLVER_STATUS_EXECUTION_FAILED=6,$/;"	e	enum:__anon92
CUSOLVER_STATUS_INTERNAL_ERROR	/usr/local/cuda/include/cusolver_common.h	/^    CUSOLVER_STATUS_INTERNAL_ERROR=7,$/;"	e	enum:__anon92
CUSOLVER_STATUS_INVALID_LICENSE	/usr/local/cuda/include/cusolver_common.h	/^    CUSOLVER_STATUS_INVALID_LICENSE=11$/;"	e	enum:__anon92
CUSOLVER_STATUS_INVALID_VALUE	/usr/local/cuda/include/cusolver_common.h	/^    CUSOLVER_STATUS_INVALID_VALUE=3,$/;"	e	enum:__anon92
CUSOLVER_STATUS_MAPPING_ERROR	/usr/local/cuda/include/cusolver_common.h	/^    CUSOLVER_STATUS_MAPPING_ERROR=5,$/;"	e	enum:__anon92
CUSOLVER_STATUS_MATRIX_TYPE_NOT_SUPPORTED	/usr/local/cuda/include/cusolver_common.h	/^    CUSOLVER_STATUS_MATRIX_TYPE_NOT_SUPPORTED=8,$/;"	e	enum:__anon92
CUSOLVER_STATUS_NOT_INITIALIZED	/usr/local/cuda/include/cusolver_common.h	/^    CUSOLVER_STATUS_NOT_INITIALIZED=1,$/;"	e	enum:__anon92
CUSOLVER_STATUS_NOT_SUPPORTED	/usr/local/cuda/include/cusolver_common.h	/^    CUSOLVER_STATUS_NOT_SUPPORTED = 9,$/;"	e	enum:__anon92
CUSOLVER_STATUS_SUCCESS	/usr/local/cuda/include/cusolver_common.h	/^    CUSOLVER_STATUS_SUCCESS=0,$/;"	e	enum:__anon92
CUSOLVER_STATUS_ZERO_PIVOT	/usr/local/cuda/include/cusolver_common.h	/^    CUSOLVER_STATUS_ZERO_PIVOT=10,$/;"	e	enum:__anon92
CUSPARSEAPI	/usr/local/cuda/include/cusparse.h	56;"	d
CUSPARSEAPI	/usr/local/cuda/include/cusparse.h	58;"	d
CUSPARSE_ACTION_NUMERIC	/usr/local/cuda/include/cusparse.h	/^    CUSPARSE_ACTION_NUMERIC = 1        $/;"	e	enum:__anon97
CUSPARSE_ACTION_SYMBOLIC	/usr/local/cuda/include/cusparse.h	/^    CUSPARSE_ACTION_SYMBOLIC = 0,  $/;"	e	enum:__anon97
CUSPARSE_ALG0	/usr/local/cuda/include/cusparse.h	/^    CUSPARSE_ALG0 = 0, \/\/default, naive$/;"	e	enum:__anon108
CUSPARSE_ALG1	/usr/local/cuda/include/cusparse.h	/^    CUSPARSE_ALG1 = 1  \/\/merge path$/;"	e	enum:__anon108
CUSPARSE_COLOR_ALG0	/usr/local/cuda/include/cusparse.h	/^    CUSPARSE_COLOR_ALG0 = 0, \/\/ default$/;"	e	enum:__anon107
CUSPARSE_COLOR_ALG1	/usr/local/cuda/include/cusparse.h	/^    CUSPARSE_COLOR_ALG1 = 1$/;"	e	enum:__anon107
CUSPARSE_DIAG_TYPE_NON_UNIT	/usr/local/cuda/include/cusparse.h	/^    CUSPARSE_DIAG_TYPE_NON_UNIT = 0, $/;"	e	enum:__anon100
CUSPARSE_DIAG_TYPE_UNIT	/usr/local/cuda/include/cusparse.h	/^    CUSPARSE_DIAG_TYPE_UNIT = 1$/;"	e	enum:__anon100
CUSPARSE_DIRECTION_COLUMN	/usr/local/cuda/include/cusparse.h	/^    CUSPARSE_DIRECTION_COLUMN = 1  $/;"	e	enum:__anon103
CUSPARSE_DIRECTION_ROW	/usr/local/cuda/include/cusparse.h	/^    CUSPARSE_DIRECTION_ROW = 0,  $/;"	e	enum:__anon103
CUSPARSE_FILL_MODE_LOWER	/usr/local/cuda/include/cusparse.h	/^    CUSPARSE_FILL_MODE_LOWER = 0, $/;"	e	enum:__anon99
CUSPARSE_FILL_MODE_UPPER	/usr/local/cuda/include/cusparse.h	/^    CUSPARSE_FILL_MODE_UPPER = 1$/;"	e	enum:__anon99
CUSPARSE_HYB_PARTITION_AUTO	/usr/local/cuda/include/cusparse.h	/^    CUSPARSE_HYB_PARTITION_AUTO = 0,  \/\/ automatically decide how to split the data into regular\/irregular part$/;"	e	enum:__anon104
CUSPARSE_HYB_PARTITION_MAX	/usr/local/cuda/include/cusparse.h	/^    CUSPARSE_HYB_PARTITION_MAX = 2    \/\/ store all data in the regular part$/;"	e	enum:__anon104
CUSPARSE_HYB_PARTITION_USER	/usr/local/cuda/include/cusparse.h	/^    CUSPARSE_HYB_PARTITION_USER = 1,  \/\/ store data into regular part up to a user specified treshhold$/;"	e	enum:__anon104
CUSPARSE_H_	/usr/local/cuda/include/cusparse.h	51;"	d
CUSPARSE_INDEX_BASE_ONE	/usr/local/cuda/include/cusparse.h	/^    CUSPARSE_INDEX_BASE_ONE = 1$/;"	e	enum:__anon101
CUSPARSE_INDEX_BASE_ZERO	/usr/local/cuda/include/cusparse.h	/^    CUSPARSE_INDEX_BASE_ZERO = 0, $/;"	e	enum:__anon101
CUSPARSE_MATRIX_TYPE_GENERAL	/usr/local/cuda/include/cusparse.h	/^    CUSPARSE_MATRIX_TYPE_GENERAL = 0, $/;"	e	enum:__anon98
CUSPARSE_MATRIX_TYPE_HERMITIAN	/usr/local/cuda/include/cusparse.h	/^    CUSPARSE_MATRIX_TYPE_HERMITIAN = 2, $/;"	e	enum:__anon98
CUSPARSE_MATRIX_TYPE_SYMMETRIC	/usr/local/cuda/include/cusparse.h	/^    CUSPARSE_MATRIX_TYPE_SYMMETRIC = 1,     $/;"	e	enum:__anon98
CUSPARSE_MATRIX_TYPE_TRIANGULAR	/usr/local/cuda/include/cusparse.h	/^    CUSPARSE_MATRIX_TYPE_TRIANGULAR = 3 $/;"	e	enum:__anon98
CUSPARSE_OPERATION_CONJUGATE_TRANSPOSE	/usr/local/cuda/include/cusparse.h	/^    CUSPARSE_OPERATION_CONJUGATE_TRANSPOSE = 2  $/;"	e	enum:__anon102
CUSPARSE_OPERATION_NON_TRANSPOSE	/usr/local/cuda/include/cusparse.h	/^    CUSPARSE_OPERATION_NON_TRANSPOSE = 0,  $/;"	e	enum:__anon102
CUSPARSE_OPERATION_TRANSPOSE	/usr/local/cuda/include/cusparse.h	/^    CUSPARSE_OPERATION_TRANSPOSE = 1,  $/;"	e	enum:__anon102
CUSPARSE_POINTER_MODE_DEVICE	/usr/local/cuda/include/cusparse.h	/^    CUSPARSE_POINTER_MODE_DEVICE = 1        $/;"	e	enum:__anon96
CUSPARSE_POINTER_MODE_HOST	/usr/local/cuda/include/cusparse.h	/^    CUSPARSE_POINTER_MODE_HOST = 0,  $/;"	e	enum:__anon96
CUSPARSE_SIDE_LEFT	/usr/local/cuda/include/cusparse.h	/^    CUSPARSE_SIDE_LEFT =0,$/;"	e	enum:__anon106
CUSPARSE_SIDE_RIGHT	/usr/local/cuda/include/cusparse.h	/^    CUSPARSE_SIDE_RIGHT=1$/;"	e	enum:__anon106
CUSPARSE_SOLVE_POLICY_NO_LEVEL	/usr/local/cuda/include/cusparse.h	/^    CUSPARSE_SOLVE_POLICY_NO_LEVEL = 0, \/\/ no level information is generated, only reports structural zero.$/;"	e	enum:__anon105
CUSPARSE_SOLVE_POLICY_USE_LEVEL	/usr/local/cuda/include/cusparse.h	/^    CUSPARSE_SOLVE_POLICY_USE_LEVEL = 1  $/;"	e	enum:__anon105
CUSPARSE_STATUS_ALLOC_FAILED	/usr/local/cuda/include/cusparse.h	/^    CUSPARSE_STATUS_ALLOC_FAILED=2,$/;"	e	enum:__anon95
CUSPARSE_STATUS_ARCH_MISMATCH	/usr/local/cuda/include/cusparse.h	/^    CUSPARSE_STATUS_ARCH_MISMATCH=4,$/;"	e	enum:__anon95
CUSPARSE_STATUS_EXECUTION_FAILED	/usr/local/cuda/include/cusparse.h	/^    CUSPARSE_STATUS_EXECUTION_FAILED=6,$/;"	e	enum:__anon95
CUSPARSE_STATUS_INTERNAL_ERROR	/usr/local/cuda/include/cusparse.h	/^    CUSPARSE_STATUS_INTERNAL_ERROR=7,$/;"	e	enum:__anon95
CUSPARSE_STATUS_INVALID_VALUE	/usr/local/cuda/include/cusparse.h	/^    CUSPARSE_STATUS_INVALID_VALUE=3,$/;"	e	enum:__anon95
CUSPARSE_STATUS_MAPPING_ERROR	/usr/local/cuda/include/cusparse.h	/^    CUSPARSE_STATUS_MAPPING_ERROR=5,$/;"	e	enum:__anon95
CUSPARSE_STATUS_MATRIX_TYPE_NOT_SUPPORTED	/usr/local/cuda/include/cusparse.h	/^    CUSPARSE_STATUS_MATRIX_TYPE_NOT_SUPPORTED=8,$/;"	e	enum:__anon95
CUSPARSE_STATUS_NOT_INITIALIZED	/usr/local/cuda/include/cusparse.h	/^    CUSPARSE_STATUS_NOT_INITIALIZED=1,$/;"	e	enum:__anon95
CUSPARSE_STATUS_SUCCESS	/usr/local/cuda/include/cusparse.h	/^    CUSPARSE_STATUS_SUCCESS=0,$/;"	e	enum:__anon95
CUSPARSE_STATUS_ZERO_PIVOT	/usr/local/cuda/include/cusparse.h	/^    CUSPARSE_STATUS_ZERO_PIVOT=9$/;"	e	enum:__anon95
CUSPARSE_V2_H_	/usr/local/cuda/include/cusparse_v2.h	51;"	d
CUVIDDECODECREATEINFO	/usr/local/cuda/include/dynlink_cuviddec.h	/^} CUVIDDECODECREATEINFO;$/;"	t	typeref:struct:_CUVIDDECODECREATEINFO
CUVIDEOFORMAT	/usr/local/cuda/include/dynlink_nvcuvid.h	/^} CUVIDEOFORMAT;$/;"	t	typeref:struct:__anon123
CUVIDEOFORMATEX	/usr/local/cuda/include/dynlink_nvcuvid.h	/^} CUVIDEOFORMATEX;$/;"	t	typeref:struct:__anon128
CUVIDH264DPBENTRY	/usr/local/cuda/include/dynlink_cuviddec.h	/^} CUVIDH264DPBENTRY;$/;"	t	typeref:struct:_CUVIDH264DPBENTRY
CUVIDH264MVCEXT	/usr/local/cuda/include/dynlink_cuviddec.h	/^} CUVIDH264MVCEXT;$/;"	t	typeref:struct:_CUVIDH264MVCEXT
CUVIDH264PICPARAMS	/usr/local/cuda/include/dynlink_cuviddec.h	/^} CUVIDH264PICPARAMS;$/;"	t	typeref:struct:_CUVIDH264PICPARAMS
CUVIDH264SVCEXT	/usr/local/cuda/include/dynlink_cuviddec.h	/^} CUVIDH264SVCEXT;$/;"	t	typeref:struct:_CUVIDH264SVCEXT
CUVIDHEVCPICPARAMS	/usr/local/cuda/include/dynlink_cuviddec.h	/^} CUVIDHEVCPICPARAMS;$/;"	t	typeref:struct:_CUVIDHEVCPICPARAMS
CUVIDJPEGPICPARAMS	/usr/local/cuda/include/dynlink_cuviddec.h	/^} CUVIDJPEGPICPARAMS;$/;"	t	typeref:struct:_CUVIDJPEGPICPARAMS
CUVIDMPEG2PICPARAMS	/usr/local/cuda/include/dynlink_cuviddec.h	/^} CUVIDMPEG2PICPARAMS;$/;"	t	typeref:struct:_CUVIDMPEG2PICPARAMS
CUVIDMPEG4PICPARAMS	/usr/local/cuda/include/dynlink_cuviddec.h	/^} CUVIDMPEG4PICPARAMS;$/;"	t	typeref:struct:_CUVIDMPEG4PICPARAMS
CUVIDPARSERDISPINFO	/usr/local/cuda/include/dynlink_nvcuvid.h	/^} CUVIDPARSERDISPINFO;$/;"	t	typeref:struct:_CUVIDPARSERDISPINFO
CUVIDPARSERPARAMS	/usr/local/cuda/include/dynlink_nvcuvid.h	/^} CUVIDPARSERPARAMS;$/;"	t	typeref:struct:_CUVIDPARSERPARAMS
CUVIDPICPARAMS	/usr/local/cuda/include/dynlink_cuviddec.h	/^} CUVIDPICPARAMS;$/;"	t	typeref:struct:_CUVIDPICPARAMS
CUVIDPROCPARAMS	/usr/local/cuda/include/dynlink_cuviddec.h	/^} CUVIDPROCPARAMS;$/;"	t	typeref:struct:_CUVIDPROCPARAMS
CUVIDSOURCEDATAPACKET	/usr/local/cuda/include/dynlink_nvcuvid.h	/^} CUVIDSOURCEDATAPACKET;$/;"	t	typeref:struct:_CUVIDSOURCEDATAPACKET
CUVIDSOURCEPARAMS	/usr/local/cuda/include/dynlink_nvcuvid.h	/^} CUVIDSOURCEPARAMS;$/;"	t	typeref:struct:_CUVIDSOURCEPARAMS
CUVIDVC1PICPARAMS	/usr/local/cuda/include/dynlink_cuviddec.h	/^} CUVIDVC1PICPARAMS;$/;"	t	typeref:struct:_CUVIDVC1PICPARAMS
CUVIDVP8PICPARAMS	/usr/local/cuda/include/dynlink_cuviddec.h	/^} CUVIDVP8PICPARAMS;$/;"	t	typeref:struct:_CUVIDVP8PICPARAMS
CUVIDVP9PICPARAMS	/usr/local/cuda/include/dynlink_cuviddec.h	/^} CUVIDVP9PICPARAMS;$/;"	t	typeref:struct:_CUVIDVP9PICPARAMS
CUVID_FMT_EXTFORMATINFO	/usr/local/cuda/include/dynlink_nvcuvid.h	/^    CUVID_FMT_EXTFORMATINFO = 0x100             \/**< Return extended format structure (CUVIDEOFORMATEX) *\/$/;"	e	enum:__anon131
CUVID_PKT_DISCONTINUITY	/usr/local/cuda/include/dynlink_nvcuvid.h	/^    CUVID_PKT_DISCONTINUITY = 0x04    \/**< Set when a discontinuity has to be signalled  *\/$/;"	e	enum:__anon130
CUVID_PKT_ENDOFSTREAM	/usr/local/cuda/include/dynlink_nvcuvid.h	/^    CUVID_PKT_ENDOFSTREAM   = 0x01,   \/**< Set when this is the last packet for this stream  *\/$/;"	e	enum:__anon130
CUVID_PKT_TIMESTAMP	/usr/local/cuda/include/dynlink_nvcuvid.h	/^    CUVID_PKT_TIMESTAMP     = 0x02,   \/**< Timestamp is valid  *\/$/;"	e	enum:__anon130
CU_AD_FORMAT_FLOAT	/usr/local/cuda/include/cuda.h	/^    CU_AD_FORMAT_FLOAT          = 0x20  \/**< 32-bit floating point *\/$/;"	e	enum:CUarray_format_enum
CU_AD_FORMAT_FLOAT	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    CU_AD_FORMAT_FLOAT          = 0x20  \/**< 32-bit floating point *\/$/;"	e	enum:CUarray_format_enum
CU_AD_FORMAT_HALF	/usr/local/cuda/include/cuda.h	/^    CU_AD_FORMAT_HALF           = 0x10, \/**< 16-bit floating point *\/$/;"	e	enum:CUarray_format_enum
CU_AD_FORMAT_HALF	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    CU_AD_FORMAT_HALF           = 0x10, \/**< 16-bit floating point *\/$/;"	e	enum:CUarray_format_enum
CU_AD_FORMAT_SIGNED_INT16	/usr/local/cuda/include/cuda.h	/^    CU_AD_FORMAT_SIGNED_INT16   = 0x09, \/**< Signed 16-bit integers *\/$/;"	e	enum:CUarray_format_enum
CU_AD_FORMAT_SIGNED_INT16	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    CU_AD_FORMAT_SIGNED_INT16   = 0x09, \/**< Signed 16-bit integers *\/$/;"	e	enum:CUarray_format_enum
CU_AD_FORMAT_SIGNED_INT32	/usr/local/cuda/include/cuda.h	/^    CU_AD_FORMAT_SIGNED_INT32   = 0x0a, \/**< Signed 32-bit integers *\/$/;"	e	enum:CUarray_format_enum
CU_AD_FORMAT_SIGNED_INT32	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    CU_AD_FORMAT_SIGNED_INT32   = 0x0a, \/**< Signed 32-bit integers *\/$/;"	e	enum:CUarray_format_enum
CU_AD_FORMAT_SIGNED_INT8	/usr/local/cuda/include/cuda.h	/^    CU_AD_FORMAT_SIGNED_INT8    = 0x08, \/**< Signed 8-bit integers *\/$/;"	e	enum:CUarray_format_enum
CU_AD_FORMAT_SIGNED_INT8	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    CU_AD_FORMAT_SIGNED_INT8    = 0x08, \/**< Signed 8-bit integers *\/$/;"	e	enum:CUarray_format_enum
CU_AD_FORMAT_UNSIGNED_INT16	/usr/local/cuda/include/cuda.h	/^    CU_AD_FORMAT_UNSIGNED_INT16 = 0x02, \/**< Unsigned 16-bit integers *\/$/;"	e	enum:CUarray_format_enum
CU_AD_FORMAT_UNSIGNED_INT16	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    CU_AD_FORMAT_UNSIGNED_INT16 = 0x02, \/**< Unsigned 16-bit integers *\/$/;"	e	enum:CUarray_format_enum
CU_AD_FORMAT_UNSIGNED_INT32	/usr/local/cuda/include/cuda.h	/^    CU_AD_FORMAT_UNSIGNED_INT32 = 0x03, \/**< Unsigned 32-bit integers *\/$/;"	e	enum:CUarray_format_enum
CU_AD_FORMAT_UNSIGNED_INT32	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    CU_AD_FORMAT_UNSIGNED_INT32 = 0x03, \/**< Unsigned 32-bit integers *\/$/;"	e	enum:CUarray_format_enum
CU_AD_FORMAT_UNSIGNED_INT8	/usr/local/cuda/include/cuda.h	/^    CU_AD_FORMAT_UNSIGNED_INT8  = 0x01, \/**< Unsigned 8-bit integers *\/$/;"	e	enum:CUarray_format_enum
CU_AD_FORMAT_UNSIGNED_INT8	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    CU_AD_FORMAT_UNSIGNED_INT8  = 0x01, \/**< Unsigned 8-bit integers *\/$/;"	e	enum:CUarray_format_enum
CU_COMPLEX_H_	/usr/local/cuda/include/cuComplex.h	51;"	d
CU_COMPUTEMODE_DEFAULT	/usr/local/cuda/include/cuda.h	/^    CU_COMPUTEMODE_DEFAULT           = 0, \/**< Default compute mode (Multiple contexts allowed per device) *\/$/;"	e	enum:CUcomputemode_enum
CU_COMPUTEMODE_DEFAULT	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    CU_COMPUTEMODE_DEFAULT           = 0,  \/**< Default compute mode (Multiple contexts allowed per device) *\/$/;"	e	enum:CUcomputemode_enum
CU_COMPUTEMODE_EXCLUSIVE	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    CU_COMPUTEMODE_EXCLUSIVE         = 1, \/**< Compute-exclusive-thread mode (Only one context used by a single thread can be present on this device at a time) *\/$/;"	e	enum:CUcomputemode_enum
CU_COMPUTEMODE_EXCLUSIVE_PROCESS	/usr/local/cuda/include/cuda.h	/^    CU_COMPUTEMODE_EXCLUSIVE_PROCESS = 3  \/**< Compute-exclusive-process mode (Only one context used by a single process can be present on this device at a time) *\/$/;"	e	enum:CUcomputemode_enum
CU_COMPUTEMODE_EXCLUSIVE_PROCESS	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^  , CU_COMPUTEMODE_EXCLUSIVE_PROCESS = 3  \/**< Compute-exclusive-process mode (Only one context used by a single process can be present on this device at a time) *\/$/;"	e	enum:CUcomputemode_enum
CU_COMPUTEMODE_PROHIBITED	/usr/local/cuda/include/cuda.h	/^    CU_COMPUTEMODE_PROHIBITED        = 2, \/**< Compute-prohibited mode (No contexts can be created on this device at this time) *\/$/;"	e	enum:CUcomputemode_enum
CU_COMPUTEMODE_PROHIBITED	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    CU_COMPUTEMODE_PROHIBITED        = 2  \/**< Compute-prohibited mode (No contexts can be created on this device at this time) *\/$/;"	e	enum:CUcomputemode_enum
CU_CTX_BLOCKING_SYNC	/usr/local/cuda/include/cuda.h	/^    CU_CTX_BLOCKING_SYNC       = 0x04, \/**< Set blocking synchronization as default scheduling$/;"	e	enum:CUctx_flags_enum
CU_CTX_BLOCKING_SYNC	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    CU_CTX_BLOCKING_SYNC       = 0x04, \/**< Set blocking synchronization as default scheduling \\deprecated *\/$/;"	e	enum:CUctx_flags_enum
CU_CTX_FLAGS_MASK	/usr/local/cuda/include/cuda.h	/^    CU_CTX_FLAGS_MASK          = 0x1f$/;"	e	enum:CUctx_flags_enum
CU_CTX_FLAGS_MASK	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    CU_CTX_FLAGS_MASK          = 0x1f$/;"	e	enum:CUctx_flags_enum
CU_CTX_LMEM_RESIZE_TO_MAX	/usr/local/cuda/include/cuda.h	/^    CU_CTX_LMEM_RESIZE_TO_MAX  = 0x10, \/**< Keep local memory allocation after launch *\/$/;"	e	enum:CUctx_flags_enum
CU_CTX_LMEM_RESIZE_TO_MAX	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    CU_CTX_LMEM_RESIZE_TO_MAX  = 0x10, \/**< Keep local memory allocation after launch *\/$/;"	e	enum:CUctx_flags_enum
CU_CTX_MAP_HOST	/usr/local/cuda/include/cuda.h	/^    CU_CTX_MAP_HOST            = 0x08, \/**< Support mapped pinned allocations *\/$/;"	e	enum:CUctx_flags_enum
CU_CTX_MAP_HOST	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    CU_CTX_MAP_HOST            = 0x08, \/**< Support mapped pinned allocations *\/$/;"	e	enum:CUctx_flags_enum
CU_CTX_SCHED_AUTO	/usr/local/cuda/include/cuda.h	/^    CU_CTX_SCHED_AUTO          = 0x00, \/**< Automatic scheduling *\/$/;"	e	enum:CUctx_flags_enum
CU_CTX_SCHED_AUTO	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    CU_CTX_SCHED_AUTO          = 0x00, \/**< Automatic scheduling *\/$/;"	e	enum:CUctx_flags_enum
CU_CTX_SCHED_BLOCKING_SYNC	/usr/local/cuda/include/cuda.h	/^    CU_CTX_SCHED_BLOCKING_SYNC = 0x04, \/**< Set blocking synchronization as default scheduling *\/$/;"	e	enum:CUctx_flags_enum
CU_CTX_SCHED_BLOCKING_SYNC	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    CU_CTX_SCHED_BLOCKING_SYNC = 0x04, \/**< Set blocking synchronization as default scheduling *\/$/;"	e	enum:CUctx_flags_enum
CU_CTX_SCHED_MASK	/usr/local/cuda/include/cuda.h	/^    CU_CTX_SCHED_MASK          = 0x07, $/;"	e	enum:CUctx_flags_enum
CU_CTX_SCHED_MASK	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    CU_CTX_SCHED_MASK          = 0x03,$/;"	e	enum:CUctx_flags_enum
CU_CTX_SCHED_SPIN	/usr/local/cuda/include/cuda.h	/^    CU_CTX_SCHED_SPIN          = 0x01, \/**< Set spin as default scheduling *\/$/;"	e	enum:CUctx_flags_enum
CU_CTX_SCHED_SPIN	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    CU_CTX_SCHED_SPIN          = 0x01, \/**< Set spin as default scheduling *\/$/;"	e	enum:CUctx_flags_enum
CU_CTX_SCHED_YIELD	/usr/local/cuda/include/cuda.h	/^    CU_CTX_SCHED_YIELD         = 0x02, \/**< Set yield as default scheduling *\/$/;"	e	enum:CUctx_flags_enum
CU_CTX_SCHED_YIELD	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    CU_CTX_SCHED_YIELD         = 0x02, \/**< Set yield as default scheduling *\/$/;"	e	enum:CUctx_flags_enum
CU_CUBEMAP_FACE_NEGATIVE_X	/usr/local/cuda/include/cuda.h	/^    CU_CUBEMAP_FACE_NEGATIVE_X  = 0x01, \/**< Negative X face of cubemap *\/$/;"	e	enum:CUarray_cubemap_face_enum
CU_CUBEMAP_FACE_NEGATIVE_X	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    CU_CUBEMAP_FACE_NEGATIVE_X  = 0x01, \/**< Negative X face of cubemap *\/$/;"	e	enum:CUarray_cubemap_face_enum
CU_CUBEMAP_FACE_NEGATIVE_Y	/usr/local/cuda/include/cuda.h	/^    CU_CUBEMAP_FACE_NEGATIVE_Y  = 0x03, \/**< Negative Y face of cubemap *\/$/;"	e	enum:CUarray_cubemap_face_enum
CU_CUBEMAP_FACE_NEGATIVE_Y	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    CU_CUBEMAP_FACE_NEGATIVE_Y  = 0x03, \/**< Negative Y face of cubemap *\/$/;"	e	enum:CUarray_cubemap_face_enum
CU_CUBEMAP_FACE_NEGATIVE_Z	/usr/local/cuda/include/cuda.h	/^    CU_CUBEMAP_FACE_NEGATIVE_Z  = 0x05  \/**< Negative Z face of cubemap *\/$/;"	e	enum:CUarray_cubemap_face_enum
CU_CUBEMAP_FACE_NEGATIVE_Z	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    CU_CUBEMAP_FACE_NEGATIVE_Z  = 0x05  \/**< Negative Z face of cubemap *\/$/;"	e	enum:CUarray_cubemap_face_enum
CU_CUBEMAP_FACE_POSITIVE_X	/usr/local/cuda/include/cuda.h	/^    CU_CUBEMAP_FACE_POSITIVE_X  = 0x00, \/**< Positive X face of cubemap *\/$/;"	e	enum:CUarray_cubemap_face_enum
CU_CUBEMAP_FACE_POSITIVE_X	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    CU_CUBEMAP_FACE_POSITIVE_X  = 0x00, \/**< Positive X face of cubemap *\/$/;"	e	enum:CUarray_cubemap_face_enum
CU_CUBEMAP_FACE_POSITIVE_Y	/usr/local/cuda/include/cuda.h	/^    CU_CUBEMAP_FACE_POSITIVE_Y  = 0x02, \/**< Positive Y face of cubemap *\/$/;"	e	enum:CUarray_cubemap_face_enum
CU_CUBEMAP_FACE_POSITIVE_Y	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    CU_CUBEMAP_FACE_POSITIVE_Y  = 0x02, \/**< Positive Y face of cubemap *\/$/;"	e	enum:CUarray_cubemap_face_enum
CU_CUBEMAP_FACE_POSITIVE_Z	/usr/local/cuda/include/cuda.h	/^    CU_CUBEMAP_FACE_POSITIVE_Z  = 0x04, \/**< Positive Z face of cubemap *\/$/;"	e	enum:CUarray_cubemap_face_enum
CU_CUBEMAP_FACE_POSITIVE_Z	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    CU_CUBEMAP_FACE_POSITIVE_Z  = 0x04, \/**< Positive Z face of cubemap *\/$/;"	e	enum:CUarray_cubemap_face_enum
CU_DEVICE_ATTRIBUTE_ASYNC_ENGINE_COUNT	/usr/local/cuda/include/cuda.h	/^    CU_DEVICE_ATTRIBUTE_ASYNC_ENGINE_COUNT = 40,                \/**< Number of asynchronous engines *\/$/;"	e	enum:CUdevice_attribute_enum
CU_DEVICE_ATTRIBUTE_ASYNC_ENGINE_COUNT	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    CU_DEVICE_ATTRIBUTE_ASYNC_ENGINE_COUNT = 40,                \/**< Number of asynchronous engines *\/$/;"	e	enum:CUdevice_attribute_enum
CU_DEVICE_ATTRIBUTE_CAN_MAP_HOST_MEMORY	/usr/local/cuda/include/cuda.h	/^    CU_DEVICE_ATTRIBUTE_CAN_MAP_HOST_MEMORY = 19,               \/**< Device can map host memory into CUDA address space *\/$/;"	e	enum:CUdevice_attribute_enum
CU_DEVICE_ATTRIBUTE_CAN_MAP_HOST_MEMORY	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    CU_DEVICE_ATTRIBUTE_CAN_MAP_HOST_MEMORY = 19,               \/**< Device can map host memory into CUDA address space *\/$/;"	e	enum:CUdevice_attribute_enum
CU_DEVICE_ATTRIBUTE_CAN_TEX2D_GATHER	/usr/local/cuda/include/cuda.h	/^    CU_DEVICE_ATTRIBUTE_CAN_TEX2D_GATHER = 44,                  \/**< Deprecated, do not use. *\/$/;"	e	enum:CUdevice_attribute_enum
CU_DEVICE_ATTRIBUTE_CAN_USE_64_BIT_STREAM_MEM_OPS	/usr/local/cuda/include/cuda.h	/^    CU_DEVICE_ATTRIBUTE_CAN_USE_64_BIT_STREAM_MEM_OPS = 93,     \/**< 64-bit operations are supported in ::cuStreamBatchMemOp and related APIs. *\/$/;"	e	enum:CUdevice_attribute_enum
CU_DEVICE_ATTRIBUTE_CAN_USE_HOST_POINTER_FOR_REGISTERED_MEM	/usr/local/cuda/include/cuda.h	/^    CU_DEVICE_ATTRIBUTE_CAN_USE_HOST_POINTER_FOR_REGISTERED_MEM = 91, \/**< Device can access host registered memory at the same virtual address as the CPU *\/$/;"	e	enum:CUdevice_attribute_enum
CU_DEVICE_ATTRIBUTE_CAN_USE_STREAM_MEM_OPS	/usr/local/cuda/include/cuda.h	/^    CU_DEVICE_ATTRIBUTE_CAN_USE_STREAM_MEM_OPS = 92,            \/**< ::cuStreamBatchMemOp and related APIs are supported. *\/$/;"	e	enum:CUdevice_attribute_enum
CU_DEVICE_ATTRIBUTE_CAN_USE_STREAM_WAIT_VALUE_NOR	/usr/local/cuda/include/cuda.h	/^    CU_DEVICE_ATTRIBUTE_CAN_USE_STREAM_WAIT_VALUE_NOR = 94,     \/**< ::CU_STREAM_WAIT_VALUE_NOR is supported. *\/$/;"	e	enum:CUdevice_attribute_enum
CU_DEVICE_ATTRIBUTE_CLOCK_RATE	/usr/local/cuda/include/cuda.h	/^    CU_DEVICE_ATTRIBUTE_CLOCK_RATE = 13,                        \/**< Typical clock frequency in kilohertz *\/$/;"	e	enum:CUdevice_attribute_enum
CU_DEVICE_ATTRIBUTE_CLOCK_RATE	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    CU_DEVICE_ATTRIBUTE_CLOCK_RATE = 13,                        \/**< Peak clock frequency in kilohertz *\/$/;"	e	enum:CUdevice_attribute_enum
CU_DEVICE_ATTRIBUTE_COMPUTE_CAPABILITY_MAJOR	/usr/local/cuda/include/cuda.h	/^    CU_DEVICE_ATTRIBUTE_COMPUTE_CAPABILITY_MAJOR = 75,          \/**< Major compute capability version number *\/     $/;"	e	enum:CUdevice_attribute_enum
CU_DEVICE_ATTRIBUTE_COMPUTE_CAPABILITY_MINOR	/usr/local/cuda/include/cuda.h	/^    CU_DEVICE_ATTRIBUTE_COMPUTE_CAPABILITY_MINOR = 76,          \/**< Minor compute capability version number *\/$/;"	e	enum:CUdevice_attribute_enum
CU_DEVICE_ATTRIBUTE_COMPUTE_MODE	/usr/local/cuda/include/cuda.h	/^    CU_DEVICE_ATTRIBUTE_COMPUTE_MODE = 20,                      \/**< Compute mode (See ::CUcomputemode for details) *\/$/;"	e	enum:CUdevice_attribute_enum
CU_DEVICE_ATTRIBUTE_COMPUTE_MODE	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    CU_DEVICE_ATTRIBUTE_COMPUTE_MODE = 20,                      \/**< Compute mode (See ::CUcomputemode for details) *\/$/;"	e	enum:CUdevice_attribute_enum
CU_DEVICE_ATTRIBUTE_COMPUTE_PREEMPTION_SUPPORTED	/usr/local/cuda/include/cuda.h	/^    CU_DEVICE_ATTRIBUTE_COMPUTE_PREEMPTION_SUPPORTED = 90,      \/**< Device supports compute preemption. *\/$/;"	e	enum:CUdevice_attribute_enum
CU_DEVICE_ATTRIBUTE_CONCURRENT_KERNELS	/usr/local/cuda/include/cuda.h	/^    CU_DEVICE_ATTRIBUTE_CONCURRENT_KERNELS = 31,                \/**< Device can possibly execute multiple kernels concurrently *\/$/;"	e	enum:CUdevice_attribute_enum
CU_DEVICE_ATTRIBUTE_CONCURRENT_KERNELS	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    CU_DEVICE_ATTRIBUTE_CONCURRENT_KERNELS = 31,                \/**< Device can possibly execute multiple kernels concurrently *\/$/;"	e	enum:CUdevice_attribute_enum
CU_DEVICE_ATTRIBUTE_CONCURRENT_MANAGED_ACCESS	/usr/local/cuda/include/cuda.h	/^    CU_DEVICE_ATTRIBUTE_CONCURRENT_MANAGED_ACCESS = 89,         \/**< Device can coherently access managed memory concurrently with the CPU *\/$/;"	e	enum:CUdevice_attribute_enum
CU_DEVICE_ATTRIBUTE_COOPERATIVE_LAUNCH	/usr/local/cuda/include/cuda.h	/^    CU_DEVICE_ATTRIBUTE_COOPERATIVE_LAUNCH = 95,                \/**< Device supports launching cooperative kernels via ::cuLaunchCooperativeKernel *\/$/;"	e	enum:CUdevice_attribute_enum
CU_DEVICE_ATTRIBUTE_COOPERATIVE_MULTI_DEVICE_LAUNCH	/usr/local/cuda/include/cuda.h	/^    CU_DEVICE_ATTRIBUTE_COOPERATIVE_MULTI_DEVICE_LAUNCH = 96,   \/**< Device can participate in cooperative kernels launched via ::cuLaunchCooperativeKernelMultiDevice *\/$/;"	e	enum:CUdevice_attribute_enum
CU_DEVICE_ATTRIBUTE_ECC_ENABLED	/usr/local/cuda/include/cuda.h	/^    CU_DEVICE_ATTRIBUTE_ECC_ENABLED = 32,                       \/**< Device has ECC support enabled *\/$/;"	e	enum:CUdevice_attribute_enum
CU_DEVICE_ATTRIBUTE_ECC_ENABLED	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    CU_DEVICE_ATTRIBUTE_ECC_ENABLED = 32,                       \/**< Device has ECC support enabled *\/$/;"	e	enum:CUdevice_attribute_enum
CU_DEVICE_ATTRIBUTE_GLOBAL_L1_CACHE_SUPPORTED	/usr/local/cuda/include/cuda.h	/^    CU_DEVICE_ATTRIBUTE_GLOBAL_L1_CACHE_SUPPORTED = 79,         \/**< Device supports caching globals in L1 *\/$/;"	e	enum:CUdevice_attribute_enum
CU_DEVICE_ATTRIBUTE_GLOBAL_MEMORY_BUS_WIDTH	/usr/local/cuda/include/cuda.h	/^    CU_DEVICE_ATTRIBUTE_GLOBAL_MEMORY_BUS_WIDTH = 37,           \/**< Global memory bus width in bits *\/$/;"	e	enum:CUdevice_attribute_enum
CU_DEVICE_ATTRIBUTE_GLOBAL_MEMORY_BUS_WIDTH	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    CU_DEVICE_ATTRIBUTE_GLOBAL_MEMORY_BUS_WIDTH = 37,           \/**< Global memory bus width in bits *\/$/;"	e	enum:CUdevice_attribute_enum
CU_DEVICE_ATTRIBUTE_GPU_OVERLAP	/usr/local/cuda/include/cuda.h	/^    CU_DEVICE_ATTRIBUTE_GPU_OVERLAP = 15,                       \/**< Device can possibly copy memory and execute a kernel concurrently. Deprecated. Use instead CU_DEVICE_ATTRIBUTE_ASYNC_ENGINE_COUNT. *\/$/;"	e	enum:CUdevice_attribute_enum
CU_DEVICE_ATTRIBUTE_GPU_OVERLAP	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    CU_DEVICE_ATTRIBUTE_GPU_OVERLAP = 15,                       \/**< Device can possibly copy memory and execute a kernel concurrently *\/$/;"	e	enum:CUdevice_attribute_enum
CU_DEVICE_ATTRIBUTE_HOST_NATIVE_ATOMIC_SUPPORTED	/usr/local/cuda/include/cuda.h	/^    CU_DEVICE_ATTRIBUTE_HOST_NATIVE_ATOMIC_SUPPORTED = 86,       \/**< Link between the device and the host supports native atomic operations (this is a placeholder attribute, and is not supported on any current hardware)*\/$/;"	e	enum:CUdevice_attribute_enum
CU_DEVICE_ATTRIBUTE_INTEGRATED	/usr/local/cuda/include/cuda.h	/^    CU_DEVICE_ATTRIBUTE_INTEGRATED = 18,                        \/**< Device is integrated with host memory *\/$/;"	e	enum:CUdevice_attribute_enum
CU_DEVICE_ATTRIBUTE_INTEGRATED	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    CU_DEVICE_ATTRIBUTE_INTEGRATED = 18,                        \/**< Device is integrated with host memory *\/$/;"	e	enum:CUdevice_attribute_enum
CU_DEVICE_ATTRIBUTE_KERNEL_EXEC_TIMEOUT	/usr/local/cuda/include/cuda.h	/^    CU_DEVICE_ATTRIBUTE_KERNEL_EXEC_TIMEOUT = 17,               \/**< Specifies whether there is a run time limit on kernels *\/$/;"	e	enum:CUdevice_attribute_enum
CU_DEVICE_ATTRIBUTE_KERNEL_EXEC_TIMEOUT	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    CU_DEVICE_ATTRIBUTE_KERNEL_EXEC_TIMEOUT = 17,               \/**< Specifies whether there is a run time limit on kernels *\/$/;"	e	enum:CUdevice_attribute_enum
CU_DEVICE_ATTRIBUTE_L2_CACHE_SIZE	/usr/local/cuda/include/cuda.h	/^    CU_DEVICE_ATTRIBUTE_L2_CACHE_SIZE = 38,                     \/**< Size of L2 cache in bytes *\/$/;"	e	enum:CUdevice_attribute_enum
CU_DEVICE_ATTRIBUTE_L2_CACHE_SIZE	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    CU_DEVICE_ATTRIBUTE_L2_CACHE_SIZE = 38,                     \/**< Size of L2 cache in bytes *\/$/;"	e	enum:CUdevice_attribute_enum
CU_DEVICE_ATTRIBUTE_LOCAL_L1_CACHE_SUPPORTED	/usr/local/cuda/include/cuda.h	/^    CU_DEVICE_ATTRIBUTE_LOCAL_L1_CACHE_SUPPORTED = 80,          \/**< Device supports caching locals in L1 *\/$/;"	e	enum:CUdevice_attribute_enum
CU_DEVICE_ATTRIBUTE_MANAGED_MEMORY	/usr/local/cuda/include/cuda.h	/^    CU_DEVICE_ATTRIBUTE_MANAGED_MEMORY = 83,                    \/**< Device can allocate managed memory on this system *\/$/;"	e	enum:CUdevice_attribute_enum
CU_DEVICE_ATTRIBUTE_MAX	/usr/local/cuda/include/cuda.h	/^    CU_DEVICE_ATTRIBUTE_MAX$/;"	e	enum:CUdevice_attribute_enum
CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE1D_LAYERED_LAYERS	/usr/local/cuda/include/cuda.h	/^    CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE1D_LAYERED_LAYERS = 62,  \/**< Maximum layers in a 1D layered surface *\/$/;"	e	enum:CUdevice_attribute_enum
CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE1D_LAYERED_WIDTH	/usr/local/cuda/include/cuda.h	/^    CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE1D_LAYERED_WIDTH = 61,   \/**< Maximum 1D layered surface width *\/$/;"	e	enum:CUdevice_attribute_enum
CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE1D_WIDTH	/usr/local/cuda/include/cuda.h	/^    CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE1D_WIDTH = 55,           \/**< Maximum 1D surface width *\/$/;"	e	enum:CUdevice_attribute_enum
CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE2D_HEIGHT	/usr/local/cuda/include/cuda.h	/^    CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE2D_HEIGHT = 57,          \/**< Maximum 2D surface height *\/$/;"	e	enum:CUdevice_attribute_enum
CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE2D_LAYERED_HEIGHT	/usr/local/cuda/include/cuda.h	/^    CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE2D_LAYERED_HEIGHT = 64,  \/**< Maximum 2D layered surface height *\/$/;"	e	enum:CUdevice_attribute_enum
CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE2D_LAYERED_LAYERS	/usr/local/cuda/include/cuda.h	/^    CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE2D_LAYERED_LAYERS = 65,  \/**< Maximum layers in a 2D layered surface *\/$/;"	e	enum:CUdevice_attribute_enum
CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE2D_LAYERED_WIDTH	/usr/local/cuda/include/cuda.h	/^    CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE2D_LAYERED_WIDTH = 63,   \/**< Maximum 2D layered surface width *\/$/;"	e	enum:CUdevice_attribute_enum
CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE2D_WIDTH	/usr/local/cuda/include/cuda.h	/^    CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE2D_WIDTH = 56,           \/**< Maximum 2D surface width *\/$/;"	e	enum:CUdevice_attribute_enum
CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE3D_DEPTH	/usr/local/cuda/include/cuda.h	/^    CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE3D_DEPTH = 60,           \/**< Maximum 3D surface depth *\/$/;"	e	enum:CUdevice_attribute_enum
CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE3D_HEIGHT	/usr/local/cuda/include/cuda.h	/^    CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE3D_HEIGHT = 59,          \/**< Maximum 3D surface height *\/$/;"	e	enum:CUdevice_attribute_enum
CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE3D_WIDTH	/usr/local/cuda/include/cuda.h	/^    CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE3D_WIDTH = 58,           \/**< Maximum 3D surface width *\/$/;"	e	enum:CUdevice_attribute_enum
CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACECUBEMAP_LAYERED_LAYERS	/usr/local/cuda/include/cuda.h	/^    CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACECUBEMAP_LAYERED_LAYERS = 68, \/**< Maximum layers in a cubemap layered surface *\/$/;"	e	enum:CUdevice_attribute_enum
CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACECUBEMAP_LAYERED_WIDTH	/usr/local/cuda/include/cuda.h	/^    CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACECUBEMAP_LAYERED_WIDTH = 67,  \/**< Maximum cubemap layered surface width *\/$/;"	e	enum:CUdevice_attribute_enum
CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACECUBEMAP_WIDTH	/usr/local/cuda/include/cuda.h	/^    CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACECUBEMAP_WIDTH = 66,      \/**< Maximum cubemap surface width *\/$/;"	e	enum:CUdevice_attribute_enum
CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE1D_LAYERED_LAYERS	/usr/local/cuda/include/cuda.h	/^    CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE1D_LAYERED_LAYERS = 43,  \/**< Maximum layers in a 1D layered texture *\/$/;"	e	enum:CUdevice_attribute_enum
CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE1D_LAYERED_LAYERS	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE1D_LAYERED_LAYERS = 43   \/**< Maximum layers in a 1D layered texture *\/$/;"	e	enum:CUdevice_attribute_enum
CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE1D_LAYERED_WIDTH	/usr/local/cuda/include/cuda.h	/^    CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE1D_LAYERED_WIDTH = 42,   \/**< Maximum 1D layered texture width *\/$/;"	e	enum:CUdevice_attribute_enum
CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE1D_LAYERED_WIDTH	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE1D_LAYERED_WIDTH = 42,   \/**< Maximum 1D layered texture width *\/$/;"	e	enum:CUdevice_attribute_enum
CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE1D_LINEAR_WIDTH	/usr/local/cuda/include/cuda.h	/^    CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE1D_LINEAR_WIDTH = 69,    \/**< Maximum 1D linear texture width *\/$/;"	e	enum:CUdevice_attribute_enum
CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE1D_MIPMAPPED_WIDTH	/usr/local/cuda/include/cuda.h	/^    CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE1D_MIPMAPPED_WIDTH = 77, \/**< Maximum mipmapped 1D texture width *\/$/;"	e	enum:CUdevice_attribute_enum
CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE1D_WIDTH	/usr/local/cuda/include/cuda.h	/^    CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE1D_WIDTH = 21,           \/**< Maximum 1D texture width *\/$/;"	e	enum:CUdevice_attribute_enum
CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE1D_WIDTH	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE1D_WIDTH = 21,           \/**< Maximum 1D texture width *\/$/;"	e	enum:CUdevice_attribute_enum
CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_ARRAY_HEIGHT	/usr/local/cuda/include/cuda.h	/^    CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_ARRAY_HEIGHT = 28,    \/**< Deprecated, use CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_LAYERED_HEIGHT *\/$/;"	e	enum:CUdevice_attribute_enum
CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_ARRAY_HEIGHT	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_ARRAY_HEIGHT = 28,    \/**< Maximum texture array height *\/$/;"	e	enum:CUdevice_attribute_enum
CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_ARRAY_NUMSLICES	/usr/local/cuda/include/cuda.h	/^    CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_ARRAY_NUMSLICES = 29, \/**< Deprecated, use CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_LAYERED_LAYERS *\/$/;"	e	enum:CUdevice_attribute_enum
CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_ARRAY_NUMSLICES	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_ARRAY_NUMSLICES = 29, \/**< Maximum slices in a texture array *\/$/;"	e	enum:CUdevice_attribute_enum
CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_ARRAY_WIDTH	/usr/local/cuda/include/cuda.h	/^    CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_ARRAY_WIDTH = 27,     \/**< Deprecated, use CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_LAYERED_WIDTH *\/$/;"	e	enum:CUdevice_attribute_enum
CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_ARRAY_WIDTH	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_ARRAY_WIDTH = 27,     \/**< Maximum texture array width *\/$/;"	e	enum:CUdevice_attribute_enum
CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_GATHER_HEIGHT	/usr/local/cuda/include/cuda.h	/^    CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_GATHER_HEIGHT = 46,   \/**< Maximum 2D texture height if CUDA_ARRAY3D_TEXTURE_GATHER is set *\/$/;"	e	enum:CUdevice_attribute_enum
CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_GATHER_WIDTH	/usr/local/cuda/include/cuda.h	/^    CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_GATHER_WIDTH = 45,    \/**< Maximum 2D texture width if CUDA_ARRAY3D_TEXTURE_GATHER is set *\/$/;"	e	enum:CUdevice_attribute_enum
CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_HEIGHT	/usr/local/cuda/include/cuda.h	/^    CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_HEIGHT = 23,          \/**< Maximum 2D texture height *\/$/;"	e	enum:CUdevice_attribute_enum
CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_HEIGHT	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_HEIGHT = 23,          \/**< Maximum 2D texture height *\/$/;"	e	enum:CUdevice_attribute_enum
CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_LAYERED_HEIGHT	/usr/local/cuda/include/cuda.h	/^    CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_LAYERED_HEIGHT = 28,  \/**< Maximum 2D layered texture height *\/$/;"	e	enum:CUdevice_attribute_enum
CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_LAYERED_LAYERS	/usr/local/cuda/include/cuda.h	/^    CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_LAYERED_LAYERS = 29,  \/**< Maximum layers in a 2D layered texture *\/$/;"	e	enum:CUdevice_attribute_enum
CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_LAYERED_WIDTH	/usr/local/cuda/include/cuda.h	/^    CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_LAYERED_WIDTH = 27,   \/**< Maximum 2D layered texture width *\/$/;"	e	enum:CUdevice_attribute_enum
CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_LINEAR_HEIGHT	/usr/local/cuda/include/cuda.h	/^    CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_LINEAR_HEIGHT = 71,   \/**< Maximum 2D linear texture height *\/$/;"	e	enum:CUdevice_attribute_enum
CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_LINEAR_PITCH	/usr/local/cuda/include/cuda.h	/^    CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_LINEAR_PITCH = 72,    \/**< Maximum 2D linear texture pitch in bytes *\/$/;"	e	enum:CUdevice_attribute_enum
CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_LINEAR_WIDTH	/usr/local/cuda/include/cuda.h	/^    CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_LINEAR_WIDTH = 70,    \/**< Maximum 2D linear texture width *\/$/;"	e	enum:CUdevice_attribute_enum
CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_MIPMAPPED_HEIGHT	/usr/local/cuda/include/cuda.h	/^    CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_MIPMAPPED_HEIGHT = 74,\/**< Maximum mipmapped 2D texture height *\/$/;"	e	enum:CUdevice_attribute_enum
CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_MIPMAPPED_WIDTH	/usr/local/cuda/include/cuda.h	/^    CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_MIPMAPPED_WIDTH = 73, \/**< Maximum mipmapped 2D texture width *\/$/;"	e	enum:CUdevice_attribute_enum
CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_WIDTH	/usr/local/cuda/include/cuda.h	/^    CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_WIDTH = 22,           \/**< Maximum 2D texture width *\/$/;"	e	enum:CUdevice_attribute_enum
CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_WIDTH	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_WIDTH = 22,           \/**< Maximum 2D texture width *\/$/;"	e	enum:CUdevice_attribute_enum
CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE3D_DEPTH	/usr/local/cuda/include/cuda.h	/^    CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE3D_DEPTH = 26,           \/**< Maximum 3D texture depth *\/$/;"	e	enum:CUdevice_attribute_enum
CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE3D_DEPTH	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE3D_DEPTH = 26,           \/**< Maximum 3D texture depth *\/$/;"	e	enum:CUdevice_attribute_enum
CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE3D_DEPTH_ALTERNATE	/usr/local/cuda/include/cuda.h	/^    CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE3D_DEPTH_ALTERNATE = 49, \/**< Alternate maximum 3D texture depth *\/$/;"	e	enum:CUdevice_attribute_enum
CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE3D_HEIGHT	/usr/local/cuda/include/cuda.h	/^    CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE3D_HEIGHT = 25,          \/**< Maximum 3D texture height *\/$/;"	e	enum:CUdevice_attribute_enum
CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE3D_HEIGHT	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE3D_HEIGHT = 25,          \/**< Maximum 3D texture height *\/$/;"	e	enum:CUdevice_attribute_enum
CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE3D_HEIGHT_ALTERNATE	/usr/local/cuda/include/cuda.h	/^    CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE3D_HEIGHT_ALTERNATE = 48,\/**< Alternate maximum 3D texture height *\/$/;"	e	enum:CUdevice_attribute_enum
CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE3D_WIDTH	/usr/local/cuda/include/cuda.h	/^    CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE3D_WIDTH = 24,           \/**< Maximum 3D texture width *\/$/;"	e	enum:CUdevice_attribute_enum
CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE3D_WIDTH	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE3D_WIDTH = 24,           \/**< Maximum 3D texture width *\/$/;"	e	enum:CUdevice_attribute_enum
CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE3D_WIDTH_ALTERNATE	/usr/local/cuda/include/cuda.h	/^    CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE3D_WIDTH_ALTERNATE = 47, \/**< Alternate maximum 3D texture width *\/$/;"	e	enum:CUdevice_attribute_enum
CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURECUBEMAP_LAYERED_LAYERS	/usr/local/cuda/include/cuda.h	/^    CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURECUBEMAP_LAYERED_LAYERS = 54, \/**< Maximum layers in a cubemap layered texture *\/$/;"	e	enum:CUdevice_attribute_enum
CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURECUBEMAP_LAYERED_WIDTH	/usr/local/cuda/include/cuda.h	/^    CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURECUBEMAP_LAYERED_WIDTH = 53,  \/**< Maximum cubemap layered texture width\/height *\/$/;"	e	enum:CUdevice_attribute_enum
CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURECUBEMAP_WIDTH	/usr/local/cuda/include/cuda.h	/^    CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURECUBEMAP_WIDTH = 52,      \/**< Maximum cubemap texture width\/height *\/$/;"	e	enum:CUdevice_attribute_enum
CU_DEVICE_ATTRIBUTE_MAX_BLOCK_DIM_X	/usr/local/cuda/include/cuda.h	/^    CU_DEVICE_ATTRIBUTE_MAX_BLOCK_DIM_X = 2,                    \/**< Maximum block dimension X *\/$/;"	e	enum:CUdevice_attribute_enum
CU_DEVICE_ATTRIBUTE_MAX_BLOCK_DIM_X	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    CU_DEVICE_ATTRIBUTE_MAX_BLOCK_DIM_X = 2,                    \/**< Maximum block dimension X *\/$/;"	e	enum:CUdevice_attribute_enum
CU_DEVICE_ATTRIBUTE_MAX_BLOCK_DIM_Y	/usr/local/cuda/include/cuda.h	/^    CU_DEVICE_ATTRIBUTE_MAX_BLOCK_DIM_Y = 3,                    \/**< Maximum block dimension Y *\/$/;"	e	enum:CUdevice_attribute_enum
CU_DEVICE_ATTRIBUTE_MAX_BLOCK_DIM_Y	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    CU_DEVICE_ATTRIBUTE_MAX_BLOCK_DIM_Y = 3,                    \/**< Maximum block dimension Y *\/$/;"	e	enum:CUdevice_attribute_enum
CU_DEVICE_ATTRIBUTE_MAX_BLOCK_DIM_Z	/usr/local/cuda/include/cuda.h	/^    CU_DEVICE_ATTRIBUTE_MAX_BLOCK_DIM_Z = 4,                    \/**< Maximum block dimension Z *\/$/;"	e	enum:CUdevice_attribute_enum
CU_DEVICE_ATTRIBUTE_MAX_BLOCK_DIM_Z	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    CU_DEVICE_ATTRIBUTE_MAX_BLOCK_DIM_Z = 4,                    \/**< Maximum block dimension Z *\/$/;"	e	enum:CUdevice_attribute_enum
CU_DEVICE_ATTRIBUTE_MAX_GRID_DIM_X	/usr/local/cuda/include/cuda.h	/^    CU_DEVICE_ATTRIBUTE_MAX_GRID_DIM_X = 5,                     \/**< Maximum grid dimension X *\/$/;"	e	enum:CUdevice_attribute_enum
CU_DEVICE_ATTRIBUTE_MAX_GRID_DIM_X	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    CU_DEVICE_ATTRIBUTE_MAX_GRID_DIM_X = 5,                     \/**< Maximum grid dimension X *\/$/;"	e	enum:CUdevice_attribute_enum
CU_DEVICE_ATTRIBUTE_MAX_GRID_DIM_Y	/usr/local/cuda/include/cuda.h	/^    CU_DEVICE_ATTRIBUTE_MAX_GRID_DIM_Y = 6,                     \/**< Maximum grid dimension Y *\/$/;"	e	enum:CUdevice_attribute_enum
CU_DEVICE_ATTRIBUTE_MAX_GRID_DIM_Y	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    CU_DEVICE_ATTRIBUTE_MAX_GRID_DIM_Y = 6,                     \/**< Maximum grid dimension Y *\/$/;"	e	enum:CUdevice_attribute_enum
CU_DEVICE_ATTRIBUTE_MAX_GRID_DIM_Z	/usr/local/cuda/include/cuda.h	/^    CU_DEVICE_ATTRIBUTE_MAX_GRID_DIM_Z = 7,                     \/**< Maximum grid dimension Z *\/$/;"	e	enum:CUdevice_attribute_enum
CU_DEVICE_ATTRIBUTE_MAX_GRID_DIM_Z	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    CU_DEVICE_ATTRIBUTE_MAX_GRID_DIM_Z = 7,                     \/**< Maximum grid dimension Z *\/$/;"	e	enum:CUdevice_attribute_enum
CU_DEVICE_ATTRIBUTE_MAX_PITCH	/usr/local/cuda/include/cuda.h	/^    CU_DEVICE_ATTRIBUTE_MAX_PITCH = 11,                         \/**< Maximum pitch in bytes allowed by memory copies *\/$/;"	e	enum:CUdevice_attribute_enum
CU_DEVICE_ATTRIBUTE_MAX_PITCH	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    CU_DEVICE_ATTRIBUTE_MAX_PITCH = 11,                         \/**< Maximum pitch in bytes allowed by memory copies *\/$/;"	e	enum:CUdevice_attribute_enum
CU_DEVICE_ATTRIBUTE_MAX_REGISTERS_PER_BLOCK	/usr/local/cuda/include/cuda.h	/^    CU_DEVICE_ATTRIBUTE_MAX_REGISTERS_PER_BLOCK = 12,           \/**< Maximum number of 32-bit registers available per block *\/$/;"	e	enum:CUdevice_attribute_enum
CU_DEVICE_ATTRIBUTE_MAX_REGISTERS_PER_BLOCK	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    CU_DEVICE_ATTRIBUTE_MAX_REGISTERS_PER_BLOCK = 12,           \/**< Maximum number of 32-bit registers available per block *\/$/;"	e	enum:CUdevice_attribute_enum
CU_DEVICE_ATTRIBUTE_MAX_REGISTERS_PER_MULTIPROCESSOR	/usr/local/cuda/include/cuda.h	/^    CU_DEVICE_ATTRIBUTE_MAX_REGISTERS_PER_MULTIPROCESSOR = 82,  \/**< Maximum number of 32-bit registers available per multiprocessor *\/$/;"	e	enum:CUdevice_attribute_enum
CU_DEVICE_ATTRIBUTE_MAX_SHARED_MEMORY_PER_BLOCK	/usr/local/cuda/include/cuda.h	/^    CU_DEVICE_ATTRIBUTE_MAX_SHARED_MEMORY_PER_BLOCK = 8,        \/**< Maximum shared memory available per block in bytes *\/$/;"	e	enum:CUdevice_attribute_enum
CU_DEVICE_ATTRIBUTE_MAX_SHARED_MEMORY_PER_BLOCK	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    CU_DEVICE_ATTRIBUTE_MAX_SHARED_MEMORY_PER_BLOCK = 8,        \/**< Maximum shared memory available per block in bytes *\/$/;"	e	enum:CUdevice_attribute_enum
CU_DEVICE_ATTRIBUTE_MAX_SHARED_MEMORY_PER_BLOCK_OPTIN	/usr/local/cuda/include/cuda.h	/^    CU_DEVICE_ATTRIBUTE_MAX_SHARED_MEMORY_PER_BLOCK_OPTIN = 97, \/**< Maximum optin shared memory per block *\/$/;"	e	enum:CUdevice_attribute_enum
CU_DEVICE_ATTRIBUTE_MAX_SHARED_MEMORY_PER_MULTIPROCESSOR	/usr/local/cuda/include/cuda.h	/^    CU_DEVICE_ATTRIBUTE_MAX_SHARED_MEMORY_PER_MULTIPROCESSOR = 81,  \/**< Maximum shared memory available per multiprocessor in bytes *\/$/;"	e	enum:CUdevice_attribute_enum
CU_DEVICE_ATTRIBUTE_MAX_THREADS_PER_BLOCK	/usr/local/cuda/include/cuda.h	/^    CU_DEVICE_ATTRIBUTE_MAX_THREADS_PER_BLOCK = 1,              \/**< Maximum number of threads per block *\/$/;"	e	enum:CUdevice_attribute_enum
CU_DEVICE_ATTRIBUTE_MAX_THREADS_PER_BLOCK	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    CU_DEVICE_ATTRIBUTE_MAX_THREADS_PER_BLOCK = 1,              \/**< Maximum number of threads per block *\/$/;"	e	enum:CUdevice_attribute_enum
CU_DEVICE_ATTRIBUTE_MAX_THREADS_PER_MULTIPROCESSOR	/usr/local/cuda/include/cuda.h	/^    CU_DEVICE_ATTRIBUTE_MAX_THREADS_PER_MULTIPROCESSOR = 39,    \/**< Maximum resident threads per multiprocessor *\/$/;"	e	enum:CUdevice_attribute_enum
CU_DEVICE_ATTRIBUTE_MAX_THREADS_PER_MULTIPROCESSOR	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    CU_DEVICE_ATTRIBUTE_MAX_THREADS_PER_MULTIPROCESSOR = 39,    \/**< Maximum resident threads per multiprocessor *\/$/;"	e	enum:CUdevice_attribute_enum
CU_DEVICE_ATTRIBUTE_MEMORY_CLOCK_RATE	/usr/local/cuda/include/cuda.h	/^    CU_DEVICE_ATTRIBUTE_MEMORY_CLOCK_RATE = 36,                 \/**< Peak memory clock frequency in kilohertz *\/$/;"	e	enum:CUdevice_attribute_enum
CU_DEVICE_ATTRIBUTE_MEMORY_CLOCK_RATE	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^  , CU_DEVICE_ATTRIBUTE_MEMORY_CLOCK_RATE = 36,                 \/**< Peak memory clock frequency in kilohertz *\/$/;"	e	enum:CUdevice_attribute_enum
CU_DEVICE_ATTRIBUTE_MULTIPROCESSOR_COUNT	/usr/local/cuda/include/cuda.h	/^    CU_DEVICE_ATTRIBUTE_MULTIPROCESSOR_COUNT = 16,              \/**< Number of multiprocessors on device *\/$/;"	e	enum:CUdevice_attribute_enum
CU_DEVICE_ATTRIBUTE_MULTIPROCESSOR_COUNT	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    CU_DEVICE_ATTRIBUTE_MULTIPROCESSOR_COUNT = 16,              \/**< Number of multiprocessors on device *\/$/;"	e	enum:CUdevice_attribute_enum
CU_DEVICE_ATTRIBUTE_MULTI_GPU_BOARD	/usr/local/cuda/include/cuda.h	/^    CU_DEVICE_ATTRIBUTE_MULTI_GPU_BOARD = 84,                    \/**< Device is on a multi-GPU board *\/ $/;"	e	enum:CUdevice_attribute_enum
CU_DEVICE_ATTRIBUTE_MULTI_GPU_BOARD_GROUP_ID	/usr/local/cuda/include/cuda.h	/^    CU_DEVICE_ATTRIBUTE_MULTI_GPU_BOARD_GROUP_ID = 85,           \/**< Unique id for a group of devices on the same multi-GPU board *\/$/;"	e	enum:CUdevice_attribute_enum
CU_DEVICE_ATTRIBUTE_PAGEABLE_MEMORY_ACCESS	/usr/local/cuda/include/cuda.h	/^    CU_DEVICE_ATTRIBUTE_PAGEABLE_MEMORY_ACCESS = 88,            \/**< Device supports coherently accessing pageable memory without calling cudaHostRegister on it *\/$/;"	e	enum:CUdevice_attribute_enum
CU_DEVICE_ATTRIBUTE_PCI_BUS_ID	/usr/local/cuda/include/cuda.h	/^    CU_DEVICE_ATTRIBUTE_PCI_BUS_ID = 33,                        \/**< PCI bus ID of the device *\/$/;"	e	enum:CUdevice_attribute_enum
CU_DEVICE_ATTRIBUTE_PCI_BUS_ID	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    CU_DEVICE_ATTRIBUTE_PCI_BUS_ID = 33,                        \/**< PCI bus ID of the device *\/$/;"	e	enum:CUdevice_attribute_enum
CU_DEVICE_ATTRIBUTE_PCI_DEVICE_ID	/usr/local/cuda/include/cuda.h	/^    CU_DEVICE_ATTRIBUTE_PCI_DEVICE_ID = 34,                     \/**< PCI device ID of the device *\/$/;"	e	enum:CUdevice_attribute_enum
CU_DEVICE_ATTRIBUTE_PCI_DEVICE_ID	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    CU_DEVICE_ATTRIBUTE_PCI_DEVICE_ID = 34,                     \/**< PCI device ID of the device *\/$/;"	e	enum:CUdevice_attribute_enum
CU_DEVICE_ATTRIBUTE_PCI_DOMAIN_ID	/usr/local/cuda/include/cuda.h	/^    CU_DEVICE_ATTRIBUTE_PCI_DOMAIN_ID = 50,                     \/**< PCI domain ID of the device *\/$/;"	e	enum:CUdevice_attribute_enum
CU_DEVICE_ATTRIBUTE_REGISTERS_PER_BLOCK	/usr/local/cuda/include/cuda.h	/^    CU_DEVICE_ATTRIBUTE_REGISTERS_PER_BLOCK = 12,               \/**< Deprecated, use CU_DEVICE_ATTRIBUTE_MAX_REGISTERS_PER_BLOCK *\/$/;"	e	enum:CUdevice_attribute_enum
CU_DEVICE_ATTRIBUTE_REGISTERS_PER_BLOCK	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    CU_DEVICE_ATTRIBUTE_REGISTERS_PER_BLOCK = 12,               \/**< Deprecated, use CU_DEVICE_ATTRIBUTE_MAX_REGISTERS_PER_BLOCK *\/$/;"	e	enum:CUdevice_attribute_enum
CU_DEVICE_ATTRIBUTE_SHARED_MEMORY_PER_BLOCK	/usr/local/cuda/include/cuda.h	/^    CU_DEVICE_ATTRIBUTE_SHARED_MEMORY_PER_BLOCK = 8,            \/**< Deprecated, use CU_DEVICE_ATTRIBUTE_MAX_SHARED_MEMORY_PER_BLOCK *\/$/;"	e	enum:CUdevice_attribute_enum
CU_DEVICE_ATTRIBUTE_SHARED_MEMORY_PER_BLOCK	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    CU_DEVICE_ATTRIBUTE_SHARED_MEMORY_PER_BLOCK = 8,            \/**< Deprecated, use CU_DEVICE_ATTRIBUTE_MAX_SHARED_MEMORY_PER_BLOCK *\/$/;"	e	enum:CUdevice_attribute_enum
CU_DEVICE_ATTRIBUTE_SINGLE_TO_DOUBLE_PRECISION_PERF_RATIO	/usr/local/cuda/include/cuda.h	/^    CU_DEVICE_ATTRIBUTE_SINGLE_TO_DOUBLE_PRECISION_PERF_RATIO = 87,  \/**< Ratio of single precision performance (in floating-point operations per second) to double precision performance *\/$/;"	e	enum:CUdevice_attribute_enum
CU_DEVICE_ATTRIBUTE_STREAM_PRIORITIES_SUPPORTED	/usr/local/cuda/include/cuda.h	/^    CU_DEVICE_ATTRIBUTE_STREAM_PRIORITIES_SUPPORTED = 78,       \/**< Device supports stream priorities *\/$/;"	e	enum:CUdevice_attribute_enum
CU_DEVICE_ATTRIBUTE_SURFACE_ALIGNMENT	/usr/local/cuda/include/cuda.h	/^    CU_DEVICE_ATTRIBUTE_SURFACE_ALIGNMENT = 30,                 \/**< Alignment requirement for surfaces *\/$/;"	e	enum:CUdevice_attribute_enum
CU_DEVICE_ATTRIBUTE_SURFACE_ALIGNMENT	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    CU_DEVICE_ATTRIBUTE_SURFACE_ALIGNMENT = 30,                 \/**< Alignment requirement for surfaces *\/$/;"	e	enum:CUdevice_attribute_enum
CU_DEVICE_ATTRIBUTE_TCC_DRIVER	/usr/local/cuda/include/cuda.h	/^    CU_DEVICE_ATTRIBUTE_TCC_DRIVER = 35,                        \/**< Device is using TCC driver model *\/$/;"	e	enum:CUdevice_attribute_enum
CU_DEVICE_ATTRIBUTE_TCC_DRIVER	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    CU_DEVICE_ATTRIBUTE_TCC_DRIVER = 35                         \/**< Device is using TCC driver model *\/$/;"	e	enum:CUdevice_attribute_enum
CU_DEVICE_ATTRIBUTE_TEXTURE_ALIGNMENT	/usr/local/cuda/include/cuda.h	/^    CU_DEVICE_ATTRIBUTE_TEXTURE_ALIGNMENT = 14,                 \/**< Alignment requirement for textures *\/$/;"	e	enum:CUdevice_attribute_enum
CU_DEVICE_ATTRIBUTE_TEXTURE_ALIGNMENT	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    CU_DEVICE_ATTRIBUTE_TEXTURE_ALIGNMENT = 14,                 \/**< Alignment requirement for textures *\/$/;"	e	enum:CUdevice_attribute_enum
CU_DEVICE_ATTRIBUTE_TEXTURE_PITCH_ALIGNMENT	/usr/local/cuda/include/cuda.h	/^    CU_DEVICE_ATTRIBUTE_TEXTURE_PITCH_ALIGNMENT = 51,           \/**< Pitch alignment requirement for textures *\/$/;"	e	enum:CUdevice_attribute_enum
CU_DEVICE_ATTRIBUTE_TOTAL_CONSTANT_MEMORY	/usr/local/cuda/include/cuda.h	/^    CU_DEVICE_ATTRIBUTE_TOTAL_CONSTANT_MEMORY = 9,              \/**< Memory available on device for __constant__ variables in a CUDA C kernel in bytes *\/$/;"	e	enum:CUdevice_attribute_enum
CU_DEVICE_ATTRIBUTE_TOTAL_CONSTANT_MEMORY	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    CU_DEVICE_ATTRIBUTE_TOTAL_CONSTANT_MEMORY = 9,              \/**< Memory available on device for __constant__ variables in a CUDA C kernel in bytes *\/$/;"	e	enum:CUdevice_attribute_enum
CU_DEVICE_ATTRIBUTE_UNIFIED_ADDRESSING	/usr/local/cuda/include/cuda.h	/^    CU_DEVICE_ATTRIBUTE_UNIFIED_ADDRESSING = 41,                \/**< Device shares a unified address space with the host *\/    $/;"	e	enum:CUdevice_attribute_enum
CU_DEVICE_ATTRIBUTE_UNIFIED_ADDRESSING	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    CU_DEVICE_ATTRIBUTE_UNIFIED_ADDRESSING = 41,                \/**< Device uses shares a unified address space with the host *\/$/;"	e	enum:CUdevice_attribute_enum
CU_DEVICE_ATTRIBUTE_WARP_SIZE	/usr/local/cuda/include/cuda.h	/^    CU_DEVICE_ATTRIBUTE_WARP_SIZE = 10,                         \/**< Warp size in threads *\/$/;"	e	enum:CUdevice_attribute_enum
CU_DEVICE_ATTRIBUTE_WARP_SIZE	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    CU_DEVICE_ATTRIBUTE_WARP_SIZE = 10,                         \/**< Warp size in threads *\/$/;"	e	enum:CUdevice_attribute_enum
CU_DEVICE_CPU	/usr/local/cuda/include/cuda.h	1898;"	d
CU_DEVICE_INVALID	/usr/local/cuda/include/cuda.h	1903;"	d
CU_DEVICE_P2P_ATTRIBUTE_ACCESS_SUPPORTED	/usr/local/cuda/include/cuda.h	/^    CU_DEVICE_P2P_ATTRIBUTE_ACCESS_SUPPORTED        = 0x02, \/**< P2P Access is enable *\/$/;"	e	enum:CUdevice_P2PAttribute_enum
CU_DEVICE_P2P_ATTRIBUTE_NATIVE_ATOMIC_SUPPORTED	/usr/local/cuda/include/cuda.h	/^    CU_DEVICE_P2P_ATTRIBUTE_NATIVE_ATOMIC_SUPPORTED = 0x03  \/**< Atomic operation over the link supported *\/$/;"	e	enum:CUdevice_P2PAttribute_enum
CU_DEVICE_P2P_ATTRIBUTE_PERFORMANCE_RANK	/usr/local/cuda/include/cuda.h	/^    CU_DEVICE_P2P_ATTRIBUTE_PERFORMANCE_RANK        = 0x01, \/**< A relative value indicating the performance of the link between two devices *\/$/;"	e	enum:CUdevice_P2PAttribute_enum
CU_EGL_COLOR_FORMAT_ARGB	/usr/local/cuda/include/cudaEGL.h	/^    CU_EGL_COLOR_FORMAT_ARGB                = 0x06,  \/**< R\/G\/B\/A four channels in one surface with ARGB byte ordering. *\/$/;"	e	enum:CUeglColorFormat_enum
CU_EGL_COLOR_FORMAT_BGR	/usr/local/cuda/include/cudaEGL.h	/^    CU_EGL_COLOR_FORMAT_BGR                 = 0x05,  \/**< R\/G\/B three channels in one surface with BGR byte ordering. *\/$/;"	e	enum:CUeglColorFormat_enum
CU_EGL_COLOR_FORMAT_L	/usr/local/cuda/include/cudaEGL.h	/^    CU_EGL_COLOR_FORMAT_L                   = 0x08,  \/**< single luminance channel in one surface. *\/$/;"	e	enum:CUeglColorFormat_enum
CU_EGL_COLOR_FORMAT_MAX	/usr/local/cuda/include/cudaEGL.h	/^    CU_EGL_COLOR_FORMAT_MAX$/;"	e	enum:CUeglColorFormat_enum
CU_EGL_COLOR_FORMAT_R	/usr/local/cuda/include/cudaEGL.h	/^    CU_EGL_COLOR_FORMAT_R                   = 0x09,  \/**< single color channel in one surface. *\/$/;"	e	enum:CUeglColorFormat_enum
CU_EGL_COLOR_FORMAT_RGB	/usr/local/cuda/include/cudaEGL.h	/^    CU_EGL_COLOR_FORMAT_RGB                 = 0x04,  \/**< R\/G\/B three channels in one surface with RGB byte ordering. *\/$/;"	e	enum:CUeglColorFormat_enum
CU_EGL_COLOR_FORMAT_RGBA	/usr/local/cuda/include/cudaEGL.h	/^    CU_EGL_COLOR_FORMAT_RGBA                = 0x07,  \/**< R\/G\/B\/A four channels in one surface with RGBA byte ordering. *\/$/;"	e	enum:CUeglColorFormat_enum
CU_EGL_COLOR_FORMAT_UYVY_422	/usr/local/cuda/include/cudaEGL.h	/^    CU_EGL_COLOR_FORMAT_UYVY_422            = 0xD,   \/**< Y, U, V in one surface, interleaved as UYVY. *\/$/;"	e	enum:CUeglColorFormat_enum
CU_EGL_COLOR_FORMAT_YUV420_PLANAR	/usr/local/cuda/include/cudaEGL.h	/^    CU_EGL_COLOR_FORMAT_YUV420_PLANAR       = 0x00,   \/**< Y, U, V in three surfaces, each in a separate surface, U\/V width = 1\/2 Y width, U\/V height = 1\/2 Y height. *\/$/;"	e	enum:CUeglColorFormat_enum
CU_EGL_COLOR_FORMAT_YUV420_SEMIPLANAR	/usr/local/cuda/include/cudaEGL.h	/^    CU_EGL_COLOR_FORMAT_YUV420_SEMIPLANAR   = 0x01,   \/**< Y, UV in two surfaces (UV as one surface), width, height ratio same as YUV420Planar. *\/$/;"	e	enum:CUeglColorFormat_enum
CU_EGL_COLOR_FORMAT_YUV422_PLANAR	/usr/local/cuda/include/cudaEGL.h	/^    CU_EGL_COLOR_FORMAT_YUV422_PLANAR       = 0x02,  \/**< Y, U, V  each in a separate  surface, U\/V width = 1\/2 Y width, U\/V height = Y height. *\/$/;"	e	enum:CUeglColorFormat_enum
CU_EGL_COLOR_FORMAT_YUV422_SEMIPLANAR	/usr/local/cuda/include/cudaEGL.h	/^    CU_EGL_COLOR_FORMAT_YUV422_SEMIPLANAR   = 0x03,  \/**< Y, UV in two surfaces, width, height ratio same as YUV422Planar. *\/$/;"	e	enum:CUeglColorFormat_enum
CU_EGL_COLOR_FORMAT_YUV444_PLANAR	/usr/local/cuda/include/cudaEGL.h	/^    CU_EGL_COLOR_FORMAT_YUV444_PLANAR       = 0xA,   \/**< Y, U, V in three surfaces, each in a separate surface, U\/V width = Y width, U\/V height = Y height. *\/$/;"	e	enum:CUeglColorFormat_enum
CU_EGL_COLOR_FORMAT_YUV444_SEMIPLANAR	/usr/local/cuda/include/cudaEGL.h	/^    CU_EGL_COLOR_FORMAT_YUV444_SEMIPLANAR   = 0xB,   \/**< Y, UV in two surfaces (UV as one surface), width, height ratio same as YUV444Planar. *\/$/;"	e	enum:CUeglColorFormat_enum
CU_EGL_COLOR_FORMAT_YUYV_422	/usr/local/cuda/include/cudaEGL.h	/^    CU_EGL_COLOR_FORMAT_YUYV_422            = 0xC,   \/**< Y, U, V in one surface, interleaved as YUYV. *\/$/;"	e	enum:CUeglColorFormat_enum
CU_EGL_FRAME_TYPE_ARRAY	/usr/local/cuda/include/cudaEGL.h	/^    CU_EGL_FRAME_TYPE_ARRAY = 0,  \/**< Frame type CUDA array *\/$/;"	e	enum:CUeglFrameType_enum
CU_EGL_FRAME_TYPE_PITCH	/usr/local/cuda/include/cudaEGL.h	/^    CU_EGL_FRAME_TYPE_PITCH = 1,  \/**< Frame type pointer *\/$/;"	e	enum:CUeglFrameType_enum
CU_EGL_RESOURCE_LOCATION_SYSMEM	/usr/local/cuda/include/cudaEGL.h	/^    CU_EGL_RESOURCE_LOCATION_SYSMEM   = 0x00,       \/**< Resource location sysmem *\/$/;"	e	enum:CUeglResourceLocationFlags_enum
CU_EGL_RESOURCE_LOCATION_VIDMEM	/usr/local/cuda/include/cudaEGL.h	/^    CU_EGL_RESOURCE_LOCATION_VIDMEM   = 0x01        \/**< Resource location vidmem *\/$/;"	e	enum:CUeglResourceLocationFlags_enum
CU_EVENT_BLOCKING_SYNC	/usr/local/cuda/include/cuda.h	/^    CU_EVENT_BLOCKING_SYNC  = 0x1, \/**< Event uses blocking synchronization *\/$/;"	e	enum:CUevent_flags_enum
CU_EVENT_BLOCKING_SYNC	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    CU_EVENT_BLOCKING_SYNC  = 1, \/**< Event uses blocking synchronization *\/$/;"	e	enum:CUevent_flags_enum
CU_EVENT_DEFAULT	/usr/local/cuda/include/cuda.h	/^    CU_EVENT_DEFAULT        = 0x0, \/**< Default event flag *\/$/;"	e	enum:CUevent_flags_enum
CU_EVENT_DEFAULT	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    CU_EVENT_DEFAULT        = 0, \/**< Default event flag *\/$/;"	e	enum:CUevent_flags_enum
CU_EVENT_DISABLE_TIMING	/usr/local/cuda/include/cuda.h	/^    CU_EVENT_DISABLE_TIMING = 0x2, \/**< Event will not record timing data *\/$/;"	e	enum:CUevent_flags_enum
CU_EVENT_DISABLE_TIMING	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    CU_EVENT_DISABLE_TIMING = 2  \/**< Event will not record timing data *\/$/;"	e	enum:CUevent_flags_enum
CU_EVENT_INTERPROCESS	/usr/local/cuda/include/cuda.h	/^    CU_EVENT_INTERPROCESS   = 0x4  \/**< Event is suitable for interprocess use. CU_EVENT_DISABLE_TIMING must be set *\/$/;"	e	enum:CUevent_flags_enum
CU_FUNC_ATTRIBUTE_BINARY_VERSION	/usr/local/cuda/include/cuda.h	/^    CU_FUNC_ATTRIBUTE_BINARY_VERSION = 6,$/;"	e	enum:CUfunction_attribute_enum
CU_FUNC_ATTRIBUTE_BINARY_VERSION	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    CU_FUNC_ATTRIBUTE_BINARY_VERSION = 6,$/;"	e	enum:CUfunction_attribute_enum
CU_FUNC_ATTRIBUTE_CACHE_MODE_CA	/usr/local/cuda/include/cuda.h	/^    CU_FUNC_ATTRIBUTE_CACHE_MODE_CA = 7,$/;"	e	enum:CUfunction_attribute_enum
CU_FUNC_ATTRIBUTE_CONST_SIZE_BYTES	/usr/local/cuda/include/cuda.h	/^    CU_FUNC_ATTRIBUTE_CONST_SIZE_BYTES = 2,$/;"	e	enum:CUfunction_attribute_enum
CU_FUNC_ATTRIBUTE_CONST_SIZE_BYTES	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    CU_FUNC_ATTRIBUTE_CONST_SIZE_BYTES = 2,$/;"	e	enum:CUfunction_attribute_enum
CU_FUNC_ATTRIBUTE_LOCAL_SIZE_BYTES	/usr/local/cuda/include/cuda.h	/^    CU_FUNC_ATTRIBUTE_LOCAL_SIZE_BYTES = 3,$/;"	e	enum:CUfunction_attribute_enum
CU_FUNC_ATTRIBUTE_LOCAL_SIZE_BYTES	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    CU_FUNC_ATTRIBUTE_LOCAL_SIZE_BYTES = 3,$/;"	e	enum:CUfunction_attribute_enum
CU_FUNC_ATTRIBUTE_MAX	/usr/local/cuda/include/cuda.h	/^    CU_FUNC_ATTRIBUTE_MAX$/;"	e	enum:CUfunction_attribute_enum
CU_FUNC_ATTRIBUTE_MAX	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    CU_FUNC_ATTRIBUTE_MAX$/;"	e	enum:CUfunction_attribute_enum
CU_FUNC_ATTRIBUTE_MAX_DYNAMIC_SHARED_SIZE_BYTES	/usr/local/cuda/include/cuda.h	/^    CU_FUNC_ATTRIBUTE_MAX_DYNAMIC_SHARED_SIZE_BYTES = 8,$/;"	e	enum:CUfunction_attribute_enum
CU_FUNC_ATTRIBUTE_MAX_THREADS_PER_BLOCK	/usr/local/cuda/include/cuda.h	/^    CU_FUNC_ATTRIBUTE_MAX_THREADS_PER_BLOCK = 0,$/;"	e	enum:CUfunction_attribute_enum
CU_FUNC_ATTRIBUTE_MAX_THREADS_PER_BLOCK	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    CU_FUNC_ATTRIBUTE_MAX_THREADS_PER_BLOCK = 0,$/;"	e	enum:CUfunction_attribute_enum
CU_FUNC_ATTRIBUTE_NUM_REGS	/usr/local/cuda/include/cuda.h	/^    CU_FUNC_ATTRIBUTE_NUM_REGS = 4,$/;"	e	enum:CUfunction_attribute_enum
CU_FUNC_ATTRIBUTE_NUM_REGS	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    CU_FUNC_ATTRIBUTE_NUM_REGS = 4,$/;"	e	enum:CUfunction_attribute_enum
CU_FUNC_ATTRIBUTE_PREFERRED_SHARED_MEMORY_CARVEOUT	/usr/local/cuda/include/cuda.h	/^    CU_FUNC_ATTRIBUTE_PREFERRED_SHARED_MEMORY_CARVEOUT = 9,$/;"	e	enum:CUfunction_attribute_enum
CU_FUNC_ATTRIBUTE_PTX_VERSION	/usr/local/cuda/include/cuda.h	/^    CU_FUNC_ATTRIBUTE_PTX_VERSION = 5,$/;"	e	enum:CUfunction_attribute_enum
CU_FUNC_ATTRIBUTE_PTX_VERSION	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    CU_FUNC_ATTRIBUTE_PTX_VERSION = 5,$/;"	e	enum:CUfunction_attribute_enum
CU_FUNC_ATTRIBUTE_SHARED_SIZE_BYTES	/usr/local/cuda/include/cuda.h	/^    CU_FUNC_ATTRIBUTE_SHARED_SIZE_BYTES = 1,$/;"	e	enum:CUfunction_attribute_enum
CU_FUNC_ATTRIBUTE_SHARED_SIZE_BYTES	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    CU_FUNC_ATTRIBUTE_SHARED_SIZE_BYTES = 1,$/;"	e	enum:CUfunction_attribute_enum
CU_FUNC_CACHE_PREFER_EQUAL	/usr/local/cuda/include/cuda.h	/^    CU_FUNC_CACHE_PREFER_EQUAL   = 0x03  \/**< prefer equal sized L1 cache and shared memory *\/$/;"	e	enum:CUfunc_cache_enum
CU_FUNC_CACHE_PREFER_L1	/usr/local/cuda/include/cuda.h	/^    CU_FUNC_CACHE_PREFER_L1      = 0x02, \/**< prefer larger L1 cache and smaller shared memory *\/$/;"	e	enum:CUfunc_cache_enum
CU_FUNC_CACHE_PREFER_L1	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    CU_FUNC_CACHE_PREFER_L1      = 0x02  \/**< prefer larger L1 cache and smaller shared memory *\/$/;"	e	enum:CUfunc_cache_enum
CU_FUNC_CACHE_PREFER_NONE	/usr/local/cuda/include/cuda.h	/^    CU_FUNC_CACHE_PREFER_NONE    = 0x00, \/**< no preference for shared memory or L1 (default) *\/$/;"	e	enum:CUfunc_cache_enum
CU_FUNC_CACHE_PREFER_NONE	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    CU_FUNC_CACHE_PREFER_NONE    = 0x00, \/**< no preference for shared memory or L1 (default) *\/$/;"	e	enum:CUfunc_cache_enum
CU_FUNC_CACHE_PREFER_SHARED	/usr/local/cuda/include/cuda.h	/^    CU_FUNC_CACHE_PREFER_SHARED  = 0x01, \/**< prefer larger shared memory and smaller L1 cache *\/$/;"	e	enum:CUfunc_cache_enum
CU_FUNC_CACHE_PREFER_SHARED	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    CU_FUNC_CACHE_PREFER_SHARED  = 0x01, \/**< prefer larger shared memory and smaller L1 cache *\/$/;"	e	enum:CUfunc_cache_enum
CU_GL_DEVICE_LIST_ALL	/usr/local/cuda/include/cudaGL.h	/^    CU_GL_DEVICE_LIST_ALL            = 0x01, \/**< The CUDA devices for all GPUs used by the current OpenGL context *\/$/;"	e	enum:CUGLDeviceList_enum
CU_GL_DEVICE_LIST_CURRENT_FRAME	/usr/local/cuda/include/cudaGL.h	/^    CU_GL_DEVICE_LIST_CURRENT_FRAME  = 0x02, \/**< The CUDA devices for the GPUs used by the current OpenGL context in its currently rendering frame *\/$/;"	e	enum:CUGLDeviceList_enum
CU_GL_DEVICE_LIST_NEXT_FRAME	/usr/local/cuda/include/cudaGL.h	/^    CU_GL_DEVICE_LIST_NEXT_FRAME     = 0x03, \/**< The CUDA devices for the GPUs to be used by the current OpenGL context in the next frame *\/$/;"	e	enum:CUGLDeviceList_enum
CU_GL_MAP_RESOURCE_FLAGS_NONE	/usr/local/cuda/include/cudaGL.h	/^    CU_GL_MAP_RESOURCE_FLAGS_NONE          = 0x00,$/;"	e	enum:CUGLmap_flags_enum
CU_GL_MAP_RESOURCE_FLAGS_READ_ONLY	/usr/local/cuda/include/cudaGL.h	/^    CU_GL_MAP_RESOURCE_FLAGS_READ_ONLY     = 0x01,$/;"	e	enum:CUGLmap_flags_enum
CU_GL_MAP_RESOURCE_FLAGS_WRITE_DISCARD	/usr/local/cuda/include/cudaGL.h	/^    CU_GL_MAP_RESOURCE_FLAGS_WRITE_DISCARD = 0x02,    $/;"	e	enum:CUGLmap_flags_enum
CU_GRAPHICS_MAP_RESOURCE_FLAGS_NONE	/usr/local/cuda/include/cuda.h	/^    CU_GRAPHICS_MAP_RESOURCE_FLAGS_NONE          = 0x00,$/;"	e	enum:CUgraphicsMapResourceFlags_enum
CU_GRAPHICS_MAP_RESOURCE_FLAGS_NONE	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    CU_GRAPHICS_MAP_RESOURCE_FLAGS_NONE          = 0x00,$/;"	e	enum:CUgraphicsMapResourceFlags_enum
CU_GRAPHICS_MAP_RESOURCE_FLAGS_READ_ONLY	/usr/local/cuda/include/cuda.h	/^    CU_GRAPHICS_MAP_RESOURCE_FLAGS_READ_ONLY     = 0x01,$/;"	e	enum:CUgraphicsMapResourceFlags_enum
CU_GRAPHICS_MAP_RESOURCE_FLAGS_READ_ONLY	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    CU_GRAPHICS_MAP_RESOURCE_FLAGS_READ_ONLY     = 0x01,$/;"	e	enum:CUgraphicsMapResourceFlags_enum
CU_GRAPHICS_MAP_RESOURCE_FLAGS_WRITE_DISCARD	/usr/local/cuda/include/cuda.h	/^    CU_GRAPHICS_MAP_RESOURCE_FLAGS_WRITE_DISCARD = 0x02$/;"	e	enum:CUgraphicsMapResourceFlags_enum
CU_GRAPHICS_MAP_RESOURCE_FLAGS_WRITE_DISCARD	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    CU_GRAPHICS_MAP_RESOURCE_FLAGS_WRITE_DISCARD = 0x02$/;"	e	enum:CUgraphicsMapResourceFlags_enum
CU_GRAPHICS_REGISTER_FLAGS_NONE	/usr/local/cuda/include/cuda.h	/^    CU_GRAPHICS_REGISTER_FLAGS_NONE           = 0x00,$/;"	e	enum:CUgraphicsRegisterFlags_enum
CU_GRAPHICS_REGISTER_FLAGS_NONE	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    CU_GRAPHICS_REGISTER_FLAGS_NONE          = 0x00,$/;"	e	enum:CUgraphicsRegisterFlags_enum
CU_GRAPHICS_REGISTER_FLAGS_READ_ONLY	/usr/local/cuda/include/cuda.h	/^    CU_GRAPHICS_REGISTER_FLAGS_READ_ONLY      = 0x01,$/;"	e	enum:CUgraphicsRegisterFlags_enum
CU_GRAPHICS_REGISTER_FLAGS_READ_ONLY	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    CU_GRAPHICS_REGISTER_FLAGS_READ_ONLY     = 0x01,$/;"	e	enum:CUgraphicsRegisterFlags_enum
CU_GRAPHICS_REGISTER_FLAGS_SURFACE_LDST	/usr/local/cuda/include/cuda.h	/^    CU_GRAPHICS_REGISTER_FLAGS_SURFACE_LDST   = 0x04,$/;"	e	enum:CUgraphicsRegisterFlags_enum
CU_GRAPHICS_REGISTER_FLAGS_SURFACE_LDST	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    CU_GRAPHICS_REGISTER_FLAGS_SURFACE_LDST  = 0x04$/;"	e	enum:CUgraphicsRegisterFlags_enum
CU_GRAPHICS_REGISTER_FLAGS_TEXTURE_GATHER	/usr/local/cuda/include/cuda.h	/^    CU_GRAPHICS_REGISTER_FLAGS_TEXTURE_GATHER = 0x08$/;"	e	enum:CUgraphicsRegisterFlags_enum
CU_GRAPHICS_REGISTER_FLAGS_WRITE_DISCARD	/usr/local/cuda/include/cuda.h	/^    CU_GRAPHICS_REGISTER_FLAGS_WRITE_DISCARD  = 0x02,$/;"	e	enum:CUgraphicsRegisterFlags_enum
CU_GRAPHICS_REGISTER_FLAGS_WRITE_DISCARD	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    CU_GRAPHICS_REGISTER_FLAGS_WRITE_DISCARD = 0x02,$/;"	e	enum:CUgraphicsRegisterFlags_enum
CU_IPC_HANDLE_SIZE	/usr/local/cuda/include/cuda.h	257;"	d
CU_IPC_MEM_LAZY_ENABLE_PEER_ACCESS	/usr/local/cuda/include/cuda.h	/^    CU_IPC_MEM_LAZY_ENABLE_PEER_ACCESS = 0x1 \/**< Automatically enable peer access between remote devices as needed *\/$/;"	e	enum:CUipcMem_flags_enum
CU_JIT_CACHE_MODE	/usr/local/cuda/include/cuda.h	/^    CU_JIT_CACHE_MODE,$/;"	e	enum:CUjit_option_enum
CU_JIT_CACHE_OPTION_CA	/usr/local/cuda/include/cuda.h	/^    CU_JIT_CACHE_OPTION_CA        \/**< Compile with L1 cache enabled *\/$/;"	e	enum:CUjit_cacheMode_enum
CU_JIT_CACHE_OPTION_CG	/usr/local/cuda/include/cuda.h	/^    CU_JIT_CACHE_OPTION_CG,       \/**< Compile with L1 cache disabled *\/$/;"	e	enum:CUjit_cacheMode_enum
CU_JIT_CACHE_OPTION_NONE	/usr/local/cuda/include/cuda.h	/^    CU_JIT_CACHE_OPTION_NONE = 0, \/**< Compile with no -dlcm flag specified *\/$/;"	e	enum:CUjit_cacheMode_enum
CU_JIT_ERROR_LOG_BUFFER	/usr/local/cuda/include/cuda.h	/^    CU_JIT_ERROR_LOG_BUFFER,$/;"	e	enum:CUjit_option_enum
CU_JIT_ERROR_LOG_BUFFER	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    CU_JIT_ERROR_LOG_BUFFER,$/;"	e	enum:CUjit_option_enum
CU_JIT_ERROR_LOG_BUFFER_SIZE_BYTES	/usr/local/cuda/include/cuda.h	/^    CU_JIT_ERROR_LOG_BUFFER_SIZE_BYTES,$/;"	e	enum:CUjit_option_enum
CU_JIT_ERROR_LOG_BUFFER_SIZE_BYTES	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    CU_JIT_ERROR_LOG_BUFFER_SIZE_BYTES,$/;"	e	enum:CUjit_option_enum
CU_JIT_FALLBACK_STRATEGY	/usr/local/cuda/include/cuda.h	/^    CU_JIT_FALLBACK_STRATEGY,$/;"	e	enum:CUjit_option_enum
CU_JIT_FALLBACK_STRATEGY	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    CU_JIT_FALLBACK_STRATEGY$/;"	e	enum:CUjit_option_enum
CU_JIT_FAST_COMPILE	/usr/local/cuda/include/cuda.h	/^    CU_JIT_FAST_COMPILE,$/;"	e	enum:CUjit_option_enum
CU_JIT_GENERATE_DEBUG_INFO	/usr/local/cuda/include/cuda.h	/^    CU_JIT_GENERATE_DEBUG_INFO,$/;"	e	enum:CUjit_option_enum
CU_JIT_GENERATE_LINE_INFO	/usr/local/cuda/include/cuda.h	/^    CU_JIT_GENERATE_LINE_INFO,$/;"	e	enum:CUjit_option_enum
CU_JIT_INFO_LOG_BUFFER	/usr/local/cuda/include/cuda.h	/^    CU_JIT_INFO_LOG_BUFFER,$/;"	e	enum:CUjit_option_enum
CU_JIT_INFO_LOG_BUFFER	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    CU_JIT_INFO_LOG_BUFFER,$/;"	e	enum:CUjit_option_enum
CU_JIT_INFO_LOG_BUFFER_SIZE_BYTES	/usr/local/cuda/include/cuda.h	/^    CU_JIT_INFO_LOG_BUFFER_SIZE_BYTES,$/;"	e	enum:CUjit_option_enum
CU_JIT_INFO_LOG_BUFFER_SIZE_BYTES	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    CU_JIT_INFO_LOG_BUFFER_SIZE_BYTES,$/;"	e	enum:CUjit_option_enum
CU_JIT_INPUT_CUBIN	/usr/local/cuda/include/cuda.h	/^    CU_JIT_INPUT_CUBIN = 0,$/;"	e	enum:CUjitInputType_enum
CU_JIT_INPUT_FATBINARY	/usr/local/cuda/include/cuda.h	/^    CU_JIT_INPUT_FATBINARY,$/;"	e	enum:CUjitInputType_enum
CU_JIT_INPUT_LIBRARY	/usr/local/cuda/include/cuda.h	/^    CU_JIT_INPUT_LIBRARY,$/;"	e	enum:CUjitInputType_enum
CU_JIT_INPUT_OBJECT	/usr/local/cuda/include/cuda.h	/^    CU_JIT_INPUT_OBJECT,$/;"	e	enum:CUjitInputType_enum
CU_JIT_INPUT_PTX	/usr/local/cuda/include/cuda.h	/^    CU_JIT_INPUT_PTX,$/;"	e	enum:CUjitInputType_enum
CU_JIT_LOG_VERBOSE	/usr/local/cuda/include/cuda.h	/^    CU_JIT_LOG_VERBOSE,$/;"	e	enum:CUjit_option_enum
CU_JIT_MAX_REGISTERS	/usr/local/cuda/include/cuda.h	/^    CU_JIT_MAX_REGISTERS = 0,$/;"	e	enum:CUjit_option_enum
CU_JIT_MAX_REGISTERS	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    CU_JIT_MAX_REGISTERS = 0,$/;"	e	enum:CUjit_option_enum
CU_JIT_NEW_SM3X_OPT	/usr/local/cuda/include/cuda.h	/^    CU_JIT_NEW_SM3X_OPT,$/;"	e	enum:CUjit_option_enum
CU_JIT_NUM_INPUT_TYPES	/usr/local/cuda/include/cuda.h	/^    CU_JIT_NUM_INPUT_TYPES$/;"	e	enum:CUjitInputType_enum
CU_JIT_NUM_OPTIONS	/usr/local/cuda/include/cuda.h	/^    CU_JIT_NUM_OPTIONS$/;"	e	enum:CUjit_option_enum
CU_JIT_OPTIMIZATION_LEVEL	/usr/local/cuda/include/cuda.h	/^    CU_JIT_OPTIMIZATION_LEVEL,$/;"	e	enum:CUjit_option_enum
CU_JIT_OPTIMIZATION_LEVEL	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    CU_JIT_OPTIMIZATION_LEVEL,$/;"	e	enum:CUjit_option_enum
CU_JIT_TARGET	/usr/local/cuda/include/cuda.h	/^    CU_JIT_TARGET,$/;"	e	enum:CUjit_option_enum
CU_JIT_TARGET	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    CU_JIT_TARGET,$/;"	e	enum:CUjit_option_enum
CU_JIT_TARGET_FROM_CUCONTEXT	/usr/local/cuda/include/cuda.h	/^    CU_JIT_TARGET_FROM_CUCONTEXT,$/;"	e	enum:CUjit_option_enum
CU_JIT_TARGET_FROM_CUCONTEXT	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    CU_JIT_TARGET_FROM_CUCONTEXT,$/;"	e	enum:CUjit_option_enum
CU_JIT_THREADS_PER_BLOCK	/usr/local/cuda/include/cuda.h	/^    CU_JIT_THREADS_PER_BLOCK,$/;"	e	enum:CUjit_option_enum
CU_JIT_THREADS_PER_BLOCK	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    CU_JIT_THREADS_PER_BLOCK,$/;"	e	enum:CUjit_option_enum
CU_JIT_WALL_TIME	/usr/local/cuda/include/cuda.h	/^    CU_JIT_WALL_TIME,$/;"	e	enum:CUjit_option_enum
CU_JIT_WALL_TIME	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    CU_JIT_WALL_TIME,$/;"	e	enum:CUjit_option_enum
CU_LAUNCH_PARAM_BUFFER_POINTER	/usr/local/cuda/include/cuda.h	1877;"	d
CU_LAUNCH_PARAM_BUFFER_POINTER	/usr/local/cuda/include/dynlink_cuda_cuda.h	986;"	d
CU_LAUNCH_PARAM_BUFFER_SIZE	/usr/local/cuda/include/cuda.h	1887;"	d
CU_LAUNCH_PARAM_BUFFER_SIZE	/usr/local/cuda/include/dynlink_cuda_cuda.h	996;"	d
CU_LAUNCH_PARAM_END	/usr/local/cuda/include/cuda.h	1866;"	d
CU_LAUNCH_PARAM_END	/usr/local/cuda/include/dynlink_cuda_cuda.h	975;"	d
CU_LIMIT_DEV_RUNTIME_PENDING_LAUNCH_COUNT	/usr/local/cuda/include/cuda.h	/^    CU_LIMIT_DEV_RUNTIME_PENDING_LAUNCH_COUNT = 0x04, \/**< GPU device runtime pending launch count *\/$/;"	e	enum:CUlimit_enum
CU_LIMIT_DEV_RUNTIME_SYNC_DEPTH	/usr/local/cuda/include/cuda.h	/^    CU_LIMIT_DEV_RUNTIME_SYNC_DEPTH           = 0x03, \/**< GPU device runtime launch synchronize depth *\/$/;"	e	enum:CUlimit_enum
CU_LIMIT_MALLOC_HEAP_SIZE	/usr/local/cuda/include/cuda.h	/^    CU_LIMIT_MALLOC_HEAP_SIZE                 = 0x02, \/**< GPU malloc heap size *\/$/;"	e	enum:CUlimit_enum
CU_LIMIT_MALLOC_HEAP_SIZE	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    CU_LIMIT_MALLOC_HEAP_SIZE  = 0x02  \/**< GPU malloc heap size *\/$/;"	e	enum:CUlimit_enum
CU_LIMIT_MAX	/usr/local/cuda/include/cuda.h	/^    CU_LIMIT_MAX$/;"	e	enum:CUlimit_enum
CU_LIMIT_PRINTF_FIFO_SIZE	/usr/local/cuda/include/cuda.h	/^    CU_LIMIT_PRINTF_FIFO_SIZE                 = 0x01, \/**< GPU printf FIFO size *\/$/;"	e	enum:CUlimit_enum
CU_LIMIT_PRINTF_FIFO_SIZE	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    CU_LIMIT_PRINTF_FIFO_SIZE  = 0x01, \/**< GPU printf FIFO size *\/$/;"	e	enum:CUlimit_enum
CU_LIMIT_STACK_SIZE	/usr/local/cuda/include/cuda.h	/^    CU_LIMIT_STACK_SIZE                       = 0x00, \/**< GPU thread stack size *\/$/;"	e	enum:CUlimit_enum
CU_LIMIT_STACK_SIZE	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    CU_LIMIT_STACK_SIZE        = 0x00, \/**< GPU thread stack size *\/$/;"	e	enum:CUlimit_enum
CU_MEMHOSTALLOC_DEVICEMAP	/usr/local/cuda/include/cuda.h	1484;"	d
CU_MEMHOSTALLOC_DEVICEMAP	/usr/local/cuda/include/dynlink_cuda_cuda.h	773;"	d
CU_MEMHOSTALLOC_PORTABLE	/usr/local/cuda/include/cuda.h	1477;"	d
CU_MEMHOSTALLOC_PORTABLE	/usr/local/cuda/include/dynlink_cuda_cuda.h	766;"	d
CU_MEMHOSTALLOC_WRITECOMBINED	/usr/local/cuda/include/cuda.h	1492;"	d
CU_MEMHOSTALLOC_WRITECOMBINED	/usr/local/cuda/include/dynlink_cuda_cuda.h	781;"	d
CU_MEMHOSTREGISTER_DEVICEMAP	/usr/local/cuda/include/cuda.h	1505;"	d
CU_MEMHOSTREGISTER_DEVICEMAP	/usr/local/cuda/include/dynlink_cuda_cuda.h	794;"	d
CU_MEMHOSTREGISTER_IOMEMORY	/usr/local/cuda/include/cuda.h	1519;"	d
CU_MEMHOSTREGISTER_PORTABLE	/usr/local/cuda/include/cuda.h	1498;"	d
CU_MEMHOSTREGISTER_PORTABLE	/usr/local/cuda/include/dynlink_cuda_cuda.h	787;"	d
CU_MEMORYTYPE_ARRAY	/usr/local/cuda/include/cuda.h	/^    CU_MEMORYTYPE_ARRAY   = 0x03,    \/**< Array memory *\/$/;"	e	enum:CUmemorytype_enum
CU_MEMORYTYPE_ARRAY	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    CU_MEMORYTYPE_ARRAY   = 0x03     \/**< Array memory *\/$/;"	e	enum:CUmemorytype_enum
CU_MEMORYTYPE_DEVICE	/usr/local/cuda/include/cuda.h	/^    CU_MEMORYTYPE_DEVICE  = 0x02,    \/**< Device memory *\/$/;"	e	enum:CUmemorytype_enum
CU_MEMORYTYPE_DEVICE	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    CU_MEMORYTYPE_DEVICE  = 0x02,    \/**< Device memory *\/$/;"	e	enum:CUmemorytype_enum
CU_MEMORYTYPE_HOST	/usr/local/cuda/include/cuda.h	/^    CU_MEMORYTYPE_HOST    = 0x01,    \/**< Host memory *\/$/;"	e	enum:CUmemorytype_enum
CU_MEMORYTYPE_HOST	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    CU_MEMORYTYPE_HOST    = 0x01,    \/**< Host memory *\/$/;"	e	enum:CUmemorytype_enum
CU_MEMORYTYPE_UNIFIED	/usr/local/cuda/include/cuda.h	/^    CU_MEMORYTYPE_UNIFIED = 0x04     \/**< Unified device or host memory *\/$/;"	e	enum:CUmemorytype_enum
CU_MEMORYTYPE_UNIFIED	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^  , CU_MEMORYTYPE_UNIFIED = 0x04     \/**< Unified device or host memory *\/$/;"	e	enum:CUmemorytype_enum
CU_MEMPEERREGISTER_DEVICEMAP	/usr/local/cuda/include/dynlink_cuda_cuda.h	801;"	d
CU_MEM_ADVISE_SET_ACCESSED_BY	/usr/local/cuda/include/cuda.h	/^    CU_MEM_ADVISE_SET_ACCESSED_BY          = 5, \/**< Data will be accessed by the specified device, so prevent page faults as much as possible *\/$/;"	e	enum:CUmem_advise_enum
CU_MEM_ADVISE_SET_PREFERRED_LOCATION	/usr/local/cuda/include/cuda.h	/^    CU_MEM_ADVISE_SET_PREFERRED_LOCATION   = 3, \/**< Set the preferred location for the data as the specified device *\/$/;"	e	enum:CUmem_advise_enum
CU_MEM_ADVISE_SET_READ_MOSTLY	/usr/local/cuda/include/cuda.h	/^    CU_MEM_ADVISE_SET_READ_MOSTLY          = 1, \/**< Data will mostly be read and only occassionally be written to *\/$/;"	e	enum:CUmem_advise_enum
CU_MEM_ADVISE_UNSET_ACCESSED_BY	/usr/local/cuda/include/cuda.h	/^    CU_MEM_ADVISE_UNSET_ACCESSED_BY        = 6  \/**< Let the Unified Memory subsystem decide on the page faulting policy for the specified device *\/$/;"	e	enum:CUmem_advise_enum
CU_MEM_ADVISE_UNSET_PREFERRED_LOCATION	/usr/local/cuda/include/cuda.h	/^    CU_MEM_ADVISE_UNSET_PREFERRED_LOCATION = 4, \/**< Clear the preferred location for the data *\/$/;"	e	enum:CUmem_advise_enum
CU_MEM_ADVISE_UNSET_READ_MOSTLY	/usr/local/cuda/include/cuda.h	/^    CU_MEM_ADVISE_UNSET_READ_MOSTLY        = 2, \/**< Undo the effect of ::CU_MEM_ADVISE_SET_READ_MOSTLY *\/$/;"	e	enum:CUmem_advise_enum
CU_MEM_ATTACH_GLOBAL	/usr/local/cuda/include/cuda.h	/^    CU_MEM_ATTACH_GLOBAL = 0x1, \/**< Memory can be accessed by any stream on any device *\/$/;"	e	enum:CUmemAttach_flags_enum
CU_MEM_ATTACH_HOST	/usr/local/cuda/include/cuda.h	/^    CU_MEM_ATTACH_HOST   = 0x2, \/**< Memory cannot be accessed by any stream on any device *\/$/;"	e	enum:CUmemAttach_flags_enum
CU_MEM_ATTACH_SINGLE	/usr/local/cuda/include/cuda.h	/^    CU_MEM_ATTACH_SINGLE = 0x4  \/**< Memory can only be accessed by a single stream on the associated device *\/$/;"	e	enum:CUmemAttach_flags_enum
CU_MEM_RANGE_ATTRIBUTE_ACCESSED_BY	/usr/local/cuda/include/cuda.h	/^    CU_MEM_RANGE_ATTRIBUTE_ACCESSED_BY            = 3, \/**< Memory range has ::CU_MEM_ADVISE_SET_ACCESSED_BY set for specified device *\/$/;"	e	enum:CUmem_range_attribute_enum
CU_MEM_RANGE_ATTRIBUTE_LAST_PREFETCH_LOCATION	/usr/local/cuda/include/cuda.h	/^    CU_MEM_RANGE_ATTRIBUTE_LAST_PREFETCH_LOCATION = 4  \/**< The last location to which the range was prefetched *\/$/;"	e	enum:CUmem_range_attribute_enum
CU_MEM_RANGE_ATTRIBUTE_PREFERRED_LOCATION	/usr/local/cuda/include/cuda.h	/^    CU_MEM_RANGE_ATTRIBUTE_PREFERRED_LOCATION     = 2, \/**< The preferred location of the range *\/$/;"	e	enum:CUmem_range_attribute_enum
CU_MEM_RANGE_ATTRIBUTE_READ_MOSTLY	/usr/local/cuda/include/cuda.h	/^    CU_MEM_RANGE_ATTRIBUTE_READ_MOSTLY            = 1, \/**< Whether the range will mostly be read and only occassionally be written to *\/$/;"	e	enum:CUmem_range_attribute_enum
CU_OCCUPANCY_DEFAULT	/usr/local/cuda/include/cuda.h	/^    CU_OCCUPANCY_DEFAULT                  = 0x0, \/**< Default behavior *\/$/;"	e	enum:CUoccupancy_flags_enum
CU_OCCUPANCY_DISABLE_CACHING_OVERRIDE	/usr/local/cuda/include/cuda.h	/^    CU_OCCUPANCY_DISABLE_CACHING_OVERRIDE = 0x1  \/**< Assume global caching is enabled and cannot be automatically turned off *\/$/;"	e	enum:CUoccupancy_flags_enum
CU_OUT_CSV	/usr/local/cuda/include/cudaProfiler.h	/^    CU_OUT_CSV             = 0x01  \/**< Output mode Comma separated values format. *\/$/;"	e	enum:CUoutput_mode_enum
CU_OUT_KEY_VALUE_PAIR	/usr/local/cuda/include/cudaProfiler.h	/^    CU_OUT_KEY_VALUE_PAIR  = 0x00, \/**< Output mode Key-Value pair format. *\/$/;"	e	enum:CUoutput_mode_enum
CU_PARAM_TR_DEFAULT	/usr/local/cuda/include/cuda.h	1893;"	d
CU_PARAM_TR_DEFAULT	/usr/local/cuda/include/dynlink_cuda_cuda.h	1002;"	d
CU_PARAM_TR_DEFAULT	/usr/local/cuda/include/dynlink_cuda_cuda.h	1139;"	d
CU_POINTER_ATTRIBUTE_BUFFER_ID	/usr/local/cuda/include/cuda.h	/^    CU_POINTER_ATTRIBUTE_BUFFER_ID = 7,      \/**< A process-wide unique ID for an allocated memory region*\/$/;"	e	enum:CUpointer_attribute_enum
CU_POINTER_ATTRIBUTE_CONTEXT	/usr/local/cuda/include/cuda.h	/^    CU_POINTER_ATTRIBUTE_CONTEXT = 1,        \/**< The ::CUcontext on which a pointer was allocated or registered *\/$/;"	e	enum:CUpointer_attribute_enum
CU_POINTER_ATTRIBUTE_DEVICE_POINTER	/usr/local/cuda/include/cuda.h	/^    CU_POINTER_ATTRIBUTE_DEVICE_POINTER = 3, \/**< The address at which a pointer's memory may be accessed on the device *\/$/;"	e	enum:CUpointer_attribute_enum
CU_POINTER_ATTRIBUTE_HOST_POINTER	/usr/local/cuda/include/cuda.h	/^    CU_POINTER_ATTRIBUTE_HOST_POINTER = 4,   \/**< The address at which a pointer's memory may be accessed on the host *\/$/;"	e	enum:CUpointer_attribute_enum
CU_POINTER_ATTRIBUTE_IS_MANAGED	/usr/local/cuda/include/cuda.h	/^    CU_POINTER_ATTRIBUTE_IS_MANAGED = 8      \/**< Indicates if the pointer points to managed memory *\/$/;"	e	enum:CUpointer_attribute_enum
CU_POINTER_ATTRIBUTE_MEMORY_TYPE	/usr/local/cuda/include/cuda.h	/^    CU_POINTER_ATTRIBUTE_MEMORY_TYPE = 2,    \/**< The ::CUmemorytype describing the physical location of a pointer *\/$/;"	e	enum:CUpointer_attribute_enum
CU_POINTER_ATTRIBUTE_P2P_TOKENS	/usr/local/cuda/include/cuda.h	/^    CU_POINTER_ATTRIBUTE_P2P_TOKENS = 5,     \/**< A pair of tokens for use with the nv-p2p.h Linux kernel interface *\/$/;"	e	enum:CUpointer_attribute_enum
CU_POINTER_ATTRIBUTE_SYNC_MEMOPS	/usr/local/cuda/include/cuda.h	/^    CU_POINTER_ATTRIBUTE_SYNC_MEMOPS = 6,    \/**< Synchronize every synchronous memory operation initiated on this region *\/$/;"	e	enum:CUpointer_attribute_enum
CU_PREFER_BINARY	/usr/local/cuda/include/cuda.h	/^    CU_PREFER_BINARY    \/**< Prefer to fall back to compatible binary code if exact match not found *\/$/;"	e	enum:CUjit_fallback_enum
CU_PREFER_BINARY	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    CU_PREFER_BINARY    \/**< Prefer to fall back to compatible binary code *\/$/;"	e	enum:CUjit_fallback_enum
CU_PREFER_PTX	/usr/local/cuda/include/cuda.h	/^    CU_PREFER_PTX = 0,  \/**< Prefer to compile ptx if exact binary match not found *\/$/;"	e	enum:CUjit_fallback_enum
CU_PREFER_PTX	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    CU_PREFER_PTX = 0,  \/**< Prefer to compile ptx *\/$/;"	e	enum:CUjit_fallback_enum
CU_RESOURCE_TYPE_ARRAY	/usr/local/cuda/include/cuda.h	/^    CU_RESOURCE_TYPE_ARRAY           = 0x00, \/**< Array resoure *\/$/;"	e	enum:CUresourcetype_enum
CU_RESOURCE_TYPE_LINEAR	/usr/local/cuda/include/cuda.h	/^    CU_RESOURCE_TYPE_LINEAR          = 0x02, \/**< Linear resource *\/$/;"	e	enum:CUresourcetype_enum
CU_RESOURCE_TYPE_MIPMAPPED_ARRAY	/usr/local/cuda/include/cuda.h	/^    CU_RESOURCE_TYPE_MIPMAPPED_ARRAY = 0x01, \/**< Mipmapped array resource *\/$/;"	e	enum:CUresourcetype_enum
CU_RESOURCE_TYPE_PITCH2D	/usr/local/cuda/include/cuda.h	/^    CU_RESOURCE_TYPE_PITCH2D         = 0x03  \/**< Pitch 2D resource *\/$/;"	e	enum:CUresourcetype_enum
CU_RES_VIEW_FORMAT_FLOAT_1X16	/usr/local/cuda/include/cuda.h	/^    CU_RES_VIEW_FORMAT_FLOAT_1X16    = 0x13, \/**< 1 channel 16-bit floating point *\/$/;"	e	enum:CUresourceViewFormat_enum
CU_RES_VIEW_FORMAT_FLOAT_1X32	/usr/local/cuda/include/cuda.h	/^    CU_RES_VIEW_FORMAT_FLOAT_1X32    = 0x16, \/**< 1 channel 32-bit floating point *\/$/;"	e	enum:CUresourceViewFormat_enum
CU_RES_VIEW_FORMAT_FLOAT_2X16	/usr/local/cuda/include/cuda.h	/^    CU_RES_VIEW_FORMAT_FLOAT_2X16    = 0x14, \/**< 2 channel 16-bit floating point *\/$/;"	e	enum:CUresourceViewFormat_enum
CU_RES_VIEW_FORMAT_FLOAT_2X32	/usr/local/cuda/include/cuda.h	/^    CU_RES_VIEW_FORMAT_FLOAT_2X32    = 0x17, \/**< 2 channel 32-bit floating point *\/$/;"	e	enum:CUresourceViewFormat_enum
CU_RES_VIEW_FORMAT_FLOAT_4X16	/usr/local/cuda/include/cuda.h	/^    CU_RES_VIEW_FORMAT_FLOAT_4X16    = 0x15, \/**< 4 channel 16-bit floating point *\/$/;"	e	enum:CUresourceViewFormat_enum
CU_RES_VIEW_FORMAT_FLOAT_4X32	/usr/local/cuda/include/cuda.h	/^    CU_RES_VIEW_FORMAT_FLOAT_4X32    = 0x18, \/**< 4 channel 32-bit floating point *\/$/;"	e	enum:CUresourceViewFormat_enum
CU_RES_VIEW_FORMAT_NONE	/usr/local/cuda/include/cuda.h	/^    CU_RES_VIEW_FORMAT_NONE          = 0x00, \/**< No resource view format (use underlying resource format) *\/$/;"	e	enum:CUresourceViewFormat_enum
CU_RES_VIEW_FORMAT_SIGNED_BC4	/usr/local/cuda/include/cuda.h	/^    CU_RES_VIEW_FORMAT_SIGNED_BC4    = 0x1d, \/**< Block compressed 4 signed *\/$/;"	e	enum:CUresourceViewFormat_enum
CU_RES_VIEW_FORMAT_SIGNED_BC5	/usr/local/cuda/include/cuda.h	/^    CU_RES_VIEW_FORMAT_SIGNED_BC5    = 0x1f, \/**< Block compressed 5 signed *\/$/;"	e	enum:CUresourceViewFormat_enum
CU_RES_VIEW_FORMAT_SIGNED_BC6H	/usr/local/cuda/include/cuda.h	/^    CU_RES_VIEW_FORMAT_SIGNED_BC6H   = 0x21, \/**< Block compressed 6 signed half-float *\/$/;"	e	enum:CUresourceViewFormat_enum
CU_RES_VIEW_FORMAT_SINT_1X16	/usr/local/cuda/include/cuda.h	/^    CU_RES_VIEW_FORMAT_SINT_1X16     = 0x0a, \/**< 1 channel signed 16-bit integers *\/$/;"	e	enum:CUresourceViewFormat_enum
CU_RES_VIEW_FORMAT_SINT_1X32	/usr/local/cuda/include/cuda.h	/^    CU_RES_VIEW_FORMAT_SINT_1X32     = 0x10, \/**< 1 channel signed 32-bit integers *\/$/;"	e	enum:CUresourceViewFormat_enum
CU_RES_VIEW_FORMAT_SINT_1X8	/usr/local/cuda/include/cuda.h	/^    CU_RES_VIEW_FORMAT_SINT_1X8      = 0x04, \/**< 1 channel signed 8-bit integers *\/$/;"	e	enum:CUresourceViewFormat_enum
CU_RES_VIEW_FORMAT_SINT_2X16	/usr/local/cuda/include/cuda.h	/^    CU_RES_VIEW_FORMAT_SINT_2X16     = 0x0b, \/**< 2 channel signed 16-bit integers *\/$/;"	e	enum:CUresourceViewFormat_enum
CU_RES_VIEW_FORMAT_SINT_2X32	/usr/local/cuda/include/cuda.h	/^    CU_RES_VIEW_FORMAT_SINT_2X32     = 0x11, \/**< 2 channel signed 32-bit integers *\/$/;"	e	enum:CUresourceViewFormat_enum
CU_RES_VIEW_FORMAT_SINT_2X8	/usr/local/cuda/include/cuda.h	/^    CU_RES_VIEW_FORMAT_SINT_2X8      = 0x05, \/**< 2 channel signed 8-bit integers *\/$/;"	e	enum:CUresourceViewFormat_enum
CU_RES_VIEW_FORMAT_SINT_4X16	/usr/local/cuda/include/cuda.h	/^    CU_RES_VIEW_FORMAT_SINT_4X16     = 0x0c, \/**< 4 channel signed 16-bit integers *\/$/;"	e	enum:CUresourceViewFormat_enum
CU_RES_VIEW_FORMAT_SINT_4X32	/usr/local/cuda/include/cuda.h	/^    CU_RES_VIEW_FORMAT_SINT_4X32     = 0x12, \/**< 4 channel signed 32-bit integers *\/$/;"	e	enum:CUresourceViewFormat_enum
CU_RES_VIEW_FORMAT_SINT_4X8	/usr/local/cuda/include/cuda.h	/^    CU_RES_VIEW_FORMAT_SINT_4X8      = 0x06, \/**< 4 channel signed 8-bit integers *\/$/;"	e	enum:CUresourceViewFormat_enum
CU_RES_VIEW_FORMAT_UINT_1X16	/usr/local/cuda/include/cuda.h	/^    CU_RES_VIEW_FORMAT_UINT_1X16     = 0x07, \/**< 1 channel unsigned 16-bit integers *\/$/;"	e	enum:CUresourceViewFormat_enum
CU_RES_VIEW_FORMAT_UINT_1X32	/usr/local/cuda/include/cuda.h	/^    CU_RES_VIEW_FORMAT_UINT_1X32     = 0x0d, \/**< 1 channel unsigned 32-bit integers *\/$/;"	e	enum:CUresourceViewFormat_enum
CU_RES_VIEW_FORMAT_UINT_1X8	/usr/local/cuda/include/cuda.h	/^    CU_RES_VIEW_FORMAT_UINT_1X8      = 0x01, \/**< 1 channel unsigned 8-bit integers *\/$/;"	e	enum:CUresourceViewFormat_enum
CU_RES_VIEW_FORMAT_UINT_2X16	/usr/local/cuda/include/cuda.h	/^    CU_RES_VIEW_FORMAT_UINT_2X16     = 0x08, \/**< 2 channel unsigned 16-bit integers *\/$/;"	e	enum:CUresourceViewFormat_enum
CU_RES_VIEW_FORMAT_UINT_2X32	/usr/local/cuda/include/cuda.h	/^    CU_RES_VIEW_FORMAT_UINT_2X32     = 0x0e, \/**< 2 channel unsigned 32-bit integers *\/$/;"	e	enum:CUresourceViewFormat_enum
CU_RES_VIEW_FORMAT_UINT_2X8	/usr/local/cuda/include/cuda.h	/^    CU_RES_VIEW_FORMAT_UINT_2X8      = 0x02, \/**< 2 channel unsigned 8-bit integers *\/$/;"	e	enum:CUresourceViewFormat_enum
CU_RES_VIEW_FORMAT_UINT_4X16	/usr/local/cuda/include/cuda.h	/^    CU_RES_VIEW_FORMAT_UINT_4X16     = 0x09, \/**< 4 channel unsigned 16-bit integers *\/$/;"	e	enum:CUresourceViewFormat_enum
CU_RES_VIEW_FORMAT_UINT_4X32	/usr/local/cuda/include/cuda.h	/^    CU_RES_VIEW_FORMAT_UINT_4X32     = 0x0f, \/**< 4 channel unsigned 32-bit integers *\/$/;"	e	enum:CUresourceViewFormat_enum
CU_RES_VIEW_FORMAT_UINT_4X8	/usr/local/cuda/include/cuda.h	/^    CU_RES_VIEW_FORMAT_UINT_4X8      = 0x03, \/**< 4 channel unsigned 8-bit integers *\/$/;"	e	enum:CUresourceViewFormat_enum
CU_RES_VIEW_FORMAT_UNSIGNED_BC1	/usr/local/cuda/include/cuda.h	/^    CU_RES_VIEW_FORMAT_UNSIGNED_BC1  = 0x19, \/**< Block compressed 1 *\/$/;"	e	enum:CUresourceViewFormat_enum
CU_RES_VIEW_FORMAT_UNSIGNED_BC2	/usr/local/cuda/include/cuda.h	/^    CU_RES_VIEW_FORMAT_UNSIGNED_BC2  = 0x1a, \/**< Block compressed 2 *\/$/;"	e	enum:CUresourceViewFormat_enum
CU_RES_VIEW_FORMAT_UNSIGNED_BC3	/usr/local/cuda/include/cuda.h	/^    CU_RES_VIEW_FORMAT_UNSIGNED_BC3  = 0x1b, \/**< Block compressed 3 *\/$/;"	e	enum:CUresourceViewFormat_enum
CU_RES_VIEW_FORMAT_UNSIGNED_BC4	/usr/local/cuda/include/cuda.h	/^    CU_RES_VIEW_FORMAT_UNSIGNED_BC4  = 0x1c, \/**< Block compressed 4 unsigned *\/$/;"	e	enum:CUresourceViewFormat_enum
CU_RES_VIEW_FORMAT_UNSIGNED_BC5	/usr/local/cuda/include/cuda.h	/^    CU_RES_VIEW_FORMAT_UNSIGNED_BC5  = 0x1e, \/**< Block compressed 5 unsigned *\/$/;"	e	enum:CUresourceViewFormat_enum
CU_RES_VIEW_FORMAT_UNSIGNED_BC6H	/usr/local/cuda/include/cuda.h	/^    CU_RES_VIEW_FORMAT_UNSIGNED_BC6H = 0x20, \/**< Block compressed 6 unsigned half-float *\/$/;"	e	enum:CUresourceViewFormat_enum
CU_RES_VIEW_FORMAT_UNSIGNED_BC7	/usr/local/cuda/include/cuda.h	/^    CU_RES_VIEW_FORMAT_UNSIGNED_BC7  = 0x22  \/**< Block compressed 7 *\/$/;"	e	enum:CUresourceViewFormat_enum
CU_SHAREDMEM_CARVEOUT_DEFAULT	/usr/local/cuda/include/cuda.h	/^    CU_SHAREDMEM_CARVEOUT_DEFAULT       = -1,  \/** < no preference for shared memory or L1 (default) *\/$/;"	e	enum:CUshared_carveout_enum
CU_SHAREDMEM_CARVEOUT_MAX_L1	/usr/local/cuda/include/cuda.h	/^    CU_SHAREDMEM_CARVEOUT_MAX_L1        = 0    \/** < prefer maximum available L1 cache, minimum shared memory *\/$/;"	e	enum:CUshared_carveout_enum
CU_SHAREDMEM_CARVEOUT_MAX_SHARED	/usr/local/cuda/include/cuda.h	/^    CU_SHAREDMEM_CARVEOUT_MAX_SHARED    = 100, \/** < prefer maximum available shared memory, minimum L1 cache *\/$/;"	e	enum:CUshared_carveout_enum
CU_SHARED_MEM_CONFIG_DEFAULT_BANK_SIZE	/usr/local/cuda/include/cuda.h	/^    CU_SHARED_MEM_CONFIG_DEFAULT_BANK_SIZE    = 0x00, \/**< set default shared memory bank size *\/$/;"	e	enum:CUsharedconfig_enum
CU_SHARED_MEM_CONFIG_EIGHT_BYTE_BANK_SIZE	/usr/local/cuda/include/cuda.h	/^    CU_SHARED_MEM_CONFIG_EIGHT_BYTE_BANK_SIZE = 0x02  \/**< set shared memory bank width to eight bytes *\/$/;"	e	enum:CUsharedconfig_enum
CU_SHARED_MEM_CONFIG_FOUR_BYTE_BANK_SIZE	/usr/local/cuda/include/cuda.h	/^    CU_SHARED_MEM_CONFIG_FOUR_BYTE_BANK_SIZE  = 0x01, \/**< set shared memory bank width to four bytes *\/$/;"	e	enum:CUsharedconfig_enum
CU_STREAM_DEFAULT	/usr/local/cuda/include/cuda.h	/^    CU_STREAM_DEFAULT      = 0x0, \/**< Default stream flag *\/$/;"	e	enum:CUstream_flags_enum
CU_STREAM_LEGACY	/usr/local/cuda/include/cuda.h	324;"	d
CU_STREAM_MEM_OP_FLUSH_REMOTE_WRITES	/usr/local/cuda/include/cuda.h	/^    CU_STREAM_MEM_OP_FLUSH_REMOTE_WRITES = 3 \/**< This has the same effect as ::CU_STREAM_WAIT_VALUE_FLUSH, but as a$/;"	e	enum:CUstreamBatchMemOpType_enum
CU_STREAM_MEM_OP_WAIT_VALUE_32	/usr/local/cuda/include/cuda.h	/^    CU_STREAM_MEM_OP_WAIT_VALUE_32  = 1,     \/**< Represents a ::cuStreamWaitValue32 operation *\/$/;"	e	enum:CUstreamBatchMemOpType_enum
CU_STREAM_MEM_OP_WAIT_VALUE_64	/usr/local/cuda/include/cuda.h	/^    CU_STREAM_MEM_OP_WAIT_VALUE_64  = 4,     \/**< Represents a ::cuStreamWaitValue64 operation *\/$/;"	e	enum:CUstreamBatchMemOpType_enum
CU_STREAM_MEM_OP_WRITE_VALUE_32	/usr/local/cuda/include/cuda.h	/^    CU_STREAM_MEM_OP_WRITE_VALUE_32 = 2,     \/**< Represents a ::cuStreamWriteValue32 operation *\/$/;"	e	enum:CUstreamBatchMemOpType_enum
CU_STREAM_MEM_OP_WRITE_VALUE_64	/usr/local/cuda/include/cuda.h	/^    CU_STREAM_MEM_OP_WRITE_VALUE_64 = 5,     \/**< Represents a ::cuStreamWriteValue64 operation *\/$/;"	e	enum:CUstreamBatchMemOpType_enum
CU_STREAM_NON_BLOCKING	/usr/local/cuda/include/cuda.h	/^    CU_STREAM_NON_BLOCKING = 0x1  \/**< Stream does not synchronize with stream 0 (the NULL stream) *\/$/;"	e	enum:CUstream_flags_enum
CU_STREAM_PER_THREAD	/usr/local/cuda/include/cuda.h	334;"	d
CU_STREAM_WAIT_VALUE_AND	/usr/local/cuda/include/cuda.h	/^    CU_STREAM_WAIT_VALUE_AND   = 0x2,   \/**< Wait until (*addr & value) != 0. *\/$/;"	e	enum:CUstreamWaitValue_flags_enum
CU_STREAM_WAIT_VALUE_EQ	/usr/local/cuda/include/cuda.h	/^    CU_STREAM_WAIT_VALUE_EQ    = 0x1,   \/**< Wait until *addr == value. *\/$/;"	e	enum:CUstreamWaitValue_flags_enum
CU_STREAM_WAIT_VALUE_FLUSH	/usr/local/cuda/include/cuda.h	/^    CU_STREAM_WAIT_VALUE_FLUSH = 1<<30  \/**< Follow the wait operation with a flush of outstanding remote writes. This$/;"	e	enum:CUstreamWaitValue_flags_enum
CU_STREAM_WAIT_VALUE_GEQ	/usr/local/cuda/include/cuda.h	/^    CU_STREAM_WAIT_VALUE_GEQ   = 0x0,   \/**< Wait until (int32_t)(*addr - value) >= 0 (or int64_t for 64 bit$/;"	e	enum:CUstreamWaitValue_flags_enum
CU_STREAM_WAIT_VALUE_NOR	/usr/local/cuda/include/cuda.h	/^    CU_STREAM_WAIT_VALUE_NOR   = 0x3,   \/**< Wait until ~(*addr | value) != 0. Support for this operation can be$/;"	e	enum:CUstreamWaitValue_flags_enum
CU_STREAM_WRITE_VALUE_DEFAULT	/usr/local/cuda/include/cuda.h	/^    CU_STREAM_WRITE_VALUE_DEFAULT           = 0x0, \/**< Default behavior *\/$/;"	e	enum:CUstreamWriteValue_flags_enum
CU_STREAM_WRITE_VALUE_NO_MEMORY_BARRIER	/usr/local/cuda/include/cuda.h	/^    CU_STREAM_WRITE_VALUE_NO_MEMORY_BARRIER = 0x1  \/**< Permits the write to be reordered with writes which were issued$/;"	e	enum:CUstreamWriteValue_flags_enum
CU_TARGET_COMPUTE_10	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    CU_TARGET_COMPUTE_10 = 0,   \/**< Compute device class 1.0 *\/$/;"	e	enum:CUjit_target_enum
CU_TARGET_COMPUTE_11	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    CU_TARGET_COMPUTE_11,       \/**< Compute device class 1.1 *\/$/;"	e	enum:CUjit_target_enum
CU_TARGET_COMPUTE_12	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    CU_TARGET_COMPUTE_12,       \/**< Compute device class 1.2 *\/$/;"	e	enum:CUjit_target_enum
CU_TARGET_COMPUTE_13	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    CU_TARGET_COMPUTE_13,       \/**< Compute device class 1.3 *\/$/;"	e	enum:CUjit_target_enum
CU_TARGET_COMPUTE_20	/usr/local/cuda/include/cuda.h	/^    CU_TARGET_COMPUTE_20 = 20,       \/**< Compute device class 2.0 *\/$/;"	e	enum:CUjit_target_enum
CU_TARGET_COMPUTE_20	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    CU_TARGET_COMPUTE_20,       \/**< Compute device class 2.0 *\/$/;"	e	enum:CUjit_target_enum
CU_TARGET_COMPUTE_21	/usr/local/cuda/include/cuda.h	/^    CU_TARGET_COMPUTE_21 = 21,       \/**< Compute device class 2.1 *\/$/;"	e	enum:CUjit_target_enum
CU_TARGET_COMPUTE_21	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    CU_TARGET_COMPUTE_21        \/**< Compute device class 2.1 *\/$/;"	e	enum:CUjit_target_enum
CU_TARGET_COMPUTE_30	/usr/local/cuda/include/cuda.h	/^    CU_TARGET_COMPUTE_30 = 30,       \/**< Compute device class 3.0 *\/$/;"	e	enum:CUjit_target_enum
CU_TARGET_COMPUTE_32	/usr/local/cuda/include/cuda.h	/^    CU_TARGET_COMPUTE_32 = 32,       \/**< Compute device class 3.2 *\/$/;"	e	enum:CUjit_target_enum
CU_TARGET_COMPUTE_35	/usr/local/cuda/include/cuda.h	/^    CU_TARGET_COMPUTE_35 = 35,       \/**< Compute device class 3.5 *\/$/;"	e	enum:CUjit_target_enum
CU_TARGET_COMPUTE_37	/usr/local/cuda/include/cuda.h	/^    CU_TARGET_COMPUTE_37 = 37,       \/**< Compute device class 3.7 *\/$/;"	e	enum:CUjit_target_enum
CU_TARGET_COMPUTE_50	/usr/local/cuda/include/cuda.h	/^    CU_TARGET_COMPUTE_50 = 50,       \/**< Compute device class 5.0 *\/$/;"	e	enum:CUjit_target_enum
CU_TARGET_COMPUTE_52	/usr/local/cuda/include/cuda.h	/^    CU_TARGET_COMPUTE_52 = 52,       \/**< Compute device class 5.2 *\/$/;"	e	enum:CUjit_target_enum
CU_TARGET_COMPUTE_53	/usr/local/cuda/include/cuda.h	/^    CU_TARGET_COMPUTE_53 = 53,       \/**< Compute device class 5.3 *\/$/;"	e	enum:CUjit_target_enum
CU_TARGET_COMPUTE_60	/usr/local/cuda/include/cuda.h	/^    CU_TARGET_COMPUTE_60 = 60,       \/**< Compute device class 6.0.*\/$/;"	e	enum:CUjit_target_enum
CU_TARGET_COMPUTE_61	/usr/local/cuda/include/cuda.h	/^    CU_TARGET_COMPUTE_61 = 61,       \/**< Compute device class 6.1.*\/$/;"	e	enum:CUjit_target_enum
CU_TARGET_COMPUTE_62	/usr/local/cuda/include/cuda.h	/^    CU_TARGET_COMPUTE_62 = 62,       \/**< Compute device class 6.2.*\/$/;"	e	enum:CUjit_target_enum
CU_TARGET_COMPUTE_70	/usr/local/cuda/include/cuda.h	/^    CU_TARGET_COMPUTE_70 = 70        \/**< Compute device class 7.0.*\/$/;"	e	enum:CUjit_target_enum
CU_TRSA_OVERRIDE_FORMAT	/usr/local/cuda/include/cuda.h	1841;"	d
CU_TRSA_OVERRIDE_FORMAT	/usr/local/cuda/include/dynlink_cuda_cuda.h	1114;"	d
CU_TRSA_OVERRIDE_FORMAT	/usr/local/cuda/include/dynlink_cuda_cuda.h	950;"	d
CU_TRSF_NORMALIZED_COORDINATES	/usr/local/cuda/include/cuda.h	1854;"	d
CU_TRSF_NORMALIZED_COORDINATES	/usr/local/cuda/include/dynlink_cuda_cuda.h	1127;"	d
CU_TRSF_NORMALIZED_COORDINATES	/usr/local/cuda/include/dynlink_cuda_cuda.h	963;"	d
CU_TRSF_READ_AS_INTEGER	/usr/local/cuda/include/cuda.h	1848;"	d
CU_TRSF_READ_AS_INTEGER	/usr/local/cuda/include/dynlink_cuda_cuda.h	1121;"	d
CU_TRSF_READ_AS_INTEGER	/usr/local/cuda/include/dynlink_cuda_cuda.h	957;"	d
CU_TRSF_SRGB	/usr/local/cuda/include/cuda.h	1860;"	d
CU_TRSF_SRGB	/usr/local/cuda/include/dynlink_cuda_cuda.h	1133;"	d
CU_TRSF_SRGB	/usr/local/cuda/include/dynlink_cuda_cuda.h	969;"	d
CU_TR_ADDRESS_MODE_BORDER	/usr/local/cuda/include/cuda.h	/^    CU_TR_ADDRESS_MODE_BORDER = 3  \/**< Border address mode *\/$/;"	e	enum:CUaddress_mode_enum
CU_TR_ADDRESS_MODE_BORDER	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    CU_TR_ADDRESS_MODE_BORDER = 3  \/**< Border address mode *\/$/;"	e	enum:CUaddress_mode_enum
CU_TR_ADDRESS_MODE_CLAMP	/usr/local/cuda/include/cuda.h	/^    CU_TR_ADDRESS_MODE_CLAMP  = 1, \/**< Clamp to edge address mode *\/$/;"	e	enum:CUaddress_mode_enum
CU_TR_ADDRESS_MODE_CLAMP	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    CU_TR_ADDRESS_MODE_CLAMP  = 1, \/**< Clamp to edge address mode *\/$/;"	e	enum:CUaddress_mode_enum
CU_TR_ADDRESS_MODE_MIRROR	/usr/local/cuda/include/cuda.h	/^    CU_TR_ADDRESS_MODE_MIRROR = 2, \/**< Mirror address mode *\/$/;"	e	enum:CUaddress_mode_enum
CU_TR_ADDRESS_MODE_MIRROR	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    CU_TR_ADDRESS_MODE_MIRROR = 2, \/**< Mirror address mode *\/$/;"	e	enum:CUaddress_mode_enum
CU_TR_ADDRESS_MODE_WRAP	/usr/local/cuda/include/cuda.h	/^    CU_TR_ADDRESS_MODE_WRAP   = 0, \/**< Wrapping address mode *\/$/;"	e	enum:CUaddress_mode_enum
CU_TR_ADDRESS_MODE_WRAP	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    CU_TR_ADDRESS_MODE_WRAP   = 0, \/**< Wrapping address mode *\/$/;"	e	enum:CUaddress_mode_enum
CU_TR_FILTER_MODE_LINEAR	/usr/local/cuda/include/cuda.h	/^    CU_TR_FILTER_MODE_LINEAR = 1  \/**< Linear filter mode *\/$/;"	e	enum:CUfilter_mode_enum
CU_TR_FILTER_MODE_LINEAR	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    CU_TR_FILTER_MODE_LINEAR = 1  \/**< Linear filter mode *\/$/;"	e	enum:CUfilter_mode_enum
CU_TR_FILTER_MODE_POINT	/usr/local/cuda/include/cuda.h	/^    CU_TR_FILTER_MODE_POINT  = 0, \/**< Point filter mode *\/$/;"	e	enum:CUfilter_mode_enum
CU_TR_FILTER_MODE_POINT	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    CU_TR_FILTER_MODE_POINT  = 0, \/**< Point filter mode *\/$/;"	e	enum:CUfilter_mode_enum
CUaddress_mode	/usr/local/cuda/include/cuda.h	/^} CUaddress_mode;$/;"	t	typeref:enum:CUaddress_mode_enum
CUaddress_mode	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^} CUaddress_mode;$/;"	t	typeref:enum:CUaddress_mode_enum
CUaddress_mode_enum	/usr/local/cuda/include/cuda.h	/^typedef enum CUaddress_mode_enum {$/;"	g
CUaddress_mode_enum	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^typedef enum CUaddress_mode_enum$/;"	g
CUarray	/usr/local/cuda/include/cuda.h	/^typedef struct CUarray_st *CUarray;                       \/**< CUDA array *\/$/;"	t	typeref:struct:CUarray_st
CUarray	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^typedef struct CUarray_st *CUarray;                       \/**< CUDA array *\/$/;"	t	typeref:struct:CUarray_st
CUarray_cubemap_face	/usr/local/cuda/include/cuda.h	/^} CUarray_cubemap_face;$/;"	t	typeref:enum:CUarray_cubemap_face_enum
CUarray_cubemap_face	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^} CUarray_cubemap_face;$/;"	t	typeref:enum:CUarray_cubemap_face_enum
CUarray_cubemap_face_enum	/usr/local/cuda/include/cuda.h	/^typedef enum CUarray_cubemap_face_enum {$/;"	g
CUarray_cubemap_face_enum	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^typedef enum CUarray_cubemap_face_enum$/;"	g
CUarray_format	/usr/local/cuda/include/cuda.h	/^} CUarray_format;$/;"	t	typeref:enum:CUarray_format_enum
CUarray_format	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^} CUarray_format;$/;"	t	typeref:enum:CUarray_format_enum
CUarray_format_enum	/usr/local/cuda/include/cuda.h	/^typedef enum CUarray_format_enum {$/;"	g
CUarray_format_enum	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^typedef enum CUarray_format_enum$/;"	g
CUcomputemode	/usr/local/cuda/include/cuda.h	/^} CUcomputemode;$/;"	t	typeref:enum:CUcomputemode_enum
CUcomputemode	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^} CUcomputemode;$/;"	t	typeref:enum:CUcomputemode_enum
CUcomputemode_enum	/usr/local/cuda/include/cuda.h	/^typedef enum CUcomputemode_enum {$/;"	g
CUcomputemode_enum	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^typedef enum CUcomputemode_enum$/;"	g
CUcontext	/usr/local/cuda/include/cuda.h	/^typedef struct CUctx_st *CUcontext;                       \/**< CUDA context *\/$/;"	t	typeref:struct:CUctx_st
CUcontext	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^typedef struct CUctx_st *CUcontext;                       \/**< CUDA context *\/$/;"	t	typeref:struct:CUctx_st
CUctx_flags	/usr/local/cuda/include/cuda.h	/^} CUctx_flags;$/;"	t	typeref:enum:CUctx_flags_enum
CUctx_flags	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^} CUctx_flags;$/;"	t	typeref:enum:CUctx_flags_enum
CUctx_flags_enum	/usr/local/cuda/include/cuda.h	/^typedef enum CUctx_flags_enum {$/;"	g
CUctx_flags_enum	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^typedef enum CUctx_flags_enum$/;"	g
CUdevice	/usr/local/cuda/include/cuda.h	/^typedef int CUdevice;                                     \/**< CUDA device *\/$/;"	t
CUdevice	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^typedef int CUdevice;                                     \/**< CUDA device *\/$/;"	t
CUdevice_P2PAttribute	/usr/local/cuda/include/cuda.h	/^} CUdevice_P2PAttribute;$/;"	t	typeref:enum:CUdevice_P2PAttribute_enum
CUdevice_P2PAttribute_enum	/usr/local/cuda/include/cuda.h	/^typedef enum CUdevice_P2PAttribute_enum {$/;"	g
CUdevice_attribute	/usr/local/cuda/include/cuda.h	/^} CUdevice_attribute;$/;"	t	typeref:enum:CUdevice_attribute_enum
CUdevice_attribute	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^} CUdevice_attribute;$/;"	t	typeref:enum:CUdevice_attribute_enum
CUdevice_attribute_enum	/usr/local/cuda/include/cuda.h	/^typedef enum CUdevice_attribute_enum {$/;"	g
CUdevice_attribute_enum	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^typedef enum CUdevice_attribute_enum$/;"	g
CUdeviceptr	/usr/local/cuda/include/cuda.h	/^typedef unsigned int CUdeviceptr;$/;"	t
CUdeviceptr	/usr/local/cuda/include/cuda.h	/^typedef unsigned long long CUdeviceptr;$/;"	t
CUdeviceptr	/usr/local/cuda/include/cuda.h	11969;"	d
CUdeviceptr	/usr/local/cuda/include/cuda.h	12108;"	d
CUdeviceptr	/usr/local/cuda/include/cudaGL.h	616;"	d
CUdeviceptr	/usr/local/cuda/include/cudaGL.h	626;"	d
CUdeviceptr	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    typedef unsigned int CUdeviceptr;$/;"	t
CUdeviceptr	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    typedef unsigned long long CUdeviceptr;$/;"	t
CUdeviceptr	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^typedef unsigned int CUdeviceptr;$/;"	t
CUdeviceptr	/usr/local/cuda/include/dynlink_cuda_cuda.h	1008;"	d
CUdevprop	/usr/local/cuda/include/cuda.h	/^} CUdevprop;$/;"	t	typeref:struct:CUdevprop_st
CUdevprop	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^} CUdevprop;$/;"	t	typeref:struct:CUdevprop_st
CUdevprop_st	/usr/local/cuda/include/cuda.h	/^typedef struct CUdevprop_st {$/;"	s
CUdevprop_st	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^typedef struct CUdevprop_st$/;"	s
CUeglColorFormat	/usr/local/cuda/include/cudaEGL.h	/^} CUeglColorFormat;$/;"	t	typeref:enum:CUeglColorFormat_enum
CUeglColorFormat_enum	/usr/local/cuda/include/cudaEGL.h	/^typedef enum CUeglColorFormat_enum {$/;"	g
CUeglFrame	/usr/local/cuda/include/cudaEGL.h	/^} CUeglFrame;$/;"	t	typeref:struct:CUeglFrame_st
CUeglFrameType	/usr/local/cuda/include/cudaEGL.h	/^} CUeglFrameType;$/;"	t	typeref:enum:CUeglFrameType_enum
CUeglFrameType_enum	/usr/local/cuda/include/cudaEGL.h	/^typedef enum CUeglFrameType_enum {$/;"	g
CUeglFrame_st	/usr/local/cuda/include/cudaEGL.h	/^typedef struct CUeglFrame_st {$/;"	s
CUeglResourceLocationFlags	/usr/local/cuda/include/cudaEGL.h	/^} CUeglResourceLocationFlags;$/;"	t	typeref:enum:CUeglResourceLocationFlags_enum
CUeglResourceLocationFlags_enum	/usr/local/cuda/include/cudaEGL.h	/^typedef enum CUeglResourceLocationFlags_enum {$/;"	g
CUeglStreamConnection	/usr/local/cuda/include/cudaEGL.h	/^typedef struct CUeglStreamConnection_st* CUeglStreamConnection;$/;"	t	typeref:struct:CUeglStreamConnection_st
CUevent	/usr/local/cuda/include/cuda.h	/^typedef struct CUevent_st *CUevent;                       \/**< CUDA event *\/$/;"	t	typeref:struct:CUevent_st
CUevent	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^typedef struct CUevent_st *CUevent;                       \/**< CUDA event *\/$/;"	t	typeref:struct:CUevent_st
CUevent_flags	/usr/local/cuda/include/cuda.h	/^} CUevent_flags;$/;"	t	typeref:enum:CUevent_flags_enum
CUevent_flags	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^} CUevent_flags;$/;"	t	typeref:enum:CUevent_flags_enum
CUevent_flags_enum	/usr/local/cuda/include/cuda.h	/^typedef enum CUevent_flags_enum {$/;"	g
CUevent_flags_enum	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^typedef enum CUevent_flags_enum$/;"	g
CUfilter_mode	/usr/local/cuda/include/cuda.h	/^} CUfilter_mode;$/;"	t	typeref:enum:CUfilter_mode_enum
CUfilter_mode	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^} CUfilter_mode;$/;"	t	typeref:enum:CUfilter_mode_enum
CUfilter_mode_enum	/usr/local/cuda/include/cuda.h	/^typedef enum CUfilter_mode_enum {$/;"	g
CUfilter_mode_enum	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^typedef enum CUfilter_mode_enum$/;"	g
CUfunc_cache	/usr/local/cuda/include/cuda.h	/^} CUfunc_cache;$/;"	t	typeref:enum:CUfunc_cache_enum
CUfunc_cache	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^} CUfunc_cache;$/;"	t	typeref:enum:CUfunc_cache_enum
CUfunc_cache_enum	/usr/local/cuda/include/cuda.h	/^typedef enum CUfunc_cache_enum {$/;"	g
CUfunc_cache_enum	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^typedef enum CUfunc_cache_enum$/;"	g
CUfunction	/usr/local/cuda/include/cuda.h	/^typedef struct CUfunc_st *CUfunction;                     \/**< CUDA function *\/$/;"	t	typeref:struct:CUfunc_st
CUfunction	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^typedef struct CUfunc_st *CUfunction;                     \/**< CUDA function *\/$/;"	t	typeref:struct:CUfunc_st
CUfunction_attribute	/usr/local/cuda/include/cuda.h	/^} CUfunction_attribute;$/;"	t	typeref:enum:CUfunction_attribute_enum
CUfunction_attribute	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^} CUfunction_attribute;$/;"	t	typeref:enum:CUfunction_attribute_enum
CUfunction_attribute_enum	/usr/local/cuda/include/cuda.h	/^typedef enum CUfunction_attribute_enum {$/;"	g
CUfunction_attribute_enum	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^typedef enum CUfunction_attribute_enum$/;"	g
CUgraphicsMapResourceFlags	/usr/local/cuda/include/cuda.h	/^} CUgraphicsMapResourceFlags;$/;"	t	typeref:enum:CUgraphicsMapResourceFlags_enum
CUgraphicsMapResourceFlags	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^} CUgraphicsMapResourceFlags;$/;"	t	typeref:enum:CUgraphicsMapResourceFlags_enum
CUgraphicsMapResourceFlags_enum	/usr/local/cuda/include/cuda.h	/^typedef enum CUgraphicsMapResourceFlags_enum {$/;"	g
CUgraphicsMapResourceFlags_enum	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^typedef enum CUgraphicsMapResourceFlags_enum$/;"	g
CUgraphicsRegisterFlags	/usr/local/cuda/include/cuda.h	/^} CUgraphicsRegisterFlags;$/;"	t	typeref:enum:CUgraphicsRegisterFlags_enum
CUgraphicsRegisterFlags	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^} CUgraphicsRegisterFlags;$/;"	t	typeref:enum:CUgraphicsRegisterFlags_enum
CUgraphicsRegisterFlags_enum	/usr/local/cuda/include/cuda.h	/^typedef enum CUgraphicsRegisterFlags_enum {$/;"	g
CUgraphicsRegisterFlags_enum	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^typedef enum CUgraphicsRegisterFlags_enum$/;"	g
CUgraphicsResource	/usr/local/cuda/include/cuda.h	/^typedef struct CUgraphicsResource_st *CUgraphicsResource; \/**< CUDA graphics interop resource *\/$/;"	t	typeref:struct:CUgraphicsResource_st
CUgraphicsResource	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^typedef struct CUgraphicsResource_st *CUgraphicsResource; \/**< CUDA graphics interop resource *\/$/;"	t	typeref:struct:CUgraphicsResource_st
CUipcEventHandle	/usr/local/cuda/include/cuda.h	/^} CUipcEventHandle;$/;"	t	typeref:struct:CUipcEventHandle_st
CUipcEventHandle_st	/usr/local/cuda/include/cuda.h	/^typedef struct CUipcEventHandle_st {$/;"	s
CUipcMemHandle	/usr/local/cuda/include/cuda.h	/^} CUipcMemHandle;$/;"	t	typeref:struct:CUipcMemHandle_st
CUipcMemHandle_st	/usr/local/cuda/include/cuda.h	/^typedef struct CUipcMemHandle_st {$/;"	s
CUipcMem_flags	/usr/local/cuda/include/cuda.h	/^} CUipcMem_flags;$/;"	t	typeref:enum:CUipcMem_flags_enum
CUipcMem_flags_enum	/usr/local/cuda/include/cuda.h	/^typedef enum CUipcMem_flags_enum {$/;"	g
CUjitInputType	/usr/local/cuda/include/cuda.h	/^} CUjitInputType;$/;"	t	typeref:enum:CUjitInputType_enum
CUjitInputType_enum	/usr/local/cuda/include/cuda.h	/^typedef enum CUjitInputType_enum$/;"	g
CUjit_cacheMode	/usr/local/cuda/include/cuda.h	/^} CUjit_cacheMode;$/;"	t	typeref:enum:CUjit_cacheMode_enum
CUjit_cacheMode_enum	/usr/local/cuda/include/cuda.h	/^typedef enum CUjit_cacheMode_enum$/;"	g
CUjit_fallback	/usr/local/cuda/include/cuda.h	/^} CUjit_fallback;$/;"	t	typeref:enum:CUjit_fallback_enum
CUjit_fallback	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^} CUjit_fallback;$/;"	t	typeref:enum:CUjit_fallback_enum
CUjit_fallback_enum	/usr/local/cuda/include/cuda.h	/^typedef enum CUjit_fallback_enum$/;"	g
CUjit_fallback_enum	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^typedef enum CUjit_fallback_enum$/;"	g
CUjit_option	/usr/local/cuda/include/cuda.h	/^} CUjit_option;$/;"	t	typeref:enum:CUjit_option_enum
CUjit_option	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^} CUjit_option;$/;"	t	typeref:enum:CUjit_option_enum
CUjit_option_enum	/usr/local/cuda/include/cuda.h	/^typedef enum CUjit_option_enum$/;"	g
CUjit_option_enum	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^typedef enum CUjit_option_enum$/;"	g
CUjit_target	/usr/local/cuda/include/cuda.h	/^} CUjit_target;$/;"	t	typeref:enum:CUjit_target_enum
CUjit_target	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^} CUjit_target;$/;"	t	typeref:enum:CUjit_target_enum
CUjit_target_enum	/usr/local/cuda/include/cuda.h	/^typedef enum CUjit_target_enum$/;"	g
CUjit_target_enum	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^typedef enum CUjit_target_enum$/;"	g
CUlimit	/usr/local/cuda/include/cuda.h	/^} CUlimit;$/;"	t	typeref:enum:CUlimit_enum
CUlimit	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^} CUlimit;$/;"	t	typeref:enum:CUlimit_enum
CUlimit_enum	/usr/local/cuda/include/cuda.h	/^typedef enum CUlimit_enum {$/;"	g
CUlimit_enum	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^typedef enum CUlimit_enum$/;"	g
CUlinkState	/usr/local/cuda/include/cuda.h	/^typedef struct CUlinkState_st *CUlinkState;$/;"	t	typeref:struct:CUlinkState_st
CUmemAttach_flags	/usr/local/cuda/include/cuda.h	/^} CUmemAttach_flags;$/;"	t	typeref:enum:CUmemAttach_flags_enum
CUmemAttach_flags_enum	/usr/local/cuda/include/cuda.h	/^typedef enum CUmemAttach_flags_enum {$/;"	g
CUmem_advise	/usr/local/cuda/include/cuda.h	/^} CUmem_advise;$/;"	t	typeref:enum:CUmem_advise_enum
CUmem_advise_enum	/usr/local/cuda/include/cuda.h	/^typedef enum CUmem_advise_enum {$/;"	g
CUmem_range_attribute	/usr/local/cuda/include/cuda.h	/^} CUmem_range_attribute;$/;"	t	typeref:enum:CUmem_range_attribute_enum
CUmem_range_attribute_enum	/usr/local/cuda/include/cuda.h	/^typedef enum CUmem_range_attribute_enum {$/;"	g
CUmemorytype	/usr/local/cuda/include/cuda.h	/^} CUmemorytype;$/;"	t	typeref:enum:CUmemorytype_enum
CUmemorytype	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^} CUmemorytype;$/;"	t	typeref:enum:CUmemorytype_enum
CUmemorytype_enum	/usr/local/cuda/include/cuda.h	/^typedef enum CUmemorytype_enum {$/;"	g
CUmemorytype_enum	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^typedef enum CUmemorytype_enum$/;"	g
CUmipmappedArray	/usr/local/cuda/include/cuda.h	/^typedef struct CUmipmappedArray_st *CUmipmappedArray;     \/**< CUDA mipmapped array *\/$/;"	t	typeref:struct:CUmipmappedArray_st
CUmodule	/usr/local/cuda/include/cuda.h	/^typedef struct CUmod_st *CUmodule;                        \/**< CUDA module *\/$/;"	t	typeref:struct:CUmod_st
CUmodule	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^typedef struct CUmod_st *CUmodule;                        \/**< CUDA module *\/$/;"	t	typeref:struct:CUmod_st
CUoccupancyB2DSize	/usr/local/cuda/include/cuda.h	/^typedef size_t (CUDA_CB *CUoccupancyB2DSize)(int blockSize);$/;"	t
CUoccupancy_flags	/usr/local/cuda/include/cuda.h	/^} CUoccupancy_flags;$/;"	t	typeref:enum:CUoccupancy_flags_enum
CUoccupancy_flags_enum	/usr/local/cuda/include/cuda.h	/^typedef enum CUoccupancy_flags_enum {$/;"	g
CUoutput_mode	/usr/local/cuda/include/cudaProfiler.h	/^}CUoutput_mode;$/;"	t	typeref:enum:CUoutput_mode_enum
CUoutput_mode_enum	/usr/local/cuda/include/cudaProfiler.h	/^typedef enum CUoutput_mode_enum$/;"	g
CUpointer_attribute	/usr/local/cuda/include/cuda.h	/^} CUpointer_attribute;$/;"	t	typeref:enum:CUpointer_attribute_enum
CUpointer_attribute_enum	/usr/local/cuda/include/cuda.h	/^typedef enum CUpointer_attribute_enum {$/;"	g
CUresourceViewFormat	/usr/local/cuda/include/cuda.h	/^} CUresourceViewFormat;$/;"	t	typeref:enum:CUresourceViewFormat_enum
CUresourceViewFormat_enum	/usr/local/cuda/include/cuda.h	/^typedef enum CUresourceViewFormat_enum$/;"	g
CUresourcetype	/usr/local/cuda/include/cuda.h	/^} CUresourcetype;$/;"	t	typeref:enum:CUresourcetype_enum
CUresourcetype_enum	/usr/local/cuda/include/cuda.h	/^typedef enum CUresourcetype_enum {$/;"	g
CUresult	/usr/local/cuda/include/cuda.h	/^} CUresult;$/;"	t	typeref:enum:cudaError_enum
CUresult	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^} CUresult;$/;"	t	typeref:enum:cudaError_enum
CUshared_carveout	/usr/local/cuda/include/cuda.h	/^} CUshared_carveout;$/;"	t	typeref:enum:CUshared_carveout_enum
CUshared_carveout_enum	/usr/local/cuda/include/cuda.h	/^typedef enum CUshared_carveout_enum {$/;"	g
CUsharedconfig	/usr/local/cuda/include/cuda.h	/^} CUsharedconfig;$/;"	t	typeref:enum:CUsharedconfig_enum
CUsharedconfig_enum	/usr/local/cuda/include/cuda.h	/^typedef enum CUsharedconfig_enum {$/;"	g
CUstream	/usr/local/cuda/include/cuda.h	/^typedef struct CUstream_st *CUstream;                     \/**< CUDA stream *\/$/;"	t	typeref:struct:CUstream_st
CUstream	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^typedef struct CUstream_st *CUstream;                     \/**< CUDA stream *\/$/;"	t	typeref:struct:CUstream_st
CUstreamBatchMemOpParams	/usr/local/cuda/include/cuda.h	/^} CUstreamBatchMemOpParams;$/;"	t	typeref:union:CUstreamBatchMemOpParams_union
CUstreamBatchMemOpParams_union	/usr/local/cuda/include/cuda.h	/^typedef union CUstreamBatchMemOpParams_union {$/;"	u
CUstreamBatchMemOpType	/usr/local/cuda/include/cuda.h	/^} CUstreamBatchMemOpType;$/;"	t	typeref:enum:CUstreamBatchMemOpType_enum
CUstreamBatchMemOpType_enum	/usr/local/cuda/include/cuda.h	/^typedef enum CUstreamBatchMemOpType_enum {$/;"	g
CUstreamCallback	/usr/local/cuda/include/cuda.h	/^typedef void (CUDA_CB *CUstreamCallback)(CUstream hStream, CUresult status, void *userData);$/;"	t
CUstreamMemOpFlushRemoteWritesParams_st	/usr/local/cuda/include/cuda.h	/^    struct CUstreamMemOpFlushRemoteWritesParams_st {$/;"	s	union:CUstreamBatchMemOpParams_union
CUstreamMemOpWaitValueParams_st	/usr/local/cuda/include/cuda.h	/^    struct CUstreamMemOpWaitValueParams_st {$/;"	s	union:CUstreamBatchMemOpParams_union
CUstreamMemOpWriteValueParams_st	/usr/local/cuda/include/cuda.h	/^    struct CUstreamMemOpWriteValueParams_st {$/;"	s	union:CUstreamBatchMemOpParams_union
CUstreamWaitValue_flags	/usr/local/cuda/include/cuda.h	/^} CUstreamWaitValue_flags;$/;"	t	typeref:enum:CUstreamWaitValue_flags_enum
CUstreamWaitValue_flags_enum	/usr/local/cuda/include/cuda.h	/^typedef enum CUstreamWaitValue_flags_enum {$/;"	g
CUstreamWriteValue_flags	/usr/local/cuda/include/cuda.h	/^} CUstreamWriteValue_flags;$/;"	t	typeref:enum:CUstreamWriteValue_flags_enum
CUstreamWriteValue_flags_enum	/usr/local/cuda/include/cuda.h	/^typedef enum CUstreamWriteValue_flags_enum {$/;"	g
CUstream_flags	/usr/local/cuda/include/cuda.h	/^} CUstream_flags;$/;"	t	typeref:enum:CUstream_flags_enum
CUstream_flags_enum	/usr/local/cuda/include/cuda.h	/^typedef enum CUstream_flags_enum {$/;"	g
CUsurfObject	/usr/local/cuda/include/cuda.h	/^typedef unsigned long long CUsurfObject;                  \/**< An opaque value that represents a CUDA surface object *\/$/;"	t
CUsurfref	/usr/local/cuda/include/cuda.h	/^typedef struct CUsurfref_st *CUsurfref;                   \/**< CUDA surface reference *\/$/;"	t	typeref:struct:CUsurfref_st
CUsurfref	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^typedef struct CUsurfref_st *CUsurfref;                   \/**< CUDA surface reference *\/$/;"	t	typeref:struct:CUsurfref_st
CUtexObject	/usr/local/cuda/include/cuda.h	/^typedef unsigned long long CUtexObject;                   \/**< An opaque value that represents a CUDA texture object *\/$/;"	t
CUtexref	/usr/local/cuda/include/cuda.h	/^typedef struct CUtexref_st *CUtexref;                     \/**< CUDA texture reference *\/$/;"	t	typeref:struct:CUtexref_st
CUtexref	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^typedef struct CUtexref_st *CUtexref;                     \/**< CUDA texture reference *\/$/;"	t	typeref:struct:CUtexref_st
CUuuid	/usr/local/cuda/include/cuda.h	/^} CUuuid;$/;"	t	typeref:struct:CUuuid_st
CUuuid	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^} CUuuid;$/;"	t	typeref:struct:CUuuid_st
CUuuid_st	/usr/local/cuda/include/cuda.h	/^typedef struct CUuuid_st {                                \/**< CUDA definition of UUID *\/$/;"	s
CUuuid_st	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^typedef struct CUuuid_st                                  \/**< CUDA definition of UUID *\/$/;"	s
CUvideoctxlock	/usr/local/cuda/include/dynlink_cuviddec.h	/^typedef struct _CUcontextlock_st *CUvideoctxlock;$/;"	t	typeref:struct:_CUcontextlock_st
CUvideodecoder	/usr/local/cuda/include/dynlink_cuviddec.h	/^typedef void *CUvideodecoder;$/;"	t
CUvideopacketflags	/usr/local/cuda/include/dynlink_nvcuvid.h	/^} CUvideopacketflags;$/;"	t	typeref:enum:__anon130
CUvideoparser	/usr/local/cuda/include/dynlink_nvcuvid.h	/^typedef void *CUvideoparser;$/;"	t
CUvideosource	/usr/local/cuda/include/dynlink_nvcuvid.h	/^typedef void *CUvideosource;$/;"	t
CUvideosourceformat_flags	/usr/local/cuda/include/dynlink_nvcuvid.h	/^} CUvideosourceformat_flags;$/;"	t	typeref:enum:__anon131
CUvideotimestamp	/usr/local/cuda/include/dynlink_nvcuvid.h	/^typedef long long CUvideotimestamp;$/;"	t
ChromaFormat	/usr/local/cuda/include/dynlink_cuviddec.h	/^    cudaVideoChromaFormat ChromaFormat; \/**< cudaVideoChromaFormat_XXX (only 4:2:0 is currently supported) *\/$/;"	m	struct:_CUVIDDECODECREATEINFO
Coalesced	/usr/local/cuda/include/cooperative_groups_helpers.h	/^        Coalesced,$/;"	e	enum:__internal::groupType
CoalescedTile	/usr/local/cuda/include/cooperative_groups_helpers.h	/^        CoalescedTile,$/;"	e	enum:__internal::groupType
CodecReserved	/usr/local/cuda/include/dynlink_cuviddec.h	/^        unsigned int CodecReserved[1024];$/;"	m	union:_CUVIDPICPARAMS::__anon120
CodecSpecific	/usr/local/cuda/include/dynlink_cuviddec.h	/^    } CodecSpecific;$/;"	m	struct:_CUVIDPICPARAMS	typeref:union:_CUVIDPICPARAMS::__anon120
CodecType	/usr/local/cuda/include/dynlink_cuviddec.h	/^    cudaVideoCodec CodecType;           \/**< cudaVideoCodec_XXX *\/$/;"	m	struct:_CUVIDDECODECREATEINFO
CodecType	/usr/local/cuda/include/dynlink_nvcuvid.h	/^    cudaVideoCodec CodecType;               \/**< cudaVideoCodec_XXX  *\/$/;"	m	struct:_CUVIDPARSERPARAMS
ConvolutionArgs	src/common.h	/^} ConvolutionArgs;$/;"	t	typeref:struct:__anon6
CurrFieldOrderCnt	/usr/local/cuda/include/dynlink_cuviddec.h	/^    int CurrFieldOrderCnt[2];$/;"	m	struct:_CUVIDH264PICPARAMS
CurrPicIdx	/usr/local/cuda/include/dynlink_cuviddec.h	/^    int CurrPicIdx;                       \/**< Output index of the current picture *\/$/;"	m	struct:_CUVIDPICPARAMS
CurrPicOrderCntVal	/usr/local/cuda/include/dynlink_cuviddec.h	/^    int CurrPicOrderCntVal;$/;"	m	struct:_CUVIDHEVCPICPARAMS
DATA_H	src/data.h	2;"	d
DECLDIR	/usr/local/cuda/include/nvml.h	84;"	d
DECLDIR	/usr/local/cuda/include/nvml.h	86;"	d
DECLDIR	/usr/local/cuda/include/nvml.h	89;"	d
DECLDIR	/usr/local/cuda/include/nvml.h	92;"	d
DECONVOLUTIONAL_LAYER_H	src/deconvolutional_layer.h	2;"	d
DEMO	src/demo.c	12;"	d	file:
DEMO_H	src/demo.h	2;"	d
DETECTION_LAYER_H	src/detection_layer.h	2;"	d
DPBEntryValidFlag	/usr/local/cuda/include/dynlink_cuviddec.h	/^    unsigned short DPBEntryValidFlag;$/;"	m	struct:_CUVIDH264SVCEXT
DQId	/usr/local/cuda/include/dynlink_cuviddec.h	/^    unsigned char DQId;$/;"	m	struct:_CUVIDH264SVCEXT
DQIdMax	/usr/local/cuda/include/dynlink_cuviddec.h	/^    unsigned char DQIdMax;$/;"	m	struct:_CUVIDH264SVCEXT
DROPOUT_LAYER_H	src/dropout_layer.h	2;"	d
DeinterlaceMode	/usr/local/cuda/include/dynlink_cuviddec.h	/^    cudaVideoDeinterlaceMode DeinterlaceMode;  \/**< cudaVideoDeinterlaceMode_XXX *\/$/;"	m	struct:_CUVIDDECODECREATEINFO
Depth	/usr/local/cuda/include/cuda.h	/^    size_t Depth;               \/**< Depth of 3D memory copy *\/$/;"	m	struct:CUDA_MEMCPY3D_PEER_st
Depth	/usr/local/cuda/include/cuda.h	/^    size_t Depth;               \/**< Depth of 3D memory copy *\/$/;"	m	struct:CUDA_MEMCPY3D_st
Depth	/usr/local/cuda/include/cuda.h	/^    size_t Depth;             \/**< Depth of 3D array *\/$/;"	m	struct:CUDA_ARRAY3D_DESCRIPTOR_st
Depth	/usr/local/cuda/include/cuda.h	/^    unsigned int Depth;         \/**< Depth of 3D array *\/$/;"	m	struct:CUDA_ARRAY3D_DESCRIPTOR_st
Depth	/usr/local/cuda/include/cuda.h	/^    unsigned int Depth;         \/**< Depth of 3D memory copy *\/$/;"	m	struct:CUDA_MEMCPY3D_st
Depth	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    size_t Depth;               \/**< Depth of 3D memory copy *\/$/;"	m	struct:CUDA_MEMCPY3D_PEER_st
Depth	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    size_t Depth;               \/**< Depth of 3D memory copy *\/$/;"	m	struct:CUDA_MEMCPY3D_st
Depth	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    size_t Depth;             \/**< Depth of 3D array *\/$/;"	m	struct:CUDA_ARRAY3D_DESCRIPTOR_st
Depth	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    unsigned int Depth;         \/**< Depth of 3D array *\/$/;"	m	struct:CUDA_ARRAY3D_DESCRIPTOR_st
Depth	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    unsigned int Depth;         \/**< Depth of 3D memory copy *\/$/;"	m	struct:CUDA_MEMCPY3D_st
ECCEnabled	/usr/local/cuda/include/driver_types.h	/^    int    ECCEnabled;                 \/**< Device has ECC support enabled *\/$/;"	m	struct:cudaDeviceProp
EXCLUDE_FROM_RTC	/usr/local/cuda/include/builtin_types.h	58;"	d
EXCLUDE_FROM_RTC	/usr/local/cuda/include/builtin_types.h	60;"	d
EXCLUDE_FROM_RTC	/usr/local/cuda/include/cuda_runtime.h	114;"	d
EXCLUDE_FROM_RTC	/usr/local/cuda/include/cuda_runtime.h	127;"	d
EXCLUDE_FROM_RTC	/usr/local/cuda/include/cuda_runtime.h	89;"	d
EXCLUDE_FROM_RTC	/usr/local/cuda/include/cuda_runtime.h	93;"	d
EXCLUDE_FROM_RTC	/usr/local/cuda/include/cuda_surface_types.h	63;"	d
EXCLUDE_FROM_RTC	/usr/local/cuda/include/cuda_surface_types.h	65;"	d
EXCLUDE_FROM_RTC	/usr/local/cuda/include/cuda_texture_types.h	63;"	d
EXCLUDE_FROM_RTC	/usr/local/cuda/include/cuda_texture_types.h	65;"	d
EXCLUDE_FROM_RTC	/usr/local/cuda/include/math_functions.hpp	1153;"	d
EXCLUDE_FROM_RTC	/usr/local/cuda/include/math_functions.hpp	1155;"	d
EXTRA_FLAG_LOG_NORMAL	/usr/local/cuda/include/curand_kernel.h	124;"	d
EXTRA_FLAG_NORMAL	/usr/local/cuda/include/curand_kernel.h	123;"	d
FAST_BITS	src/stb_image.h	1434;"	d
FATBINC_LINK_VERSION	/usr/local/cuda/include/fatBinaryCtl.h	94;"	d
FATBINC_MAGIC	/usr/local/cuda/include/fatBinaryCtl.h	92;"	d
FATBINC_VERSION	/usr/local/cuda/include/fatBinaryCtl.h	93;"	d
FATBIN_CONTROL_SECTION_NAME	/usr/local/cuda/include/fatBinaryCtl.h	109;"	d
FATBIN_CONTROL_SECTION_NAME	/usr/local/cuda/include/fatBinaryCtl.h	114;"	d
FATBIN_DATA_SECTION_NAME	/usr/local/cuda/include/fatBinaryCtl.h	110;"	d
FATBIN_DATA_SECTION_NAME	/usr/local/cuda/include/fatBinaryCtl.h	119;"	d
FATBIN_KIND_ELF	/usr/local/cuda/include/fatbinary.h	/^  FATBIN_KIND_ELF      = 0x0002,$/;"	e	enum:__anon135
FATBIN_KIND_IR	/usr/local/cuda/include/fatbinary.h	/^  FATBIN_KIND_IR       = 0x0008, \/* NVVM IR *\/$/;"	e	enum:__anon135
FATBIN_KIND_OLDCUBIN	/usr/local/cuda/include/fatbinary.h	/^  FATBIN_KIND_OLDCUBIN = 0x0004, \/* old format no longer generated *\/$/;"	e	enum:__anon135
FATBIN_KIND_PTX	/usr/local/cuda/include/fatbinary.h	/^  FATBIN_KIND_PTX      = 0x0001,$/;"	e	enum:__anon135
FATBIN_MAGIC	/usr/local/cuda/include/fatbinary.h	50;"	d
FATBIN_PRELINK_DATA_SECTION_NAME	/usr/local/cuda/include/fatBinaryCtl.h	122;"	d
FATBIN_SEGMENT_NAME	/usr/local/cuda/include/fatBinaryCtl.h	112;"	d
FATBIN_VERSION	/usr/local/cuda/include/fatbinary.h	53;"	d
FBCTL_ERROR_COMPILER_LOAD_FAILED	/usr/local/cuda/include/fatBinaryCtl.h	/^  FBCTL_ERROR_COMPILER_LOAD_FAILED,      \/* loading compiler library failed *\/$/;"	e	enum:__anon132
FBCTL_ERROR_COMPILE_FAILED	/usr/local/cuda/include/fatBinaryCtl.h	/^  FBCTL_ERROR_COMPILE_FAILED,            \/* no candidate found *\/$/;"	e	enum:__anon132
FBCTL_ERROR_INTERNAL	/usr/local/cuda/include/fatBinaryCtl.h	/^  FBCTL_ERROR_INTERNAL,                  \/* unexpected internal error *\/$/;"	e	enum:__anon132
FBCTL_ERROR_NONE	/usr/local/cuda/include/fatBinaryCtl.h	/^  FBCTL_ERROR_NONE = 0,$/;"	e	enum:__anon132
FBCTL_ERROR_NO_CANDIDATE	/usr/local/cuda/include/fatBinaryCtl.h	/^  FBCTL_ERROR_NO_CANDIDATE,              \/* no candidate found *\/$/;"	e	enum:__anon132
FBCTL_ERROR_NULL	/usr/local/cuda/include/fatBinaryCtl.h	/^  FBCTL_ERROR_NULL,                      \/* null pointer *\/$/;"	e	enum:__anon132
FBCTL_ERROR_UNRECOGNIZED	/usr/local/cuda/include/fatBinaryCtl.h	/^  FBCTL_ERROR_UNRECOGNIZED,              \/* unrecognized kind *\/$/;"	e	enum:__anon132
FBCTL_GET_CANDIDATE	/usr/local/cuda/include/fatBinaryCtl.h	57;"	d
FBCTL_GET_CICC_OPTIONS	/usr/local/cuda/include/fatBinaryCtl.h	63;"	d
FBCTL_GET_IDENTIFIER	/usr/local/cuda/include/fatBinaryCtl.h	60;"	d
FBCTL_GET_PTXAS_OPTIONS	/usr/local/cuda/include/fatBinaryCtl.h	62;"	d
FBCTL_HAS_DEBUG	/usr/local/cuda/include/fatBinaryCtl.h	61;"	d
FBCTL_SET_BINARY	/usr/local/cuda/include/fatBinaryCtl.h	51;"	d
FBCTL_SET_CMDOPTIONS	/usr/local/cuda/include/fatBinaryCtl.h	54;"	d
FBCTL_SET_FLAGS	/usr/local/cuda/include/fatBinaryCtl.h	53;"	d
FBCTL_SET_POLICY	/usr/local/cuda/include/fatBinaryCtl.h	55;"	d
FBCTL_SET_TARGETSM	/usr/local/cuda/include/fatBinaryCtl.h	52;"	d
FFTW_BACKWARD	/usr/local/cuda/include/cufftw.h	69;"	d
FFTW_DESTROY_INPUT	/usr/local/cuda/include/cufftw.h	81;"	d
FFTW_ESTIMATE	/usr/local/cuda/include/cufftw.h	73;"	d
FFTW_EXHAUSTIVE	/usr/local/cuda/include/cufftw.h	76;"	d
FFTW_FORWARD	/usr/local/cuda/include/cufftw.h	67;"	d
FFTW_INVERSE	/usr/local/cuda/include/cufftw.h	68;"	d
FFTW_MEASURE	/usr/local/cuda/include/cufftw.h	74;"	d
FFTW_PATIENT	/usr/local/cuda/include/cufftw.h	75;"	d
FFTW_PRESERVE_INPUT	/usr/local/cuda/include/cufftw.h	82;"	d
FFTW_UNALIGNED	/usr/local/cuda/include/cufftw.h	83;"	d
FFTW_WISDOM_ONLY	/usr/local/cuda/include/cufftw.h	77;"	d
FPGA_init	src/gemm.c	/^static int FPGA_init=0;$/;"	v	file:
FUNC_SHMEM_LIMIT_DEFAULT	/usr/local/cuda/include/cuda_occupancy.h	/^    FUNC_SHMEM_LIMIT_DEFAULT,   \/\/ Default shmem limit$/;"	e	enum:cudaOccFuncShmemConfig_enum
FUNC_SHMEM_LIMIT_OPTIN	/usr/local/cuda/include/cuda_occupancy.h	/^    FUNC_SHMEM_LIMIT_OPTIN,     \/\/ Use the optin shmem limit$/;"	e	enum:cudaOccFuncShmemConfig_enum
FieldOrderCnt	/usr/local/cuda/include/dynlink_cuviddec.h	/^    int FieldOrderCnt[2];       \/**< field order count of top and bottom fields *\/$/;"	m	struct:_CUVIDH264DPBENTRY
Flags	/usr/local/cuda/include/cuda.h	/^    unsigned int Flags;         \/**< Flags *\/$/;"	m	struct:CUDA_ARRAY3D_DESCRIPTOR_st
Flags	/usr/local/cuda/include/cuda.h	/^    unsigned int Flags;       \/**< Flags *\/$/;"	m	struct:CUDA_ARRAY3D_DESCRIPTOR_st
Flags	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    unsigned int Flags;         \/**< Flags *\/$/;"	m	struct:CUDA_ARRAY3D_DESCRIPTOR_st
Flags	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    unsigned int Flags;       \/**< Flags *\/$/;"	m	struct:CUDA_ARRAY3D_DESCRIPTOR_st
Format	/usr/local/cuda/include/cuda.h	/^    CUarray_format Format;      \/**< Array format *\/$/;"	m	struct:CUDA_ARRAY3D_DESCRIPTOR_st
Format	/usr/local/cuda/include/cuda.h	/^    CUarray_format Format;      \/**< Array format *\/$/;"	m	struct:CUDA_ARRAY_DESCRIPTOR_st
Format	/usr/local/cuda/include/cuda.h	/^    CUarray_format Format;    \/**< Array format *\/$/;"	m	struct:CUDA_ARRAY3D_DESCRIPTOR_st
Format	/usr/local/cuda/include/cuda.h	/^    CUarray_format Format;    \/**< Array format *\/$/;"	m	struct:CUDA_ARRAY_DESCRIPTOR_st
Format	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    CUarray_format Format;      \/**< Array format *\/$/;"	m	struct:CUDA_ARRAY3D_DESCRIPTOR_st
Format	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    CUarray_format Format;      \/**< Array format *\/$/;"	m	struct:CUDA_ARRAY_DESCRIPTOR_st
Format	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    CUarray_format Format;    \/**< Array format *\/$/;"	m	struct:CUDA_ARRAY3D_DESCRIPTOR_st
Format	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    CUarray_format Format;    \/**< Array format *\/$/;"	m	struct:CUDA_ARRAY_DESCRIPTOR_st
ForwardRefIdx	/usr/local/cuda/include/dynlink_cuviddec.h	/^    int ForwardRefIdx;          \/\/ Picture index of forward reference (P\/B-frames)$/;"	m	struct:_CUVIDMPEG2PICPARAMS
ForwardRefIdx	/usr/local/cuda/include/dynlink_cuviddec.h	/^    int ForwardRefIdx;          \/\/ Picture index of forward reference (P\/B-frames)$/;"	m	struct:_CUVIDMPEG4PICPARAMS
ForwardRefIdx	/usr/local/cuda/include/dynlink_cuviddec.h	/^    int ForwardRefIdx;      \/**< Picture index of forward reference (P\/B-frames) *\/$/;"	m	struct:_CUVIDVC1PICPARAMS
FrameHeight	/usr/local/cuda/include/dynlink_cuviddec.h	/^    int FrameHeight;        \/**< Actual frame height *\/$/;"	m	struct:_CUVIDVC1PICPARAMS
FrameHeightInMbs	/usr/local/cuda/include/dynlink_cuviddec.h	/^    int FrameHeightInMbs;                 \/**< Coded Frame Height *\/$/;"	m	struct:_CUVIDPICPARAMS
FrameIdx	/usr/local/cuda/include/dynlink_cuviddec.h	/^    int FrameIdx;               \/**< frame_num(short-term) or LongTermFrameIdx(long-term) *\/$/;"	m	struct:_CUVIDH264DPBENTRY
FrameWidth	/usr/local/cuda/include/dynlink_cuviddec.h	/^    int FrameWidth;         \/**< Actual frame width *\/$/;"	m	struct:_CUVIDVC1PICPARAMS
GEMM_H	src/gemm.h	2;"	d
GPUs	/usr/local/cuda/include/cudalibxt.h	/^    int GPUs[MAX_CUDA_DESCRIPTOR_GPUS];      \/\/array of device IDs$/;"	m	struct:cudaXtDesc_t
GRU_LAYER_H	src/gru_layer.h	3;"	d
GoldenRefIdx	/usr/local/cuda/include/dynlink_cuviddec.h	/^    unsigned char GoldenRefIdx;$/;"	m	struct:_CUVIDVP8PICPARAMS
GoldenRefIdx	/usr/local/cuda/include/dynlink_cuviddec.h	/^    unsigned char GoldenRefIdx;$/;"	m	struct:_CUVIDVP9PICPARAMS
Grid	/usr/local/cuda/include/cooperative_groups_helpers.h	/^        Grid,$/;"	e	enum:__internal::groupType
HGPUNV	/usr/local/cuda/include/cudaGL.h	/^typedef void* HGPUNV;$/;"	t
HGPUNV	/usr/local/cuda/include/cuda_gl_interop.h	/^typedef void* HGPUNV;$/;"	t
Height	/usr/local/cuda/include/cuda.h	/^    size_t Height;              \/**< Height of 2D memory copy *\/$/;"	m	struct:CUDA_MEMCPY2D_st
Height	/usr/local/cuda/include/cuda.h	/^    size_t Height;              \/**< Height of 3D memory copy *\/$/;"	m	struct:CUDA_MEMCPY3D_PEER_st
Height	/usr/local/cuda/include/cuda.h	/^    size_t Height;              \/**< Height of 3D memory copy *\/$/;"	m	struct:CUDA_MEMCPY3D_st
Height	/usr/local/cuda/include/cuda.h	/^    size_t Height;            \/**< Height of 3D array *\/$/;"	m	struct:CUDA_ARRAY3D_DESCRIPTOR_st
Height	/usr/local/cuda/include/cuda.h	/^    size_t Height;            \/**< Height of array *\/$/;"	m	struct:CUDA_ARRAY_DESCRIPTOR_st
Height	/usr/local/cuda/include/cuda.h	/^    unsigned int Height;        \/**< Height of 2D memory copy *\/$/;"	m	struct:CUDA_MEMCPY2D_st
Height	/usr/local/cuda/include/cuda.h	/^    unsigned int Height;        \/**< Height of 3D array *\/$/;"	m	struct:CUDA_ARRAY3D_DESCRIPTOR_st
Height	/usr/local/cuda/include/cuda.h	/^    unsigned int Height;        \/**< Height of 3D memory copy *\/$/;"	m	struct:CUDA_MEMCPY3D_st
Height	/usr/local/cuda/include/cuda.h	/^    unsigned int Height;        \/**< Height of array *\/$/;"	m	struct:CUDA_ARRAY_DESCRIPTOR_st
Height	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    size_t Height;              \/**< Height of 2D memory copy *\/$/;"	m	struct:CUDA_MEMCPY2D_st
Height	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    size_t Height;              \/**< Height of 3D memory copy *\/$/;"	m	struct:CUDA_MEMCPY3D_PEER_st
Height	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    size_t Height;              \/**< Height of 3D memory copy *\/$/;"	m	struct:CUDA_MEMCPY3D_st
Height	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    size_t Height;            \/**< Height of 3D array *\/$/;"	m	struct:CUDA_ARRAY3D_DESCRIPTOR_st
Height	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    size_t Height;            \/**< Height of array *\/$/;"	m	struct:CUDA_ARRAY_DESCRIPTOR_st
Height	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    unsigned int Height;        \/**< Height of 2D memory copy *\/$/;"	m	struct:CUDA_MEMCPY2D_st
Height	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    unsigned int Height;        \/**< Height of 3D array *\/$/;"	m	struct:CUDA_ARRAY3D_DESCRIPTOR_st
Height	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    unsigned int Height;        \/**< Height of 3D memory copy *\/$/;"	m	struct:CUDA_MEMCPY3D_st
Height	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    unsigned int Height;        \/**< Height of array *\/$/;"	m	struct:CUDA_ARRAY_DESCRIPTOR_st
IM2COL_H	src/im2col.h	2;"	d
IMAGE_H	src/image.h	2;"	d
INCLUDE_STB_IMAGE_WRITE_H	src/stb_image_write.h	81;"	d
I_VOP	/usr/local/cuda/include/dynlink_cuviddec.h	331;"	d
IdrPicFlag	/usr/local/cuda/include/dynlink_cuviddec.h	/^    unsigned char IdrPicFlag;$/;"	m	struct:_CUVIDHEVCPICPARAMS
InterViewRefsL0	/usr/local/cuda/include/dynlink_cuviddec.h	/^    int InterViewRefsL0[16];$/;"	m	struct:_CUVIDH264MVCEXT
InterViewRefsL1	/usr/local/cuda/include/dynlink_cuviddec.h	/^    int InterViewRefsL1[16];$/;"	m	struct:_CUVIDH264MVCEXT
IrapPicFlag	/usr/local/cuda/include/dynlink_cuviddec.h	/^    unsigned char IrapPicFlag;$/;"	m	struct:_CUVIDHEVCPICPARAMS
IsLongTerm	/usr/local/cuda/include/dynlink_cuviddec.h	/^    unsigned char IsLongTerm[16];       \/\/ [refpic] 0=not a long-term reference, 1=long-term reference$/;"	m	struct:_CUVIDHEVCPICPARAMS
K	/usr/local/cuda/include/curand_discrete.h	/^    curandHistogramM2K_t K; $/;"	m	struct:curandHistogramM2_st
KNUTH_FLOAT_CONST	/usr/local/cuda/include/curand_poisson.h	428;"	d
LARGE_SIZE	/usr/local/cuda/include/curand_mtgp32.h	108;"	d
LCD_H	src/sdl_image.c	134;"	d	file:
LCD_W	src/sdl_image.c	133;"	d	file:
LIB_FORMAT_CUFFT	/usr/local/cuda/include/cudalibxt.h	/^    LIB_FORMAT_CUFFT        = 0x0,$/;"	e	enum:libFormat_t
LIB_FORMAT_UNDEFINED	/usr/local/cuda/include/cudalibxt.h	/^    LIB_FORMAT_UNDEFINED    = 0x1$/;"	e	enum:libFormat_t
LIB_XT_COPY_DEVICE_TO_DEVICE	/usr/local/cuda/include/cudalibxt.h	/^    LIB_XT_COPY_DEVICE_TO_DEVICE$/;"	e	enum:cudaXtCopyType_t
LIB_XT_COPY_DEVICE_TO_HOST	/usr/local/cuda/include/cudalibxt.h	/^    LIB_XT_COPY_DEVICE_TO_HOST,$/;"	e	enum:cudaXtCopyType_t
LIB_XT_COPY_HOST_TO_DEVICE	/usr/local/cuda/include/cudalibxt.h	/^    LIB_XT_COPY_HOST_TO_DEVICE,$/;"	e	enum:cudaXtCopyType_t
LIST_H	src/list.h	2;"	d
LOCAL_LAYER_H	src/local_layer.h	2;"	d
LSTM_LAYER_H	src/lstm_layer.h	2;"	d
LastRefIdx	/usr/local/cuda/include/dynlink_cuviddec.h	/^    unsigned char LastRefIdx;$/;"	m	struct:_CUVIDVP8PICPARAMS
LastRefIdx	/usr/local/cuda/include/dynlink_cuviddec.h	/^    unsigned char LastRefIdx;$/;"	m	struct:_CUVIDVP9PICPARAMS
M2	/usr/local/cuda/include/curand_discrete.h	/^    curandDistributionM2Shift_t M2;$/;"	m	struct:curandDiscreteDistribution_st
MAGIC_DOUBLE_CONST	/usr/local/cuda/include/curand_poisson.h	592;"	d
MAJOR_VERSION	/usr/local/cuda/include/cudnn.h	/^    MAJOR_VERSION,$/;"	e	enum:libraryPropertyType_t
MAJOR_VERSION	/usr/local/cuda/include/library_types.h	/^	MAJOR_VERSION,$/;"	e	enum:libraryPropertyType_t
MATRIX_H	src/matrix.h	2;"	d
MAXPOOL_LAYER_H	src/maxpool_layer.h	2;"	d
MAX_CUDA_DESCRIPTOR_GPUS	/usr/local/cuda/include/cudalibxt.h	74;"	d
MAX_CUFFT_ERROR	/usr/local/cuda/include/cufft.h	99;"	d
MAX_LAMBDA	/usr/local/cuda/include/curand_globals.h	70;"	d
MAX_PLANES	/usr/local/cuda/include/cudaEGL.h	86;"	d
MAX_SHIM_RANK	/usr/local/cuda/include/cufft.h	140;"	d
MAX_SOURCE_SIZE	src/gemm_fpga.c	15;"	d	file:
MAX_XOR_N	/usr/local/cuda/include/curand_globals.h	51;"	d
MEM_SIZE	src/gemm_fpga.c	14;"	d	file:
MEXP	/usr/local/cuda/include/curand_mtgp32.h	106;"	d
MINOR_VERSION	/usr/local/cuda/include/cudnn.h	/^    MINOR_VERSION,$/;"	e	enum:libraryPropertyType_t
MINOR_VERSION	/usr/local/cuda/include/library_types.h	/^	MINOR_VERSION,$/;"	e	enum:libraryPropertyType_t
MIN_GAUSS_LAMBDA	/usr/local/cuda/include/curand_globals.h	71;"	d
MRG32K3A_A12	/usr/local/cuda/include/curand_kernel.h	146;"	d
MRG32K3A_A13N	/usr/local/cuda/include/curand_kernel.h	147;"	d
MRG32K3A_A21	/usr/local/cuda/include/curand_kernel.h	148;"	d
MRG32K3A_A23N	/usr/local/cuda/include/curand_kernel.h	149;"	d
MRG32K3A_BITS_NORM	/usr/local/cuda/include/curand_kernel.h	154;"	d
MRG32K3A_MOD1	/usr/local/cuda/include/curand_kernel.h	141;"	d
MRG32K3A_MOD2	/usr/local/cuda/include/curand_kernel.h	142;"	d
MRG32K3A_NORM	/usr/local/cuda/include/curand_kernel.h	150;"	d
MRG32K3A_SKIPSEQ_DOUBLES	/usr/local/cuda/include/curand_kernel.h	161;"	d
MRG32K3A_SKIPSUBSEQ_DOUBLES	/usr/local/cuda/include/curand_kernel.h	160;"	d
MRG32K3A_SKIPUNITS_DOUBLES	/usr/local/cuda/include/curand_kernel.h	159;"	d
MTGP32_M2_BINARY_DIVIDE	/usr/local/cuda/include/curand_globals.h	69;"	d
MTGP32_STATE_MASK	/usr/local/cuda/include/curand_mtgp32.h	104;"	d
MTGP32_STATE_SIZE	/usr/local/cuda/include/curand_mtgp32.h	103;"	d
MTGPDC_CEIL_2P	/usr/local/cuda/include/curand_mtgp32.h	101;"	d
MTGPDC_FLOOR_2P	/usr/local/cuda/include/curand_mtgp32.h	100;"	d
MTGPDC_MEXP	/usr/local/cuda/include/curand_mtgp32.h	98;"	d
MTGPDC_N	/usr/local/cuda/include/curand_mtgp32.h	99;"	d
MTGPDC_PARAM_TABLE	/usr/local/cuda/include/curand_mtgp32.h	102;"	d
MVCReserved8Bits	/usr/local/cuda/include/dynlink_cuviddec.h	/^    unsigned char MVCReserved8Bits;$/;"	m	struct:_CUVIDH264MVCEXT
MbaffFrameFlag	/usr/local/cuda/include/dynlink_cuviddec.h	/^    int MbaffFrameFlag;$/;"	m	struct:_CUVIDH264PICPARAMS
MultiGrid	/usr/local/cuda/include/cooperative_groups_helpers.h	/^        MultiGrid,$/;"	e	enum:__internal::groupType
NCCL_H_	/usr/local/cuda/include/nccl.h	8;"	d
NCCL_MAJOR	/usr/local/cuda/include/nccl.h	13;"	d
NCCL_MINOR	/usr/local/cuda/include/nccl.h	14;"	d
NCCL_PATCH	/usr/local/cuda/include/nccl.h	15;"	d
NCCL_SUFFIX	/usr/local/cuda/include/nccl.h	16;"	d
NCCL_UNIQUE_ID_BYTES	/usr/local/cuda/include/nccl.h	25;"	d
NETWORK_H	src/network.h	3;"	d
NORMALIZATION_LAYER_H	src/normalization_layer.h	2;"	d
NPPI_BAYER_BGGR	/usr/local/cuda/include/nppdefs.h	/^    NPPI_BAYER_BGGR         = 0,             \/**<  Default registration position. *\/$/;"	e	enum:__anon141
NPPI_BAYER_GBRG	/usr/local/cuda/include/nppdefs.h	/^    NPPI_BAYER_GBRG         = 2,$/;"	e	enum:__anon141
NPPI_BAYER_GRBG	/usr/local/cuda/include/nppdefs.h	/^    NPPI_BAYER_GRBG         = 3$/;"	e	enum:__anon141
NPPI_BAYER_RGGB	/usr/local/cuda/include/nppdefs.h	/^    NPPI_BAYER_RGGB         = 1,$/;"	e	enum:__anon141
NPPI_INTER_CUBIC	/usr/local/cuda/include/nppdefs.h	/^    NPPI_INTER_CUBIC             = 4,        \/**<  Cubic interpolation. *\/$/;"	e	enum:__anon140
NPPI_INTER_CUBIC2P_B05C03	/usr/local/cuda/include/nppdefs.h	/^    NPPI_INTER_CUBIC2P_B05C03,               \/**<  Two-parameter cubic filter (B=1\/2, C=3\/10) *\/$/;"	e	enum:__anon140
NPPI_INTER_CUBIC2P_BSPLINE	/usr/local/cuda/include/nppdefs.h	/^    NPPI_INTER_CUBIC2P_BSPLINE,              \/**<  Two-parameter cubic filter (B=1, C=0) *\/$/;"	e	enum:__anon140
NPPI_INTER_CUBIC2P_CATMULLROM	/usr/local/cuda/include/nppdefs.h	/^    NPPI_INTER_CUBIC2P_CATMULLROM,           \/**<  Two-parameter cubic filter (B=0, C=1\/2) *\/$/;"	e	enum:__anon140
NPPI_INTER_LANCZOS	/usr/local/cuda/include/nppdefs.h	/^    NPPI_INTER_LANCZOS           = 16,       \/**<  Lanczos filtering. *\/$/;"	e	enum:__anon140
NPPI_INTER_LANCZOS3_ADVANCED	/usr/local/cuda/include/nppdefs.h	/^    NPPI_INTER_LANCZOS3_ADVANCED = 17,       \/**<  Generic Lanczos filtering with order 3. *\/$/;"	e	enum:__anon140
NPPI_INTER_LINEAR	/usr/local/cuda/include/nppdefs.h	/^    NPPI_INTER_LINEAR            = 2,        \/**<  Linear interpolation. *\/$/;"	e	enum:__anon140
NPPI_INTER_NN	/usr/local/cuda/include/nppdefs.h	/^    NPPI_INTER_NN                = 1,        \/**<  Nearest neighbor filtering. *\/$/;"	e	enum:__anon140
NPPI_INTER_SUPER	/usr/local/cuda/include/nppdefs.h	/^    NPPI_INTER_SUPER             = 8,        \/**<  Super sampling. *\/$/;"	e	enum:__anon140
NPPI_INTER_UNDEFINED	/usr/local/cuda/include/nppdefs.h	/^    NPPI_INTER_UNDEFINED         = 0,$/;"	e	enum:__anon140
NPPI_JPEG_DECODE_CPU	/usr/local/cuda/include/nppi_compression_functions.h	/^    NPPI_JPEG_DECODE_CPU, \/**< Part of decoding run on CPU *\/$/;"	e	enum:NppiJpegDecodeJobKind
NPPI_JPEG_DECODE_FINALIZE	/usr/local/cuda/include/nppi_compression_functions.h	/^    NPPI_JPEG_DECODE_FINALIZE \/**< Change memory representation of DCT coefficients to final *\/$/;"	e	enum:NppiJpegDecodeJobKind
NPPI_JPEG_DECODE_GPU	/usr/local/cuda/include/nppi_compression_functions.h	/^    NPPI_JPEG_DECODE_GPU, \/**< Part of decoding run on GPU *\/$/;"	e	enum:NppiJpegDecodeJobKind
NPPI_JPEG_DECODE_MEMZERO	/usr/local/cuda/include/nppi_compression_functions.h	/^    NPPI_JPEG_DECODE_MEMZERO, \/**< Zeroing memory before decoding *\/$/;"	e	enum:NppiJpegDecodeJobKind
NPPI_JPEG_DECODE_N_BUFFERS	/usr/local/cuda/include/nppi_compression_functions.h	772;"	d
NPPI_JPEG_DECODE_PRE	/usr/local/cuda/include/nppi_compression_functions.h	/^    NPPI_JPEG_DECODE_PRE, \/**< Preprocessing scan on GPU *\/$/;"	e	enum:NppiJpegDecodeJobKind
NPPI_JPEG_DECODE_SIMPLE	/usr/local/cuda/include/nppi_compression_functions.h	/^    NPPI_JPEG_DECODE_SIMPLE, \/**< Decode whole scan using a single job *\/$/;"	e	enum:NppiJpegDecodeJobKind
NPPI_OP_ALPHA_ATOP	/usr/local/cuda/include/nppdefs.h	/^    NPPI_OP_ALPHA_ATOP,$/;"	e	enum:__anon156
NPPI_OP_ALPHA_ATOP_PREMUL	/usr/local/cuda/include/nppdefs.h	/^    NPPI_OP_ALPHA_ATOP_PREMUL,$/;"	e	enum:__anon156
NPPI_OP_ALPHA_IN	/usr/local/cuda/include/nppdefs.h	/^    NPPI_OP_ALPHA_IN,$/;"	e	enum:__anon156
NPPI_OP_ALPHA_IN_PREMUL	/usr/local/cuda/include/nppdefs.h	/^    NPPI_OP_ALPHA_IN_PREMUL,$/;"	e	enum:__anon156
NPPI_OP_ALPHA_OUT	/usr/local/cuda/include/nppdefs.h	/^    NPPI_OP_ALPHA_OUT,$/;"	e	enum:__anon156
NPPI_OP_ALPHA_OUT_PREMUL	/usr/local/cuda/include/nppdefs.h	/^    NPPI_OP_ALPHA_OUT_PREMUL,$/;"	e	enum:__anon156
NPPI_OP_ALPHA_OVER	/usr/local/cuda/include/nppdefs.h	/^    NPPI_OP_ALPHA_OVER,$/;"	e	enum:__anon156
NPPI_OP_ALPHA_OVER_PREMUL	/usr/local/cuda/include/nppdefs.h	/^    NPPI_OP_ALPHA_OVER_PREMUL,$/;"	e	enum:__anon156
NPPI_OP_ALPHA_PLUS	/usr/local/cuda/include/nppdefs.h	/^    NPPI_OP_ALPHA_PLUS,$/;"	e	enum:__anon156
NPPI_OP_ALPHA_PLUS_PREMUL	/usr/local/cuda/include/nppdefs.h	/^    NPPI_OP_ALPHA_PLUS_PREMUL,$/;"	e	enum:__anon156
NPPI_OP_ALPHA_PREMUL	/usr/local/cuda/include/nppdefs.h	/^    NPPI_OP_ALPHA_PREMUL$/;"	e	enum:__anon156
NPPI_OP_ALPHA_XOR	/usr/local/cuda/include/nppdefs.h	/^    NPPI_OP_ALPHA_XOR,$/;"	e	enum:__anon156
NPPI_OP_ALPHA_XOR_PREMUL	/usr/local/cuda/include/nppdefs.h	/^    NPPI_OP_ALPHA_XOR_PREMUL,$/;"	e	enum:__anon156
NPPI_SMOOTH_EDGE	/usr/local/cuda/include/nppdefs.h	/^    NPPI_SMOOTH_EDGE             = (1 << 31) \/**<  Smooth edge filtering. *\/$/;"	e	enum:__anon140
NPP_AFFINE_QUAD_INCORRECT_WARNING	/usr/local/cuda/include/nppdefs.h	/^    NPP_AFFINE_QUAD_INCORRECT_WARNING       = 28,       \/**<  Indicates that the quadrangle passed to one of affine warping functions doesn't have necessary properties. First 3 vertices are used, the fourth vertex discarded. *\/$/;"	e	enum:__anon144
NPP_ALG_HINT_ACCURATE	/usr/local/cuda/include/nppdefs.h	/^    NPP_ALG_HINT_ACCURATE$/;"	e	enum:__anon155
NPP_ALG_HINT_FAST	/usr/local/cuda/include/nppdefs.h	/^    NPP_ALG_HINT_FAST,$/;"	e	enum:__anon155
NPP_ALG_HINT_NONE	/usr/local/cuda/include/nppdefs.h	/^    NPP_ALG_HINT_NONE,$/;"	e	enum:__anon155
NPP_ALIGNMENT_ERROR	/usr/local/cuda/include/nppdefs.h	/^    NPP_ALIGNMENT_ERROR                     = -1002,$/;"	e	enum:__anon144
NPP_ALIGN_16	/usr/local/cuda/include/nppdefs.h	/^typedef struct NPP_ALIGN_16$/;"	s
NPP_ALIGN_16	/usr/local/cuda/include/nppdefs.h	73;"	d
NPP_ALIGN_16	/usr/local/cuda/include/nppdefs.h	78;"	d
NPP_ALIGN_8	/usr/local/cuda/include/nppdefs.h	/^typedef struct NPP_ALIGN_8$/;"	s
NPP_ALIGN_8	/usr/local/cuda/include/nppdefs.h	70;"	d
NPP_ALIGN_8	/usr/local/cuda/include/nppdefs.h	77;"	d
NPP_ANCHOR_ERROR	/usr/local/cuda/include/nppdefs.h	/^    NPP_ANCHOR_ERROR                        = -34,      \/**< Anchor point is outside mask *\/$/;"	e	enum:__anon144
NPP_BAD_ARGUMENT_ERROR	/usr/local/cuda/include/nppdefs.h	/^    NPP_BAD_ARGUMENT_ERROR                  = -5,$/;"	e	enum:__anon144
NPP_BORDER_CONSTANT	/usr/local/cuda/include/nppdefs.h	/^    NPP_BORDER_CONSTANT         = 1,$/;"	e	enum:__anon154
NPP_BORDER_MIRROR	/usr/local/cuda/include/nppdefs.h	/^    NPP_BORDER_MIRROR           = 4$/;"	e	enum:__anon154
NPP_BORDER_NONE	/usr/local/cuda/include/nppdefs.h	/^    NPP_BORDER_NONE             = NPP_BORDER_UNDEFINED, $/;"	e	enum:__anon154
NPP_BORDER_REPLICATE	/usr/local/cuda/include/nppdefs.h	/^    NPP_BORDER_REPLICATE        = 2,$/;"	e	enum:__anon154
NPP_BORDER_UNDEFINED	/usr/local/cuda/include/nppdefs.h	/^    NPP_BORDER_UNDEFINED        = 0,$/;"	e	enum:__anon154
NPP_BORDER_WRAP	/usr/local/cuda/include/nppdefs.h	/^    NPP_BORDER_WRAP             = 3,$/;"	e	enum:__anon154
NPP_BOTH_AXIS	/usr/local/cuda/include/nppdefs.h	/^    NPP_BOTH_AXIS$/;"	e	enum:__anon151
NPP_CHANNEL_ERROR	/usr/local/cuda/include/nppdefs.h	/^    NPP_CHANNEL_ERROR                       = -47,      \/**< Illegal channel index *\/$/;"	e	enum:__anon144
NPP_CHANNEL_ORDER_ERROR	/usr/local/cuda/include/nppdefs.h	/^    NPP_CHANNEL_ORDER_ERROR                 = -60,      \/**< Wrong order of the destination channels *\/$/;"	e	enum:__anon144
NPP_CMP_EQ	/usr/local/cuda/include/nppdefs.h	/^    NPP_CMP_EQ,$/;"	e	enum:__anon152
NPP_CMP_GREATER	/usr/local/cuda/include/nppdefs.h	/^    NPP_CMP_GREATER$/;"	e	enum:__anon152
NPP_CMP_GREATER_EQ	/usr/local/cuda/include/nppdefs.h	/^    NPP_CMP_GREATER_EQ,$/;"	e	enum:__anon152
NPP_CMP_LESS	/usr/local/cuda/include/nppdefs.h	/^    NPP_CMP_LESS,$/;"	e	enum:__anon152
NPP_CMP_LESS_EQ	/usr/local/cuda/include/nppdefs.h	/^    NPP_CMP_LESS_EQ,$/;"	e	enum:__anon152
NPP_COEFFICIENT_ERROR	/usr/local/cuda/include/nppdefs.h	/^    NPP_COEFFICIENT_ERROR                   = -56,      \/**< Unallowable values of the transformation coefficients   *\/$/;"	e	enum:__anon144
NPP_COI_ERROR	/usr/local/cuda/include/nppdefs.h	/^    NPP_COI_ERROR                           = -52,      \/**< Channel of interest is not 1, 2, or 3 *\/$/;"	e	enum:__anon144
NPP_CONTEXT_MATCH_ERROR	/usr/local/cuda/include/nppdefs.h	/^    NPP_CONTEXT_MATCH_ERROR                 = -17,$/;"	e	enum:__anon144
NPP_CORRUPTED_DATA_ERROR	/usr/local/cuda/include/nppdefs.h	/^    NPP_CORRUPTED_DATA_ERROR                = -61,      \/**< Processed data is corrupted *\/$/;"	e	enum:__anon144
NPP_CUDA_1_0	/usr/local/cuda/include/nppdefs.h	/^    NPP_CUDA_1_0             = 100, \/**<  Indicates that CUDA 1.0 capable device is machine's default device *\/$/;"	e	enum:__anon145
NPP_CUDA_1_1	/usr/local/cuda/include/nppdefs.h	/^    NPP_CUDA_1_1             = 110, \/**<  Indicates that CUDA 1.1 capable device is machine's default device *\/$/;"	e	enum:__anon145
NPP_CUDA_1_2	/usr/local/cuda/include/nppdefs.h	/^    NPP_CUDA_1_2             = 120, \/**<  Indicates that CUDA 1.2 capable device is machine's default device *\/$/;"	e	enum:__anon145
NPP_CUDA_1_3	/usr/local/cuda/include/nppdefs.h	/^    NPP_CUDA_1_3             = 130, \/**<  Indicates that CUDA 1.3 capable device is machine's default device *\/$/;"	e	enum:__anon145
NPP_CUDA_2_0	/usr/local/cuda/include/nppdefs.h	/^    NPP_CUDA_2_0             = 200, \/**<  Indicates that CUDA 2.0 capable device is machine's default device *\/$/;"	e	enum:__anon145
NPP_CUDA_2_1	/usr/local/cuda/include/nppdefs.h	/^    NPP_CUDA_2_1             = 210, \/**<  Indicates that CUDA 2.1 capable device is machine's default device *\/$/;"	e	enum:__anon145
NPP_CUDA_3_0	/usr/local/cuda/include/nppdefs.h	/^    NPP_CUDA_3_0             = 300, \/**<  Indicates that CUDA 3.0 capable device is machine's default device *\/$/;"	e	enum:__anon145
NPP_CUDA_3_2	/usr/local/cuda/include/nppdefs.h	/^    NPP_CUDA_3_2             = 320, \/**<  Indicates that CUDA 3.2 capable device is machine's default device *\/$/;"	e	enum:__anon145
NPP_CUDA_3_5	/usr/local/cuda/include/nppdefs.h	/^    NPP_CUDA_3_5             = 350, \/**<  Indicates that CUDA 3.5 capable device is machine's default device *\/$/;"	e	enum:__anon145
NPP_CUDA_3_7	/usr/local/cuda/include/nppdefs.h	/^    NPP_CUDA_3_7             = 370, \/**<  Indicates that CUDA 3.7 capable device is machine's default device *\/$/;"	e	enum:__anon145
NPP_CUDA_5_0	/usr/local/cuda/include/nppdefs.h	/^    NPP_CUDA_5_0             = 500, \/**<  Indicates that CUDA 5.0 capable device is machine's default device *\/$/;"	e	enum:__anon145
NPP_CUDA_5_2	/usr/local/cuda/include/nppdefs.h	/^    NPP_CUDA_5_2             = 520, \/**<  Indicates that CUDA 5.2 capable device is machine's default device *\/$/;"	e	enum:__anon145
NPP_CUDA_5_3	/usr/local/cuda/include/nppdefs.h	/^    NPP_CUDA_5_3             = 530, \/**<  Indicates that CUDA 5.3 capable device is machine's default device *\/$/;"	e	enum:__anon145
NPP_CUDA_6_0	/usr/local/cuda/include/nppdefs.h	/^    NPP_CUDA_6_0             = 600, \/**<  Indicates that CUDA 6.0 capable device is machine's default device *\/$/;"	e	enum:__anon145
NPP_CUDA_6_1	/usr/local/cuda/include/nppdefs.h	/^    NPP_CUDA_6_1             = 610, \/**<  Indicates that CUDA 6.1 capable device is machine's default device *\/$/;"	e	enum:__anon145
NPP_CUDA_6_2	/usr/local/cuda/include/nppdefs.h	/^    NPP_CUDA_6_2             = 620, \/**<  Indicates that CUDA 6.2 capable device is machine's default device *\/$/;"	e	enum:__anon145
NPP_CUDA_6_3	/usr/local/cuda/include/nppdefs.h	/^    NPP_CUDA_6_3             = 630, \/**<  Indicates that CUDA 6.3 capable device is machine's default device *\/$/;"	e	enum:__anon145
NPP_CUDA_7_0	/usr/local/cuda/include/nppdefs.h	/^    NPP_CUDA_7_0             = 700  \/**<  Indicates that CUDA 7.0 or better is machine's default device *\/$/;"	e	enum:__anon145
NPP_CUDA_KERNEL_EXECUTION_ERROR	/usr/local/cuda/include/nppdefs.h	/^    NPP_CUDA_KERNEL_EXECUTION_ERROR         = -1000,$/;"	e	enum:__anon144
NPP_CUDA_NOT_CAPABLE	/usr/local/cuda/include/nppdefs.h	/^    NPP_CUDA_NOT_CAPABLE     = 0,   \/**<  Indicates that no CUDA capable device was found *\/$/;"	e	enum:__anon145
NPP_CUDA_UNKNOWN_VERSION	/usr/local/cuda/include/nppdefs.h	/^    NPP_CUDA_UNKNOWN_VERSION = -1,  \/**<  Indicates that the compute-capability query failed *\/$/;"	e	enum:__anon145
NPP_DATA_TYPE_ERROR	/usr/local/cuda/include/nppdefs.h	/^    NPP_DATA_TYPE_ERROR                     = -12,$/;"	e	enum:__anon144
NPP_DIVIDE_BY_ZERO_ERROR	/usr/local/cuda/include/nppdefs.h	/^    NPP_DIVIDE_BY_ZERO_ERROR                = -10,$/;"	e	enum:__anon144
NPP_DIVIDE_BY_ZERO_WARNING	/usr/local/cuda/include/nppdefs.h	/^    NPP_DIVIDE_BY_ZERO_WARNING              = 6,        \/**<  Divisor is zero however does not terminate the execution *\/$/;"	e	enum:__anon144
NPP_DIVISOR_ERROR	/usr/local/cuda/include/nppdefs.h	/^    NPP_DIVISOR_ERROR                       = -51,      \/**< Divisor is equal to zero *\/$/;"	e	enum:__anon144
NPP_DOUBLE_SIZE_WARNING	/usr/local/cuda/include/nppdefs.h	/^    NPP_DOUBLE_SIZE_WARNING                 = 35,       \/**<  Image size isn't multiple of two. Indicates that in case of 422\/411\/420 sampling the ROI width\/height was modified for proper processing. *\/$/;"	e	enum:__anon144
NPP_ERROR	/usr/local/cuda/include/nppdefs.h	/^    NPP_ERROR                               = -2,$/;"	e	enum:__anon144
NPP_ERROR_RESERVED	/usr/local/cuda/include/nppdefs.h	/^    NPP_ERROR_RESERVED                      = -1,$/;"	e	enum:__anon144
NPP_FFT_FLAG_ERROR	/usr/local/cuda/include/nppdefs.h	/^    NPP_FFT_FLAG_ERROR                      = -16,$/;"	e	enum:__anon144
NPP_FFT_ORDER_ERROR	/usr/local/cuda/include/nppdefs.h	/^    NPP_FFT_ORDER_ERROR                     = -15,$/;"	e	enum:__anon144
NPP_FILTER_SCHARR	/usr/local/cuda/include/nppdefs.h	/^    NPP_FILTER_SCHARR,$/;"	e	enum:__anon143
NPP_FILTER_SOBEL	/usr/local/cuda/include/nppdefs.h	/^    NPP_FILTER_SOBEL,$/;"	e	enum:__anon143
NPP_HAAR_CLASSIFIER_PIXEL_MATCH_ERROR	/usr/local/cuda/include/nppdefs.h	/^    NPP_HAAR_CLASSIFIER_PIXEL_MATCH_ERROR   = -1006,$/;"	e	enum:__anon144
NPP_HISTOGRAM_NUMBER_OF_LEVELS_ERROR	/usr/local/cuda/include/nppdefs.h	/^    NPP_HISTOGRAM_NUMBER_OF_LEVELS_ERROR    = -107,     \/**< Number of levels for histogram is less than 2 *\/$/;"	e	enum:__anon144
NPP_HOG_MAX_BINS_PER_CELL	/usr/local/cuda/include/nppdefs.h	562;"	d
NPP_HOG_MAX_BLOCK_SIZE	/usr/local/cuda/include/nppdefs.h	561;"	d
NPP_HOG_MAX_CELLS_PER_DESCRIPTOR	/usr/local/cuda/include/nppdefs.h	563;"	d
NPP_HOG_MAX_CELL_SIZE	/usr/local/cuda/include/nppdefs.h	560;"	d
NPP_HOG_MAX_DESCRIPTOR_LOCATIONS_PER_CALL	/usr/local/cuda/include/nppdefs.h	565;"	d
NPP_HOG_MAX_OVERLAPPING_BLOCKS_PER_DESCRIPTOR	/usr/local/cuda/include/nppdefs.h	564;"	d
NPP_HORIZONTAL_AXIS	/usr/local/cuda/include/nppdefs.h	/^    NPP_HORIZONTAL_AXIS,$/;"	e	enum:__anon151
NPP_INTERPOLATION_ERROR	/usr/local/cuda/include/nppdefs.h	/^    NPP_INTERPOLATION_ERROR                 = -22,$/;"	e	enum:__anon144
NPP_INVALID_DEVICE_POINTER_ERROR	/usr/local/cuda/include/nppdefs.h	/^    NPP_INVALID_DEVICE_POINTER_ERROR        = -1031,$/;"	e	enum:__anon144
NPP_INVALID_HOST_POINTER_ERROR	/usr/local/cuda/include/nppdefs.h	/^    NPP_INVALID_HOST_POINTER_ERROR          = -1032,$/;"	e	enum:__anon144
NPP_LUT_NUMBER_OF_LEVELS_ERROR	/usr/local/cuda/include/nppdefs.h	/^    NPP_LUT_NUMBER_OF_LEVELS_ERROR          = -106,     \/**< Number of levels for LUT is less than 2 *\/$/;"	e	enum:__anon144
NPP_LUT_PALETTE_BITSIZE_ERROR	/usr/local/cuda/include/nppdefs.h	/^    NPP_LUT_PALETTE_BITSIZE_ERROR           = -1030,$/;"	e	enum:__anon144
NPP_MASK_SIZE_11_X_11	/usr/local/cuda/include/nppdefs.h	/^    NPP_MASK_SIZE_11_X_11 = 600,$/;"	e	enum:__anon142
NPP_MASK_SIZE_13_X_13	/usr/local/cuda/include/nppdefs.h	/^    NPP_MASK_SIZE_13_X_13 = 700,$/;"	e	enum:__anon142
NPP_MASK_SIZE_15_X_15	/usr/local/cuda/include/nppdefs.h	/^    NPP_MASK_SIZE_15_X_15 = 800$/;"	e	enum:__anon142
NPP_MASK_SIZE_1_X_3	/usr/local/cuda/include/nppdefs.h	/^    NPP_MASK_SIZE_1_X_3,$/;"	e	enum:__anon142
NPP_MASK_SIZE_1_X_5	/usr/local/cuda/include/nppdefs.h	/^    NPP_MASK_SIZE_1_X_5,$/;"	e	enum:__anon142
NPP_MASK_SIZE_3_X_1	/usr/local/cuda/include/nppdefs.h	/^    NPP_MASK_SIZE_3_X_1 = 100, \/\/ leaving space for more 1 X N type enum values $/;"	e	enum:__anon142
NPP_MASK_SIZE_3_X_3	/usr/local/cuda/include/nppdefs.h	/^    NPP_MASK_SIZE_3_X_3 = 200, \/\/ leaving space for more N X 1 type enum values$/;"	e	enum:__anon142
NPP_MASK_SIZE_5_X_1	/usr/local/cuda/include/nppdefs.h	/^    NPP_MASK_SIZE_5_X_1,$/;"	e	enum:__anon142
NPP_MASK_SIZE_5_X_5	/usr/local/cuda/include/nppdefs.h	/^    NPP_MASK_SIZE_5_X_5,$/;"	e	enum:__anon142
NPP_MASK_SIZE_7_X_7	/usr/local/cuda/include/nppdefs.h	/^    NPP_MASK_SIZE_7_X_7 = 400,$/;"	e	enum:__anon142
NPP_MASK_SIZE_9_X_9	/usr/local/cuda/include/nppdefs.h	/^    NPP_MASK_SIZE_9_X_9 = 500,$/;"	e	enum:__anon142
NPP_MASK_SIZE_ERROR	/usr/local/cuda/include/nppdefs.h	/^    NPP_MASK_SIZE_ERROR                     = -33,      \/**< Lower bound is larger than upper bound *\/$/;"	e	enum:__anon144
NPP_MAXABS_32F	/usr/local/cuda/include/nppdefs.h	388;"	d
NPP_MAXABS_64F	/usr/local/cuda/include/nppdefs.h	390;"	d
NPP_MAX_16S	/usr/local/cuda/include/nppdefs.h	381;"	d
NPP_MAX_16U	/usr/local/cuda/include/nppdefs.h	372;"	d
NPP_MAX_32S	/usr/local/cuda/include/nppdefs.h	383;"	d
NPP_MAX_32U	/usr/local/cuda/include/nppdefs.h	374;"	d
NPP_MAX_64S	/usr/local/cuda/include/nppdefs.h	384;"	d
NPP_MAX_64U	/usr/local/cuda/include/nppdefs.h	376;"	d
NPP_MAX_8S	/usr/local/cuda/include/nppdefs.h	379;"	d
NPP_MAX_8U	/usr/local/cuda/include/nppdefs.h	370;"	d
NPP_MEMCPY_ERROR	/usr/local/cuda/include/nppdefs.h	/^    NPP_MEMCPY_ERROR                        = -1003,$/;"	e	enum:__anon144
NPP_MEMFREE_ERROR	/usr/local/cuda/include/nppdefs.h	/^    NPP_MEMFREE_ERROR                       = -1005,$/;"	e	enum:__anon144
NPP_MEMORY_ALLOCATION_ERR	/usr/local/cuda/include/nppdefs.h	/^    NPP_MEMORY_ALLOCATION_ERR               = -9,$/;"	e	enum:__anon144
NPP_MEMSET_ERROR	/usr/local/cuda/include/nppdefs.h	/^    NPP_MEMSET_ERROR                        = -1004,$/;"	e	enum:__anon144
NPP_MINABS_32F	/usr/local/cuda/include/nppdefs.h	387;"	d
NPP_MINABS_64F	/usr/local/cuda/include/nppdefs.h	389;"	d
NPP_MIN_16S	/usr/local/cuda/include/nppdefs.h	380;"	d
NPP_MIN_16U	/usr/local/cuda/include/nppdefs.h	371;"	d
NPP_MIN_32S	/usr/local/cuda/include/nppdefs.h	382;"	d
NPP_MIN_32U	/usr/local/cuda/include/nppdefs.h	373;"	d
NPP_MIN_64S	/usr/local/cuda/include/nppdefs.h	385;"	d
NPP_MIN_64U	/usr/local/cuda/include/nppdefs.h	375;"	d
NPP_MIN_8S	/usr/local/cuda/include/nppdefs.h	378;"	d
NPP_MIN_8U	/usr/local/cuda/include/nppdefs.h	369;"	d
NPP_MIRROR_FLIP_ERROR	/usr/local/cuda/include/nppdefs.h	/^    NPP_MIRROR_FLIP_ERROR                   = -21,$/;"	e	enum:__anon144
NPP_MISALIGNED_DST_ROI_WARNING	/usr/local/cuda/include/nppdefs.h	/^    NPP_MISALIGNED_DST_ROI_WARNING          = 10000,    \/**<  Speed reduction due to uncoalesced memory accesses warning. *\/$/;"	e	enum:__anon144
NPP_MOMENT_00_ZERO_ERROR	/usr/local/cuda/include/nppdefs.h	/^    NPP_MOMENT_00_ZERO_ERROR                = -20,$/;"	e	enum:__anon144
NPP_NOT_EVEN_STEP_ERROR	/usr/local/cuda/include/nppdefs.h	/^    NPP_NOT_EVEN_STEP_ERROR                 = -108,     \/**< Step value is not pixel multiple *\/$/;"	e	enum:__anon144
NPP_NOT_IMPLEMENTED_ERROR	/usr/local/cuda/include/nppdefs.h	/^    NPP_NOT_IMPLEMENTED_ERROR               = -3,$/;"	e	enum:__anon144
NPP_NOT_SUFFICIENT_COMPUTE_CAPABILITY	/usr/local/cuda/include/nppdefs.h	/^    NPP_NOT_SUFFICIENT_COMPUTE_CAPABILITY   = -1027,$/;"	e	enum:__anon144
NPP_NOT_SUPPORTED_MODE_ERROR	/usr/local/cuda/include/nppdefs.h	/^    NPP_NOT_SUPPORTED_MODE_ERROR            = -9999,  $/;"	e	enum:__anon144
NPP_NO_ERROR	/usr/local/cuda/include/nppdefs.h	/^    NPP_NO_ERROR                            = 0,        \/**<  Error free operation *\/$/;"	e	enum:__anon144
NPP_NO_MEMORY_ERROR	/usr/local/cuda/include/nppdefs.h	/^    NPP_NO_MEMORY_ERROR                     = -4,$/;"	e	enum:__anon144
NPP_NO_OPERATION_WARNING	/usr/local/cuda/include/nppdefs.h	/^    NPP_NO_OPERATION_WARNING                = 1,        \/**<  Indicates that no operation was performed *\/$/;"	e	enum:__anon144
NPP_NULL_POINTER_ERROR	/usr/local/cuda/include/nppdefs.h	/^    NPP_NULL_POINTER_ERROR                  = -8,$/;"	e	enum:__anon144
NPP_NUMBER_OF_CHANNELS_ERROR	/usr/local/cuda/include/nppdefs.h	/^    NPP_NUMBER_OF_CHANNELS_ERROR            = -53,      \/**< Bad or unsupported number of channels *\/$/;"	e	enum:__anon144
NPP_OUT_OFF_RANGE_ERROR	/usr/local/cuda/include/nppdefs.h	/^    NPP_OUT_OFF_RANGE_ERROR                 = -11,$/;"	e	enum:__anon144
NPP_OVERFLOW_ERROR	/usr/local/cuda/include/nppdefs.h	/^    NPP_OVERFLOW_ERROR                      = -109,     \/**< Number overflows the upper or lower limit of the data type *\/$/;"	e	enum:__anon144
NPP_QUADRANGLE_ERROR	/usr/local/cuda/include/nppdefs.h	/^    NPP_QUADRANGLE_ERROR                    = -58,      \/**< The quadrangle is nonconvex or degenerates into triangle, line or point *\/$/;"	e	enum:__anon144
NPP_QUALITY_INDEX_ERROR	/usr/local/cuda/include/nppdefs.h	/^    NPP_QUALITY_INDEX_ERROR                 = -210,     \/**< Image pixels are constant for quality index *\/$/;"	e	enum:__anon144
NPP_RANGE_ERROR	/usr/local/cuda/include/nppdefs.h	/^    NPP_RANGE_ERROR                         = -7,$/;"	e	enum:__anon144
NPP_RECTANGLE_ERROR	/usr/local/cuda/include/nppdefs.h	/^    NPP_RECTANGLE_ERROR                     = -57,      \/**< Size of the rectangle region is less than or equal to 1 *\/$/;"	e	enum:__anon144
NPP_RESIZE_FACTOR_ERROR	/usr/local/cuda/include/nppdefs.h	/^    NPP_RESIZE_FACTOR_ERROR                 = -23,$/;"	e	enum:__anon144
NPP_RESIZE_NO_OPERATION_ERROR	/usr/local/cuda/include/nppdefs.h	/^    NPP_RESIZE_NO_OPERATION_ERROR           = -201,     \/**< One of the output image dimensions is less than 1 pixel *\/$/;"	e	enum:__anon144
NPP_RND_FINANCIAL	/usr/local/cuda/include/nppdefs.h	/^    NPP_RND_FINANCIAL,$/;"	e	enum:__anon153
NPP_RND_NEAR	/usr/local/cuda/include/nppdefs.h	/^    NPP_RND_NEAR,$/;"	e	enum:__anon153
NPP_RND_ZERO	/usr/local/cuda/include/nppdefs.h	/^    NPP_RND_ZERO,$/;"	e	enum:__anon153
NPP_ROUND_MODE_NOT_SUPPORTED_ERROR	/usr/local/cuda/include/nppdefs.h	/^    NPP_ROUND_MODE_NOT_SUPPORTED_ERROR      = -213,     \/**< Unsupported round mode*\/$/;"	e	enum:__anon144
NPP_ROUND_NEAREST_TIES_AWAY_FROM_ZERO	/usr/local/cuda/include/nppdefs.h	/^    NPP_ROUND_NEAREST_TIES_AWAY_FROM_ZERO = NPP_RND_FINANCIAL, \/\/\/< Alias name for ::NPP_RND_FINANCIAL. $/;"	e	enum:__anon153
NPP_ROUND_NEAREST_TIES_TO_EVEN	/usr/local/cuda/include/nppdefs.h	/^    NPP_ROUND_NEAREST_TIES_TO_EVEN = NPP_RND_NEAR, \/\/\/< Alias name for ::NPP_RND_NEAR.$/;"	e	enum:__anon153
NPP_ROUND_TOWARD_ZERO	/usr/local/cuda/include/nppdefs.h	/^    NPP_ROUND_TOWARD_ZERO = NPP_RND_ZERO, \/\/\/< Alias name for ::NPP_RND_ZERO. $/;"	e	enum:__anon153
NPP_SCALE_RANGE_ERROR	/usr/local/cuda/include/nppdefs.h	/^    NPP_SCALE_RANGE_ERROR                   = -13,$/;"	e	enum:__anon144
NPP_SIZE_ERROR	/usr/local/cuda/include/nppdefs.h	/^    NPP_SIZE_ERROR                          = -6,$/;"	e	enum:__anon144
NPP_STEP_ERROR	/usr/local/cuda/include/nppdefs.h	/^    NPP_STEP_ERROR                          = -14,       \/**<  Step is less or equal zero *\/$/;"	e	enum:__anon144
NPP_STRIDE_ERROR	/usr/local/cuda/include/nppdefs.h	/^    NPP_STRIDE_ERROR                        = -37,      \/**< Stride is less than the row length *\/$/;"	e	enum:__anon144
NPP_SUCCESS	/usr/local/cuda/include/nppdefs.h	/^    NPP_SUCCESS = NPP_NO_ERROR,                         \/**<  Successful operation (same as NPP_NO_ERROR) *\/$/;"	e	enum:__anon144
NPP_TEXTURE_BIND_ERROR	/usr/local/cuda/include/nppdefs.h	/^    NPP_TEXTURE_BIND_ERROR                  = -1024,$/;"	e	enum:__anon144
NPP_THRESHOLD_ERROR	/usr/local/cuda/include/nppdefs.h	/^    NPP_THRESHOLD_ERROR                     = -18,$/;"	e	enum:__anon144
NPP_THRESHOLD_NEGATIVE_LEVEL_ERROR	/usr/local/cuda/include/nppdefs.h	/^    NPP_THRESHOLD_NEGATIVE_LEVEL_ERROR      = -19,$/;"	e	enum:__anon144
NPP_VERSION_BUILD	/usr/local/cuda/include/nppversion.h	67;"	d
NPP_VERSION_MAJOR	/usr/local/cuda/include/nppversion.h	65;"	d
NPP_VERSION_MINOR	/usr/local/cuda/include/nppversion.h	66;"	d
NPP_VERTICAL_AXIS	/usr/local/cuda/include/nppdefs.h	/^    NPP_VERTICAL_AXIS,$/;"	e	enum:__anon151
NPP_WRONG_INTERSECTION_QUAD_WARNING	/usr/local/cuda/include/nppdefs.h	/^    NPP_WRONG_INTERSECTION_QUAD_WARNING     = 30,       \/**<  The given quadrangle has no intersection with either the source or destination ROI. Thus no operation was performed. *\/$/;"	e	enum:__anon144
NPP_WRONG_INTERSECTION_ROI_ERROR	/usr/local/cuda/include/nppdefs.h	/^    NPP_WRONG_INTERSECTION_ROI_ERROR        = -1020,$/;"	e	enum:__anon144
NPP_WRONG_INTERSECTION_ROI_WARNING	/usr/local/cuda/include/nppdefs.h	/^    NPP_WRONG_INTERSECTION_ROI_WARNING      = 29,       \/**<  The given ROI has no interestion with either the source or destination ROI. Thus no operation was performed. *\/$/;"	e	enum:__anon144
NPP_ZC_MODE_NOT_SUPPORTED_ERROR	/usr/local/cuda/include/nppdefs.h	/^    NPP_ZC_MODE_NOT_SUPPORTED_ERROR         = -1028,      \/**<  ZeroCrossing mode not supported  *\/$/;"	e	enum:__anon144
NPP_ZERO_MASK_VALUE_ERROR	/usr/local/cuda/include/nppdefs.h	/^    NPP_ZERO_MASK_VALUE_ERROR               = -59,      \/**< All values of the mask are zero *\/$/;"	e	enum:__anon144
NUMCHARS	src/data.c	513;"	d	file:
NVBLAS_H_	/usr/local/cuda/include/nvblas.h	51;"	d
NVGRAPH_API	/usr/local/cuda/include/nvgraph.h	23;"	d
NVGRAPH_API	/usr/local/cuda/include/nvgraph.h	25;"	d
NVGRAPH_BALANCED_CUT_LANCZOS	/usr/local/cuda/include/nvgraph.h	/^  NVGRAPH_BALANCED_CUT_LANCZOS = 1, \/\/minimize balanced cut with Lanczos solver  $/;"	e	enum:__anon176
NVGRAPH_BALANCED_CUT_LOBPCG	/usr/local/cuda/include/nvgraph.h	/^ NVGRAPH_BALANCED_CUT_LOBPCG = 2 \/\/minimize balanced cut with LOPCG solver  $/;"	e	enum:__anon176
NVGRAPH_COO_32	/usr/local/cuda/include/nvgraph.h	/^   NVGRAPH_COO_32 = 2,$/;"	e	enum:__anon173
NVGRAPH_CSC_32	/usr/local/cuda/include/nvgraph.h	/^   NVGRAPH_CSC_32 = 1,$/;"	e	enum:__anon173
NVGRAPH_CSR_32	/usr/local/cuda/include/nvgraph.h	/^   NVGRAPH_CSR_32 = 0,$/;"	e	enum:__anon173
NVGRAPH_DEFAULT	/usr/local/cuda/include/nvgraph.h	/^   NVGRAPH_DEFAULT                = 0,  \/\/ Default is unsorted.$/;"	e	enum:__anon174
NVGRAPH_EDGE_CUT	/usr/local/cuda/include/nvgraph.h	/^NVGRAPH_EDGE_CUT,  \/\/ total number of edges between clusters.$/;"	e	enum:__anon177
NVGRAPH_MAX	/usr/local/cuda/include/nvgraph.h	/^  NVGRAPH_MAX                     = 3$/;"	e	enum:__anon175
NVGRAPH_MAX_MIN_SR	/usr/local/cuda/include/nvgraph.h	/^   NVGRAPH_MAX_MIN_SR    = 2,$/;"	e	enum:__anon172
NVGRAPH_MIN	/usr/local/cuda/include/nvgraph.h	/^  NVGRAPH_MIN                     = 2,$/;"	e	enum:__anon175
NVGRAPH_MIN_PLUS_SR	/usr/local/cuda/include/nvgraph.h	/^   NVGRAPH_MIN_PLUS_SR   = 1,$/;"	e	enum:__anon172
NVGRAPH_MODULARITY	/usr/local/cuda/include/nvgraph.h	/^NVGRAPH_MODULARITY,  \/\/ clustering score telling how good the clustering is compared to random assignment.$/;"	e	enum:__anon177
NVGRAPH_MODULARITY_MAXIMIZATION	/usr/local/cuda/include/nvgraph.h	/^  NVGRAPH_MODULARITY_MAXIMIZATION  = 0, \/\/maximize modularity with Lanczos solver  $/;"	e	enum:__anon176
NVGRAPH_MULTIPLY	/usr/local/cuda/include/nvgraph.h	/^  NVGRAPH_MULTIPLY                = 0,$/;"	e	enum:__anon175
NVGRAPH_OR_AND_SR	/usr/local/cuda/include/nvgraph.h	/^   NVGRAPH_OR_AND_SR     = 3,$/;"	e	enum:__anon172
NVGRAPH_PLUS_TIMES_SR	/usr/local/cuda/include/nvgraph.h	/^   NVGRAPH_PLUS_TIMES_SR = 0,$/;"	e	enum:__anon172
NVGRAPH_RATIO_CUT	/usr/local/cuda/include/nvgraph.h	/^NVGRAPH_RATIO_CUT \/\/ sum for all clusters of the number of edges going outside of the cluster divided by the number of vertex inside the cluster$/;"	e	enum:__anon177
NVGRAPH_SORTED_BY_DESTINATION	/usr/local/cuda/include/nvgraph.h	/^   NVGRAPH_SORTED_BY_DESTINATION  = 3   \/\/ CSC$/;"	e	enum:__anon174
NVGRAPH_SORTED_BY_SOURCE	/usr/local/cuda/include/nvgraph.h	/^   NVGRAPH_SORTED_BY_SOURCE       = 2,  \/\/ CSR$/;"	e	enum:__anon174
NVGRAPH_STATUS_ALLOC_FAILED	/usr/local/cuda/include/nvgraph.h	/^    NVGRAPH_STATUS_ALLOC_FAILED       =2,$/;"	e	enum:__anon171
NVGRAPH_STATUS_ARCH_MISMATCH	/usr/local/cuda/include/nvgraph.h	/^    NVGRAPH_STATUS_ARCH_MISMATCH      =4,$/;"	e	enum:__anon171
NVGRAPH_STATUS_EXECUTION_FAILED	/usr/local/cuda/include/nvgraph.h	/^    NVGRAPH_STATUS_EXECUTION_FAILED   =6,$/;"	e	enum:__anon171
NVGRAPH_STATUS_GRAPH_TYPE_NOT_SUPPORTED	/usr/local/cuda/include/nvgraph.h	/^    NVGRAPH_STATUS_GRAPH_TYPE_NOT_SUPPORTED =10$/;"	e	enum:__anon171
NVGRAPH_STATUS_INTERNAL_ERROR	/usr/local/cuda/include/nvgraph.h	/^    NVGRAPH_STATUS_INTERNAL_ERROR     =7,$/;"	e	enum:__anon171
NVGRAPH_STATUS_INVALID_VALUE	/usr/local/cuda/include/nvgraph.h	/^    NVGRAPH_STATUS_INVALID_VALUE      =3,$/;"	e	enum:__anon171
NVGRAPH_STATUS_MAPPING_ERROR	/usr/local/cuda/include/nvgraph.h	/^    NVGRAPH_STATUS_MAPPING_ERROR      =5,$/;"	e	enum:__anon171
NVGRAPH_STATUS_NOT_CONVERGED	/usr/local/cuda/include/nvgraph.h	/^    NVGRAPH_STATUS_NOT_CONVERGED      =9,$/;"	e	enum:__anon171
NVGRAPH_STATUS_NOT_INITIALIZED	/usr/local/cuda/include/nvgraph.h	/^    NVGRAPH_STATUS_NOT_INITIALIZED    =1,$/;"	e	enum:__anon171
NVGRAPH_STATUS_SUCCESS	/usr/local/cuda/include/nvgraph.h	/^    NVGRAPH_STATUS_SUCCESS            =0,$/;"	e	enum:__anon171
NVGRAPH_STATUS_TYPE_NOT_SUPPORTED	/usr/local/cuda/include/nvgraph.h	/^    NVGRAPH_STATUS_TYPE_NOT_SUPPORTED =8,$/;"	e	enum:__anon171
NVGRAPH_SUM	/usr/local/cuda/include/nvgraph.h	/^  NVGRAPH_SUM                     = 1,$/;"	e	enum:__anon175
NVGRAPH_TRAVERSAL_BFS	/usr/local/cuda/include/nvgraph.h	/^	NVGRAPH_TRAVERSAL_BFS=0$/;"	e	enum:__anon179
NVGRAPH_UNSORTED	/usr/local/cuda/include/nvgraph.h	/^   NVGRAPH_UNSORTED               = 1,  \/\/$/;"	e	enum:__anon174
NVML_AGGREGATE_ECC	/usr/local/cuda/include/nvml.h	/^    NVML_AGGREGATE_ECC     = 1,      \/\/!< Aggregate counts persist across reboots (i.e. for the lifetime of the device)$/;"	e	enum:nvmlEccCounterType_enum
NVML_API_VERSION	/usr/local/cuda/include/nvml.h	98;"	d
NVML_API_VERSION_STR	/usr/local/cuda/include/nvml.h	99;"	d
NVML_BRAND_COUNT	/usr/local/cuda/include/nvml.h	/^    NVML_BRAND_COUNT$/;"	e	enum:nvmlBrandType_enum
NVML_BRAND_GEFORCE	/usr/local/cuda/include/nvml.h	/^    NVML_BRAND_GEFORCE = 5,$/;"	e	enum:nvmlBrandType_enum
NVML_BRAND_GRID	/usr/local/cuda/include/nvml.h	/^    NVML_BRAND_GRID    = 4,$/;"	e	enum:nvmlBrandType_enum
NVML_BRAND_NVS	/usr/local/cuda/include/nvml.h	/^    NVML_BRAND_NVS     = 3,$/;"	e	enum:nvmlBrandType_enum
NVML_BRAND_QUADRO	/usr/local/cuda/include/nvml.h	/^    NVML_BRAND_QUADRO  = 1,$/;"	e	enum:nvmlBrandType_enum
NVML_BRAND_TESLA	/usr/local/cuda/include/nvml.h	/^    NVML_BRAND_TESLA   = 2,$/;"	e	enum:nvmlBrandType_enum
NVML_BRAND_UNKNOWN	/usr/local/cuda/include/nvml.h	/^    NVML_BRAND_UNKNOWN = 0, $/;"	e	enum:nvmlBrandType_enum
NVML_BRIDGE_CHIP_BRO4	/usr/local/cuda/include/nvml.h	/^    NVML_BRIDGE_CHIP_BRO4 = 1           $/;"	e	enum:nvmlBridgeChipType_enum
NVML_BRIDGE_CHIP_PLX	/usr/local/cuda/include/nvml.h	/^    NVML_BRIDGE_CHIP_PLX = 0,$/;"	e	enum:nvmlBridgeChipType_enum
NVML_CLOCK_COUNT	/usr/local/cuda/include/nvml.h	/^    NVML_CLOCK_COUNT \/\/<! Count of clock types$/;"	e	enum:nvmlClockType_enum
NVML_CLOCK_GRAPHICS	/usr/local/cuda/include/nvml.h	/^    NVML_CLOCK_GRAPHICS  = 0,        \/\/!< Graphics clock domain$/;"	e	enum:nvmlClockType_enum
NVML_CLOCK_ID_APP_CLOCK_DEFAULT	/usr/local/cuda/include/nvml.h	/^    NVML_CLOCK_ID_APP_CLOCK_DEFAULT  = 2,   \/\/!< Default application clock target$/;"	e	enum:nvmlClockId_enum
NVML_CLOCK_ID_APP_CLOCK_TARGET	/usr/local/cuda/include/nvml.h	/^    NVML_CLOCK_ID_APP_CLOCK_TARGET   = 1,   \/\/!< Target application clock$/;"	e	enum:nvmlClockId_enum
NVML_CLOCK_ID_COUNT	/usr/local/cuda/include/nvml.h	/^    NVML_CLOCK_ID_COUNT \/\/<! Count of Clock Ids.$/;"	e	enum:nvmlClockId_enum
NVML_CLOCK_ID_CURRENT	/usr/local/cuda/include/nvml.h	/^    NVML_CLOCK_ID_CURRENT            = 0,   \/\/!< Current actual clock value$/;"	e	enum:nvmlClockId_enum
NVML_CLOCK_ID_CUSTOMER_BOOST_MAX	/usr/local/cuda/include/nvml.h	/^    NVML_CLOCK_ID_CUSTOMER_BOOST_MAX = 3,   \/\/!< OEM-defined maximum clock rate$/;"	e	enum:nvmlClockId_enum
NVML_CLOCK_MEM	/usr/local/cuda/include/nvml.h	/^    NVML_CLOCK_MEM       = 2,        \/\/!< Memory clock domain$/;"	e	enum:nvmlClockType_enum
NVML_CLOCK_SM	/usr/local/cuda/include/nvml.h	/^    NVML_CLOCK_SM        = 1,        \/\/!< SM clock domain$/;"	e	enum:nvmlClockType_enum
NVML_CLOCK_VIDEO	/usr/local/cuda/include/nvml.h	/^    NVML_CLOCK_VIDEO     = 3,        \/\/!< Video encoder\/decoder clock domain$/;"	e	enum:nvmlClockType_enum
NVML_COMPUTEMODE_COUNT	/usr/local/cuda/include/nvml.h	/^    NVML_COMPUTEMODE_COUNT$/;"	e	enum:nvmlComputeMode_enum
NVML_COMPUTEMODE_DEFAULT	/usr/local/cuda/include/nvml.h	/^    NVML_COMPUTEMODE_DEFAULT           = 0,  \/\/!< Default compute mode -- multiple contexts per device$/;"	e	enum:nvmlComputeMode_enum
NVML_COMPUTEMODE_EXCLUSIVE_PROCESS	/usr/local/cuda/include/nvml.h	/^    NVML_COMPUTEMODE_EXCLUSIVE_PROCESS = 3,  \/\/!< Compute-exclusive-process mode -- only one context per device, usable from multiple threads at a time$/;"	e	enum:nvmlComputeMode_enum
NVML_COMPUTEMODE_EXCLUSIVE_THREAD	/usr/local/cuda/include/nvml.h	/^    NVML_COMPUTEMODE_EXCLUSIVE_THREAD  = 1,  \/\/!< Support Removed$/;"	e	enum:nvmlComputeMode_enum
NVML_COMPUTEMODE_PROHIBITED	/usr/local/cuda/include/nvml.h	/^    NVML_COMPUTEMODE_PROHIBITED        = 2,  \/\/!< Compute-prohibited mode -- no contexts per device$/;"	e	enum:nvmlComputeMode_enum
NVML_DEC_UTILIZATION_SAMPLES	/usr/local/cuda/include/nvml.h	/^    NVML_DEC_UTILIZATION_SAMPLES    = 4, \/\/!< To represent percent of time during which NVDEC remains busy            $/;"	e	enum:nvmlSamplingType_enum
NVML_DEVICE_INFOROM_VERSION_BUFFER_SIZE	/usr/local/cuda/include/nvml.h	1463;"	d
NVML_DEVICE_NAME_BUFFER_SIZE	/usr/local/cuda/include/nvml.h	1488;"	d
NVML_DEVICE_PART_NUMBER_BUFFER_SIZE	/usr/local/cuda/include/nvml.h	1473;"	d
NVML_DEVICE_PCI_BUS_ID_BUFFER_SIZE	/usr/local/cuda/include/nvml.h	126;"	d
NVML_DEVICE_PCI_BUS_ID_BUFFER_V2_SIZE	/usr/local/cuda/include/nvml.h	131;"	d
NVML_DEVICE_SERIAL_BUFFER_SIZE	/usr/local/cuda/include/nvml.h	1493;"	d
NVML_DEVICE_UUID_BUFFER_SIZE	/usr/local/cuda/include/nvml.h	1468;"	d
NVML_DEVICE_VBIOS_VERSION_BUFFER_SIZE	/usr/local/cuda/include/nvml.h	1498;"	d
NVML_DOUBLE_BIT_ECC	/usr/local/cuda/include/nvml.h	548;"	d
NVML_DRIVER_WDDM	/usr/local/cuda/include/nvml.h	/^    NVML_DRIVER_WDDM      = 0,       \/\/!< WDDM driver model -- GPU treated as a display device$/;"	e	enum:nvmlDriverModel_enum
NVML_DRIVER_WDM	/usr/local/cuda/include/nvml.h	/^    NVML_DRIVER_WDM       = 1        \/\/!< WDM (TCC) model (recommended) -- GPU treated as a generic device$/;"	e	enum:nvmlDriverModel_enum
NVML_ECC_COUNTER_TYPE_COUNT	/usr/local/cuda/include/nvml.h	/^    NVML_ECC_COUNTER_TYPE_COUNT      \/\/!< Count of memory counter types$/;"	e	enum:nvmlEccCounterType_enum
NVML_ENCODER_QUERY_H264	/usr/local/cuda/include/nvml.h	/^    NVML_ENCODER_QUERY_H264 = 0,$/;"	e	enum:nvmlEncoderQueryType_enum
NVML_ENCODER_QUERY_HEVC	/usr/local/cuda/include/nvml.h	/^    NVML_ENCODER_QUERY_HEVC = 1,$/;"	e	enum:nvmlEncoderQueryType_enum
NVML_ENC_UTILIZATION_SAMPLES	/usr/local/cuda/include/nvml.h	/^    NVML_ENC_UTILIZATION_SAMPLES    = 3, \/\/!< To represent percent of time during which NVENC remains busy$/;"	e	enum:nvmlSamplingType_enum
NVML_ERROR_ALREADY_INITIALIZED	/usr/local/cuda/include/nvml.h	/^    NVML_ERROR_ALREADY_INITIALIZED = 5, \/\/!< Deprecated: Multiple initializations are now allowed through ref counting$/;"	e	enum:nvmlReturn_enum
NVML_ERROR_CORRUPTED_INFOROM	/usr/local/cuda/include/nvml.h	/^    NVML_ERROR_CORRUPTED_INFOROM = 14,  \/\/!< infoROM is corrupted$/;"	e	enum:nvmlReturn_enum
NVML_ERROR_DRIVER_NOT_LOADED	/usr/local/cuda/include/nvml.h	/^    NVML_ERROR_DRIVER_NOT_LOADED = 9,   \/\/!< NVIDIA driver is not loaded$/;"	e	enum:nvmlReturn_enum
NVML_ERROR_FUNCTION_NOT_FOUND	/usr/local/cuda/include/nvml.h	/^    NVML_ERROR_FUNCTION_NOT_FOUND = 13, \/\/!< Local version of NVML doesn't implement this function$/;"	e	enum:nvmlReturn_enum
NVML_ERROR_GPU_IS_LOST	/usr/local/cuda/include/nvml.h	/^    NVML_ERROR_GPU_IS_LOST = 15,        \/\/!< The GPU has fallen off the bus or has otherwise become inaccessible$/;"	e	enum:nvmlReturn_enum
NVML_ERROR_INSUFFICIENT_POWER	/usr/local/cuda/include/nvml.h	/^    NVML_ERROR_INSUFFICIENT_POWER = 8,  \/\/!< A device's external power cables are not properly attached$/;"	e	enum:nvmlReturn_enum
NVML_ERROR_INSUFFICIENT_SIZE	/usr/local/cuda/include/nvml.h	/^    NVML_ERROR_INSUFFICIENT_SIZE = 7,   \/\/!< An input argument is not large enough$/;"	e	enum:nvmlReturn_enum
NVML_ERROR_INVALID_ARGUMENT	/usr/local/cuda/include/nvml.h	/^    NVML_ERROR_INVALID_ARGUMENT = 2,    \/\/!< A supplied argument is invalid$/;"	e	enum:nvmlReturn_enum
NVML_ERROR_IN_USE	/usr/local/cuda/include/nvml.h	/^    NVML_ERROR_IN_USE = 19,             \/\/!< An operation cannot be performed because the GPU is currently in use$/;"	e	enum:nvmlReturn_enum
NVML_ERROR_IRQ_ISSUE	/usr/local/cuda/include/nvml.h	/^    NVML_ERROR_IRQ_ISSUE = 11,          \/\/!< NVIDIA Kernel detected an interrupt issue with a GPU$/;"	e	enum:nvmlReturn_enum
NVML_ERROR_LIBRARY_NOT_FOUND	/usr/local/cuda/include/nvml.h	/^    NVML_ERROR_LIBRARY_NOT_FOUND = 12,  \/\/!< NVML Shared Library couldn't be found or loaded$/;"	e	enum:nvmlReturn_enum
NVML_ERROR_LIB_RM_VERSION_MISMATCH	/usr/local/cuda/include/nvml.h	/^    NVML_ERROR_LIB_RM_VERSION_MISMATCH = 18,   \/\/!< RM detects a driver\/library version mismatch$/;"	e	enum:nvmlReturn_enum
NVML_ERROR_MEMORY	/usr/local/cuda/include/nvml.h	/^    NVML_ERROR_MEMORY = 20,             \/\/!< Insufficient memory$/;"	e	enum:nvmlReturn_enum
NVML_ERROR_NOT_FOUND	/usr/local/cuda/include/nvml.h	/^    NVML_ERROR_NOT_FOUND = 6,           \/\/!< A query to find an object was unsuccessful$/;"	e	enum:nvmlReturn_enum
NVML_ERROR_NOT_SUPPORTED	/usr/local/cuda/include/nvml.h	/^    NVML_ERROR_NOT_SUPPORTED = 3,       \/\/!< The requested operation is not available on target device$/;"	e	enum:nvmlReturn_enum
NVML_ERROR_NO_DATA	/usr/local/cuda/include/nvml.h	/^    NVML_ERROR_NO_DATA = 21,            \/\/!<No data$/;"	e	enum:nvmlReturn_enum
NVML_ERROR_NO_PERMISSION	/usr/local/cuda/include/nvml.h	/^    NVML_ERROR_NO_PERMISSION = 4,       \/\/!< The current user does not have permission for operation$/;"	e	enum:nvmlReturn_enum
NVML_ERROR_OPERATING_SYSTEM	/usr/local/cuda/include/nvml.h	/^    NVML_ERROR_OPERATING_SYSTEM = 17,   \/\/!< The GPU control device has been blocked by the operating system\/cgroups$/;"	e	enum:nvmlReturn_enum
NVML_ERROR_RESET_REQUIRED	/usr/local/cuda/include/nvml.h	/^    NVML_ERROR_RESET_REQUIRED = 16,     \/\/!< The GPU requires a reset before it can be used again$/;"	e	enum:nvmlReturn_enum
NVML_ERROR_TIMEOUT	/usr/local/cuda/include/nvml.h	/^    NVML_ERROR_TIMEOUT = 10,            \/\/!< User provided timeout passed$/;"	e	enum:nvmlReturn_enum
NVML_ERROR_UNINITIALIZED	/usr/local/cuda/include/nvml.h	/^    NVML_ERROR_UNINITIALIZED = 1,       \/\/!< NVML was not first initialized with nvmlInit()$/;"	e	enum:nvmlReturn_enum
NVML_ERROR_UNKNOWN	/usr/local/cuda/include/nvml.h	/^    NVML_ERROR_UNKNOWN = 999            \/\/!< An internal driver error occurred$/;"	e	enum:nvmlReturn_enum
NVML_ERROR_VGPU_ECC_NOT_SUPPORTED	/usr/local/cuda/include/nvml.h	/^    NVML_ERROR_VGPU_ECC_NOT_SUPPORTED = 22,    \/\/!< The requested vgpu operation is not available on target device, becasue ECC is enabled$/;"	e	enum:nvmlReturn_enum
NVML_FAN_FAILED	/usr/local/cuda/include/nvml.h	/^    NVML_FAN_FAILED       = 1      \/\/!< Fan has failed$/;"	e	enum:nvmlFanState_enum
NVML_FAN_NORMAL	/usr/local/cuda/include/nvml.h	/^    NVML_FAN_NORMAL       = 0,     \/\/!< Fan is working properly$/;"	e	enum:nvmlFanState_enum
NVML_FEATURE_DISABLED	/usr/local/cuda/include/nvml.h	/^    NVML_FEATURE_DISABLED    = 0,     \/\/!< Feature disabled $/;"	e	enum:nvmlEnableState_enum
NVML_FEATURE_ENABLED	/usr/local/cuda/include/nvml.h	/^    NVML_FEATURE_ENABLED     = 1      \/\/!< Feature enabled$/;"	e	enum:nvmlEnableState_enum
NVML_FI_DEV_ECC_CURRENT	/usr/local/cuda/include/nvml.h	797;"	d
NVML_FI_DEV_ECC_DBE_AGG_CBU	/usr/local/cuda/include/nvml.h	826;"	d
NVML_FI_DEV_ECC_DBE_AGG_DEV	/usr/local/cuda/include/nvml.h	821;"	d
NVML_FI_DEV_ECC_DBE_AGG_L1	/usr/local/cuda/include/nvml.h	817;"	d
NVML_FI_DEV_ECC_DBE_AGG_L2	/usr/local/cuda/include/nvml.h	819;"	d
NVML_FI_DEV_ECC_DBE_AGG_REG	/usr/local/cuda/include/nvml.h	823;"	d
NVML_FI_DEV_ECC_DBE_AGG_TEX	/usr/local/cuda/include/nvml.h	825;"	d
NVML_FI_DEV_ECC_DBE_AGG_TOTAL	/usr/local/cuda/include/nvml.h	803;"	d
NVML_FI_DEV_ECC_DBE_VOL_CBU	/usr/local/cuda/include/nvml.h	815;"	d
NVML_FI_DEV_ECC_DBE_VOL_DEV	/usr/local/cuda/include/nvml.h	810;"	d
NVML_FI_DEV_ECC_DBE_VOL_L1	/usr/local/cuda/include/nvml.h	806;"	d
NVML_FI_DEV_ECC_DBE_VOL_L2	/usr/local/cuda/include/nvml.h	808;"	d
NVML_FI_DEV_ECC_DBE_VOL_REG	/usr/local/cuda/include/nvml.h	812;"	d
NVML_FI_DEV_ECC_DBE_VOL_TEX	/usr/local/cuda/include/nvml.h	814;"	d
NVML_FI_DEV_ECC_DBE_VOL_TOTAL	/usr/local/cuda/include/nvml.h	801;"	d
NVML_FI_DEV_ECC_PENDING	/usr/local/cuda/include/nvml.h	798;"	d
NVML_FI_DEV_ECC_SBE_AGG_DEV	/usr/local/cuda/include/nvml.h	820;"	d
NVML_FI_DEV_ECC_SBE_AGG_L1	/usr/local/cuda/include/nvml.h	816;"	d
NVML_FI_DEV_ECC_SBE_AGG_L2	/usr/local/cuda/include/nvml.h	818;"	d
NVML_FI_DEV_ECC_SBE_AGG_REG	/usr/local/cuda/include/nvml.h	822;"	d
NVML_FI_DEV_ECC_SBE_AGG_TEX	/usr/local/cuda/include/nvml.h	824;"	d
NVML_FI_DEV_ECC_SBE_AGG_TOTAL	/usr/local/cuda/include/nvml.h	802;"	d
NVML_FI_DEV_ECC_SBE_VOL_DEV	/usr/local/cuda/include/nvml.h	809;"	d
NVML_FI_DEV_ECC_SBE_VOL_L1	/usr/local/cuda/include/nvml.h	805;"	d
NVML_FI_DEV_ECC_SBE_VOL_L2	/usr/local/cuda/include/nvml.h	807;"	d
NVML_FI_DEV_ECC_SBE_VOL_REG	/usr/local/cuda/include/nvml.h	811;"	d
NVML_FI_DEV_ECC_SBE_VOL_TEX	/usr/local/cuda/include/nvml.h	813;"	d
NVML_FI_DEV_ECC_SBE_VOL_TOTAL	/usr/local/cuda/include/nvml.h	800;"	d
NVML_FI_DEV_MEMORY_TEMP	/usr/local/cuda/include/nvml.h	898;"	d
NVML_FI_DEV_NVLINK_BANDWIDTH_C0_L0	/usr/local/cuda/include/nvml.h	870;"	d
NVML_FI_DEV_NVLINK_BANDWIDTH_C0_L1	/usr/local/cuda/include/nvml.h	871;"	d
NVML_FI_DEV_NVLINK_BANDWIDTH_C0_L2	/usr/local/cuda/include/nvml.h	872;"	d
NVML_FI_DEV_NVLINK_BANDWIDTH_C0_L3	/usr/local/cuda/include/nvml.h	873;"	d
NVML_FI_DEV_NVLINK_BANDWIDTH_C0_L4	/usr/local/cuda/include/nvml.h	874;"	d
NVML_FI_DEV_NVLINK_BANDWIDTH_C0_L5	/usr/local/cuda/include/nvml.h	875;"	d
NVML_FI_DEV_NVLINK_BANDWIDTH_C0_TOTAL	/usr/local/cuda/include/nvml.h	876;"	d
NVML_FI_DEV_NVLINK_BANDWIDTH_C1_L0	/usr/local/cuda/include/nvml.h	879;"	d
NVML_FI_DEV_NVLINK_BANDWIDTH_C1_L1	/usr/local/cuda/include/nvml.h	880;"	d
NVML_FI_DEV_NVLINK_BANDWIDTH_C1_L2	/usr/local/cuda/include/nvml.h	881;"	d
NVML_FI_DEV_NVLINK_BANDWIDTH_C1_L3	/usr/local/cuda/include/nvml.h	882;"	d
NVML_FI_DEV_NVLINK_BANDWIDTH_C1_L4	/usr/local/cuda/include/nvml.h	883;"	d
NVML_FI_DEV_NVLINK_BANDWIDTH_C1_L5	/usr/local/cuda/include/nvml.h	884;"	d
NVML_FI_DEV_NVLINK_BANDWIDTH_C1_TOTAL	/usr/local/cuda/include/nvml.h	885;"	d
NVML_FI_DEV_NVLINK_CRC_DATA_ERROR_COUNT_L0	/usr/local/cuda/include/nvml.h	843;"	d
NVML_FI_DEV_NVLINK_CRC_DATA_ERROR_COUNT_L1	/usr/local/cuda/include/nvml.h	844;"	d
NVML_FI_DEV_NVLINK_CRC_DATA_ERROR_COUNT_L2	/usr/local/cuda/include/nvml.h	845;"	d
NVML_FI_DEV_NVLINK_CRC_DATA_ERROR_COUNT_L3	/usr/local/cuda/include/nvml.h	846;"	d
NVML_FI_DEV_NVLINK_CRC_DATA_ERROR_COUNT_L4	/usr/local/cuda/include/nvml.h	847;"	d
NVML_FI_DEV_NVLINK_CRC_DATA_ERROR_COUNT_L5	/usr/local/cuda/include/nvml.h	848;"	d
NVML_FI_DEV_NVLINK_CRC_DATA_ERROR_COUNT_TOTAL	/usr/local/cuda/include/nvml.h	849;"	d
NVML_FI_DEV_NVLINK_CRC_FLIT_ERROR_COUNT_L0	/usr/local/cuda/include/nvml.h	834;"	d
NVML_FI_DEV_NVLINK_CRC_FLIT_ERROR_COUNT_L1	/usr/local/cuda/include/nvml.h	835;"	d
NVML_FI_DEV_NVLINK_CRC_FLIT_ERROR_COUNT_L2	/usr/local/cuda/include/nvml.h	836;"	d
NVML_FI_DEV_NVLINK_CRC_FLIT_ERROR_COUNT_L3	/usr/local/cuda/include/nvml.h	837;"	d
NVML_FI_DEV_NVLINK_CRC_FLIT_ERROR_COUNT_L4	/usr/local/cuda/include/nvml.h	838;"	d
NVML_FI_DEV_NVLINK_CRC_FLIT_ERROR_COUNT_L5	/usr/local/cuda/include/nvml.h	839;"	d
NVML_FI_DEV_NVLINK_CRC_FLIT_ERROR_COUNT_TOTAL	/usr/local/cuda/include/nvml.h	840;"	d
NVML_FI_DEV_NVLINK_RECOVERY_ERROR_COUNT_L0	/usr/local/cuda/include/nvml.h	861;"	d
NVML_FI_DEV_NVLINK_RECOVERY_ERROR_COUNT_L1	/usr/local/cuda/include/nvml.h	862;"	d
NVML_FI_DEV_NVLINK_RECOVERY_ERROR_COUNT_L2	/usr/local/cuda/include/nvml.h	863;"	d
NVML_FI_DEV_NVLINK_RECOVERY_ERROR_COUNT_L3	/usr/local/cuda/include/nvml.h	864;"	d
NVML_FI_DEV_NVLINK_RECOVERY_ERROR_COUNT_L4	/usr/local/cuda/include/nvml.h	865;"	d
NVML_FI_DEV_NVLINK_RECOVERY_ERROR_COUNT_L5	/usr/local/cuda/include/nvml.h	866;"	d
NVML_FI_DEV_NVLINK_RECOVERY_ERROR_COUNT_TOTAL	/usr/local/cuda/include/nvml.h	867;"	d
NVML_FI_DEV_NVLINK_REPLAY_ERROR_COUNT_L0	/usr/local/cuda/include/nvml.h	852;"	d
NVML_FI_DEV_NVLINK_REPLAY_ERROR_COUNT_L1	/usr/local/cuda/include/nvml.h	853;"	d
NVML_FI_DEV_NVLINK_REPLAY_ERROR_COUNT_L2	/usr/local/cuda/include/nvml.h	854;"	d
NVML_FI_DEV_NVLINK_REPLAY_ERROR_COUNT_L3	/usr/local/cuda/include/nvml.h	855;"	d
NVML_FI_DEV_NVLINK_REPLAY_ERROR_COUNT_L4	/usr/local/cuda/include/nvml.h	856;"	d
NVML_FI_DEV_NVLINK_REPLAY_ERROR_COUNT_L5	/usr/local/cuda/include/nvml.h	857;"	d
NVML_FI_DEV_NVLINK_REPLAY_ERROR_COUNT_TOTAL	/usr/local/cuda/include/nvml.h	858;"	d
NVML_FI_DEV_PERF_POLICY_BOARD_LIMIT	/usr/local/cuda/include/nvml.h	891;"	d
NVML_FI_DEV_PERF_POLICY_LOW_UTILIZATION	/usr/local/cuda/include/nvml.h	892;"	d
NVML_FI_DEV_PERF_POLICY_POWER	/usr/local/cuda/include/nvml.h	888;"	d
NVML_FI_DEV_PERF_POLICY_RELIABILITY	/usr/local/cuda/include/nvml.h	893;"	d
NVML_FI_DEV_PERF_POLICY_SYNC_BOOST	/usr/local/cuda/include/nvml.h	890;"	d
NVML_FI_DEV_PERF_POLICY_THERMAL	/usr/local/cuda/include/nvml.h	889;"	d
NVML_FI_DEV_PERF_POLICY_TOTAL_APP_CLOCKS	/usr/local/cuda/include/nvml.h	894;"	d
NVML_FI_DEV_PERF_POLICY_TOTAL_BASE_CLOCKS	/usr/local/cuda/include/nvml.h	895;"	d
NVML_FI_DEV_RETIRED_DBE	/usr/local/cuda/include/nvml.h	830;"	d
NVML_FI_DEV_RETIRED_PENDING	/usr/local/cuda/include/nvml.h	831;"	d
NVML_FI_DEV_RETIRED_SBE	/usr/local/cuda/include/nvml.h	829;"	d
NVML_FI_DEV_TOTAL_ENERGY_CONSUMPTION	/usr/local/cuda/include/nvml.h	901;"	d
NVML_FI_MAX	/usr/local/cuda/include/nvml.h	903;"	d
NVML_GOM_ALL_ON	/usr/local/cuda/include/nvml.h	/^    NVML_GOM_ALL_ON                    = 0, \/\/!< Everything is enabled and running at full speed$/;"	e	enum:nvmlGom_enum
NVML_GOM_COMPUTE	/usr/local/cuda/include/nvml.h	/^    NVML_GOM_COMPUTE                   = 1, \/\/!< Designed for running only compute tasks. Graphics operations$/;"	e	enum:nvmlGom_enum
NVML_GOM_LOW_DP	/usr/local/cuda/include/nvml.h	/^    NVML_GOM_LOW_DP                    = 2  \/\/!< Designed for running graphics applications that don't require$/;"	e	enum:nvmlGom_enum
NVML_GPU_UTILIZATION_SAMPLES	/usr/local/cuda/include/nvml.h	/^    NVML_GPU_UTILIZATION_SAMPLES    = 1, \/\/!< To represent percent of time during which one or more kernels was executing on the GPU$/;"	e	enum:nvmlSamplingType_enum
NVML_GPU_VIRTUALIZATION_MODE_HOST_VGPU	/usr/local/cuda/include/nvml.h	/^    NVML_GPU_VIRTUALIZATION_MODE_HOST_VGPU = 3,  \/\/!< Device is associated with VGX hypervisor in vGPU mode$/;"	e	enum:nvmlGpuVirtualizationMode
NVML_GPU_VIRTUALIZATION_MODE_HOST_VSGA	/usr/local/cuda/include/nvml.h	/^    NVML_GPU_VIRTUALIZATION_MODE_HOST_VSGA = 4,  \/\/!< Device is associated with VGX hypervisor in vSGA mode$/;"	e	enum:nvmlGpuVirtualizationMode
NVML_GPU_VIRTUALIZATION_MODE_NONE	/usr/local/cuda/include/nvml.h	/^    NVML_GPU_VIRTUALIZATION_MODE_NONE = 0,  \/\/!< Represents Bare Metal GPU$/;"	e	enum:nvmlGpuVirtualizationMode
NVML_GPU_VIRTUALIZATION_MODE_PASSTHROUGH	/usr/local/cuda/include/nvml.h	/^    NVML_GPU_VIRTUALIZATION_MODE_PASSTHROUGH = 1,  \/\/!< Device is associated with GPU-Passthorugh$/;"	e	enum:nvmlGpuVirtualizationMode
NVML_GPU_VIRTUALIZATION_MODE_VGPU	/usr/local/cuda/include/nvml.h	/^    NVML_GPU_VIRTUALIZATION_MODE_VGPU = 2,  \/\/!< Device is associated with vGPU inside virtual machine.$/;"	e	enum:nvmlGpuVirtualizationMode
NVML_GRID_LICENSE_BUFFER_SIZE	/usr/local/cuda/include/nvml.h	1233;"	d
NVML_GRID_LICENSE_FEATURE_CODE_VGPU	/usr/local/cuda/include/nvml.h	/^    NVML_GRID_LICENSE_FEATURE_CODE_VGPU = 1,         \/\/ Virtual GPU$/;"	e	enum:__anon180
NVML_GRID_LICENSE_FEATURE_CODE_VWORKSTATION	/usr/local/cuda/include/nvml.h	/^    NVML_GRID_LICENSE_FEATURE_CODE_VWORKSTATION = 2  \/\/ Virtual Workstation$/;"	e	enum:__anon180
NVML_GRID_LICENSE_FEATURE_MAX_COUNT	/usr/local/cuda/include/nvml.h	1241;"	d
NVML_GRID_LICENSE_INFO_MAX_LENGTH	/usr/local/cuda/include/nvml.h	1243;"	d
NVML_INFOROM_COUNT	/usr/local/cuda/include/nvml.h	/^    NVML_INFOROM_COUNT                     \/\/!< This counts the number of infoROM objects the driver knows about$/;"	e	enum:nvmlInforomObject_enum
NVML_INFOROM_ECC	/usr/local/cuda/include/nvml.h	/^    NVML_INFOROM_ECC            = 1,       \/\/!< The ECC object determining the level of ECC support$/;"	e	enum:nvmlInforomObject_enum
NVML_INFOROM_OEM	/usr/local/cuda/include/nvml.h	/^    NVML_INFOROM_OEM            = 0,       \/\/!< An object defined by OEM$/;"	e	enum:nvmlInforomObject_enum
NVML_INFOROM_POWER	/usr/local/cuda/include/nvml.h	/^    NVML_INFOROM_POWER          = 2,       \/\/!< The power management object$/;"	e	enum:nvmlInforomObject_enum
NVML_LED_COLOR_AMBER	/usr/local/cuda/include/nvml.h	/^    NVML_LED_COLOR_AMBER       = 1      \/\/!< AMBER, indicates problem$/;"	e	enum:nvmlLedColor_enum
NVML_LED_COLOR_GREEN	/usr/local/cuda/include/nvml.h	/^    NVML_LED_COLOR_GREEN       = 0,     \/\/!< GREEN, indicates good health$/;"	e	enum:nvmlLedColor_enum
NVML_MAX_PHYSICAL_BRIDGE	/usr/local/cuda/include/nvml.h	333;"	d
NVML_MAX_VGPU_INSTANCES_PER_PGPU	/usr/local/cuda/include/nvml.h	1239;"	d
NVML_MAX_VGPU_TYPES_PER_PGPU	/usr/local/cuda/include/nvml.h	1237;"	d
NVML_MEMORY_CLK_SAMPLES	/usr/local/cuda/include/nvml.h	/^    NVML_MEMORY_CLK_SAMPLES         = 6, \/\/!< To represent memory clock samples$/;"	e	enum:nvmlSamplingType_enum
NVML_MEMORY_ERROR_TYPE_CORRECTED	/usr/local/cuda/include/nvml.h	/^    NVML_MEMORY_ERROR_TYPE_CORRECTED = 0,$/;"	e	enum:nvmlMemoryErrorType_enum
NVML_MEMORY_ERROR_TYPE_COUNT	/usr/local/cuda/include/nvml.h	/^    NVML_MEMORY_ERROR_TYPE_COUNT \/\/!< Count of memory error types$/;"	e	enum:nvmlMemoryErrorType_enum
NVML_MEMORY_ERROR_TYPE_UNCORRECTED	/usr/local/cuda/include/nvml.h	/^    NVML_MEMORY_ERROR_TYPE_UNCORRECTED = 1,$/;"	e	enum:nvmlMemoryErrorType_enum
NVML_MEMORY_LOCATION_CBU	/usr/local/cuda/include/nvml.h	/^    NVML_MEMORY_LOCATION_CBU            = 6, \/\/!< CBU$/;"	e	enum:nvmlMemoryLocation_enum
NVML_MEMORY_LOCATION_COUNT	/usr/local/cuda/include/nvml.h	/^    NVML_MEMORY_LOCATION_COUNT              \/\/!< This counts the number of memory locations the driver knows about$/;"	e	enum:nvmlMemoryLocation_enum
NVML_MEMORY_LOCATION_DEVICE_MEMORY	/usr/local/cuda/include/nvml.h	/^    NVML_MEMORY_LOCATION_DEVICE_MEMORY = 2,  \/\/!< GPU Device Memory$/;"	e	enum:nvmlMemoryLocation_enum
NVML_MEMORY_LOCATION_L1_CACHE	/usr/local/cuda/include/nvml.h	/^    NVML_MEMORY_LOCATION_L1_CACHE = 0,       \/\/!< GPU L1 Cache$/;"	e	enum:nvmlMemoryLocation_enum
NVML_MEMORY_LOCATION_L2_CACHE	/usr/local/cuda/include/nvml.h	/^    NVML_MEMORY_LOCATION_L2_CACHE = 1,       \/\/!< GPU L2 Cache$/;"	e	enum:nvmlMemoryLocation_enum
NVML_MEMORY_LOCATION_REGISTER_FILE	/usr/local/cuda/include/nvml.h	/^    NVML_MEMORY_LOCATION_REGISTER_FILE = 3,  \/\/!< GPU Register File$/;"	e	enum:nvmlMemoryLocation_enum
NVML_MEMORY_LOCATION_TEXTURE_MEMORY	/usr/local/cuda/include/nvml.h	/^    NVML_MEMORY_LOCATION_TEXTURE_MEMORY = 4, \/\/!< GPU Texture Memory$/;"	e	enum:nvmlMemoryLocation_enum
NVML_MEMORY_LOCATION_TEXTURE_SHM	/usr/local/cuda/include/nvml.h	/^    NVML_MEMORY_LOCATION_TEXTURE_SHM    = 5, \/\/!< Shared memory$/;"	e	enum:nvmlMemoryLocation_enum
NVML_MEMORY_UTILIZATION_SAMPLES	/usr/local/cuda/include/nvml.h	/^    NVML_MEMORY_UTILIZATION_SAMPLES = 2, \/\/!< To represent percent of time during which global (device) memory was being read or written$/;"	e	enum:nvmlSamplingType_enum
NVML_NVLINK_CAP_COUNT	/usr/local/cuda/include/nvml.h	/^    NVML_NVLINK_CAP_COUNT$/;"	e	enum:nvmlNvLinkCapability_enum
NVML_NVLINK_CAP_P2P_ATOMICS	/usr/local/cuda/include/nvml.h	/^    NVML_NVLINK_CAP_P2P_ATOMICS   = 2,     \/\/ P2P atomics are supported$/;"	e	enum:nvmlNvLinkCapability_enum
NVML_NVLINK_CAP_P2P_SUPPORTED	/usr/local/cuda/include/nvml.h	/^    NVML_NVLINK_CAP_P2P_SUPPORTED = 0,     \/\/ P2P over NVLink is supported$/;"	e	enum:nvmlNvLinkCapability_enum
NVML_NVLINK_CAP_SLI_BRIDGE	/usr/local/cuda/include/nvml.h	/^    NVML_NVLINK_CAP_SLI_BRIDGE    = 4,     \/\/ SLI is supported over this link$/;"	e	enum:nvmlNvLinkCapability_enum
NVML_NVLINK_CAP_SYSMEM_ACCESS	/usr/local/cuda/include/nvml.h	/^    NVML_NVLINK_CAP_SYSMEM_ACCESS = 1,     \/\/ Access to system memory is supported$/;"	e	enum:nvmlNvLinkCapability_enum
NVML_NVLINK_CAP_SYSMEM_ATOMICS	/usr/local/cuda/include/nvml.h	/^    NVML_NVLINK_CAP_SYSMEM_ATOMICS= 3,     \/\/ System memory atomics are supported$/;"	e	enum:nvmlNvLinkCapability_enum
NVML_NVLINK_CAP_VALID	/usr/local/cuda/include/nvml.h	/^    NVML_NVLINK_CAP_VALID         = 5,     \/\/ Link is supported on this device$/;"	e	enum:nvmlNvLinkCapability_enum
NVML_NVLINK_COUNTER_PKTFILTER_ALL	/usr/local/cuda/include/nvml.h	/^    NVML_NVLINK_COUNTER_PKTFILTER_ALL        = 0xFF     \/\/ all packets$/;"	e	enum:nvmlNvLinkUtilizationCountPktTypes_enum
NVML_NVLINK_COUNTER_PKTFILTER_FLUSH	/usr/local/cuda/include/nvml.h	/^    NVML_NVLINK_COUNTER_PKTFILTER_FLUSH      = 0x20,    \/\/ flush requests$/;"	e	enum:nvmlNvLinkUtilizationCountPktTypes_enum
NVML_NVLINK_COUNTER_PKTFILTER_NOP	/usr/local/cuda/include/nvml.h	/^    NVML_NVLINK_COUNTER_PKTFILTER_NOP        = 0x1,     \/\/ no operation packets$/;"	e	enum:nvmlNvLinkUtilizationCountPktTypes_enum
NVML_NVLINK_COUNTER_PKTFILTER_NRATOM	/usr/local/cuda/include/nvml.h	/^    NVML_NVLINK_COUNTER_PKTFILTER_NRATOM     = 0x10,    \/\/ non-reduction atomic requests$/;"	e	enum:nvmlNvLinkUtilizationCountPktTypes_enum
NVML_NVLINK_COUNTER_PKTFILTER_RATOM	/usr/local/cuda/include/nvml.h	/^    NVML_NVLINK_COUNTER_PKTFILTER_RATOM      = 0x8,     \/\/ reduction atomic requests$/;"	e	enum:nvmlNvLinkUtilizationCountPktTypes_enum
NVML_NVLINK_COUNTER_PKTFILTER_READ	/usr/local/cuda/include/nvml.h	/^    NVML_NVLINK_COUNTER_PKTFILTER_READ       = 0x2,     \/\/ read packets$/;"	e	enum:nvmlNvLinkUtilizationCountPktTypes_enum
NVML_NVLINK_COUNTER_PKTFILTER_RESPDATA	/usr/local/cuda/include/nvml.h	/^    NVML_NVLINK_COUNTER_PKTFILTER_RESPDATA   = 0x40,    \/\/ responses with data$/;"	e	enum:nvmlNvLinkUtilizationCountPktTypes_enum
NVML_NVLINK_COUNTER_PKTFILTER_RESPNODATA	/usr/local/cuda/include/nvml.h	/^    NVML_NVLINK_COUNTER_PKTFILTER_RESPNODATA = 0x80,    \/\/ responses without data$/;"	e	enum:nvmlNvLinkUtilizationCountPktTypes_enum
NVML_NVLINK_COUNTER_PKTFILTER_WRITE	/usr/local/cuda/include/nvml.h	/^    NVML_NVLINK_COUNTER_PKTFILTER_WRITE      = 0x4,     \/\/ write packets$/;"	e	enum:nvmlNvLinkUtilizationCountPktTypes_enum
NVML_NVLINK_COUNTER_UNIT_BYTES	/usr/local/cuda/include/nvml.h	/^    NVML_NVLINK_COUNTER_UNIT_BYTES   = 2,     \/\/ count by bytes$/;"	e	enum:nvmlNvLinkUtilizationCountUnits_enum
NVML_NVLINK_COUNTER_UNIT_COUNT	/usr/local/cuda/include/nvml.h	/^    NVML_NVLINK_COUNTER_UNIT_COUNT$/;"	e	enum:nvmlNvLinkUtilizationCountUnits_enum
NVML_NVLINK_COUNTER_UNIT_CYCLES	/usr/local/cuda/include/nvml.h	/^    NVML_NVLINK_COUNTER_UNIT_CYCLES =  0,     \/\/ count by cycles$/;"	e	enum:nvmlNvLinkUtilizationCountUnits_enum
NVML_NVLINK_COUNTER_UNIT_PACKETS	/usr/local/cuda/include/nvml.h	/^    NVML_NVLINK_COUNTER_UNIT_PACKETS = 1,     \/\/ count by packets$/;"	e	enum:nvmlNvLinkUtilizationCountUnits_enum
NVML_NVLINK_ERROR_COUNT	/usr/local/cuda/include/nvml.h	/^    NVML_NVLINK_ERROR_COUNT$/;"	e	enum:nvmlNvLinkErrorCounter_enum
NVML_NVLINK_ERROR_DL_CRC_DATA	/usr/local/cuda/include/nvml.h	/^    NVML_NVLINK_ERROR_DL_CRC_DATA = 3,     \/\/ Data link receive data CRC error counter$/;"	e	enum:nvmlNvLinkErrorCounter_enum
NVML_NVLINK_ERROR_DL_CRC_FLIT	/usr/local/cuda/include/nvml.h	/^    NVML_NVLINK_ERROR_DL_CRC_FLIT = 2,     \/\/ Data link receive flow control digit CRC error counter$/;"	e	enum:nvmlNvLinkErrorCounter_enum
NVML_NVLINK_ERROR_DL_RECOVERY	/usr/local/cuda/include/nvml.h	/^    NVML_NVLINK_ERROR_DL_RECOVERY = 1,     \/\/ Data link transmit recovery error counter$/;"	e	enum:nvmlNvLinkErrorCounter_enum
NVML_NVLINK_ERROR_DL_REPLAY	/usr/local/cuda/include/nvml.h	/^    NVML_NVLINK_ERROR_DL_REPLAY   = 0,     \/\/ Data link transmit replay error counter$/;"	e	enum:nvmlNvLinkErrorCounter_enum
NVML_NVLINK_MAX_LINKS	/usr/local/cuda/include/nvml.h	217;"	d
NVML_P2P_CAPS_INDEX_ATOMICS	/usr/local/cuda/include/nvml.h	/^    NVML_P2P_CAPS_INDEX_ATOMICS,$/;"	e	enum:nvmlGpuP2PCapsIndex_enum
NVML_P2P_CAPS_INDEX_NVLINK	/usr/local/cuda/include/nvml.h	/^    NVML_P2P_CAPS_INDEX_NVLINK,$/;"	e	enum:nvmlGpuP2PCapsIndex_enum
NVML_P2P_CAPS_INDEX_PROP	/usr/local/cuda/include/nvml.h	/^    NVML_P2P_CAPS_INDEX_PROP,$/;"	e	enum:nvmlGpuP2PCapsIndex_enum
NVML_P2P_CAPS_INDEX_READ	/usr/local/cuda/include/nvml.h	/^    NVML_P2P_CAPS_INDEX_READ = 0,$/;"	e	enum:nvmlGpuP2PCapsIndex_enum
NVML_P2P_CAPS_INDEX_UNKNOWN	/usr/local/cuda/include/nvml.h	/^    NVML_P2P_CAPS_INDEX_UNKNOWN$/;"	e	enum:nvmlGpuP2PCapsIndex_enum
NVML_P2P_CAPS_INDEX_WRITE	/usr/local/cuda/include/nvml.h	/^    NVML_P2P_CAPS_INDEX_WRITE,$/;"	e	enum:nvmlGpuP2PCapsIndex_enum
NVML_P2P_STATUS_CHIPSET_NOT_SUPPORED	/usr/local/cuda/include/nvml.h	/^    NVML_P2P_STATUS_CHIPSET_NOT_SUPPORED,$/;"	e	enum:nvmlGpuP2PStatus_enum
NVML_P2P_STATUS_DISABLED_BY_REGKEY	/usr/local/cuda/include/nvml.h	/^    NVML_P2P_STATUS_DISABLED_BY_REGKEY,$/;"	e	enum:nvmlGpuP2PStatus_enum
NVML_P2P_STATUS_GPU_NOT_SUPPORTED	/usr/local/cuda/include/nvml.h	/^    NVML_P2P_STATUS_GPU_NOT_SUPPORTED,$/;"	e	enum:nvmlGpuP2PStatus_enum
NVML_P2P_STATUS_IOH_TOPOLOGY_NOT_SUPPORTED	/usr/local/cuda/include/nvml.h	/^    NVML_P2P_STATUS_IOH_TOPOLOGY_NOT_SUPPORTED,$/;"	e	enum:nvmlGpuP2PStatus_enum
NVML_P2P_STATUS_NOT_SUPPORTED	/usr/local/cuda/include/nvml.h	/^    NVML_P2P_STATUS_NOT_SUPPORTED,$/;"	e	enum:nvmlGpuP2PStatus_enum
NVML_P2P_STATUS_OK	/usr/local/cuda/include/nvml.h	/^    NVML_P2P_STATUS_OK     = 0,$/;"	e	enum:nvmlGpuP2PStatus_enum
NVML_P2P_STATUS_UNKNOWN	/usr/local/cuda/include/nvml.h	/^    NVML_P2P_STATUS_UNKNOWN$/;"	e	enum:nvmlGpuP2PStatus_enum
NVML_PAGE_RETIREMENT_CAUSE_COUNT	/usr/local/cuda/include/nvml.h	/^    NVML_PAGE_RETIREMENT_CAUSE_COUNT$/;"	e	enum:nvmlPageRetirementCause_enum
NVML_PAGE_RETIREMENT_CAUSE_DOUBLE_BIT_ECC_ERROR	/usr/local/cuda/include/nvml.h	/^    NVML_PAGE_RETIREMENT_CAUSE_DOUBLE_BIT_ECC_ERROR = 1,           \/\/!< Page was retired due to double bit ECC error$/;"	e	enum:nvmlPageRetirementCause_enum
NVML_PAGE_RETIREMENT_CAUSE_MULTIPLE_SINGLE_BIT_ECC_ERRORS	/usr/local/cuda/include/nvml.h	/^    NVML_PAGE_RETIREMENT_CAUSE_MULTIPLE_SINGLE_BIT_ECC_ERRORS = 0, \/\/!< Page was retired due to multiple single bit ECC error$/;"	e	enum:nvmlPageRetirementCause_enum
NVML_PCIE_UTIL_COUNT	/usr/local/cuda/include/nvml.h	/^    NVML_PCIE_UTIL_COUNT$/;"	e	enum:nvmlPcieUtilCounter_enum
NVML_PCIE_UTIL_RX_BYTES	/usr/local/cuda/include/nvml.h	/^    NVML_PCIE_UTIL_RX_BYTES             = 1, \/\/ 1KB granularity$/;"	e	enum:nvmlPcieUtilCounter_enum
NVML_PCIE_UTIL_TX_BYTES	/usr/local/cuda/include/nvml.h	/^    NVML_PCIE_UTIL_TX_BYTES             = 0, \/\/ 1KB granularity$/;"	e	enum:nvmlPcieUtilCounter_enum
NVML_PERF_POLICY_BOARD_LIMIT	/usr/local/cuda/include/nvml.h	/^    NVML_PERF_POLICY_BOARD_LIMIT = 3,        \/\/!< How long did the board limit cause the GPU to be below application clocks$/;"	e	enum:nvmlPerfPolicyType_enum
NVML_PERF_POLICY_COUNT	/usr/local/cuda/include/nvml.h	/^    NVML_PERF_POLICY_COUNT$/;"	e	enum:nvmlPerfPolicyType_enum
NVML_PERF_POLICY_LOW_UTILIZATION	/usr/local/cuda/include/nvml.h	/^    NVML_PERF_POLICY_LOW_UTILIZATION = 4,    \/\/!< How long did low utilization cause the GPU to be below application clocks$/;"	e	enum:nvmlPerfPolicyType_enum
NVML_PERF_POLICY_POWER	/usr/local/cuda/include/nvml.h	/^    NVML_PERF_POLICY_POWER = 0,              \/\/!< How long did power violations cause the GPU to be below application clocks$/;"	e	enum:nvmlPerfPolicyType_enum
NVML_PERF_POLICY_RELIABILITY	/usr/local/cuda/include/nvml.h	/^    NVML_PERF_POLICY_RELIABILITY = 5,        \/\/!< How long did the board reliability limit cause the GPU to be below application clocks$/;"	e	enum:nvmlPerfPolicyType_enum
NVML_PERF_POLICY_SYNC_BOOST	/usr/local/cuda/include/nvml.h	/^    NVML_PERF_POLICY_SYNC_BOOST = 2,         \/\/!< How long did sync boost cause the GPU to be below application clocks$/;"	e	enum:nvmlPerfPolicyType_enum
NVML_PERF_POLICY_THERMAL	/usr/local/cuda/include/nvml.h	/^    NVML_PERF_POLICY_THERMAL = 1,            \/\/!< How long did thermal violations cause the GPU to be below application clocks$/;"	e	enum:nvmlPerfPolicyType_enum
NVML_PERF_POLICY_TOTAL_APP_CLOCKS	/usr/local/cuda/include/nvml.h	/^    NVML_PERF_POLICY_TOTAL_APP_CLOCKS = 10,  \/\/!< Total time the GPU was held below application clocks by any limiter (0 - 5 above)$/;"	e	enum:nvmlPerfPolicyType_enum
NVML_PERF_POLICY_TOTAL_BASE_CLOCKS	/usr/local/cuda/include/nvml.h	/^    NVML_PERF_POLICY_TOTAL_BASE_CLOCKS = 11, \/\/!< Total time the GPU was held below base clocks$/;"	e	enum:nvmlPerfPolicyType_enum
NVML_PROCESSOR_CLK_SAMPLES	/usr/local/cuda/include/nvml.h	/^    NVML_PROCESSOR_CLK_SAMPLES      = 5, \/\/!< To represent processor clock samples$/;"	e	enum:nvmlSamplingType_enum
NVML_PSTATE_0	/usr/local/cuda/include/nvml.h	/^    NVML_PSTATE_0               = 0,       \/\/!< Performance state 0 -- Maximum Performance$/;"	e	enum:nvmlPStates_enum
NVML_PSTATE_1	/usr/local/cuda/include/nvml.h	/^    NVML_PSTATE_1               = 1,       \/\/!< Performance state 1 $/;"	e	enum:nvmlPStates_enum
NVML_PSTATE_10	/usr/local/cuda/include/nvml.h	/^    NVML_PSTATE_10              = 10,      \/\/!< Performance state 10$/;"	e	enum:nvmlPStates_enum
NVML_PSTATE_11	/usr/local/cuda/include/nvml.h	/^    NVML_PSTATE_11              = 11,      \/\/!< Performance state 11$/;"	e	enum:nvmlPStates_enum
NVML_PSTATE_12	/usr/local/cuda/include/nvml.h	/^    NVML_PSTATE_12              = 12,      \/\/!< Performance state 12$/;"	e	enum:nvmlPStates_enum
NVML_PSTATE_13	/usr/local/cuda/include/nvml.h	/^    NVML_PSTATE_13              = 13,      \/\/!< Performance state 13$/;"	e	enum:nvmlPStates_enum
NVML_PSTATE_14	/usr/local/cuda/include/nvml.h	/^    NVML_PSTATE_14              = 14,      \/\/!< Performance state 14$/;"	e	enum:nvmlPStates_enum
NVML_PSTATE_15	/usr/local/cuda/include/nvml.h	/^    NVML_PSTATE_15              = 15,      \/\/!< Performance state 15 -- Minimum Performance $/;"	e	enum:nvmlPStates_enum
NVML_PSTATE_2	/usr/local/cuda/include/nvml.h	/^    NVML_PSTATE_2               = 2,       \/\/!< Performance state 2$/;"	e	enum:nvmlPStates_enum
NVML_PSTATE_3	/usr/local/cuda/include/nvml.h	/^    NVML_PSTATE_3               = 3,       \/\/!< Performance state 3$/;"	e	enum:nvmlPStates_enum
NVML_PSTATE_4	/usr/local/cuda/include/nvml.h	/^    NVML_PSTATE_4               = 4,       \/\/!< Performance state 4$/;"	e	enum:nvmlPStates_enum
NVML_PSTATE_5	/usr/local/cuda/include/nvml.h	/^    NVML_PSTATE_5               = 5,       \/\/!< Performance state 5$/;"	e	enum:nvmlPStates_enum
NVML_PSTATE_6	/usr/local/cuda/include/nvml.h	/^    NVML_PSTATE_6               = 6,       \/\/!< Performance state 6$/;"	e	enum:nvmlPStates_enum
NVML_PSTATE_7	/usr/local/cuda/include/nvml.h	/^    NVML_PSTATE_7               = 7,       \/\/!< Performance state 7$/;"	e	enum:nvmlPStates_enum
NVML_PSTATE_8	/usr/local/cuda/include/nvml.h	/^    NVML_PSTATE_8               = 8,       \/\/!< Performance state 8$/;"	e	enum:nvmlPStates_enum
NVML_PSTATE_9	/usr/local/cuda/include/nvml.h	/^    NVML_PSTATE_9               = 9,       \/\/!< Performance state 9$/;"	e	enum:nvmlPStates_enum
NVML_PSTATE_UNKNOWN	/usr/local/cuda/include/nvml.h	/^    NVML_PSTATE_UNKNOWN         = 32       \/\/!< Unknown performance state$/;"	e	enum:nvmlPStates_enum
NVML_RESTRICTED_API_COUNT	/usr/local/cuda/include/nvml.h	/^    NVML_RESTRICTED_API_COUNT$/;"	e	enum:nvmlRestrictedAPI_enum
NVML_RESTRICTED_API_SET_APPLICATION_CLOCKS	/usr/local/cuda/include/nvml.h	/^    NVML_RESTRICTED_API_SET_APPLICATION_CLOCKS = 0,   \/\/!< APIs that change application clocks, see nvmlDeviceSetApplicationsClocks $/;"	e	enum:nvmlRestrictedAPI_enum
NVML_RESTRICTED_API_SET_AUTO_BOOSTED_CLOCKS	/usr/local/cuda/include/nvml.h	/^    NVML_RESTRICTED_API_SET_AUTO_BOOSTED_CLOCKS = 1,  \/\/!< APIs that enable\/disable Auto Boosted clocks$/;"	e	enum:nvmlRestrictedAPI_enum
NVML_SAMPLINGTYPE_COUNT	/usr/local/cuda/include/nvml.h	/^    NVML_SAMPLINGTYPE_COUNT               $/;"	e	enum:nvmlSamplingType_enum
NVML_SINGLE_BIT_ECC	/usr/local/cuda/include/nvml.h	541;"	d
NVML_SUCCESS	/usr/local/cuda/include/nvml.h	/^    NVML_SUCCESS = 0,                   \/\/!< The operation was successful$/;"	e	enum:nvmlReturn_enum
NVML_SYSTEM_DRIVER_VERSION_BUFFER_SIZE	/usr/local/cuda/include/nvml.h	1478;"	d
NVML_SYSTEM_NVML_VERSION_BUFFER_SIZE	/usr/local/cuda/include/nvml.h	1483;"	d
NVML_TEMPERATURE_COUNT	/usr/local/cuda/include/nvml.h	/^    NVML_TEMPERATURE_COUNT$/;"	e	enum:nvmlTemperatureSensors_enum
NVML_TEMPERATURE_GPU	/usr/local/cuda/include/nvml.h	/^    NVML_TEMPERATURE_GPU      = 0,    \/\/!< Temperature sensor for the GPU die$/;"	e	enum:nvmlTemperatureSensors_enum
NVML_TEMPERATURE_THRESHOLD_COUNT	/usr/local/cuda/include/nvml.h	/^    NVML_TEMPERATURE_THRESHOLD_COUNT$/;"	e	enum:nvmlTemperatureThresholds_enum
NVML_TEMPERATURE_THRESHOLD_GPU_MAX	/usr/local/cuda/include/nvml.h	/^    NVML_TEMPERATURE_THRESHOLD_GPU_MAX  = 3,    \/\/ GPU Temperature at which the GPU can be throttled below base clock$/;"	e	enum:nvmlTemperatureThresholds_enum
NVML_TEMPERATURE_THRESHOLD_MEM_MAX	/usr/local/cuda/include/nvml.h	/^    NVML_TEMPERATURE_THRESHOLD_MEM_MAX  = 2,    \/\/ Memory Temperature at which the GPU will begin SW slowdown$/;"	e	enum:nvmlTemperatureThresholds_enum
NVML_TEMPERATURE_THRESHOLD_SHUTDOWN	/usr/local/cuda/include/nvml.h	/^    NVML_TEMPERATURE_THRESHOLD_SHUTDOWN = 0,    \/\/ Temperature at which the GPU will shut down$/;"	e	enum:nvmlTemperatureThresholds_enum
NVML_TEMPERATURE_THRESHOLD_SLOWDOWN	/usr/local/cuda/include/nvml.h	/^    NVML_TEMPERATURE_THRESHOLD_SLOWDOWN = 1,    \/\/ Temperature at which the GPU will begin HW slowdown$/;"	e	enum:nvmlTemperatureThresholds_enum
NVML_TOPOLOGY_CPU	/usr/local/cuda/include/nvml.h	/^    NVML_TOPOLOGY_CPU                = 40, \/\/ all devices that are connected to the same CPU but possibly multiple host bridges$/;"	e	enum:nvmlGpuLevel_enum
NVML_TOPOLOGY_HOSTBRIDGE	/usr/local/cuda/include/nvml.h	/^    NVML_TOPOLOGY_HOSTBRIDGE         = 30, \/\/ all devices that are connected to the same host bridge$/;"	e	enum:nvmlGpuLevel_enum
NVML_TOPOLOGY_INTERNAL	/usr/local/cuda/include/nvml.h	/^    NVML_TOPOLOGY_INTERNAL           = 0, \/\/ e.g. Tesla K80$/;"	e	enum:nvmlGpuLevel_enum
NVML_TOPOLOGY_MULTIPLE	/usr/local/cuda/include/nvml.h	/^    NVML_TOPOLOGY_MULTIPLE           = 20, \/\/ all devices that need not traverse a host bridge$/;"	e	enum:nvmlGpuLevel_enum
NVML_TOPOLOGY_SINGLE	/usr/local/cuda/include/nvml.h	/^    NVML_TOPOLOGY_SINGLE             = 10, \/\/ all devices that only need traverse a single PCIe switch$/;"	e	enum:nvmlGpuLevel_enum
NVML_TOPOLOGY_SYSTEM	/usr/local/cuda/include/nvml.h	/^    NVML_TOPOLOGY_SYSTEM             = 50, \/\/ all devices in the system$/;"	e	enum:nvmlGpuLevel_enum
NVML_TOTAL_POWER_SAMPLES	/usr/local/cuda/include/nvml.h	/^    NVML_TOTAL_POWER_SAMPLES        = 0, \/\/!< To represent total power drawn by GPU$/;"	e	enum:nvmlSamplingType_enum
NVML_VALUE_NOT_AVAILABLE	/usr/local/cuda/include/nvml.h	119;"	d
NVML_VALUE_TYPE_COUNT	/usr/local/cuda/include/nvml.h	/^    NVML_VALUE_TYPE_COUNT$/;"	e	enum:nvmlValueType_enum
NVML_VALUE_TYPE_DOUBLE	/usr/local/cuda/include/nvml.h	/^    NVML_VALUE_TYPE_DOUBLE = 0,$/;"	e	enum:nvmlValueType_enum
NVML_VALUE_TYPE_SIGNED_LONG_LONG	/usr/local/cuda/include/nvml.h	/^    NVML_VALUE_TYPE_SIGNED_LONG_LONG = 4,$/;"	e	enum:nvmlValueType_enum
NVML_VALUE_TYPE_UNSIGNED_INT	/usr/local/cuda/include/nvml.h	/^    NVML_VALUE_TYPE_UNSIGNED_INT = 1,$/;"	e	enum:nvmlValueType_enum
NVML_VALUE_TYPE_UNSIGNED_LONG	/usr/local/cuda/include/nvml.h	/^    NVML_VALUE_TYPE_UNSIGNED_LONG = 2,$/;"	e	enum:nvmlValueType_enum
NVML_VALUE_TYPE_UNSIGNED_LONG_LONG	/usr/local/cuda/include/nvml.h	/^    NVML_VALUE_TYPE_UNSIGNED_LONG_LONG = 3,$/;"	e	enum:nvmlValueType_enum
NVML_VGPU_INSTANCE_GUEST_INFO_STATE_INITIALIZED	/usr/local/cuda/include/nvml.h	/^    NVML_VGPU_INSTANCE_GUEST_INFO_STATE_INITIALIZED   = 1,  \/\/<! Guest-dependent fields initialized$/;"	e	enum:nvmlVgpuGuestInfoState_enum
NVML_VGPU_INSTANCE_GUEST_INFO_STATE_UNINITIALIZED	/usr/local/cuda/include/nvml.h	/^    NVML_VGPU_INSTANCE_GUEST_INFO_STATE_UNINITIALIZED = 0,  \/\/<! Guest-dependent fields uninitialized$/;"	e	enum:nvmlVgpuGuestInfoState_enum
NVML_VGPU_NAME_BUFFER_SIZE	/usr/local/cuda/include/nvml.h	1235;"	d
NVML_VGPU_VM_ID_DOMAIN_ID	/usr/local/cuda/include/nvml.h	/^    NVML_VGPU_VM_ID_DOMAIN_ID = 0, \/\/!< VM ID represents DOMAIN ID$/;"	e	enum:nvmlVgpuVmIdType
NVML_VGPU_VM_ID_UUID	/usr/local/cuda/include/nvml.h	/^    NVML_VGPU_VM_ID_UUID = 1,      \/\/!< VM ID represents UUID$/;"	e	enum:nvmlVgpuVmIdType
NVML_VOLATILE_ECC	/usr/local/cuda/include/nvml.h	/^    NVML_VOLATILE_ECC      = 0,      \/\/!< Volatile counts are reset each time the driver loads.$/;"	e	enum:nvmlEccCounterType_enum
NVRTC_ERROR_BUILTIN_OPERATION_FAILURE	/usr/local/cuda/include/nvrtc.h	/^  NVRTC_ERROR_BUILTIN_OPERATION_FAILURE = 7,$/;"	e	enum:__anon181
NVRTC_ERROR_COMPILATION	/usr/local/cuda/include/nvrtc.h	/^  NVRTC_ERROR_COMPILATION = 6,$/;"	e	enum:__anon181
NVRTC_ERROR_INTERNAL_ERROR	/usr/local/cuda/include/nvrtc.h	/^  NVRTC_ERROR_INTERNAL_ERROR = 11$/;"	e	enum:__anon181
NVRTC_ERROR_INVALID_INPUT	/usr/local/cuda/include/nvrtc.h	/^  NVRTC_ERROR_INVALID_INPUT = 3,$/;"	e	enum:__anon181
NVRTC_ERROR_INVALID_OPTION	/usr/local/cuda/include/nvrtc.h	/^  NVRTC_ERROR_INVALID_OPTION = 5,$/;"	e	enum:__anon181
NVRTC_ERROR_INVALID_PROGRAM	/usr/local/cuda/include/nvrtc.h	/^  NVRTC_ERROR_INVALID_PROGRAM = 4,$/;"	e	enum:__anon181
NVRTC_ERROR_NAME_EXPRESSION_NOT_VALID	/usr/local/cuda/include/nvrtc.h	/^  NVRTC_ERROR_NAME_EXPRESSION_NOT_VALID = 10,$/;"	e	enum:__anon181
NVRTC_ERROR_NO_LOWERED_NAMES_BEFORE_COMPILATION	/usr/local/cuda/include/nvrtc.h	/^  NVRTC_ERROR_NO_LOWERED_NAMES_BEFORE_COMPILATION = 9,$/;"	e	enum:__anon181
NVRTC_ERROR_NO_NAME_EXPRESSIONS_AFTER_COMPILATION	/usr/local/cuda/include/nvrtc.h	/^  NVRTC_ERROR_NO_NAME_EXPRESSIONS_AFTER_COMPILATION = 8,$/;"	e	enum:__anon181
NVRTC_ERROR_OUT_OF_MEMORY	/usr/local/cuda/include/nvrtc.h	/^  NVRTC_ERROR_OUT_OF_MEMORY = 1,$/;"	e	enum:__anon181
NVRTC_ERROR_PROGRAM_CREATION_FAILURE	/usr/local/cuda/include/nvrtc.h	/^  NVRTC_ERROR_PROGRAM_CREATION_FAILURE = 2,$/;"	e	enum:__anon181
NVRTC_SUCCESS	/usr/local/cuda/include/nvrtc.h	/^  NVRTC_SUCCESS = 0,$/;"	e	enum:__anon181
NVTOOLSEXT_CUDART_H_	/usr/local/cuda/include/nvToolsExtCudaRt.h	39;"	d
NVTOOLSEXT_CUDA_H_	/usr/local/cuda/include/nvToolsExtCuda.h	39;"	d
NVTOOLSEXT_H_	/usr/local/cuda/include/nvToolsExt.h	176;"	d
NVTOOLSEXT_META_H_	/usr/local/cuda/include/nvToolsExtMeta.h	51;"	d
NVTOOLSEXT_SYNC_H_	/usr/local/cuda/include/nvToolsExtSync.h	39;"	d
NVTX_API	/usr/local/cuda/include/nvToolsExt.h	184;"	d
NVTX_API	/usr/local/cuda/include/nvToolsExt.h	188;"	d
NVTX_COLOR_ARGB	/usr/local/cuda/include/nvToolsExt.h	/^    NVTX_COLOR_ARGB     = 1                  \/**< An ARGB color is provided. *\/$/;"	e	enum:nvtxColorType_t
NVTX_COLOR_UNKNOWN	/usr/local/cuda/include/nvToolsExt.h	/^    NVTX_COLOR_UNKNOWN  = 0,                 \/**< Color attribute is unused. *\/$/;"	e	enum:nvtxColorType_t
NVTX_DECLSPEC	/usr/local/cuda/include/nvToolsExt.h	180;"	d
NVTX_DECLSPEC	/usr/local/cuda/include/nvToolsExt.h	182;"	d
NVTX_DECLSPEC	/usr/local/cuda/include/nvToolsExt.h	187;"	d
NVTX_EVENT_ATTRIB_STRUCT_SIZE	/usr/local/cuda/include/nvToolsExt.h	228;"	d
NVTX_INITIALIZATION_ATTRIB_STRUCT_SIZE	/usr/local/cuda/include/nvToolsExt.h	233;"	d
NVTX_INITIALIZATION_MODE_CALLBACK_V1	/usr/local/cuda/include/nvToolsExt.h	/^    NVTX_INITIALIZATION_MODE_CALLBACK_V1 = 1,   \/**< A function pointer conforming to NVTX_VERSION=1 will be used. *\/$/;"	e	enum:nvtxInitializationMode_t
NVTX_INITIALIZATION_MODE_CALLBACK_V2	/usr/local/cuda/include/nvToolsExt.h	/^    NVTX_INITIALIZATION_MODE_CALLBACK_V2 = 2,   \/**< A function pointer conforming to NVTX_VERSION=2 will be used. *\/$/;"	e	enum:nvtxInitializationMode_t
NVTX_INITIALIZATION_MODE_SIZE	/usr/local/cuda/include/nvToolsExt.h	/^    NVTX_INITIALIZATION_MODE_SIZE$/;"	e	enum:nvtxInitializationMode_t
NVTX_INITIALIZATION_MODE_UNKNOWN	/usr/local/cuda/include/nvToolsExt.h	/^    NVTX_INITIALIZATION_MODE_UNKNOWN = 0,   \/**< A platform that supports indirect initialization will attempt this style, otherwise expect failure. *\/$/;"	e	enum:nvtxInitializationMode_t
NVTX_INLINE_STATIC	/usr/local/cuda/include/nvToolsExt.h	185;"	d
NVTX_INLINE_STATIC	/usr/local/cuda/include/nvToolsExt.h	189;"	d
NVTX_MESSAGE_TYPE_ASCII	/usr/local/cuda/include/nvToolsExt.h	/^    NVTX_MESSAGE_TYPE_ASCII       = 1,    \/**< A character sequence is used as payload. *\/$/;"	e	enum:nvtxMessageType_t
NVTX_MESSAGE_TYPE_REGISTERED	/usr/local/cuda/include/nvToolsExt.h	/^    NVTX_MESSAGE_TYPE_REGISTERED  = 3     \/**< A unique string handle that was registered$/;"	e	enum:nvtxMessageType_t
NVTX_MESSAGE_TYPE_UNICODE	/usr/local/cuda/include/nvToolsExt.h	/^    NVTX_MESSAGE_TYPE_UNICODE     = 2,     \/**< A wide character sequence is used as payload. *\/$/;"	e	enum:nvtxMessageType_t
NVTX_MESSAGE_UNKNOWN	/usr/local/cuda/include/nvToolsExt.h	/^    NVTX_MESSAGE_UNKNOWN          = 0,    \/**< Message payload is unused. *\/$/;"	e	enum:nvtxMessageType_t
NVTX_NO_PUSH_POP_TRACKING	/usr/local/cuda/include/nvToolsExt.h	235;"	d
NVTX_PACK	/usr/local/cuda/include/nvToolsExtMeta.h	56;"	d
NVTX_PACK	/usr/local/cuda/include/nvToolsExtMeta.h	58;"	d
NVTX_PAYLOAD_TYPE_DOUBLE	/usr/local/cuda/include/nvToolsExt.h	/^    NVTX_PAYLOAD_TYPE_DOUBLE = 3,   \/**< A 64 bit floating point value is used as payload. *\/$/;"	e	enum:nvtxPayloadType_t
NVTX_PAYLOAD_TYPE_FLOAT	/usr/local/cuda/include/nvToolsExt.h	/^    NVTX_PAYLOAD_TYPE_FLOAT = 6    \/**< A 32 bit floating point value is used as payload. *\/$/;"	e	enum:nvtxPayloadType_t
NVTX_PAYLOAD_TYPE_INT32	/usr/local/cuda/include/nvToolsExt.h	/^    NVTX_PAYLOAD_TYPE_INT32 = 5,   \/**< A 32 bit floating point value is used as payload. *\/$/;"	e	enum:nvtxPayloadType_t
NVTX_PAYLOAD_TYPE_INT64	/usr/local/cuda/include/nvToolsExt.h	/^    NVTX_PAYLOAD_TYPE_INT64 = 2,   \/**< A 64 bit signed integer value is used as payload. *\/$/;"	e	enum:nvtxPayloadType_t
NVTX_PAYLOAD_TYPE_UNSIGNED_INT32	/usr/local/cuda/include/nvToolsExt.h	/^    NVTX_PAYLOAD_TYPE_UNSIGNED_INT32 = 4,   \/**< A 32 bit floating point value is used as payload. *\/$/;"	e	enum:nvtxPayloadType_t
NVTX_PAYLOAD_TYPE_UNSIGNED_INT64	/usr/local/cuda/include/nvToolsExt.h	/^    NVTX_PAYLOAD_TYPE_UNSIGNED_INT64 = 1,   \/**< A 64 bit unsigned integer value is used as payload. *\/$/;"	e	enum:nvtxPayloadType_t
NVTX_PAYLOAD_UNKNOWN	/usr/local/cuda/include/nvToolsExt.h	/^    NVTX_PAYLOAD_UNKNOWN = 0,   \/**< Color payload is unused. *\/$/;"	e	enum:nvtxPayloadType_t
NVTX_RESOURCE_ATTRIB_STRUCT_SIZE	/usr/local/cuda/include/nvToolsExt.h	1241;"	d
NVTX_RESOURCE_CLASS_CUDA	/usr/local/cuda/include/nvToolsExtCuda.h	66;"	d
NVTX_RESOURCE_CLASS_CUDART	/usr/local/cuda/include/nvToolsExtCudaRt.h	67;"	d
NVTX_RESOURCE_CLASS_GENERIC	/usr/local/cuda/include/nvToolsExt.h	1080;"	d
NVTX_RESOURCE_CLASS_SYNC_OS	/usr/local/cuda/include/nvToolsExtSync.h	118;"	d
NVTX_RESOURCE_CLASS_SYNC_PTHREAD	/usr/local/cuda/include/nvToolsExtSync.h	119;"	d
NVTX_RESOURCE_MAKE_TYPE	/usr/local/cuda/include/nvToolsExt.h	1079;"	d
NVTX_RESOURCE_TYPE_CUDART_DEVICE	/usr/local/cuda/include/nvToolsExtCudaRt.h	/^    NVTX_RESOURCE_TYPE_CUDART_DEVICE = NVTX_RESOURCE_MAKE_TYPE(CUDART, 0), \/* int device *\/$/;"	e	enum:nvtxResourceCUDARTType_t
NVTX_RESOURCE_TYPE_CUDART_EVENT	/usr/local/cuda/include/nvToolsExtCudaRt.h	/^    NVTX_RESOURCE_TYPE_CUDART_EVENT = NVTX_RESOURCE_MAKE_TYPE(CUDART, 2)  \/* cudaEvent_t *\/$/;"	e	enum:nvtxResourceCUDARTType_t
NVTX_RESOURCE_TYPE_CUDART_STREAM	/usr/local/cuda/include/nvToolsExtCudaRt.h	/^    NVTX_RESOURCE_TYPE_CUDART_STREAM = NVTX_RESOURCE_MAKE_TYPE(CUDART, 1), \/* cudaStream_t *\/$/;"	e	enum:nvtxResourceCUDARTType_t
NVTX_RESOURCE_TYPE_CUDA_CONTEXT	/usr/local/cuda/include/nvToolsExtCuda.h	/^    NVTX_RESOURCE_TYPE_CUDA_CONTEXT = NVTX_RESOURCE_MAKE_TYPE(CUDA, 2), \/* CUcontext *\/$/;"	e	enum:nvtxResourceCUDAType_t
NVTX_RESOURCE_TYPE_CUDA_DEVICE	/usr/local/cuda/include/nvToolsExtCuda.h	/^    NVTX_RESOURCE_TYPE_CUDA_DEVICE = NVTX_RESOURCE_MAKE_TYPE(CUDA, 1), \/* CUdevice *\/$/;"	e	enum:nvtxResourceCUDAType_t
NVTX_RESOURCE_TYPE_CUDA_EVENT	/usr/local/cuda/include/nvToolsExtCuda.h	/^    NVTX_RESOURCE_TYPE_CUDA_EVENT = NVTX_RESOURCE_MAKE_TYPE(CUDA, 4)  \/* CUevent *\/$/;"	e	enum:nvtxResourceCUDAType_t
NVTX_RESOURCE_TYPE_CUDA_STREAM	/usr/local/cuda/include/nvToolsExtCuda.h	/^    NVTX_RESOURCE_TYPE_CUDA_STREAM = NVTX_RESOURCE_MAKE_TYPE(CUDA, 3), \/* CUstream *\/$/;"	e	enum:nvtxResourceCUDAType_t
NVTX_RESOURCE_TYPE_GENERIC_HANDLE	/usr/local/cuda/include/nvToolsExt.h	/^    NVTX_RESOURCE_TYPE_GENERIC_HANDLE = NVTX_RESOURCE_MAKE_TYPE(GENERIC, 2), \/**< Generic handle assumed to have no collisions with other handles. *\/$/;"	e	enum:nvtxResourceGenericType_t
NVTX_RESOURCE_TYPE_GENERIC_POINTER	/usr/local/cuda/include/nvToolsExt.h	/^    NVTX_RESOURCE_TYPE_GENERIC_POINTER = NVTX_RESOURCE_MAKE_TYPE(GENERIC, 1), \/**< Generic pointer assumed to have no collisions with other pointers. *\/$/;"	e	enum:nvtxResourceGenericType_t
NVTX_RESOURCE_TYPE_GENERIC_THREAD_NATIVE	/usr/local/cuda/include/nvToolsExt.h	/^    NVTX_RESOURCE_TYPE_GENERIC_THREAD_NATIVE = NVTX_RESOURCE_MAKE_TYPE(GENERIC, 3), \/**< OS native thread identifier. *\/$/;"	e	enum:nvtxResourceGenericType_t
NVTX_RESOURCE_TYPE_GENERIC_THREAD_POSIX	/usr/local/cuda/include/nvToolsExt.h	/^    NVTX_RESOURCE_TYPE_GENERIC_THREAD_POSIX = NVTX_RESOURCE_MAKE_TYPE(GENERIC, 4) \/**< POSIX pthread identifier. *\/$/;"	e	enum:nvtxResourceGenericType_t
NVTX_RESOURCE_TYPE_SYNC_LINUX_COMPLETION	/usr/local/cuda/include/nvToolsExtSync.h	/^    NVTX_RESOURCE_TYPE_SYNC_LINUX_COMPLETION = NVTX_RESOURCE_MAKE_TYPE(SYNC_OS, 4),$/;"	e	enum:nvtxResourceSyncLinuxType_t
NVTX_RESOURCE_TYPE_SYNC_LINUX_FUTEX	/usr/local/cuda/include/nvToolsExtSync.h	/^    NVTX_RESOURCE_TYPE_SYNC_LINUX_FUTEX = NVTX_RESOURCE_MAKE_TYPE(SYNC_OS, 2),$/;"	e	enum:nvtxResourceSyncLinuxType_t
NVTX_RESOURCE_TYPE_SYNC_LINUX_MUTEX	/usr/local/cuda/include/nvToolsExtSync.h	/^    NVTX_RESOURCE_TYPE_SYNC_LINUX_MUTEX = NVTX_RESOURCE_MAKE_TYPE(SYNC_OS, 1),$/;"	e	enum:nvtxResourceSyncLinuxType_t
NVTX_RESOURCE_TYPE_SYNC_LINUX_RCU	/usr/local/cuda/include/nvToolsExtSync.h	/^    NVTX_RESOURCE_TYPE_SYNC_LINUX_RCU = NVTX_RESOURCE_MAKE_TYPE(SYNC_OS, 7)$/;"	e	enum:nvtxResourceSyncLinuxType_t
NVTX_RESOURCE_TYPE_SYNC_LINUX_SEMAPHORE	/usr/local/cuda/include/nvToolsExtSync.h	/^    NVTX_RESOURCE_TYPE_SYNC_LINUX_SEMAPHORE = NVTX_RESOURCE_MAKE_TYPE(SYNC_OS, 3),$/;"	e	enum:nvtxResourceSyncLinuxType_t
NVTX_RESOURCE_TYPE_SYNC_LINUX_SEQLOCK	/usr/local/cuda/include/nvToolsExtSync.h	/^    NVTX_RESOURCE_TYPE_SYNC_LINUX_SEQLOCK = NVTX_RESOURCE_MAKE_TYPE(SYNC_OS, 6),$/;"	e	enum:nvtxResourceSyncLinuxType_t
NVTX_RESOURCE_TYPE_SYNC_LINUX_SPINLOCK	/usr/local/cuda/include/nvToolsExtSync.h	/^    NVTX_RESOURCE_TYPE_SYNC_LINUX_SPINLOCK = NVTX_RESOURCE_MAKE_TYPE(SYNC_OS, 5),$/;"	e	enum:nvtxResourceSyncLinuxType_t
NVTX_RESOURCE_TYPE_SYNC_PTHREAD_BARRIER	/usr/local/cuda/include/nvToolsExtSync.h	/^    NVTX_RESOURCE_TYPE_SYNC_PTHREAD_BARRIER = NVTX_RESOURCE_MAKE_TYPE(SYNC_PTHREAD, 4), \/* pthread_barrier_t  *\/$/;"	e	enum:nvtxResourceSyncPosixThreadType_t
NVTX_RESOURCE_TYPE_SYNC_PTHREAD_CONDITION	/usr/local/cuda/include/nvToolsExtSync.h	/^    NVTX_RESOURCE_TYPE_SYNC_PTHREAD_CONDITION = NVTX_RESOURCE_MAKE_TYPE(SYNC_PTHREAD, 2), \/* pthread_cond_t  *\/$/;"	e	enum:nvtxResourceSyncPosixThreadType_t
NVTX_RESOURCE_TYPE_SYNC_PTHREAD_MUTEX	/usr/local/cuda/include/nvToolsExtSync.h	/^    NVTX_RESOURCE_TYPE_SYNC_PTHREAD_MUTEX = NVTX_RESOURCE_MAKE_TYPE(SYNC_PTHREAD, 1), \/* pthread_mutex_t  *\/$/;"	e	enum:nvtxResourceSyncPosixThreadType_t
NVTX_RESOURCE_TYPE_SYNC_PTHREAD_ONCE	/usr/local/cuda/include/nvToolsExtSync.h	/^    NVTX_RESOURCE_TYPE_SYNC_PTHREAD_ONCE = NVTX_RESOURCE_MAKE_TYPE(SYNC_PTHREAD, 6) \/* pthread_once_t  *\/$/;"	e	enum:nvtxResourceSyncPosixThreadType_t
NVTX_RESOURCE_TYPE_SYNC_PTHREAD_RWLOCK	/usr/local/cuda/include/nvToolsExtSync.h	/^    NVTX_RESOURCE_TYPE_SYNC_PTHREAD_RWLOCK = NVTX_RESOURCE_MAKE_TYPE(SYNC_PTHREAD, 3), \/* pthread_rwlock_t  *\/$/;"	e	enum:nvtxResourceSyncPosixThreadType_t
NVTX_RESOURCE_TYPE_SYNC_PTHREAD_SPINLOCK	/usr/local/cuda/include/nvToolsExtSync.h	/^    NVTX_RESOURCE_TYPE_SYNC_PTHREAD_SPINLOCK = NVTX_RESOURCE_MAKE_TYPE(SYNC_PTHREAD, 5), \/* pthread_spinlock_t  *\/$/;"	e	enum:nvtxResourceSyncPosixThreadType_t
NVTX_RESOURCE_TYPE_SYNC_WINDOWS_CRITICAL_SECTION	/usr/local/cuda/include/nvToolsExtSync.h	/^    NVTX_RESOURCE_TYPE_SYNC_WINDOWS_CRITICAL_SECTION = NVTX_RESOURCE_MAKE_TYPE(SYNC_OS, 4),$/;"	e	enum:nvtxResourceSyncWindowsType_t
NVTX_RESOURCE_TYPE_SYNC_WINDOWS_EVENT	/usr/local/cuda/include/nvToolsExtSync.h	/^    NVTX_RESOURCE_TYPE_SYNC_WINDOWS_EVENT = NVTX_RESOURCE_MAKE_TYPE(SYNC_OS, 3),$/;"	e	enum:nvtxResourceSyncWindowsType_t
NVTX_RESOURCE_TYPE_SYNC_WINDOWS_MUTEX	/usr/local/cuda/include/nvToolsExtSync.h	/^    NVTX_RESOURCE_TYPE_SYNC_WINDOWS_MUTEX = NVTX_RESOURCE_MAKE_TYPE(SYNC_OS, 1),$/;"	e	enum:nvtxResourceSyncWindowsType_t
NVTX_RESOURCE_TYPE_SYNC_WINDOWS_SEMAPHORE	/usr/local/cuda/include/nvToolsExtSync.h	/^    NVTX_RESOURCE_TYPE_SYNC_WINDOWS_SEMAPHORE = NVTX_RESOURCE_MAKE_TYPE(SYNC_OS, 2),$/;"	e	enum:nvtxResourceSyncWindowsType_t
NVTX_RESOURCE_TYPE_SYNC_WINDOWS_SRWLOCK	/usr/local/cuda/include/nvToolsExtSync.h	/^    NVTX_RESOURCE_TYPE_SYNC_WINDOWS_SRWLOCK = NVTX_RESOURCE_MAKE_TYPE(SYNC_OS, 5)$/;"	e	enum:nvtxResourceSyncWindowsType_t
NVTX_RESOURCE_TYPE_UNKNOWN	/usr/local/cuda/include/nvToolsExt.h	/^    NVTX_RESOURCE_TYPE_UNKNOWN = 0,$/;"	e	enum:nvtxResourceGenericType_t
NVTX_SYNCUSER_ATTRIB_STRUCT_SIZE	/usr/local/cuda/include/nvToolsExtSync.h	51;"	d
NVTX_VERSION	/usr/local/cuda/include/nvToolsExt.h	223;"	d
NV_NPPCORE_H	/usr/local/cuda/include/nppcore.h	49;"	d
NV_NPPIDEFS_H	/usr/local/cuda/include/nppdefs.h	49;"	d
NV_NPPI_ARITHMETIC_AND_LOGICAL_OPERATIONS_H	/usr/local/cuda/include/nppi_arithmetic_and_logical_operations.h	49;"	d
NV_NPPI_COLOR_CONVERSION_H	/usr/local/cuda/include/nppi_color_conversion.h	49;"	d
NV_NPPI_COMPRESSION_FUNCTIONS_H	/usr/local/cuda/include/nppi_compression_functions.h	49;"	d
NV_NPPI_COMPUTER_VISION_H	/usr/local/cuda/include/nppi_computer_vision.h	49;"	d
NV_NPPI_DATA_EXCHANGE_AND_INITIALIZATION_H	/usr/local/cuda/include/nppi_data_exchange_and_initialization.h	49;"	d
NV_NPPI_FILTERING_FUNCTIONS_H	/usr/local/cuda/include/nppi_filtering_functions.h	49;"	d
NV_NPPI_GEOMETRY_TRANSFORMS_H	/usr/local/cuda/include/nppi_geometry_transforms.h	50;"	d
NV_NPPI_H	/usr/local/cuda/include/nppi.h	49;"	d
NV_NPPI_LINEAR_TRANSFORMS_H	/usr/local/cuda/include/nppi_linear_transforms.h	49;"	d
NV_NPPI_MORPHOLOGICAL_OPERATIONS_H	/usr/local/cuda/include/nppi_morphological_operations.h	49;"	d
NV_NPPI_STATISTICS_FUNCTIONS_H	/usr/local/cuda/include/nppi_statistics_functions.h	49;"	d
NV_NPPI_SUPPORT_FUNCTIONS_H	/usr/local/cuda/include/nppi_support_functions.h	49;"	d
NV_NPPI_THRESHOLD_AND_COMPARE_OPERATIONS_H	/usr/local/cuda/include/nppi_threshold_and_compare_operations.h	49;"	d
NV_NPPS_ARITHMETIC_AND_LOGICAL_OPERATIONS_H	/usr/local/cuda/include/npps_arithmetic_and_logical_operations.h	49;"	d
NV_NPPS_CONVERSION_FUNCTIONS_H	/usr/local/cuda/include/npps_conversion_functions.h	49;"	d
NV_NPPS_FILTERING_FUNCTIONS_H	/usr/local/cuda/include/npps_filtering_functions.h	49;"	d
NV_NPPS_H	/usr/local/cuda/include/npps.h	49;"	d
NV_NPPS_INITIALIZATION_H	/usr/local/cuda/include/npps_initialization.h	49;"	d
NV_NPPS_STATISTICS_FUNCTIONS_H	/usr/local/cuda/include/npps_statistics_functions.h	49;"	d
NV_NPPS_SUPPORT_FUNCTIONS_H	/usr/local/cuda/include/npps_support_functions.h	49;"	d
NV_NPP_H	/usr/local/cuda/include/npp.h	49;"	d
NV_NPP_VERSION_H	/usr/local/cuda/include/nppversion.h	49;"	d
Npp16s	/usr/local/cuda/include/nppdefs.h	/^typedef short               Npp16s;    \/**<  16-bit signed integers *\/$/;"	t
Npp16u	/usr/local/cuda/include/nppdefs.h	/^typedef unsigned short      Npp16u;    \/**<  16-bit unsigned integers *\/$/;"	t
Npp32f	/usr/local/cuda/include/nppdefs.h	/^typedef float               Npp32f;    \/**<  32-bit (IEEE) floating-point numbers *\/$/;"	t
Npp32fc	/usr/local/cuda/include/nppdefs.h	/^} Npp32fc;$/;"	t	typeref:struct:NPP_ALIGN_8
Npp32s	/usr/local/cuda/include/nppdefs.h	/^typedef int                 Npp32s;    \/**<  32-bit signed integers *\/$/;"	t
Npp32sc	/usr/local/cuda/include/nppdefs.h	/^} Npp32sc;$/;"	t	typeref:struct:NPP_ALIGN_8
Npp32u	/usr/local/cuda/include/nppdefs.h	/^typedef unsigned int        Npp32u;    \/**<  32-bit unsigned integers *\/$/;"	t
Npp32uc	/usr/local/cuda/include/nppdefs.h	/^} Npp32uc;$/;"	t	typeref:struct:NPP_ALIGN_8
Npp64f	/usr/local/cuda/include/nppdefs.h	/^typedef double              Npp64f;    \/**<  64-bit floating-point numbers *\/$/;"	t
Npp64fc	/usr/local/cuda/include/nppdefs.h	/^} Npp64fc;$/;"	t	typeref:struct:NPP_ALIGN_16
Npp64s	/usr/local/cuda/include/nppdefs.h	/^typedef long long           Npp64s;    \/**<  64-bit signed integers *\/$/;"	t
Npp64sc	/usr/local/cuda/include/nppdefs.h	/^} Npp64sc;$/;"	t	typeref:struct:NPP_ALIGN_16
Npp64u	/usr/local/cuda/include/nppdefs.h	/^typedef unsigned long long  Npp64u;    \/**<  64-bit unsigned integers *\/$/;"	t
Npp8s	/usr/local/cuda/include/nppdefs.h	/^typedef signed char         Npp8s;     \/**<  8-bit signed chars *\/$/;"	t
Npp8u	/usr/local/cuda/include/nppdefs.h	/^typedef unsigned char       Npp8u;     \/**<  8-bit unsigned chars *\/$/;"	t
NppCmpOp	/usr/local/cuda/include/nppdefs.h	/^} NppCmpOp;$/;"	t	typeref:enum:__anon152
NppGpuComputeCapability	/usr/local/cuda/include/nppdefs.h	/^} NppGpuComputeCapability;$/;"	t	typeref:enum:__anon145
NppHintAlgorithm	/usr/local/cuda/include/nppdefs.h	/^} NppHintAlgorithm;$/;"	t	typeref:enum:__anon155
NppLibraryVersion	/usr/local/cuda/include/nppdefs.h	/^} NppLibraryVersion;$/;"	t	typeref:struct:__anon146
NppPointPolar	/usr/local/cuda/include/nppdefs.h	/^} NppPointPolar;$/;"	t	typeref:struct:__anon148
NppRoundMode	/usr/local/cuda/include/nppdefs.h	/^} NppRoundMode;$/;"	t	typeref:enum:__anon153
NppStatus	/usr/local/cuda/include/nppdefs.h	/^} NppStatus;$/;"	t	typeref:enum:__anon144
NppiAlphaOp	/usr/local/cuda/include/nppdefs.h	/^} NppiAlphaOp;$/;"	t	typeref:enum:__anon156
NppiAxis	/usr/local/cuda/include/nppdefs.h	/^} NppiAxis;$/;"	t	typeref:enum:__anon151
NppiBayerGridPosition	/usr/local/cuda/include/nppdefs.h	/^} NppiBayerGridPosition; $/;"	t	typeref:enum:__anon141
NppiBorderType	/usr/local/cuda/include/nppdefs.h	/^} NppiBorderType;$/;"	t	typeref:enum:__anon154
NppiColorTwistBatchCXR	/usr/local/cuda/include/nppi_color_conversion.h	/^} NppiColorTwistBatchCXR;$/;"	t	typeref:struct:__anon163
NppiDCTState	/usr/local/cuda/include/nppi_compression_functions.h	/^typedef struct NppiDCTState NppiDCTState;$/;"	t	typeref:struct:NppiDCTState
NppiDecodeHuffmanSpec	/usr/local/cuda/include/nppi_compression_functions.h	/^typedef struct NppiDecodeHuffmanSpec NppiDecodeHuffmanSpec;$/;"	t	typeref:struct:NppiDecodeHuffmanSpec
NppiDifferentialKernel	/usr/local/cuda/include/nppdefs.h	/^} NppiDifferentialKernel;$/;"	t	typeref:enum:__anon143
NppiEncodeHuffmanSpec	/usr/local/cuda/include/nppi_compression_functions.h	/^typedef struct NppiEncodeHuffmanSpec NppiEncodeHuffmanSpec;$/;"	t	typeref:struct:NppiEncodeHuffmanSpec
NppiHOGConfig	/usr/local/cuda/include/nppdefs.h	/^} NppiHOGConfig;$/;"	t	typeref:struct:__anon157
NppiHaarBuffer	/usr/local/cuda/include/nppdefs.h	/^} NppiHaarBuffer;$/;"	t	typeref:struct:__anon159
NppiHaarClassifier_32f	/usr/local/cuda/include/nppdefs.h	/^} NppiHaarClassifier_32f;$/;"	t	typeref:struct:__anon158
NppiHuffmanTableType	/usr/local/cuda/include/nppdefs.h	/^} NppiHuffmanTableType;$/;"	t	typeref:enum:__anon161
NppiInterpolationMode	/usr/local/cuda/include/nppdefs.h	/^} NppiInterpolationMode; $/;"	t	typeref:enum:__anon140
NppiJpegDecodeJob	/usr/local/cuda/include/nppi_compression_functions.h	/^} NppiJpegDecodeJob;$/;"	t	typeref:struct:__anon166
NppiJpegDecodeJobKind	/usr/local/cuda/include/nppi_compression_functions.h	/^enum NppiJpegDecodeJobKind {$/;"	g
NppiJpegDecodeJobMemory	/usr/local/cuda/include/nppi_compression_functions.h	/^} NppiJpegDecodeJobMemory;$/;"	t	typeref:struct:__anon167
NppiJpegFrameDescr	/usr/local/cuda/include/nppi_compression_functions.h	/^} NppiJpegFrameDescr; $/;"	t	typeref:struct:__anon164
NppiJpegScanDescr	/usr/local/cuda/include/nppi_compression_functions.h	/^} NppiJpegScanDescr;$/;"	t	typeref:struct:__anon165
NppiMaskSize	/usr/local/cuda/include/nppdefs.h	/^} NppiMaskSize;$/;"	t	typeref:enum:__anon142
NppiMirrorBatchCXR	/usr/local/cuda/include/nppi_geometry_transforms.h	/^} NppiMirrorBatchCXR;$/;"	t	typeref:struct:__anon169
NppiNorm	/usr/local/cuda/include/nppdefs.h	/^} NppiNorm;$/;"	t	typeref:enum:__anon162
NppiPoint	/usr/local/cuda/include/nppdefs.h	/^} NppiPoint;$/;"	t	typeref:struct:__anon147
NppiRect	/usr/local/cuda/include/nppdefs.h	/^} NppiRect;$/;"	t	typeref:struct:__anon150
NppiResizeBatchCXR	/usr/local/cuda/include/nppi_geometry_transforms.h	/^} NppiResizeBatchCXR;$/;"	t	typeref:struct:__anon168
NppiSize	/usr/local/cuda/include/nppdefs.h	/^} NppiSize;$/;"	t	typeref:struct:__anon149
NppiWarpAffineBatchCXR	/usr/local/cuda/include/nppi_geometry_transforms.h	/^} NppiWarpAffineBatchCXR;$/;"	t	typeref:struct:__anon170
NppsZCType	/usr/local/cuda/include/nppdefs.h	/^} NppsZCType;$/;"	t	typeref:enum:__anon160
NumBitsForShortTermRPSInSlice	/usr/local/cuda/include/dynlink_cuviddec.h	/^    int NumBitsForShortTermRPSInSlice;$/;"	m	struct:_CUVIDHEVCPICPARAMS
NumChannels	/usr/local/cuda/include/cuda.h	/^    unsigned int NumChannels;   \/**< Channels per array element *\/$/;"	m	struct:CUDA_ARRAY3D_DESCRIPTOR_st
NumChannels	/usr/local/cuda/include/cuda.h	/^    unsigned int NumChannels;   \/**< Channels per array element *\/$/;"	m	struct:CUDA_ARRAY_DESCRIPTOR_st
NumChannels	/usr/local/cuda/include/cuda.h	/^    unsigned int NumChannels; \/**< Channels per array element *\/$/;"	m	struct:CUDA_ARRAY3D_DESCRIPTOR_st
NumChannels	/usr/local/cuda/include/cuda.h	/^    unsigned int NumChannels; \/**< Channels per array element *\/$/;"	m	struct:CUDA_ARRAY_DESCRIPTOR_st
NumChannels	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    unsigned int NumChannels;   \/**< Channels per array element *\/$/;"	m	struct:CUDA_ARRAY3D_DESCRIPTOR_st
NumChannels	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    unsigned int NumChannels;   \/**< Channels per array element *\/$/;"	m	struct:CUDA_ARRAY_DESCRIPTOR_st
NumChannels	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    unsigned int NumChannels; \/**< Channels per array element *\/$/;"	m	struct:CUDA_ARRAY3D_DESCRIPTOR_st
NumChannels	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    unsigned int NumChannels; \/**< Channels per array element *\/$/;"	m	struct:CUDA_ARRAY_DESCRIPTOR_st
NumDeltaPocsOfRefRpsIdx	/usr/local/cuda/include/dynlink_cuviddec.h	/^    int NumDeltaPocsOfRefRpsIdx;$/;"	m	struct:_CUVIDHEVCPICPARAMS
NumPocLtCurr	/usr/local/cuda/include/dynlink_cuviddec.h	/^    int NumPocLtCurr;$/;"	m	struct:_CUVIDHEVCPICPARAMS
NumPocStCurrAfter	/usr/local/cuda/include/dynlink_cuviddec.h	/^    int NumPocStCurrAfter;$/;"	m	struct:_CUVIDHEVCPICPARAMS
NumPocStCurrBefore	/usr/local/cuda/include/dynlink_cuviddec.h	/^    int NumPocStCurrBefore;$/;"	m	struct:_CUVIDHEVCPICPARAMS
NumPocTotalCurr	/usr/local/cuda/include/dynlink_cuviddec.h	/^    int NumPocTotalCurr;$/;"	m	struct:_CUVIDHEVCPICPARAMS
NvtxDomainCreate	/usr/local/cuda/include/nvToolsExtMeta.h	/^typedef struct NvtxDomainCreate  { const void* name; } NvtxDomainCreate;$/;"	s
NvtxDomainCreate	/usr/local/cuda/include/nvToolsExtMeta.h	/^typedef struct NvtxDomainCreate  { const void* name; } NvtxDomainCreate;$/;"	t	typeref:struct:NvtxDomainCreate
NvtxDomainDestroy	/usr/local/cuda/include/nvToolsExtMeta.h	/^typedef struct NvtxDomainDestroy  { nvtxDomainHandle_t domain; } NvtxDomainDestroy;$/;"	s
NvtxDomainDestroy	/usr/local/cuda/include/nvToolsExtMeta.h	/^typedef struct NvtxDomainDestroy  { nvtxDomainHandle_t domain; } NvtxDomainDestroy;$/;"	t	typeref:struct:NvtxDomainDestroy
NvtxDomainMarkEx	/usr/local/cuda/include/nvToolsExtMeta.h	/^typedef struct NvtxDomainMarkEx NvtxDomainMarkEx;$/;"	t	typeref:struct:NvtxDomainMarkEx
NvtxDomainNameResourceA	/usr/local/cuda/include/nvToolsExtMeta.h	/^typedef struct NvtxDomainNameResourceA NvtxDomainNameResourceA;$/;"	t	typeref:struct:NvtxDomainNameResourceA
NvtxDomainNameResourceW	/usr/local/cuda/include/nvToolsExtMeta.h	/^typedef struct NvtxDomainNameResourceW NvtxDomainNameResourceW;$/;"	t	typeref:struct:NvtxDomainNameResourceW
NvtxDomainRangeEnd	/usr/local/cuda/include/nvToolsExtMeta.h	/^typedef struct NvtxDomainRangeEnd NvtxDomainRangeEnd;$/;"	t	typeref:struct:NvtxDomainRangeEnd
NvtxDomainRangePop	/usr/local/cuda/include/nvToolsExtMeta.h	/^typedef struct NvtxDomainRangePop   { nvtxDomainHandle_t domain; } NvtxDomainRangePop;$/;"	s
NvtxDomainRangePop	/usr/local/cuda/include/nvToolsExtMeta.h	/^typedef struct NvtxDomainRangePop   { nvtxDomainHandle_t domain; } NvtxDomainRangePop;$/;"	t	typeref:struct:NvtxDomainRangePop
NvtxDomainRangePushEx	/usr/local/cuda/include/nvToolsExtMeta.h	/^typedef struct NvtxDomainRangePushEx NvtxDomainRangePushEx;$/;"	t	typeref:struct:NvtxDomainRangePushEx
NvtxDomainRangeStartEx	/usr/local/cuda/include/nvToolsExtMeta.h	/^typedef struct NvtxDomainRangeStartEx NvtxDomainRangeStartEx;$/;"	t	typeref:struct:NvtxDomainRangeStartEx
NvtxDomainRegisterString	/usr/local/cuda/include/nvToolsExtMeta.h	/^typedef struct NvtxDomainRegisterString  { nvtxDomainHandle_t domain; const void* str; } NvtxDomainRegisterString;$/;"	s
NvtxDomainRegisterString	/usr/local/cuda/include/nvToolsExtMeta.h	/^typedef struct NvtxDomainRegisterString  { nvtxDomainHandle_t domain; const void* str; } NvtxDomainRegisterString;$/;"	t	typeref:struct:NvtxDomainRegisterString
NvtxDomainResourceCreate	/usr/local/cuda/include/nvToolsExtMeta.h	/^typedef struct NvtxDomainResourceCreate  { nvtxDomainHandle_t domain; const nvtxResourceAttributes_t* attribs; } NvtxDomainResourceCreate;$/;"	s
NvtxDomainResourceCreate	/usr/local/cuda/include/nvToolsExtMeta.h	/^typedef struct NvtxDomainResourceCreate  { nvtxDomainHandle_t domain; const nvtxResourceAttributes_t* attribs; } NvtxDomainResourceCreate;$/;"	t	typeref:struct:NvtxDomainResourceCreate
NvtxDomainResourceDestroy	/usr/local/cuda/include/nvToolsExtMeta.h	/^typedef struct NvtxDomainResourceDestroy  { nvtxResourceHandle_t handle; } NvtxDomainResourceDestroy;$/;"	s
NvtxDomainResourceDestroy	/usr/local/cuda/include/nvToolsExtMeta.h	/^typedef struct NvtxDomainResourceDestroy  { nvtxResourceHandle_t handle; } NvtxDomainResourceDestroy;$/;"	t	typeref:struct:NvtxDomainResourceDestroy
NvtxMarkA	/usr/local/cuda/include/nvToolsExtMeta.h	/^typedef struct NvtxMarkA        { const char* message; } NvtxMarkA;$/;"	s
NvtxMarkA	/usr/local/cuda/include/nvToolsExtMeta.h	/^typedef struct NvtxMarkA        { const char* message; } NvtxMarkA;$/;"	t	typeref:struct:NvtxMarkA
NvtxMarkEx	/usr/local/cuda/include/nvToolsExtMeta.h	/^typedef struct NvtxMarkEx{ const nvtxEventAttributes_t* eventAttrib; } NvtxMarkEx;$/;"	s
NvtxMarkEx	/usr/local/cuda/include/nvToolsExtMeta.h	/^typedef struct NvtxMarkEx{ const nvtxEventAttributes_t* eventAttrib; } NvtxMarkEx;$/;"	t	typeref:struct:NvtxMarkEx
NvtxMarkW	/usr/local/cuda/include/nvToolsExtMeta.h	/^typedef struct NvtxMarkW        { const wchar_t* message; } NvtxMarkW;$/;"	s
NvtxMarkW	/usr/local/cuda/include/nvToolsExtMeta.h	/^typedef struct NvtxMarkW        { const wchar_t* message; } NvtxMarkW;$/;"	t	typeref:struct:NvtxMarkW
NvtxNameResourceA	/usr/local/cuda/include/nvToolsExtMeta.h	/^typedef struct NvtxNameResourceA$/;"	s
NvtxNameResourceA	/usr/local/cuda/include/nvToolsExtMeta.h	/^} NvtxNameResourceA;$/;"	t	typeref:struct:NvtxNameResourceA
NvtxNameResourceW	/usr/local/cuda/include/nvToolsExtMeta.h	/^typedef struct NvtxNameResourceW$/;"	s
NvtxNameResourceW	/usr/local/cuda/include/nvToolsExtMeta.h	/^} NvtxNameResourceW;$/;"	t	typeref:struct:NvtxNameResourceW
NvtxRangeEnd	/usr/local/cuda/include/nvToolsExtMeta.h	/^typedef struct NvtxRangeEnd     { nvtxRangeId_t id; } NvtxRangeEnd;$/;"	s
NvtxRangeEnd	/usr/local/cuda/include/nvToolsExtMeta.h	/^typedef struct NvtxRangeEnd     { nvtxRangeId_t id; } NvtxRangeEnd;$/;"	t	typeref:struct:NvtxRangeEnd
NvtxRangePushA	/usr/local/cuda/include/nvToolsExtMeta.h	/^typedef struct NvtxRangePushA   { const char* message; } NvtxRangePushA;$/;"	s
NvtxRangePushA	/usr/local/cuda/include/nvToolsExtMeta.h	/^typedef struct NvtxRangePushA   { const char* message; } NvtxRangePushA;$/;"	t	typeref:struct:NvtxRangePushA
NvtxRangePushEx	/usr/local/cuda/include/nvToolsExtMeta.h	/^typedef struct NvtxRangePushEx  { const nvtxEventAttributes_t* eventAttrib; } NvtxRangePushEx;$/;"	s
NvtxRangePushEx	/usr/local/cuda/include/nvToolsExtMeta.h	/^typedef struct NvtxRangePushEx  { const nvtxEventAttributes_t* eventAttrib; } NvtxRangePushEx;$/;"	t	typeref:struct:NvtxRangePushEx
NvtxRangePushW	/usr/local/cuda/include/nvToolsExtMeta.h	/^typedef struct NvtxRangePushW   { const wchar_t* message; } NvtxRangePushW;$/;"	s
NvtxRangePushW	/usr/local/cuda/include/nvToolsExtMeta.h	/^typedef struct NvtxRangePushW   { const wchar_t* message; } NvtxRangePushW;$/;"	t	typeref:struct:NvtxRangePushW
NvtxRangeStartA	/usr/local/cuda/include/nvToolsExtMeta.h	/^typedef struct NvtxRangeStartA  { const char* message; } NvtxRangeStartA;$/;"	s
NvtxRangeStartA	/usr/local/cuda/include/nvToolsExtMeta.h	/^typedef struct NvtxRangeStartA  { const char* message; } NvtxRangeStartA;$/;"	t	typeref:struct:NvtxRangeStartA
NvtxRangeStartEx	/usr/local/cuda/include/nvToolsExtMeta.h	/^typedef struct NvtxRangeStartEx { const nvtxEventAttributes_t* eventAttrib; } NvtxRangeStartEx;$/;"	s
NvtxRangeStartEx	/usr/local/cuda/include/nvToolsExtMeta.h	/^typedef struct NvtxRangeStartEx { const nvtxEventAttributes_t* eventAttrib; } NvtxRangeStartEx;$/;"	t	typeref:struct:NvtxRangeStartEx
NvtxRangeStartW	/usr/local/cuda/include/nvToolsExtMeta.h	/^typedef struct NvtxRangeStartW  { const wchar_t* message; } NvtxRangeStartW;$/;"	s
NvtxRangeStartW	/usr/local/cuda/include/nvToolsExtMeta.h	/^typedef struct NvtxRangeStartW  { const wchar_t* message; } NvtxRangeStartW;$/;"	t	typeref:struct:NvtxRangeStartW
NvtxSyncUserCommon	/usr/local/cuda/include/nvToolsExtMeta.h	/^typedef struct NvtxSyncUserCommon  { nvtxSyncUser_t handle; } NvtxSyncUserCommon;$/;"	s
NvtxSyncUserCommon	/usr/local/cuda/include/nvToolsExtMeta.h	/^typedef struct NvtxSyncUserCommon  { nvtxSyncUser_t handle; } NvtxSyncUserCommon;$/;"	t	typeref:struct:NvtxSyncUserCommon
NvtxSyncUserCreate	/usr/local/cuda/include/nvToolsExtMeta.h	/^typedef struct NvtxSyncUserCreate  { nvtxDomainHandle_t domain; const nvtxSyncUserAttributes_t* attribs; } NvtxSyncUserCreate;$/;"	s
NvtxSyncUserCreate	/usr/local/cuda/include/nvToolsExtMeta.h	/^typedef struct NvtxSyncUserCreate  { nvtxDomainHandle_t domain; const nvtxSyncUserAttributes_t* attribs; } NvtxSyncUserCreate;$/;"	t	typeref:struct:NvtxSyncUserCreate
OCC_LIMIT_BLOCKS	/usr/local/cuda/include/cuda_occupancy.h	/^    OCC_LIMIT_BLOCKS        = 0x08  \/\/ - blocks available$/;"	e	enum:cudaOccLimitingFactor_enum
OCC_LIMIT_REGISTERS	/usr/local/cuda/include/cuda_occupancy.h	/^    OCC_LIMIT_REGISTERS     = 0x02, \/\/ - registers available$/;"	e	enum:cudaOccLimitingFactor_enum
OCC_LIMIT_SHARED_MEMORY	/usr/local/cuda/include/cuda_occupancy.h	/^    OCC_LIMIT_SHARED_MEMORY = 0x04, \/\/ - shared memory available$/;"	e	enum:cudaOccLimitingFactor_enum
OCC_LIMIT_WARPS	/usr/local/cuda/include/cuda_occupancy.h	/^    OCC_LIMIT_WARPS         = 0x01, \/\/ - warps available$/;"	e	enum:cudaOccLimitingFactor_enum
OLD_STYLE_FATBIN_MAGIC	/usr/local/cuda/include/fatbinary.h	51;"	d
OPTION_LIST_H	src/option_list.h	2;"	d
OutputFormat	/usr/local/cuda/include/dynlink_cuviddec.h	/^    cudaVideoSurfaceFormat OutputFormat;       \/**< cudaVideoSurfaceFormat_XXX *\/$/;"	m	struct:_CUVIDDECODECREATEINFO
PARSER_H	src/parser.h	2;"	d
PARTITIONED_GC_ALWAYS_ON	/usr/local/cuda/include/cuda_occupancy.h	/^    PARTITIONED_GC_ALWAYS_ON       \/\/ This is only needed for Pascal. This, and$/;"	e	enum:cudaOccPartitionedGCSupport_enum
PARTITIONED_GC_NOT_SUPPORTED	/usr/local/cuda/include/cuda_occupancy.h	/^    PARTITIONED_GC_NOT_SUPPORTED,  \/\/ Partitioned global caching is not supported$/;"	e	enum:cudaOccPartitionedGCSupport_enum
PARTITIONED_GC_OFF	/usr/local/cuda/include/cuda_occupancy.h	/^    PARTITIONED_GC_OFF,        \/\/ Disable partitioned global caching$/;"	e	enum:cudaOccPartitionedGCConfig_enum
PARTITIONED_GC_ON	/usr/local/cuda/include/cuda_occupancy.h	/^    PARTITIONED_GC_ON,         \/\/ Prefer partitioned global caching$/;"	e	enum:cudaOccPartitionedGCConfig_enum
PARTITIONED_GC_ON_STRICT	/usr/local/cuda/include/cuda_occupancy.h	/^    PARTITIONED_GC_ON_STRICT   \/\/ Force partitioned global caching$/;"	e	enum:cudaOccPartitionedGCConfig_enum
PARTITIONED_GC_SUPPORTED	/usr/local/cuda/include/cuda_occupancy.h	/^    PARTITIONED_GC_SUPPORTED,      \/\/ Partitioned global caching is supported$/;"	e	enum:cudaOccPartitionedGCSupport_enum
PATCH_LEVEL	/usr/local/cuda/include/cudnn.h	/^    PATCH_LEVEL$/;"	e	enum:libraryPropertyType_t
PATCH_LEVEL	/usr/local/cuda/include/library_types.h	/^	PATCH_LEVEL$/;"	e	enum:libraryPropertyType_t
PFNVIDDECODECALLBACK	/usr/local/cuda/include/dynlink_nvcuvid.h	/^typedef int (CUDAAPI *PFNVIDDECODECALLBACK)(void *, CUVIDPICPARAMS *);$/;"	t
PFNVIDDISPLAYCALLBACK	/usr/local/cuda/include/dynlink_nvcuvid.h	/^typedef int (CUDAAPI *PFNVIDDISPLAYCALLBACK)(void *, CUVIDPARSERDISPINFO *);$/;"	t
PFNVIDSEQUENCECALLBACK	/usr/local/cuda/include/dynlink_nvcuvid.h	/^typedef int (CUDAAPI *PFNVIDSEQUENCECALLBACK)(void *, CUVIDEOFORMAT *);$/;"	t
PFNVIDSOURCECALLBACK	/usr/local/cuda/include/dynlink_nvcuvid.h	/^typedef int (CUDAAPI *PFNVIDSOURCECALLBACK)(void *, CUVIDSOURCEDATAPACKET *);$/;"	t
PHILOX_M4x32_0	/usr/local/cuda/include/curand_philox4x32_x.h	89;"	d
PHILOX_M4x32_1	/usr/local/cuda/include/curand_philox4x32_x.h	90;"	d
PHILOX_W32_0	/usr/local/cuda/include/curand_philox4x32_x.h	87;"	d
PHILOX_W32_1	/usr/local/cuda/include/curand_philox4x32_x.h	88;"	d
PRECALC_BLOCK_MASK	/usr/local/cuda/include/curand_precalc.h	53;"	d
PRECALC_BLOCK_SIZE	/usr/local/cuda/include/curand_precalc.h	52;"	d
PRECALC_NUM_MATRICES	/usr/local/cuda/include/curand_precalc.h	51;"	d
P_VOP	/usr/local/cuda/include/dynlink_cuviddec.h	332;"	d
Philox_State_Incr	/usr/local/cuda/include/curand_philox4x32_x.h	/^QUALIFIERS void Philox_State_Incr(curandStatePhilox4_32_10_t* s)$/;"	f
Philox_State_Incr	/usr/local/cuda/include/curand_philox4x32_x.h	/^QUALIFIERS void Philox_State_Incr(curandStatePhilox4_32_10_t* s, unsigned long long n)$/;"	f
Philox_State_Incr_hi	/usr/local/cuda/include/curand_philox4x32_x.h	/^QUALIFIERS void Philox_State_Incr_hi(curandStatePhilox4_32_10_t* s, unsigned long long n)$/;"	f
PicIdx	/usr/local/cuda/include/dynlink_cuviddec.h	/^    int PicIdx;                 \/**< picture index of reference frame *\/$/;"	m	struct:_CUVIDH264DPBENTRY
PicOrderCntVal	/usr/local/cuda/include/dynlink_cuviddec.h	/^    int PicOrderCntVal[16];             \/\/ [refpic]$/;"	m	struct:_CUVIDHEVCPICPARAMS
PicWidthInMbs	/usr/local/cuda/include/dynlink_cuviddec.h	/^    int PicWidthInMbs;                    \/**< Coded Frame Size *\/$/;"	m	struct:_CUVIDPICPARAMS
Pxlfrmt	src/sdl_image.c	/^static Uint32 Pxlfrmt=SDL_PIXELFORMAT_BGR24;$/;"	v	file:
Pxlfrmt	src/sdl_image.c	/^static Uint32 Pxlfrmt=SDL_PIXELFORMAT_RGBA8888;$/;"	v	file:
QUALIFIERS	/usr/local/cuda/include/curand_kernel.h	61;"	d
QUALIFIERS	/usr/local/cuda/include/curand_mtgp32_host.h	102;"	d
QUALIFIERS	/usr/local/cuda/include/curand_philox4x32_x.h	84;"	d
QUALIFIERS_MTGP32	/usr/local/cuda/include/curand_mtgp32_kernel.h	103;"	d
QUALIFIERS_MTGP32	/usr/local/cuda/include/curand_mtgp32_kernel.h	389;"	d
QUALIFIERS_STATIC	/usr/local/cuda/include/curand_normal_static.h	126;"	d
QUALIFIERS_STATIC	/usr/local/cuda/include/curand_normal_static.h	51;"	d
QuantMatrixInter	/usr/local/cuda/include/dynlink_cuviddec.h	/^    unsigned char QuantMatrixInter[64];$/;"	m	struct:_CUVIDMPEG2PICPARAMS
QuantMatrixInter	/usr/local/cuda/include/dynlink_cuviddec.h	/^    unsigned char QuantMatrixInter[64];$/;"	m	struct:_CUVIDMPEG4PICPARAMS
QuantMatrixIntra	/usr/local/cuda/include/dynlink_cuviddec.h	/^    unsigned char QuantMatrixIntra[64];$/;"	m	struct:_CUVIDMPEG2PICPARAMS
QuantMatrixIntra	/usr/local/cuda/include/dynlink_cuviddec.h	/^    unsigned char QuantMatrixIntra[64];$/;"	m	struct:_CUVIDMPEG4PICPARAMS
REGION_LAYER_H	src/region_layer.h	2;"	d
REORG_LAYER_H	src/reorg_layer.h	2;"	d
RNN_LAYER_H	src/rnn_layer.h	3;"	d
ROUTE_LAYER_H	src/route_layer.h	2;"	d
RefPicIdx	/usr/local/cuda/include/dynlink_cuviddec.h	/^    int RefPicIdx[16];                  \/\/ [refpic] Indices of valid reference pictures (-1 if unused for reference)$/;"	m	struct:_CUVIDHEVCPICPARAMS
RefPicSetInterLayer0	/usr/local/cuda/include/dynlink_cuviddec.h	/^    unsigned char RefPicSetInterLayer0[8];$/;"	m	struct:_CUVIDHEVCPICPARAMS
RefPicSetInterLayer1	/usr/local/cuda/include/dynlink_cuviddec.h	/^    unsigned char RefPicSetInterLayer1[8];$/;"	m	struct:_CUVIDHEVCPICPARAMS
RefPicSetLtCurr	/usr/local/cuda/include/dynlink_cuviddec.h	/^    unsigned char RefPicSetLtCurr[8];       \/\/ [0..NumPocLtCurr-1] -> refpic (0..15)$/;"	m	struct:_CUVIDHEVCPICPARAMS
RefPicSetStCurrAfter	/usr/local/cuda/include/dynlink_cuviddec.h	/^    unsigned char RefPicSetStCurrAfter[8];  \/\/ [0..NumPocStCurrAfter-1] -> refpic (0..15)$/;"	m	struct:_CUVIDHEVCPICPARAMS
RefPicSetStCurrBefore	/usr/local/cuda/include/dynlink_cuviddec.h	/^    unsigned char RefPicSetStCurrBefore[8]; \/\/ [0..NumPocStCurrBefore-1] -> refpic (0..15)$/;"	m	struct:_CUVIDHEVCPICPARAMS
Reserved	/usr/local/cuda/include/dynlink_cuviddec.h	/^    int Reserved;$/;"	m	struct:_CUVIDJPEGPICPARAMS
Reserved	/usr/local/cuda/include/dynlink_cuviddec.h	/^    unsigned int  Reserved[12];$/;"	m	struct:_CUVIDH264PICPARAMS
Reserved	/usr/local/cuda/include/dynlink_cuviddec.h	/^    unsigned int Reserved[30];             \/**< Reserved for future use *\/$/;"	m	struct:_CUVIDPICPARAMS
Reserved	/usr/local/cuda/include/dynlink_cuviddec.h	/^    unsigned int Reserved[48];$/;"	m	struct:_CUVIDPROCPARAMS
Reserved1	/usr/local/cuda/include/dynlink_cuviddec.h	/^    unsigned char Reserved1[4];$/;"	m	struct:_CUVIDVP8PICPARAMS
Reserved1	/usr/local/cuda/include/dynlink_cuviddec.h	/^    unsigned long Reserved1[4];         \/**< Reserved for future use - set to zero *\/$/;"	m	struct:_CUVIDDECODECREATEINFO
Reserved16Bits	/usr/local/cuda/include/dynlink_cuviddec.h	/^    unsigned short Reserved16Bits;$/;"	m	struct:_CUVIDH264SVCEXT
Reserved2	/usr/local/cuda/include/dynlink_cuviddec.h	/^    unsigned int  Reserved2[3];$/;"	m	struct:_CUVIDVP8PICPARAMS
Reserved2	/usr/local/cuda/include/dynlink_cuviddec.h	/^    unsigned long Reserved2[5];                \/**< Reserved for future use - set to zero *\/$/;"	m	struct:_CUVIDDECODECREATEINFO
Reserved2Bits	/usr/local/cuda/include/dynlink_cuviddec.h	/^            unsigned char Reserved2Bits : 2;$/;"	m	struct:_CUVIDVP8PICPARAMS::__anon118::__anon119
Reserved3	/usr/local/cuda/include/dynlink_cuviddec.h	/^    void *Reserved3[3];$/;"	m	struct:_CUVIDPROCPARAMS
Reserved8BitsA	/usr/local/cuda/include/dynlink_cuviddec.h	/^    unsigned char Reserved8BitsA;$/;"	m	struct:_CUVIDH264SVCEXT
Reserved8BitsB	/usr/local/cuda/include/dynlink_cuviddec.h	/^    unsigned char Reserved8BitsB;$/;"	m	struct:_CUVIDH264SVCEXT
SHAREDMEM_CARVEOUT_DEFAULT	/usr/local/cuda/include/cuda_occupancy.h	/^    SHAREDMEM_CARVEOUT_DEFAULT       = -1,  \/\/ no preference for shared memory or L1 (default)$/;"	e	enum:cudaOccCarveoutConfig_enum
SHAREDMEM_CARVEOUT_HALF	/usr/local/cuda/include/cuda_occupancy.h	/^    SHAREDMEM_CARVEOUT_HALF          = 50   \/\/ prefer half of maximum available shared memory, with the rest as L1 cache$/;"	e	enum:cudaOccCarveoutConfig_enum
SHAREDMEM_CARVEOUT_MAX_L1	/usr/local/cuda/include/cuda_occupancy.h	/^    SHAREDMEM_CARVEOUT_MAX_L1        = 0,    \/\/ prefer maximum available L1 cache, minimum shared memory$/;"	e	enum:cudaOccCarveoutConfig_enum
SHAREDMEM_CARVEOUT_MAX_SHARED	/usr/local/cuda/include/cuda_occupancy.h	/^    SHAREDMEM_CARVEOUT_MAX_SHARED    = 100, \/\/ prefer maximum available shared memory, minimum L1 cache$/;"	e	enum:cudaOccCarveoutConfig_enum
SHORTCUT_LAYER_H	src/shortcut_layer.h	2;"	d
SIMDWidth	/usr/local/cuda/include/cuda.h	/^    int SIMDWidth;              \/**< Warp size in threads *\/$/;"	m	struct:CUdevprop_st
SIMDWidth	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    int SIMDWidth;              \/**< Warp size in threads *\/$/;"	m	struct:CUdevprop_st
SKIPAHEAD_BLOCKSIZE	/usr/local/cuda/include/curand_globals.h	52;"	d
SKIPAHEAD_MASK	/usr/local/cuda/include/curand_globals.h	53;"	d
SOBOL64_ITR_BINARY_DIVIDE	/usr/local/cuda/include/curand_globals.h	67;"	d
SOBOL_D	/usr/local/cuda/include/sobol_direction_vectors.h	4;"	d
SOBOL_L	/usr/local/cuda/include/sobol_direction_vectors.h	5;"	d
SOBOL_M2_BINARY_DIVIDE	/usr/local/cuda/include/curand_globals.h	68;"	d
SOFTMAX_LAYER_H	src/softmax_layer.h	2;"	d
STATE	/usr/local/cuda/include/curand_philox4x32_x.h	/^   unsigned int STATE;$/;"	m	struct:curandStatePhilox4_32_10
STBIDEF	src/stb_image.h	410;"	d
STBIDEF	src/stb_image.h	412;"	d
STBIW_ASSERT	src/stb_image_write.h	126;"	d
STBIW_FREE	src/stb_image_write.h	117;"	d
STBIW_MALLOC	src/stb_image_write.h	115;"	d
STBIW_MEMMOVE	src/stb_image_write.h	120;"	d
STBIW_REALLOC	src/stb_image_write.h	116;"	d
STBI_ASSERT	src/stb_image.h	575;"	d
STBI_FREE	src/stb_image.h	633;"	d
STBI_HAS_LROTL	src/stb_image.h	613;"	d
STBI_INCLUDE_STB_IMAGE_H	src/stb_image.h	215;"	d
STBI_MALLOC	src/stb_image.h	631;"	d
STBI_NEON	src/stb_image.h	720;"	d
STBI_NOTUSED	src/stb_image.h	607;"	d
STBI_NOTUSED	src/stb_image.h	609;"	d
STBI_NO_BMP	src/stb_image.h	533;"	d
STBI_NO_GIF	src/stb_image.h	542;"	d
STBI_NO_HDR	src/stb_image.h	545;"	d
STBI_NO_JPEG	src/stb_image.h	527;"	d
STBI_NO_PIC	src/stb_image.h	548;"	d
STBI_NO_PNG	src/stb_image.h	530;"	d
STBI_NO_PNM	src/stb_image.h	551;"	d
STBI_NO_PSD	src/stb_image.h	536;"	d
STBI_NO_SIMD	src/stb_image.h	649;"	d
STBI_NO_SIMD	src/stb_image.h	664;"	d
STBI_NO_TGA	src/stb_image.h	539;"	d
STBI_NO_ZLIB	src/stb_image.h	556;"	d
STBI_REALLOC	src/stb_image.h	632;"	d
STBI_SIMD_ALIGN	src/stb_image.h	694;"	d
STBI_SIMD_ALIGN	src/stb_image.h	702;"	d
STBI_SIMD_ALIGN	src/stb_image.h	726;"	d
STBI_SIMD_ALIGN	src/stb_image.h	730;"	d
STBI_SSE2	src/stb_image.h	668;"	d
STBI_VERSION	src/stb_image.h	391;"	d
STBI__BYTECAST	src/stb_image.h	1300;"	d
STBI__F_avg	src/stb_image.h	/^   STBI__F_avg=3,$/;"	e	enum:__anon23
STBI__F_avg_first	src/stb_image.h	/^   STBI__F_avg_first,$/;"	e	enum:__anon23
STBI__F_none	src/stb_image.h	/^   STBI__F_none=0,$/;"	e	enum:__anon23
STBI__F_paeth	src/stb_image.h	/^   STBI__F_paeth=4,$/;"	e	enum:__anon23
STBI__F_paeth_first	src/stb_image.h	/^   STBI__F_paeth_first$/;"	e	enum:__anon23
STBI__F_sub	src/stb_image.h	/^   STBI__F_sub=1,$/;"	e	enum:__anon23
STBI__F_up	src/stb_image.h	/^   STBI__F_up=2,$/;"	e	enum:__anon23
STBI__HDR_BUFLEN	src/stb_image.h	5795;"	d
STBI__IDCT_1D	src/stb_image.h	1909;"	d
STBI__MARKER_none	src/stb_image.h	2394;"	d
STBI__PNG_TYPE	src/stb_image.h	4295;"	d
STBI__RESTART	src/stb_image.h	2411;"	d
STBI__SCAN_header	src/stb_image.h	/^   STBI__SCAN_header$/;"	e	enum:__anon14
STBI__SCAN_load	src/stb_image.h	/^   STBI__SCAN_load=0,$/;"	e	enum:__anon14
STBI__SCAN_type	src/stb_image.h	/^   STBI__SCAN_type,$/;"	e	enum:__anon14
STBI__X64_TARGET	src/stb_image.h	638;"	d
STBI__X86_TARGET	src/stb_image.h	640;"	d
STBI__ZFAST_BITS	src/stb_image.h	3437;"	d
STBI__ZFAST_MASK	src/stb_image.h	3438;"	d
STBI_default	src/stb_image.h	/^   STBI_default = 0, \/\/ only used for req_comp$/;"	e	enum:__anon11
STBI_grey	src/stb_image.h	/^   STBI_grey       = 1,$/;"	e	enum:__anon11
STBI_grey_alpha	src/stb_image.h	/^   STBI_grey_alpha = 2,$/;"	e	enum:__anon11
STBI_rgb	src/stb_image.h	/^   STBI_rgb        = 3,$/;"	e	enum:__anon11
STBI_rgb_alpha	src/stb_image.h	/^   STBI_rgb_alpha  = 4$/;"	e	enum:__anon11
STB_IMAGE_IMPLEMENTATION	src/image.c	8;"	d	file:
STB_IMAGE_WRITE_IMPLEMENTATION	src/image.c	10;"	d	file:
S_VOP	/usr/local/cuda/include/dynlink_cuviddec.h	334;"	d
ScalingList16x16	/usr/local/cuda/include/dynlink_cuviddec.h	/^    unsigned char ScalingList16x16[6][64];     \/\/ [matrixId][i]$/;"	m	struct:_CUVIDHEVCPICPARAMS
ScalingList32x32	/usr/local/cuda/include/dynlink_cuviddec.h	/^    unsigned char ScalingList32x32[2][64];     \/\/ [matrixId][i]$/;"	m	struct:_CUVIDHEVCPICPARAMS
ScalingList4x4	/usr/local/cuda/include/dynlink_cuviddec.h	/^    unsigned char ScalingList4x4[6][16];       \/\/ [matrixId][i]$/;"	m	struct:_CUVIDHEVCPICPARAMS
ScalingList8x8	/usr/local/cuda/include/dynlink_cuviddec.h	/^    unsigned char ScalingList8x8[6][64];       \/\/ [matrixId][i]$/;"	m	struct:_CUVIDHEVCPICPARAMS
ScalingListDCCoeff16x16	/usr/local/cuda/include/dynlink_cuviddec.h	/^    unsigned char ScalingListDCCoeff16x16[6];  \/\/ [matrixId]$/;"	m	struct:_CUVIDHEVCPICPARAMS
ScalingListDCCoeff32x32	/usr/local/cuda/include/dynlink_cuviddec.h	/^    unsigned char ScalingListDCCoeff32x32[2];  \/\/ [matrixId]$/;"	m	struct:_CUVIDHEVCPICPARAMS
SortMaster3000	src/compare.c	/^void SortMaster3000(char *filename, char *weightfile)$/;"	f
SpectralClusteringParameter	/usr/local/cuda/include/nvgraph.h	/^struct SpectralClusteringParameter {$/;"	s
TBL_SIZE	/usr/local/cuda/include/curand_mtgp32.h	110;"	d
THREAD_NUM	/usr/local/cuda/include/curand_mtgp32.h	107;"	d
TREE_H	src/tree.h	2;"	d
TWO_PI	src/utils.h	8;"	d
ThreadBlock	/usr/local/cuda/include/cooperative_groups_helpers.h	/^        ThreadBlock,$/;"	e	enum:__internal::groupType
Timer	src/common.h	/^} Timer;$/;"	t	typeref:struct:__anon4
USET	src/lstm_layer.h	7;"	d
USET	src/rnn_layer.h	8;"	d
UTILS_H	src/utils.h	2;"	d
V	/usr/local/cuda/include/curand_discrete.h	/^    curandHistogramM2V_t V; $/;"	m	struct:curandHistogramM2_st
WeightScale4x4	/usr/local/cuda/include/dynlink_cuviddec.h	/^    unsigned char WeightScale4x4[6][16];$/;"	m	struct:_CUVIDH264PICPARAMS
WeightScale8x8	/usr/local/cuda/include/dynlink_cuviddec.h	/^    unsigned char WeightScale8x8[2][64];$/;"	m	struct:_CUVIDH264PICPARAMS
Width	/usr/local/cuda/include/cuda.h	/^    size_t Width;             \/**< Width of 3D array *\/$/;"	m	struct:CUDA_ARRAY3D_DESCRIPTOR_st
Width	/usr/local/cuda/include/cuda.h	/^    size_t Width;             \/**< Width of array *\/$/;"	m	struct:CUDA_ARRAY_DESCRIPTOR_st
Width	/usr/local/cuda/include/cuda.h	/^    unsigned int Width;         \/**< Width of 3D array *\/$/;"	m	struct:CUDA_ARRAY3D_DESCRIPTOR_st
Width	/usr/local/cuda/include/cuda.h	/^    unsigned int Width;         \/**< Width of array *\/$/;"	m	struct:CUDA_ARRAY_DESCRIPTOR_st
Width	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    size_t Width;             \/**< Width of 3D array *\/$/;"	m	struct:CUDA_ARRAY3D_DESCRIPTOR_st
Width	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    size_t Width;             \/**< Width of array *\/$/;"	m	struct:CUDA_ARRAY_DESCRIPTOR_st
Width	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    unsigned int Width;         \/**< Width of 3D array *\/$/;"	m	struct:CUDA_ARRAY3D_DESCRIPTOR_st
Width	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    unsigned int Width;         \/**< Width of array *\/$/;"	m	struct:CUDA_ARRAY_DESCRIPTOR_st
WidthInBytes	/usr/local/cuda/include/cuda.h	/^    size_t WidthInBytes;        \/**< Width of 2D memory copy in bytes *\/$/;"	m	struct:CUDA_MEMCPY2D_st
WidthInBytes	/usr/local/cuda/include/cuda.h	/^    size_t WidthInBytes;        \/**< Width of 3D memory copy in bytes *\/$/;"	m	struct:CUDA_MEMCPY3D_PEER_st
WidthInBytes	/usr/local/cuda/include/cuda.h	/^    size_t WidthInBytes;        \/**< Width of 3D memory copy in bytes *\/$/;"	m	struct:CUDA_MEMCPY3D_st
WidthInBytes	/usr/local/cuda/include/cuda.h	/^    unsigned int WidthInBytes;  \/**< Width of 2D memory copy in bytes *\/$/;"	m	struct:CUDA_MEMCPY2D_st
WidthInBytes	/usr/local/cuda/include/cuda.h	/^    unsigned int WidthInBytes;  \/**< Width of 3D memory copy in bytes *\/$/;"	m	struct:CUDA_MEMCPY3D_st
WidthInBytes	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    size_t WidthInBytes;        \/**< Width of 2D memory copy in bytes *\/$/;"	m	struct:CUDA_MEMCPY2D_st
WidthInBytes	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    size_t WidthInBytes;        \/**< Width of 3D memory copy in bytes *\/$/;"	m	struct:CUDA_MEMCPY3D_PEER_st
WidthInBytes	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    size_t WidthInBytes;        \/**< Width of 3D memory copy in bytes *\/$/;"	m	struct:CUDA_MEMCPY3D_st
WidthInBytes	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    unsigned int WidthInBytes;  \/**< Width of 2D memory copy in bytes *\/$/;"	m	struct:CUDA_MEMCPY2D_st
WidthInBytes	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    unsigned int WidthInBytes;  \/**< Width of 3D memory copy in bytes *\/$/;"	m	struct:CUDA_MEMCPY3D_st
XNOR_LAYER_H	src/xnor_layer.h	2;"	d
XORWOW_SEQUENCE_SPACING	/usr/local/cuda/include/curand_precalc.h	54;"	d
YCbCr_to_RGB_kernel	src/stb_image.h	/^   void (*YCbCr_to_RGB_kernel)(stbi_uc *out, const stbi_uc *y, const stbi_uc *pcb, const stbi_uc *pcr, int count, int step);$/;"	m	struct:__anon16
_CG_ABI_VERSION	/usr/local/cuda/include/cooperative_groups_helpers.h	58;"	d
_CG_BEGIN_NAMESPACE	/usr/local/cuda/include/cooperative_groups_helpers.h	72;"	d
_CG_CONCAT_INNER	/usr/local/cuda/include/cooperative_groups_helpers.h	68;"	d
_CG_CONCAT_OUTER	/usr/local/cuda/include/cooperative_groups_helpers.h	69;"	d
_CG_DEBUG	/usr/local/cuda/include/cooperative_groups_helpers.h	105;"	d
_CG_END_NAMESPACE	/usr/local/cuda/include/cooperative_groups_helpers.h	74;"	d
_CG_HAS_FP16_COLLECTIVE	/usr/local/cuda/include/cooperative_groups_helpers.h	97;"	d
_CG_HAS_GRID_GROUP	/usr/local/cuda/include/cooperative_groups_helpers.h	85;"	d
_CG_HAS_MATCH_COLLECTIVE	/usr/local/cuda/include/cooperative_groups_helpers.h	91;"	d
_CG_HAS_MULTI_GRID_GROUP	/usr/local/cuda/include/cooperative_groups_helpers.h	88;"	d
_CG_NAMESPACE	/usr/local/cuda/include/cooperative_groups_helpers.h	70;"	d
_CG_QUALIFIER	/usr/local/cuda/include/cooperative_groups_helpers.h	81;"	d
_CG_STATIC_QUALIFIER	/usr/local/cuda/include/cooperative_groups_helpers.h	78;"	d
_CG_VERSION	/usr/local/cuda/include/cooperative_groups_helpers.h	52;"	d
_COOPERATIVE_GROUPS_H_	/usr/local/cuda/include/cooperative_groups.h	51;"	d
_CUDA_LIB_XT_H_	/usr/local/cuda/include/cudalibxt.h	55;"	d
_CUFFTAPI	/usr/local/cuda/include/cufftw.h	389;"	d
_CUFFTAPI	/usr/local/cuda/include/cufftw.h	391;"	d
_CUFFTW_H_	/usr/local/cuda/include/cufftw.h	56;"	d
_CUFFTXT_H_	/usr/local/cuda/include/cufftXt.h	56;"	d
_CUFFT_H_	/usr/local/cuda/include/cufft.h	56;"	d
_CUVIDDECODECREATEINFO	/usr/local/cuda/include/dynlink_cuviddec.h	/^typedef struct _CUVIDDECODECREATEINFO$/;"	s
_CUVIDH264DPBENTRY	/usr/local/cuda/include/dynlink_cuviddec.h	/^typedef struct _CUVIDH264DPBENTRY$/;"	s
_CUVIDH264MVCEXT	/usr/local/cuda/include/dynlink_cuviddec.h	/^typedef struct _CUVIDH264MVCEXT$/;"	s
_CUVIDH264PICPARAMS	/usr/local/cuda/include/dynlink_cuviddec.h	/^typedef struct _CUVIDH264PICPARAMS$/;"	s
_CUVIDH264SVCEXT	/usr/local/cuda/include/dynlink_cuviddec.h	/^typedef struct _CUVIDH264SVCEXT$/;"	s
_CUVIDHEVCPICPARAMS	/usr/local/cuda/include/dynlink_cuviddec.h	/^typedef struct _CUVIDHEVCPICPARAMS$/;"	s
_CUVIDJPEGPICPARAMS	/usr/local/cuda/include/dynlink_cuviddec.h	/^typedef struct _CUVIDJPEGPICPARAMS$/;"	s
_CUVIDMPEG2PICPARAMS	/usr/local/cuda/include/dynlink_cuviddec.h	/^typedef struct _CUVIDMPEG2PICPARAMS$/;"	s
_CUVIDMPEG4PICPARAMS	/usr/local/cuda/include/dynlink_cuviddec.h	/^typedef struct _CUVIDMPEG4PICPARAMS$/;"	s
_CUVIDPARSERDISPINFO	/usr/local/cuda/include/dynlink_nvcuvid.h	/^typedef struct _CUVIDPARSERDISPINFO$/;"	s
_CUVIDPARSERPARAMS	/usr/local/cuda/include/dynlink_nvcuvid.h	/^typedef struct _CUVIDPARSERPARAMS$/;"	s
_CUVIDPICPARAMS	/usr/local/cuda/include/dynlink_cuviddec.h	/^typedef struct _CUVIDPICPARAMS$/;"	s
_CUVIDPROCPARAMS	/usr/local/cuda/include/dynlink_cuviddec.h	/^typedef struct _CUVIDPROCPARAMS$/;"	s
_CUVIDSOURCEDATAPACKET	/usr/local/cuda/include/dynlink_nvcuvid.h	/^typedef struct _CUVIDSOURCEDATAPACKET$/;"	s
_CUVIDSOURCEPARAMS	/usr/local/cuda/include/dynlink_nvcuvid.h	/^typedef struct _CUVIDSOURCEPARAMS$/;"	s
_CUVIDVC1PICPARAMS	/usr/local/cuda/include/dynlink_cuviddec.h	/^typedef struct _CUVIDVC1PICPARAMS$/;"	s
_CUVIDVP8PICPARAMS	/usr/local/cuda/include/dynlink_cuviddec.h	/^typedef struct _CUVIDVP8PICPARAMS$/;"	s
_CUVIDVP9PICPARAMS	/usr/local/cuda/include/dynlink_cuviddec.h	/^typedef struct _CUVIDVP9PICPARAMS$/;"	s
_Dsign	/usr/local/cuda/include/math_functions.hpp	/^__MATH_FUNCTIONS_DECL__ int _Dsign (double a)$/;"	f
_FCosh	/usr/local/cuda/include/math_functions.hpp	/^__MATH_FUNCTIONS_DECL__ float _FCosh (float a, float b)$/;"	f
_FDsign	/usr/local/cuda/include/math_functions.hpp	/^__MATH_FUNCTIONS_DECL__ int _FDsign (float a)$/;"	f
_FLog	/usr/local/cuda/include/math_functions.hpp	/^__MATH_FUNCTIONS_DECL__ float _FLog(float a, int tag)$/;"	f
_FSinh	/usr/local/cuda/include/math_functions.hpp	/^__MATH_FUNCTIONS_DECL__ float _FSinh (float a, float b)$/;"	f
_FSinx	/usr/local/cuda/include/math_functions.hpp	/^__MATH_FUNCTIONS_DECL__ float _FSinx (float a, unsigned int tag, int c)$/;"	f
_NVGRAPH_H_	/usr/local/cuda/include/nvgraph.h	13;"	d
_ZdaPv	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ void  _ZdaPv(void *in) { free(in); }$/;"	f
_ZdlPv	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ void  _ZdlPv(void *in) { free(in); }$/;"	f
_Znaj	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ void * _Znaj(size_t in) { return malloc(in); }$/;"	f
_Znam	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ void * _Znam(size_t in) { return malloc(in); }$/;"	f
_Znay	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ void * _Znay(size_t in) { return malloc(in); }$/;"	f
_Znwj	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ void * _Znwj(size_t in) { return malloc(in); }$/;"	f
_Znwm	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ void * _Znwm(size_t in) { return malloc(in); }$/;"	f
_Znwy	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ void * _Znwy(size_t in) { return malloc(in); }$/;"	f
__APPROX_FCAST	/usr/local/cuda/include/cuda_fp16.hpp	1335;"	d
__APPROX_FCAST	/usr/local/cuda/include/cuda_fp16.hpp	1749;"	d
__APPROX_FCAST2	/usr/local/cuda/include/cuda_fp16.hpp	1347;"	d
__APPROX_FCAST2	/usr/local/cuda/include/cuda_fp16.hpp	1750;"	d
__BINARY_OP_HALF2_MACRO	/usr/local/cuda/include/cuda_fp16.hpp	1187;"	d
__BINARY_OP_HALF2_MACRO	/usr/local/cuda/include/cuda_fp16.hpp	1218;"	d
__BINARY_OP_HALF_MACRO	/usr/local/cuda/include/cuda_fp16.hpp	1252;"	d
__BINARY_OP_HALF_MACRO	/usr/local/cuda/include/cuda_fp16.hpp	1282;"	d
__BOOL_COMPARISON_OP_HALF2_MACRO	/usr/local/cuda/include/cuda_fp16.hpp	1066;"	d
__BOOL_COMPARISON_OP_HALF2_MACRO	/usr/local/cuda/include/cuda_fp16.hpp	1123;"	d
__CHANNEL_DESCRIPTOR_H__	/usr/local/cuda/include/channel_descriptor.h	51;"	d
__COMPARISON_OP_HALF2_MACRO	/usr/local/cuda/include/cuda_fp16.hpp	1011;"	d
__COMPARISON_OP_HALF2_MACRO	/usr/local/cuda/include/cuda_fp16.hpp	1065;"	d
__COMPARISON_OP_HALF_MACRO	/usr/local/cuda/include/cuda_fp16.hpp	1127;"	d
__COMPARISON_OP_HALF_MACRO	/usr/local/cuda/include/cuda_fp16.hpp	1183;"	d
__CUDART_API_PER_THREAD_DEFAULT_STREAM	/usr/local/cuda/include/cuda_runtime_api.h	139;"	d
__CUDART_API_PTDS	/usr/local/cuda/include/cuda_runtime_api.h	140;"	d
__CUDART_API_PTDS	/usr/local/cuda/include/cuda_runtime_api.h	143;"	d
__CUDART_API_PTSZ	/usr/local/cuda/include/cuda_runtime_api.h	141;"	d
__CUDART_API_PTSZ	/usr/local/cuda/include/cuda_runtime_api.h	144;"	d
__CUDA_ALIGN__	/usr/local/cuda/include/cuda_fp16.hpp	254;"	d
__CUDA_ALIGN__	/usr/local/cuda/include/cuda_fp16.hpp	73;"	d
__CUDA_ALIGN__	/usr/local/cuda/include/cuda_fp16.hpp	77;"	d
__CUDA_ALIGN__	/usr/local/cuda/include/cuda_fp16.hpp	80;"	d
__CUDA_ALIGN__	/usr/local/cuda/include/cuda_fp16.hpp	82;"	d
__CUDA_ALIGN__	/usr/local/cuda/include/cuda_fp16.hpp	84;"	d
__CUDA_API_PER_THREAD_DEFAULT_STREAM	/usr/local/cuda/include/cuda.h	77;"	d
__CUDA_API_PER_THREAD_DEFAULT_STREAM	/usr/local/cuda/include/cudaGL.h	67;"	d
__CUDA_API_PTDS	/usr/local/cuda/include/cuda.h	78;"	d
__CUDA_API_PTDS	/usr/local/cuda/include/cuda.h	81;"	d
__CUDA_API_PTDS	/usr/local/cuda/include/cudaGL.h	68;"	d
__CUDA_API_PTDS	/usr/local/cuda/include/cudaGL.h	71;"	d
__CUDA_API_PTSZ	/usr/local/cuda/include/cuda.h	79;"	d
__CUDA_API_PTSZ	/usr/local/cuda/include/cuda.h	82;"	d
__CUDA_API_PTSZ	/usr/local/cuda/include/cudaGL.h	69;"	d
__CUDA_API_PTSZ	/usr/local/cuda/include/cudaGL.h	72;"	d
__CUDA_API_VERSION	/usr/local/cuda/include/cuda.h	12182;"	d
__CUDA_API_VERSION	/usr/local/cuda/include/cuda.h	68;"	d
__CUDA_API_VERSION	/usr/local/cuda/include/cuda.h	73;"	d
__CUDA_API_VERSION	/usr/local/cuda/include/cudaEGL.h	555;"	d
__CUDA_API_VERSION	/usr/local/cuda/include/cudaEGL.h	64;"	d
__CUDA_API_VERSION	/usr/local/cuda/include/cudaEGL.h	69;"	d
__CUDA_API_VERSION	/usr/local/cuda/include/cudaGL.h	58;"	d
__CUDA_API_VERSION	/usr/local/cuda/include/cudaGL.h	633;"	d
__CUDA_API_VERSION	/usr/local/cuda/include/cudaGL.h	63;"	d
__CUDA_API_VERSION	/usr/local/cuda/include/cudaVDPAU.h	302;"	d
__CUDA_API_VERSION	/usr/local/cuda/include/cudaVDPAU.h	58;"	d
__CUDA_API_VERSION	/usr/local/cuda/include/cudaVDPAU.h	63;"	d
__CUDA_API_VERSION	/usr/local/cuda/include/dynlink_cuda_cuda.h	18;"	d
__CUDA_DEVICE_RUNTIME_API_H__	/usr/local/cuda/include/cuda_device_runtime_api.h	51;"	d
__CUDA_FP16_DECL__	/usr/local/cuda/include/cuda_fp16.h	100;"	d
__CUDA_FP16_DECL__	/usr/local/cuda/include/cuda_fp16.h	1962;"	d
__CUDA_FP16_DECL__	/usr/local/cuda/include/cuda_fp16.h	97;"	d
__CUDA_FP16_DECL__	/usr/local/cuda/include/cuda_fp16.hpp	1780;"	d
__CUDA_FP16_DECL__	/usr/local/cuda/include/cuda_fp16.hpp	60;"	d
__CUDA_FP16_DECL__	/usr/local/cuda/include/cuda_fp16.hpp	64;"	d
__CUDA_FP16_HPP__	/usr/local/cuda/include/cuda_fp16.hpp	51;"	d
__CUDA_FP16_H__	/usr/local/cuda/include/cuda_fp16.h	92;"	d
__CUDA_FP16_TYPES_EXIST__	/usr/local/cuda/include/cuda_fp16.h	104;"	d
__CUDA_GL_INTEROP_H__	/usr/local/cuda/include/cuda_gl_interop.h	51;"	d
__CUDA_HOSTDEVICE__	/usr/local/cuda/include/cuda_fp16.hpp	253;"	d
__CUDA_HOSTDEVICE__	/usr/local/cuda/include/cuda_fp16.hpp	62;"	d
__CUDA_HOSTDEVICE__	/usr/local/cuda/include/cuda_fp16.hpp	66;"	d
__CUDA_HOSTDEVICE__	/usr/local/cuda/include/cuda_fp16.hpp	68;"	d
__CUDA_OCC_MAJOR__	/usr/local/cuda/include/cuda_occupancy.h	547;"	d
__CUDA_OCC_MINOR__	/usr/local/cuda/include/cuda_occupancy.h	548;"	d
__CUDA_PROFILER_API_H__	/usr/local/cuda/include/cuda_profiler_api.h	51;"	d
__CUDA_RUNTIME_API_H__	/usr/local/cuda/include/cuda_runtime_api.h	51;"	d
__CUDA_RUNTIME_H__	/usr/local/cuda/include/cuda_runtime.h	51;"	d
__CUDA_SURFACE_TYPES_H__	/usr/local/cuda/include/cuda_surface_types.h	51;"	d
__CUDA_TEXTURE_TYPES_H__	/usr/local/cuda/include/cuda_texture_types.h	51;"	d
__CUDA_VDPAU_INTEROP_H__	/usr/local/cuda/include/cuda_vdpau_interop.h	51;"	d
__CUDA_VIDEO_H__	/usr/local/cuda/include/dynlink_cuviddec.h	36;"	d
__CUVID_DEVPTR64	/usr/local/cuda/include/dynlink_cuviddec.h	44;"	d
__DEF_IF_HOST	/usr/local/cuda/include/device_atomic_functions.h	206;"	d
__DEF_IF_HOST	/usr/local/cuda/include/device_atomic_functions.h	71;"	d
__DEF_IF_HOST	/usr/local/cuda/include/device_atomic_functions.h	73;"	d
__DEF_IF_HOST	/usr/local/cuda/include/sm_20_atomic_functions.h	71;"	d
__DEF_IF_HOST	/usr/local/cuda/include/sm_20_atomic_functions.h	73;"	d
__DEF_IF_HOST	/usr/local/cuda/include/sm_20_atomic_functions.h	94;"	d
__DEF_IF_HOST	/usr/local/cuda/include/sm_20_intrinsics.h	1501;"	d
__DEF_IF_HOST	/usr/local/cuda/include/sm_20_intrinsics.h	72;"	d
__DEF_IF_HOST	/usr/local/cuda/include/sm_20_intrinsics.h	74;"	d
__DEF_IF_HOST	/usr/local/cuda/include/sm_30_intrinsics.h	234;"	d
__DEF_IF_HOST	/usr/local/cuda/include/sm_30_intrinsics.h	74;"	d
__DEF_IF_HOST	/usr/local/cuda/include/sm_30_intrinsics.h	76;"	d
__DEF_IF_HOST	/usr/local/cuda/include/sm_32_atomic_functions.h	125;"	d
__DEF_IF_HOST	/usr/local/cuda/include/sm_32_atomic_functions.h	73;"	d
__DEF_IF_HOST	/usr/local/cuda/include/sm_32_atomic_functions.h	75;"	d
__DEF_IF_HOST	/usr/local/cuda/include/sm_32_intrinsics.h	74;"	d
__DEF_IF_HOST	/usr/local/cuda/include/sm_32_intrinsics.h	76;"	d
__DEF_IF_HOST	/usr/local/cuda/include/sm_60_atomic_functions.h	533;"	d
__DEF_IF_HOST	/usr/local/cuda/include/sm_60_atomic_functions.h	74;"	d
__DEF_IF_HOST	/usr/local/cuda/include/sm_60_atomic_functions.h	76;"	d
__DEF_IF_HOST	/usr/local/cuda/include/sm_61_intrinsics.h	118;"	d
__DEF_IF_HOST	/usr/local/cuda/include/sm_61_intrinsics.h	74;"	d
__DEF_IF_HOST	/usr/local/cuda/include/sm_61_intrinsics.h	76;"	d
__DEPRECATED__	/usr/local/cuda/include/cuda_fp16.h	992;"	d
__DEPRECATED__	/usr/local/cuda/include/cuda_fp16.h	994;"	d
__DEPRECATED__	/usr/local/cuda/include/cuda_fp16.h	996;"	d
__DEPRECATED__	/usr/local/cuda/include/device_atomic_functions.h	159;"	d
__DEPRECATED__	/usr/local/cuda/include/device_atomic_functions.h	201;"	d
__DEPRECATED__	/usr/local/cuda/include/sm_20_intrinsics.h	1492;"	d
__DEPRECATED__	/usr/local/cuda/include/sm_20_intrinsics.h	78;"	d
__DEPRECATED__	/usr/local/cuda/include/sm_20_intrinsics.h	80;"	d
__DEPRECATED__	/usr/local/cuda/include/sm_20_intrinsics.h	82;"	d
__DEPRECATED__	/usr/local/cuda/include/sm_30_intrinsics.h	222;"	d
__DEPRECATED__	/usr/local/cuda/include/sm_30_intrinsics.h	93;"	d
__DEPRECATED__	/usr/local/cuda/include/sm_30_intrinsics.h	95;"	d
__DEPRECATED__	/usr/local/cuda/include/sm_30_intrinsics.h	97;"	d
__DEVICE_ATOMIC_FUNCTIONS_DECL__	/usr/local/cuda/include/device_atomic_functions.h	207;"	d
__DEVICE_ATOMIC_FUNCTIONS_DECL__	/usr/local/cuda/include/device_atomic_functions.h	54;"	d
__DEVICE_ATOMIC_FUNCTIONS_DECL__	/usr/local/cuda/include/device_atomic_functions.h	56;"	d
__DEVICE_ATOMIC_FUNCTIONS_DECL__	/usr/local/cuda/include/device_atomic_functions.hpp	223;"	d
__DEVICE_ATOMIC_FUNCTIONS_DECL__	/usr/local/cuda/include/device_atomic_functions.hpp	54;"	d
__DEVICE_ATOMIC_FUNCTIONS_DECL__	/usr/local/cuda/include/device_atomic_functions.hpp	56;"	d
__DEVICE_ATOMIC_FUNCTIONS_HPP__	/usr/local/cuda/include/device_atomic_functions.hpp	51;"	d
__DEVICE_ATOMIC_FUNCTIONS_H__	/usr/local/cuda/include/device_atomic_functions.h	51;"	d
__DEVICE_DOUBLE_FUNCTIONS_DECL__	/usr/local/cuda/include/device_double_functions.hpp	180;"	d
__DEVICE_DOUBLE_FUNCTIONS_DECL__	/usr/local/cuda/include/device_double_functions.hpp	187;"	d
__DEVICE_DOUBLE_FUNCTIONS_DECL__	/usr/local/cuda/include/device_double_functions.hpp	189;"	d
__DEVICE_DOUBLE_FUNCTIONS_DECL__	/usr/local/cuda/include/device_double_functions.hpp	191;"	d
__DEVICE_DOUBLE_FUNCTIONS_DECL__	/usr/local/cuda/include/device_double_functions.hpp	222;"	d
__DEVICE_DOUBLE_FUNCTIONS_DECL__	/usr/local/cuda/include/device_double_functions.hpp	68;"	d
__DEVICE_DOUBLE_FUNCTIONS_DECL__	/usr/local/cuda/include/device_double_functions.hpp	70;"	d
__DEVICE_DOUBLE_FUNCTIONS_DECL__	/usr/local/cuda/include/device_double_functions.hpp	72;"	d
__DEVICE_DOUBLE_FUNCTIONS_HPP__	/usr/local/cuda/include/device_double_functions.hpp	51;"	d
__DEVICE_FUNCTIONS_DECLS_H__	/usr/local/cuda/include/device_functions_decls.h	51;"	d
__DEVICE_FUNCTIONS_DECLS__	/usr/local/cuda/include/device_functions_decls.h	12539;"	d
__DEVICE_FUNCTIONS_DECLS__	/usr/local/cuda/include/device_functions_decls.h	54;"	d
__DEVICE_FUNCTIONS_DECLS__	/usr/local/cuda/include/device_functions_decls.h	56;"	d
__DEVICE_FUNCTIONS_DECLS__	/usr/local/cuda/include/device_functions_decls.h	58;"	d
__DEVICE_FUNCTIONS_DECL__	/usr/local/cuda/include/device_functions.hpp	189;"	d
__DEVICE_FUNCTIONS_DECL__	/usr/local/cuda/include/device_functions.hpp	197;"	d
__DEVICE_FUNCTIONS_DECL__	/usr/local/cuda/include/device_functions.hpp	200;"	d
__DEVICE_FUNCTIONS_DECL__	/usr/local/cuda/include/device_functions.hpp	203;"	d
__DEVICE_FUNCTIONS_DECL__	/usr/local/cuda/include/device_functions.hpp	4272;"	d
__DEVICE_FUNCTIONS_DECL__	/usr/local/cuda/include/device_functions.hpp	62;"	d
__DEVICE_FUNCTIONS_DECL__	/usr/local/cuda/include/device_functions.hpp	65;"	d
__DEVICE_FUNCTIONS_DECL__	/usr/local/cuda/include/device_functions.hpp	68;"	d
__DEVICE_FUNCTIONS_HPP__	/usr/local/cuda/include/device_functions.hpp	51;"	d
__DEVICE_FUNCTIONS_STATIC_DECL__	/usr/local/cuda/include/device_functions.hpp	190;"	d
__DEVICE_FUNCTIONS_STATIC_DECL__	/usr/local/cuda/include/device_functions.hpp	198;"	d
__DEVICE_FUNCTIONS_STATIC_DECL__	/usr/local/cuda/include/device_functions.hpp	201;"	d
__DEVICE_FUNCTIONS_STATIC_DECL__	/usr/local/cuda/include/device_functions.hpp	204;"	d
__DEVICE_FUNCTIONS_STATIC_DECL__	/usr/local/cuda/include/device_functions.hpp	4273;"	d
__DEVICE_FUNCTIONS_STATIC_DECL__	/usr/local/cuda/include/device_functions.hpp	63;"	d
__DEVICE_FUNCTIONS_STATIC_DECL__	/usr/local/cuda/include/device_functions.hpp	66;"	d
__DEVICE_FUNCTIONS_STATIC_DECL__	/usr/local/cuda/include/device_functions.hpp	69;"	d
__DEVICE_LAUNCH_PARAMETERS_H__	/usr/local/cuda/include/device_launch_parameters.h	51;"	d
__DEVICE_TYPES_H__	/usr/local/cuda/include/device_types.h	51;"	d
__DRIVER_FUNCTIONS_H__	/usr/local/cuda/include/driver_functions.h	51;"	d
__DRIVER_TYPES_H__	/usr/local/cuda/include/driver_types.h	51;"	d
__HALF2_TO_CUI	/usr/local/cuda/include/cuda_fp16.hpp	1787;"	d
__HALF2_TO_CUI	/usr/local/cuda/include/cuda_fp16.hpp	94;"	d
__HALF2_TO_UI	/usr/local/cuda/include/cuda_fp16.hpp	1786;"	d
__HALF2_TO_UI	/usr/local/cuda/include/cuda_fp16.hpp	93;"	d
__HALF_TO_CUS	/usr/local/cuda/include/cuda_fp16.hpp	1785;"	d
__HALF_TO_CUS	/usr/local/cuda/include/cuda_fp16.hpp	92;"	d
__HALF_TO_US	/usr/local/cuda/include/cuda_fp16.hpp	1784;"	d
__HALF_TO_US	/usr/local/cuda/include/cuda_fp16.hpp	91;"	d
__HELPER_FUNC_LINKAGE	/usr/local/cuda/include/math_functions.hpp	1076;"	d
__HELPER_FUNC_LINKAGE	/usr/local/cuda/include/math_functions.hpp	1079;"	d
__HELPER_FUNC_LINKAGE	/usr/local/cuda/include/math_functions.hpp	1128;"	d
__LDG_PTR	/usr/local/cuda/include/cuda_fp16.hpp	1005;"	d
__LDG_PTR	/usr/local/cuda/include/cuda_fp16.hpp	953;"	d
__LDG_PTR	/usr/local/cuda/include/cuda_fp16.hpp	955;"	d
__LDG_PTR	/usr/local/cuda/include/sm_32_intrinsics.hpp	279;"	d
__LDG_PTR	/usr/local/cuda/include/sm_32_intrinsics.hpp	92;"	d
__LDG_PTR	/usr/local/cuda/include/sm_32_intrinsics.hpp	94;"	d
__LIBRARY_TYPES_H__	/usr/local/cuda/include/library_types.h	51;"	d
__MATH_CONSTANTS_H__	/usr/local/cuda/include/math_constants.h	51;"	d
__MATH_FUNCTIONS_DBL_PTX3_DECL__	/usr/local/cuda/include/math_functions_dbl_ptx3.h	267;"	d
__MATH_FUNCTIONS_DBL_PTX3_DECL__	/usr/local/cuda/include/math_functions_dbl_ptx3.h	54;"	d
__MATH_FUNCTIONS_DBL_PTX3_DECL__	/usr/local/cuda/include/math_functions_dbl_ptx3.h	56;"	d
__MATH_FUNCTIONS_DBL_PTX3_DECL__	/usr/local/cuda/include/math_functions_dbl_ptx3.h	58;"	d
__MATH_FUNCTIONS_DBL_PTX3_DECL__	/usr/local/cuda/include/math_functions_dbl_ptx3.hpp	54;"	d
__MATH_FUNCTIONS_DBL_PTX3_DECL__	/usr/local/cuda/include/math_functions_dbl_ptx3.hpp	555;"	d
__MATH_FUNCTIONS_DBL_PTX3_DECL__	/usr/local/cuda/include/math_functions_dbl_ptx3.hpp	56;"	d
__MATH_FUNCTIONS_DBL_PTX3_DECL__	/usr/local/cuda/include/math_functions_dbl_ptx3.hpp	58;"	d
__MATH_FUNCTIONS_DBL_PTX3_HPP__	/usr/local/cuda/include/math_functions_dbl_ptx3.hpp	51;"	d
__MATH_FUNCTIONS_DBL_PTX3_H__	/usr/local/cuda/include/math_functions_dbl_ptx3.h	51;"	d
__MATH_FUNCTIONS_DECL__	/usr/local/cuda/include/math_functions.hpp	1132;"	d
__MATH_FUNCTIONS_DECL__	/usr/local/cuda/include/math_functions.hpp	1160;"	d
__MATH_FUNCTIONS_DECL__	/usr/local/cuda/include/math_functions.hpp	1162;"	d
__MATH_FUNCTIONS_DECL__	/usr/local/cuda/include/math_functions.hpp	1164;"	d
__MATH_FUNCTIONS_DECL__	/usr/local/cuda/include/math_functions.hpp	1714;"	d
__MATH_FUNCTIONS_DECL__	/usr/local/cuda/include/math_functions.hpp	528;"	d
__MATH_FUNCTIONS_DECL__	/usr/local/cuda/include/math_functions.hpp	530;"	d
__MATH_FUNCTIONS_HPP__	/usr/local/cuda/include/math_functions.hpp	51;"	d
__NVCUVID_H__	/usr/local/cuda/include/dynlink_nvcuvid.h	36;"	d
__NVRTC_H__	/usr/local/cuda/include/nvrtc.h	16;"	d
__NV_BUILTIN_FUNC_DECL__	/usr/local/cuda/include/math_functions.hpp	159;"	d
__NV_BUILTIN_FUNC_DECL__	/usr/local/cuda/include/math_functions.hpp	164;"	d
__NV_WEAK__	/usr/local/cuda/include/cuda_device_runtime_api.h	105;"	d
__NV_WEAK__	/usr/local/cuda/include/cuda_device_runtime_api.h	70;"	d
__NV_WEAK__	/usr/local/cuda/include/cuda_device_runtime_api.h	72;"	d
__OCC_INLINE	/usr/local/cuda/include/cuda_occupancy.h	101;"	d
__OCC_INLINE	/usr/local/cuda/include/cuda_occupancy.h	1638;"	d
__OCC_INLINE	/usr/local/cuda/include/cuda_occupancy.h	97;"	d
__OCC_INLINE	/usr/local/cuda/include/cuda_occupancy.h	99;"	d
__SHUFFLE_HALF2_MACRO	/usr/local/cuda/include/cuda_fp16.hpp	821;"	d
__SHUFFLE_HALF2_MACRO	/usr/local/cuda/include/cuda_fp16.hpp	893;"	d
__SHUFFLE_SYNC_HALF2_MACRO	/usr/local/cuda/include/cuda_fp16.hpp	828;"	d
__SHUFFLE_SYNC_HALF2_MACRO	/usr/local/cuda/include/cuda_fp16.hpp	894;"	d
__SM_20_ATOMIC_FUNCTIONS_DECL__	/usr/local/cuda/include/sm_20_atomic_functions.h	54;"	d
__SM_20_ATOMIC_FUNCTIONS_DECL__	/usr/local/cuda/include/sm_20_atomic_functions.h	56;"	d
__SM_20_ATOMIC_FUNCTIONS_DECL__	/usr/local/cuda/include/sm_20_atomic_functions.h	95;"	d
__SM_20_ATOMIC_FUNCTIONS_DECL__	/usr/local/cuda/include/sm_20_atomic_functions.hpp	54;"	d
__SM_20_ATOMIC_FUNCTIONS_DECL__	/usr/local/cuda/include/sm_20_atomic_functions.hpp	56;"	d
__SM_20_ATOMIC_FUNCTIONS_DECL__	/usr/local/cuda/include/sm_20_atomic_functions.hpp	83;"	d
__SM_20_ATOMIC_FUNCTIONS_HPP__	/usr/local/cuda/include/sm_20_atomic_functions.hpp	51;"	d
__SM_20_ATOMIC_FUNCTIONS_H__	/usr/local/cuda/include/sm_20_atomic_functions.h	51;"	d
__SM_20_INTRINSICS_DECL__	/usr/local/cuda/include/sm_20_intrinsics.h	1502;"	d
__SM_20_INTRINSICS_DECL__	/usr/local/cuda/include/sm_20_intrinsics.h	54;"	d
__SM_20_INTRINSICS_DECL__	/usr/local/cuda/include/sm_20_intrinsics.h	56;"	d
__SM_20_INTRINSICS_DECL__	/usr/local/cuda/include/sm_20_intrinsics.hpp	118;"	d
__SM_20_INTRINSICS_DECL__	/usr/local/cuda/include/sm_20_intrinsics.hpp	54;"	d
__SM_20_INTRINSICS_DECL__	/usr/local/cuda/include/sm_20_intrinsics.hpp	56;"	d
__SM_20_INTRINSICS_HPP__	/usr/local/cuda/include/sm_20_intrinsics.hpp	51;"	d
__SM_20_INTRINSICS_H__	/usr/local/cuda/include/sm_20_intrinsics.h	51;"	d
__SM_30_INTRINSICS_DECL__	/usr/local/cuda/include/sm_30_intrinsics.h	235;"	d
__SM_30_INTRINSICS_DECL__	/usr/local/cuda/include/sm_30_intrinsics.h	54;"	d
__SM_30_INTRINSICS_DECL__	/usr/local/cuda/include/sm_30_intrinsics.h	56;"	d
__SM_30_INTRINSICS_DECL__	/usr/local/cuda/include/sm_30_intrinsics.hpp	54;"	d
__SM_30_INTRINSICS_DECL__	/usr/local/cuda/include/sm_30_intrinsics.hpp	56;"	d
__SM_30_INTRINSICS_DECL__	/usr/local/cuda/include/sm_30_intrinsics.hpp	597;"	d
__SM_30_INTRINSICS_HPP__	/usr/local/cuda/include/sm_30_intrinsics.hpp	51;"	d
__SM_30_INTRINSICS_H__	/usr/local/cuda/include/sm_30_intrinsics.h	51;"	d
__SM_32_ATOMIC_FUNCTIONS_DECL__	/usr/local/cuda/include/sm_32_atomic_functions.h	126;"	d
__SM_32_ATOMIC_FUNCTIONS_DECL__	/usr/local/cuda/include/sm_32_atomic_functions.h	54;"	d
__SM_32_ATOMIC_FUNCTIONS_DECL__	/usr/local/cuda/include/sm_32_atomic_functions.h	56;"	d
__SM_32_ATOMIC_FUNCTIONS_DECL__	/usr/local/cuda/include/sm_32_atomic_functions.hpp	132;"	d
__SM_32_ATOMIC_FUNCTIONS_DECL__	/usr/local/cuda/include/sm_32_atomic_functions.hpp	54;"	d
__SM_32_ATOMIC_FUNCTIONS_DECL__	/usr/local/cuda/include/sm_32_atomic_functions.hpp	56;"	d
__SM_32_ATOMIC_FUNCTIONS_HPP__	/usr/local/cuda/include/sm_32_atomic_functions.hpp	51;"	d
__SM_32_ATOMIC_FUNCTIONS_H__	/usr/local/cuda/include/sm_32_atomic_functions.h	51;"	d
__SM_32_INTRINSICS_DECL__	/usr/local/cuda/include/sm_32_intrinsics.h	248;"	d
__SM_32_INTRINSICS_DECL__	/usr/local/cuda/include/sm_32_intrinsics.h	54;"	d
__SM_32_INTRINSICS_DECL__	/usr/local/cuda/include/sm_32_intrinsics.h	56;"	d
__SM_32_INTRINSICS_DECL__	/usr/local/cuda/include/sm_32_intrinsics.hpp	318;"	d
__SM_32_INTRINSICS_DECL__	/usr/local/cuda/include/sm_32_intrinsics.hpp	54;"	d
__SM_32_INTRINSICS_DECL__	/usr/local/cuda/include/sm_32_intrinsics.hpp	56;"	d
__SM_32_INTRINSICS_HPP__	/usr/local/cuda/include/sm_32_intrinsics.hpp	51;"	d
__SM_32_INTRINSICS_H__	/usr/local/cuda/include/sm_32_intrinsics.h	51;"	d
__SM_35_ATOMIC_FUNCTIONS_H__	/usr/local/cuda/include/sm_35_atomic_functions.h	51;"	d
__SM_35_INTRINSICS_H__	/usr/local/cuda/include/sm_35_intrinsics.h	101;"	d
__SM_60_ATOMIC_FUNCTIONS_DECL__	/usr/local/cuda/include/sm_60_atomic_functions.h	532;"	d
__SM_60_ATOMIC_FUNCTIONS_DECL__	/usr/local/cuda/include/sm_60_atomic_functions.h	55;"	d
__SM_60_ATOMIC_FUNCTIONS_DECL__	/usr/local/cuda/include/sm_60_atomic_functions.h	57;"	d
__SM_60_ATOMIC_FUNCTIONS_DECL__	/usr/local/cuda/include/sm_60_atomic_functions.hpp	525;"	d
__SM_60_ATOMIC_FUNCTIONS_DECL__	/usr/local/cuda/include/sm_60_atomic_functions.hpp	54;"	d
__SM_60_ATOMIC_FUNCTIONS_DECL__	/usr/local/cuda/include/sm_60_atomic_functions.hpp	56;"	d
__SM_60_ATOMIC_FUNCTIONS_HPP__	/usr/local/cuda/include/sm_60_atomic_functions.hpp	51;"	d
__SM_60_ATOMIC_FUNCTIONS_H__	/usr/local/cuda/include/sm_60_atomic_functions.h	51;"	d
__SM_61_INTRINSICS_DECL__	/usr/local/cuda/include/sm_61_intrinsics.h	119;"	d
__SM_61_INTRINSICS_DECL__	/usr/local/cuda/include/sm_61_intrinsics.h	54;"	d
__SM_61_INTRINSICS_DECL__	/usr/local/cuda/include/sm_61_intrinsics.h	56;"	d
__SM_61_INTRINSICS_DECL__	/usr/local/cuda/include/sm_61_intrinsics.hpp	160;"	d
__SM_61_INTRINSICS_DECL__	/usr/local/cuda/include/sm_61_intrinsics.hpp	54;"	d
__SM_61_INTRINSICS_DECL__	/usr/local/cuda/include/sm_61_intrinsics.hpp	56;"	d
__SM_61_INTRINSICS_HPP__	/usr/local/cuda/include/sm_61_intrinsics.hpp	51;"	d
__SM_61_INTRINSICS_H__	/usr/local/cuda/include/sm_61_intrinsics.h	51;"	d
__SPEC_CASE	/usr/local/cuda/include/cuda_fp16.hpp	1329;"	d
__SPEC_CASE	/usr/local/cuda/include/cuda_fp16.hpp	1730;"	d
__SPEC_CASE2	/usr/local/cuda/include/cuda_fp16.hpp	1323;"	d
__SPEC_CASE2	/usr/local/cuda/include/cuda_fp16.hpp	1729;"	d
__STORAGE__	/usr/local/cuda/include/device_launch_parameters.h	58;"	d
__STORAGE__	/usr/local/cuda/include/device_launch_parameters.h	61;"	d
__STORAGE__	/usr/local/cuda/include/device_launch_parameters.h	77;"	d
__SURFACE_FUNCTIONS_H__	/usr/local/cuda/include/surface_functions.h	51;"	d
__SURFACE_INDIRECT_FUNCTIONS_H__	/usr/local/cuda/include/surface_indirect_functions.h	52;"	d
__SURFACE_TYPES_H__	/usr/local/cuda/include/surface_types.h	51;"	d
__TERNARY_OP_HALF2_MACRO	/usr/local/cuda/include/cuda_fp16.hpp	1219;"	d
__TERNARY_OP_HALF2_MACRO	/usr/local/cuda/include/cuda_fp16.hpp	1233;"	d
__TERNARY_OP_HALF2_MACRO	/usr/local/cuda/include/cuda_fp16.hpp	1297;"	d
__TERNARY_OP_HALF_MACRO	/usr/local/cuda/include/cuda_fp16.hpp	1283;"	d
__TEXTURE_FETCH_FUNCTIONS_H__	/usr/local/cuda/include/texture_fetch_functions.h	51;"	d
__TEXTURE_INDIRECT_FUNCTIONS_H__	/usr/local/cuda/include/texture_indirect_functions.h	52;"	d
__TEXTURE_TYPES_H__	/usr/local/cuda/include/texture_types.h	51;"	d
__THROW	/usr/local/cuda/include/device_functions_decls.h	62;"	d
__THROW	/usr/local/cuda/include/device_functions_decls.h	63;"	d
__THROW	/usr/local/cuda/include/math_functions.hpp	1168;"	d
__THROW	/usr/local/cuda/include/math_functions.hpp	1169;"	d
__USE_MINGW_ANSI_STDIO	src/gemm_fpga.c	1;"	d	file:
__VECTOR_FUNCTIONS_DECL__	/usr/local/cuda/include/cuda_fp16.h	101;"	d
__VECTOR_FUNCTIONS_DECL__	/usr/local/cuda/include/cuda_fp16.h	112;"	d
__VECTOR_FUNCTIONS_DECL__	/usr/local/cuda/include/cuda_fp16.h	98;"	d
__VECTOR_FUNCTIONS_DECL__	/usr/local/cuda/include/cuda_fp16.hpp	264;"	d
__VECTOR_FUNCTIONS_DECL__	/usr/local/cuda/include/cuda_fp16.hpp	61;"	d
__VECTOR_FUNCTIONS_DECL__	/usr/local/cuda/include/cuda_fp16.hpp	65;"	d
__VECTOR_FUNCTIONS_DECL__	/usr/local/cuda/include/vector_functions.h	171;"	d
__VECTOR_FUNCTIONS_DECL__	/usr/local/cuda/include/vector_functions.h	64;"	d
__VECTOR_FUNCTIONS_DECL__	/usr/local/cuda/include/vector_functions.h	66;"	d
__VECTOR_FUNCTIONS_DECL__	/usr/local/cuda/include/vector_functions.hpp	315;"	d
__VECTOR_FUNCTIONS_DECL__	/usr/local/cuda/include/vector_functions.hpp	64;"	d
__VECTOR_FUNCTIONS_DECL__	/usr/local/cuda/include/vector_functions.hpp	66;"	d
__VECTOR_FUNCTIONS_HPP__	/usr/local/cuda/include/vector_functions.hpp	51;"	d
__VECTOR_FUNCTIONS_H__	/usr/local/cuda/include/vector_functions.h	51;"	d
__VECTOR_TYPES_H__	/usr/local/cuda/include/vector_types.h	51;"	d
__WSB_DEPRECATION_MESSAGE	/usr/local/cuda/include/cuda_fp16.h	1000;"	d
__WSB_DEPRECATION_MESSAGE	/usr/local/cuda/include/cuda_fp16.h	1003;"	d
__WSB_DEPRECATION_MESSAGE	/usr/local/cuda/include/device_atomic_functions.h	167;"	d
__WSB_DEPRECATION_MESSAGE	/usr/local/cuda/include/device_atomic_functions.h	202;"	d
__WSB_DEPRECATION_MESSAGE	/usr/local/cuda/include/sm_20_intrinsics.h	1493;"	d
__WSB_DEPRECATION_MESSAGE	/usr/local/cuda/include/sm_20_intrinsics.h	86;"	d
__WSB_DEPRECATION_MESSAGE	/usr/local/cuda/include/sm_20_intrinsics.h	89;"	d
__WSB_DEPRECATION_MESSAGE	/usr/local/cuda/include/sm_30_intrinsics.h	101;"	d
__WSB_DEPRECATION_MESSAGE	/usr/local/cuda/include/sm_30_intrinsics.h	104;"	d
__WSB_DEPRECATION_MESSAGE	/usr/local/cuda/include/sm_30_intrinsics.h	223;"	d
__activemask	/usr/local/cuda/include/sm_30_intrinsics.hpp	/^unsigned __activemask() {$/;"	f
__align__	/usr/local/cuda/include/fatbinary.h	42;"	d
__align__	/usr/local/cuda/include/fatbinary.h	44;"	d
__all	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ int __all(int a)$/;"	f
__all_sync	/usr/local/cuda/include/sm_30_intrinsics.hpp	/^int __all_sync(unsigned mask, int pred) {$/;"	f
__any	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ int __any(int a)$/;"	f
__any_sync	/usr/local/cuda/include/sm_30_intrinsics.hpp	/^int __any_sync(unsigned mask, int pred) {$/;"	f
__ballot	/usr/local/cuda/include/device_functions.hpp	/^__ballot(int a)$/;"	f
__ballot_sync	/usr/local/cuda/include/sm_30_intrinsics.hpp	/^unsigned __ballot_sync(unsigned mask, int pred) {$/;"	f
__barrier_sync	/usr/local/cuda/include/sm_30_intrinsics.hpp	/^void  __barrier_sync(unsigned id) {$/;"	f
__barrier_sync_count	/usr/local/cuda/include/sm_30_intrinsics.hpp	/^void  __barrier_sync_count(unsigned id, unsigned cnt) {$/;"	f
__brev	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ unsigned int __brev(unsigned int x)$/;"	f
__brevll	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ unsigned long long __brevll(unsigned long long x)$/;"	f
__brkpt	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ void __brkpt(int)$/;"	f
__byte_perm	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ unsigned int __byte_perm(unsigned int a,$/;"	f
__clz	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ int __clz(int x)$/;"	f
__clzll	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ int __clzll(long long x)$/;"	f
__cr_copysign	/usr/local/cuda/include/curand_poisson.h	/^QUALIFIERS double __cr_copysign(double a, double b)$/;"	f
__cr_exp	/usr/local/cuda/include/curand_poisson.h	/^QUALIFIERS float __cr_exp (float a)$/;"	f
__cr_isinf	/usr/local/cuda/include/curand_poisson.h	/^QUALIFIERS int __cr_isinf(double a)$/;"	f
__cr_isnan	/usr/local/cuda/include/curand_poisson.h	/^QUALIFIERS int __cr_isnan(double a)$/;"	f
__cr_lgamma	/usr/local/cuda/include/curand_poisson.h	/^QUALIFIERS double __cr_lgamma(double a)$/;"	f
__cr_lgamma_integer	/usr/local/cuda/include/curand_poisson.h	/^QUALIFIERS double __cr_lgamma_integer(int a)$/;"	f
__cr_lgamma_table	/usr/local/cuda/include/curand_poisson.h	/^static __constant__ double __cr_lgamma_table [] = { 0.000000000000000000e-1,$/;"	v
__cr_log	/usr/local/cuda/include/curand_poisson.h	/^QUALIFIERS float __cr_log (float a)$/;"	f
__cr_pgammainc	/usr/local/cuda/include/curand_poisson.h	/^QUALIFIERS float __cr_pgammainc (float a, float x)$/;"	f
__cr_pgammaincinv	/usr/local/cuda/include/curand_poisson.h	/^QUALIFIERS float __cr_pgammaincinv (float a, float y)$/;"	f
__cr_rcp	/usr/local/cuda/include/curand_poisson.h	/^QUALIFIERS float __cr_rcp (float a)$/;"	f
__cr_rint	/usr/local/cuda/include/curand_poisson.h	/^QUALIFIERS double __cr_rint(double a)$/;"	f
__cr_rsqrt	/usr/local/cuda/include/curand_poisson.h	/^QUALIFIERS float __cr_rsqrt(float a) $/;"	f
__cudaGet_blockDim	/usr/local/cuda/include/device_launch_parameters.h	99;"	d
__cudaGet_blockIdx	/usr/local/cuda/include/device_launch_parameters.h	92;"	d
__cudaGet_gridDim	/usr/local/cuda/include/device_launch_parameters.h	106;"	d
__cudaGet_threadIdx	/usr/local/cuda/include/device_launch_parameters.h	85;"	d
__cudaGet_warpSize	/usr/local/cuda/include/device_launch_parameters.h	113;"	d
__cudaOccupancyB2DHelper	/usr/local/cuda/include/cuda_runtime.h	/^  inline __host__ CUDART_DEVICE __cudaOccupancyB2DHelper(size_t n_) : n(n_) {}$/;"	f	class:__cudaOccupancyB2DHelper
__cudaOccupancyB2DHelper	/usr/local/cuda/include/cuda_runtime.h	/^class __cudaOccupancyB2DHelper {$/;"	c
__cudaReserved	/usr/local/cuda/include/texture_types.h	/^    int                          __cudaReserved[15];$/;"	m	struct:textureReference
__cuda_INT_MAX	/usr/local/cuda/include/math_functions.hpp	1146;"	d
__cuda_builtin_vector_align8	/usr/local/cuda/include/vector_types.h	423;"	d
__cuda_builtin_vector_align8	/usr/local/cuda/include/vector_types.h	73;"	d
__cuda_builtin_vector_align8	/usr/local/cuda/include/vector_types.h	85;"	d
__cuda_cuda_h__	/usr/local/cuda/include/cuda.h	51;"	d
__cuda_cuda_h__	/usr/local/cuda/include/dynlink_cuda_cuda.h	13;"	d
__cuda_gnu_arm_ice_workaround	/usr/local/cuda/include/vector_types.h	/^    float x; float y; float __cuda_gnu_arm_ice_workaround[0];$/;"	m	struct:float2
__cuda_h__	/usr/local/cuda/include/dynlink_cuda.h	13;"	d
__cuda_occupancy_h__	/usr/local/cuda/include/cuda_occupancy.h	89;"	d
__curand_find_trailing_zero	/usr/local/cuda/include/curand_kernel.h	/^QUALIFIERS int __curand_find_trailing_zero(XT x)$/;"	f
__curand_generate_skipahead_matrix_xor	/usr/local/cuda/include/curand_kernel.h	/^QUALIFIERS void __curand_generate_skipahead_matrix_xor(unsigned int matrix[])$/;"	f
__curand_hilouint32AsDouble	/usr/local/cuda/include/curand_kernel.h	/^QUALIFIERS double __curand_hilouint32AsDouble (unsigned int hi, unsigned int lo)$/;"	f
__curand_matcopy	/usr/local/cuda/include/curand_kernel.h	/^QUALIFIERS void __curand_matcopy(unsigned int *matrix, unsigned int *matrixA, int n)$/;"	f
__curand_matidentity	/usr/local/cuda/include/curand_kernel.h	/^QUALIFIERS void __curand_matidentity(unsigned int *matrix, int n)$/;"	f
__curand_matmat	/usr/local/cuda/include/curand_kernel.h	/^QUALIFIERS void __curand_matmat(unsigned int *matrixA, unsigned int *matrixB, int n)$/;"	f
__curand_matpow	/usr/local/cuda/include/curand_kernel.h	/^QUALIFIERS void __curand_matpow(unsigned int *matrix, unsigned int *matrixA, $/;"	f
__curand_matvec	/usr/local/cuda/include/curand_kernel.h	/^QUALIFIERS void __curand_matvec(unsigned int *vector, unsigned int *matrix, $/;"	f
__curand_uint32AsFloat	/usr/local/cuda/include/curand_kernel.h	/^QUALIFIERS float __curand_uint32AsFloat (unsigned int i)$/;"	f
__curand_uint32_as_float	/usr/local/cuda/include/curand_kernel.h	/^QUALIFIERS float __curand_uint32_as_float(unsigned int x)$/;"	f
__curand_veccopy	/usr/local/cuda/include/curand_kernel.h	/^QUALIFIERS void __curand_veccopy(unsigned int *vector, unsigned int *vectorA, int n)$/;"	f
__dAtomicAdd	/usr/local/cuda/include/device_functions.hpp	/^double __dAtomicAdd(double *p, double val)$/;"	f
__dAtomicAdd_block	/usr/local/cuda/include/device_functions.hpp	/^double __dAtomicAdd_block(double *p, double val)$/;"	f
__dAtomicAdd_system	/usr/local/cuda/include/device_functions.hpp	/^double __dAtomicAdd_system(double *p, double val)$/;"	f
__dadd_rd	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ double __dadd_rd(double x, double y)$/;"	f
__dadd_rn	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ double __dadd_rn(double x, double y)$/;"	f
__dadd_ru	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ double __dadd_ru(double x, double y)$/;"	f
__dadd_rz	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ double __dadd_rz(double x, double y)$/;"	f
__ddiv_rd	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ double __ddiv_rd(double x, double y)$/;"	f
__ddiv_rn	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ double __ddiv_rn(double x, double y)$/;"	f
__ddiv_ru	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ double __ddiv_ru(double x, double y)$/;"	f
__ddiv_rz	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ double __ddiv_rz(double x, double y)$/;"	f
__dmul_rd	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ double __dmul_rd(double x, double y)$/;"	f
__dmul_rn	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ double __dmul_rn(double x, double y)$/;"	f
__dmul_ru	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ double __dmul_ru(double x, double y)$/;"	f
__dmul_rz	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ double __dmul_rz(double x, double y)$/;"	f
__double2float_rd	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ float __double2float_rd(double d)$/;"	f
__double2float_rn	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ float __double2float_rn(double d)$/;"	f
__double2float_ru	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ float __double2float_ru(double d)$/;"	f
__double2float_rz	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ float __double2float_rz(double d)$/;"	f
__double2hiint	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ int __double2hiint(double d)$/;"	f
__double2int_rd	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ int __double2int_rd(double d)$/;"	f
__double2int_rn	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ int __double2int_rn(double d)$/;"	f
__double2int_ru	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ int __double2int_ru(double d)$/;"	f
__double2int_rz	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ int __double2int_rz(double d)$/;"	f
__double2ll_rd	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ long long __double2ll_rd(double f)$/;"	f
__double2ll_rn	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ long long __double2ll_rn(double f)$/;"	f
__double2ll_ru	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ long long __double2ll_ru(double f)$/;"	f
__double2ll_rz	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ long long __double2ll_rz(double f)$/;"	f
__double2loint	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ int __double2loint(double d)$/;"	f
__double2uint_rd	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ unsigned int __double2uint_rd(double d)$/;"	f
__double2uint_rn	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ unsigned int __double2uint_rn(double d)$/;"	f
__double2uint_ru	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ unsigned int __double2uint_ru(double d)$/;"	f
__double2uint_rz	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ unsigned int __double2uint_rz(double d)$/;"	f
__double2ull_rd	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ unsigned long long __double2ull_rd(double f)$/;"	f
__double2ull_rn	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ unsigned long long __double2ull_rn(double f)$/;"	f
__double2ull_ru	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ unsigned long long __double2ull_ru(double f)$/;"	f
__double2ull_rz	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ unsigned long long __double2ull_rz(double f)$/;"	f
__double_as_longlong	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ long long  __double_as_longlong (double x)$/;"	f
__dp2a_hi	/usr/local/cuda/include/sm_61_intrinsics.hpp	/^__SM_61_INTRINSICS_DECL__ int __dp2a_hi(int srcA, int srcB, int c) {$/;"	f
__dp2a_hi	/usr/local/cuda/include/sm_61_intrinsics.hpp	/^__SM_61_INTRINSICS_DECL__ int __dp2a_hi(short2 srcA, char4 srcB, int c) {$/;"	f
__dp2a_hi	/usr/local/cuda/include/sm_61_intrinsics.hpp	/^__SM_61_INTRINSICS_DECL__ unsigned int __dp2a_hi(unsigned int srcA, unsigned int srcB, unsigned int c) {$/;"	f
__dp2a_hi	/usr/local/cuda/include/sm_61_intrinsics.hpp	/^__SM_61_INTRINSICS_DECL__ unsigned int __dp2a_hi(ushort2 srcA, uchar4 srcB, unsigned int c) {$/;"	f
__dp2a_lo	/usr/local/cuda/include/sm_61_intrinsics.hpp	/^__SM_61_INTRINSICS_DECL__ int __dp2a_lo(int srcA, int srcB, int c) {$/;"	f
__dp2a_lo	/usr/local/cuda/include/sm_61_intrinsics.hpp	/^__SM_61_INTRINSICS_DECL__ int __dp2a_lo(short2 srcA, char4 srcB, int c) {$/;"	f
__dp2a_lo	/usr/local/cuda/include/sm_61_intrinsics.hpp	/^__SM_61_INTRINSICS_DECL__ unsigned int __dp2a_lo(unsigned int srcA, unsigned int srcB, unsigned int c) {$/;"	f
__dp2a_lo	/usr/local/cuda/include/sm_61_intrinsics.hpp	/^__SM_61_INTRINSICS_DECL__ unsigned int __dp2a_lo(ushort2 srcA, uchar4 srcB, unsigned int c) {$/;"	f
__dp4a	/usr/local/cuda/include/sm_61_intrinsics.hpp	/^__SM_61_INTRINSICS_DECL__ int __dp4a(char4 srcA, char4 srcB, int c) {$/;"	f
__dp4a	/usr/local/cuda/include/sm_61_intrinsics.hpp	/^__SM_61_INTRINSICS_DECL__ int __dp4a(int srcA, int srcB, int c) {$/;"	f
__dp4a	/usr/local/cuda/include/sm_61_intrinsics.hpp	/^__SM_61_INTRINSICS_DECL__ unsigned int __dp4a(uchar4 srcA, uchar4 srcB, unsigned int c) {$/;"	f
__dp4a	/usr/local/cuda/include/sm_61_intrinsics.hpp	/^__SM_61_INTRINSICS_DECL__ unsigned int __dp4a(unsigned int srcA, unsigned int srcB, unsigned int c) {$/;"	f
__drcp_rd	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ double __drcp_rd(double x)$/;"	f
__drcp_rn	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ double __drcp_rn(double x)$/;"	f
__drcp_ru	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ double __drcp_ru(double x)$/;"	f
__drcp_rz	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ double __drcp_rz(double x)$/;"	f
__dsqrt_rd	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ double __dsqrt_rd(double x)$/;"	f
__dsqrt_rn	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ double __dsqrt_rn(double x)$/;"	f
__dsqrt_ru	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ double __dsqrt_ru(double x)$/;"	f
__dsqrt_rz	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ double __dsqrt_rz(double x)$/;"	f
__dsub_rd	/usr/local/cuda/include/device_double_functions.hpp	/^__DEVICE_DOUBLE_FUNCTIONS_DECL__ double __dsub_rd(double a, double b)$/;"	f
__dsub_rn	/usr/local/cuda/include/device_double_functions.hpp	/^__DEVICE_DOUBLE_FUNCTIONS_DECL__ double __dsub_rn(double a, double b)$/;"	f
__dsub_ru	/usr/local/cuda/include/device_double_functions.hpp	/^__DEVICE_DOUBLE_FUNCTIONS_DECL__ double __dsub_ru(double a, double b)$/;"	f
__dsub_rz	/usr/local/cuda/include/device_double_functions.hpp	/^__DEVICE_DOUBLE_FUNCTIONS_DECL__ double __dsub_rz(double a, double b)$/;"	f
__dv	/usr/local/cuda/include/cuda_runtime_api.h	195;"	d
__dv	/usr/local/cuda/include/cuda_runtime_api.h	200;"	d
__dv	/usr/local/cuda/include/cuda_runtime_api.h	7420;"	d
__fAtomicAdd	/usr/local/cuda/include/device_functions.hpp	/^float __fAtomicAdd(float *p, float val)$/;"	f
__fAtomicAdd_block	/usr/local/cuda/include/device_functions.hpp	/^float __fAtomicAdd_block(float *p, float val)$/;"	f
__fAtomicAdd_system	/usr/local/cuda/include/device_functions.hpp	/^float __fAtomicAdd_system(float *p, float val)$/;"	f
__fAtomicExch	/usr/local/cuda/include/device_functions.hpp	/^float __fAtomicExch(float *p, float val)$/;"	f
__fAtomicExch_block	/usr/local/cuda/include/device_functions.hpp	/^float __fAtomicExch_block(float *p, float val)$/;"	f
__fAtomicExch_system	/usr/local/cuda/include/device_functions.hpp	/^float __fAtomicExch_system(float *p, float val)$/;"	f
__fadd_rd	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ float __fadd_rd(float x, float y)$/;"	f
__fadd_rn	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ float __fadd_rn(float x, float y)$/;"	f
__fadd_ru	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ float __fadd_ru(float x, float y)$/;"	f
__fadd_rz	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ float __fadd_rz(float x, float y)$/;"	f
__fatBinC_Wrapper_t	/usr/local/cuda/include/fatBinaryCtl.h	/^} __fatBinC_Wrapper_t;$/;"	t	typeref:struct:__anon134
__fdiv_rd	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ float __fdiv_rd(float x, float y)$/;"	f
__fdiv_rn	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ float __fdiv_rn(float x, float y)$/;"	f
__fdiv_ru	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ float __fdiv_ru(float x, float y)$/;"	f
__fdiv_rz	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ float __fdiv_rz(float x, float y)$/;"	f
__fdividef	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ float __fdividef(float x, float y)$/;"	f
__ffs	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ int __ffs(int a)$/;"	f
__ffsll	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ int __ffsll(long long int a)$/;"	f
__finitel	/usr/local/cuda/include/math_functions_dbl_ptx3.hpp	/^__MATH_FUNCTIONS_DBL_PTX3_DECL__ int __finitel(\/* we do not support long double yet, hence double *\/double a)$/;"	f
__float22half2_rn	/usr/local/cuda/include/cuda_fp16.hpp	/^__CUDA_FP16_DECL__ __half2 __float22half2_rn(const float2 f)$/;"	f
__float2half	/usr/local/cuda/include/cuda_fp16.hpp	/^__CUDA_FP16_DECL__ __half __float2half(const float f) $/;"	f
__float2half2_rn	/usr/local/cuda/include/cuda_fp16.hpp	/^__CUDA_FP16_DECL__ __half2 __float2half2_rn(const float f)$/;"	f
__float2half_rd	/usr/local/cuda/include/cuda_fp16.hpp	/^__CUDA_FP16_DECL__ __half __float2half_rd(const float f)$/;"	f
__float2half_rn	/usr/local/cuda/include/cuda_fp16.hpp	/^__CUDA_FP16_DECL__ __half __float2half_rn(const float f)$/;"	f
__float2half_rn	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ unsigned short __float2half_rn(float f)$/;"	f
__float2half_ru	/usr/local/cuda/include/cuda_fp16.hpp	/^__CUDA_FP16_DECL__ __half __float2half_ru(const float f)$/;"	f
__float2half_rz	/usr/local/cuda/include/cuda_fp16.hpp	/^__CUDA_FP16_DECL__ __half __float2half_rz(const float f)$/;"	f
__float2int_rd	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ int __float2int_rd(float in)$/;"	f
__float2int_rn	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ int __float2int_rn(float in)$/;"	f
__float2int_ru	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ int __float2int_ru(float in)$/;"	f
__float2int_rz	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ int __float2int_rz(float in)$/;"	f
__float2ll_rd	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ long long __float2ll_rd(float f)$/;"	f
__float2ll_rn	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ long long __float2ll_rn(float f)$/;"	f
__float2ll_ru	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ long long __float2ll_ru(float f)$/;"	f
__float2ll_rz	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ long long __float2ll_rz(float f)$/;"	f
__float2uint_rd	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ unsigned int __float2uint_rd(float in)$/;"	f
__float2uint_rn	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ unsigned int __float2uint_rn(float in)$/;"	f
__float2uint_ru	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ unsigned int __float2uint_ru(float in)$/;"	f
__float2uint_rz	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ unsigned int __float2uint_rz(float in)$/;"	f
__float2ull_rd	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ unsigned long long __float2ull_rd(float f)$/;"	f
__float2ull_rn	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ unsigned long long __float2ull_rn(float f)$/;"	f
__float2ull_ru	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ unsigned long long __float2ull_ru(float f)$/;"	f
__float2ull_rz	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ unsigned long long __float2ull_rz(float f)$/;"	f
__float_as_int	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ int __float_as_int(float x)$/;"	f
__float_as_uint	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ unsigned int __float_as_uint(float x)$/;"	f
__float_simpl_cosf	/usr/local/cuda/include/cuda_fp16.hpp	/^static __device__ __forceinline__ float __float_simpl_cosf(float a)$/;"	f
__float_simpl_sinf	/usr/local/cuda/include/cuda_fp16.hpp	/^static __device__ __forceinline__ float __float_simpl_sinf(float a)$/;"	f
__floats2half2_rn	/usr/local/cuda/include/cuda_fp16.hpp	/^__CUDA_FP16_DECL__ __half2 __floats2half2_rn(const float f1, const float f2)$/;"	f
__fma_rd	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ double __fma_rd(double x, double y, double z)$/;"	f
__fma_rn	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ double __fma_rn(double x, double y, double z)$/;"	f
__fma_ru	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ double __fma_ru(double x, double y, double z)$/;"	f
__fma_rz	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ double __fma_rz(double x, double y, double z)$/;"	f
__fmaf_ieee_rd	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ float __fmaf_ieee_rd(float x, float y, float z)$/;"	f
__fmaf_ieee_rn	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ float __fmaf_ieee_rn(float x, float y, float z)$/;"	f
__fmaf_ieee_ru	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ float __fmaf_ieee_ru(float x, float y, float z)$/;"	f
__fmaf_ieee_rz	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ float __fmaf_ieee_rz(float x, float y, float z)$/;"	f
__fmaf_rd	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ float __fmaf_rd(float x, float y, float z)$/;"	f
__fmaf_rn	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ float __fmaf_rn(float x, float y, float z)$/;"	f
__fmaf_ru	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ float __fmaf_ru(float x, float y, float z)$/;"	f
__fmaf_rz	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ float __fmaf_rz(float x, float y, float z)$/;"	f
__fmul_rd	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ float __fmul_rd(float x, float y)$/;"	f
__fmul_rn	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ float __fmul_rn(float x, float y)$/;"	f
__fmul_ru	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ float __fmul_ru(float x, float y)$/;"	f
__fmul_rz	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ float __fmul_rz(float x, float y)$/;"	f
__fns	/usr/local/cuda/include/sm_30_intrinsics.hpp	/^unsigned __fns(unsigned mask, unsigned base, int offset) {$/;"	f
__frcp_rd	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ float __frcp_rd(float x)$/;"	f
__frcp_rn	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ float __frcp_rn(float x)$/;"	f
__frcp_ru	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ float __frcp_ru(float x)$/;"	f
__frcp_rz	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ float __frcp_rz(float x)$/;"	f
__frsqrt_rn	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ float __frsqrt_rn (float a)$/;"	f
__fsqrt_rd	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ float __fsqrt_rd(float x)$/;"	f
__fsqrt_rn	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ float __fsqrt_rn(float x)$/;"	f
__fsqrt_ru	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ float __fsqrt_ru(float x)$/;"	f
__fsqrt_rz	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ float __fsqrt_rz(float x)$/;"	f
__fsub_rd	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ float __fsub_rd (float a, float b)$/;"	f
__fsub_rn	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ float __fsub_rn (float a, float b)$/;"	f
__fsub_ru	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ float __fsub_ru (float a, float b)$/;"	f
__fsub_rz	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ float __fsub_rz (float a, float b)$/;"	f
__func__	/usr/local/cuda/include/math_functions.hpp	/^__func__(double __host_stirling_poly(double a))$/;"	f
__func__	/usr/local/cuda/include/math_functions.hpp	/^__func__(double __host_tgamma_kernel(double a))$/;"	f
__func__	/usr/local/cuda/include/math_functions.hpp	/^__func__(double __host_tgamma_stirling(double a))$/;"	f
__func__	/usr/local/cuda/include/math_functions.hpp	/^__func__(double acosh(double a))$/;"	f
__func__	/usr/local/cuda/include/math_functions.hpp	/^__func__(double asinh(double a))$/;"	f
__func__	/usr/local/cuda/include/math_functions.hpp	/^__func__(double atanh(double a))$/;"	f
__func__	/usr/local/cuda/include/math_functions.hpp	/^__func__(double cbrt(double a))$/;"	f
__func__	/usr/local/cuda/include/math_functions.hpp	/^__func__(double copysign(double a, double b))$/;"	f
__func__	/usr/local/cuda/include/math_functions.hpp	/^__func__(double cospi(double a))$/;"	f
__func__	/usr/local/cuda/include/math_functions.hpp	/^__func__(double erf(double a))$/;"	f
__func__	/usr/local/cuda/include/math_functions.hpp	/^__func__(double erfc(double a))$/;"	f
__func__	/usr/local/cuda/include/math_functions.hpp	/^__func__(double erfcinv(double a))$/;"	f
__func__	/usr/local/cuda/include/math_functions.hpp	/^__func__(double erfcx(double a))$/;"	f
__func__	/usr/local/cuda/include/math_functions.hpp	/^__func__(double erfinv(double a))$/;"	f
__func__	/usr/local/cuda/include/math_functions.hpp	/^__func__(double exp10(double a))$/;"	f
__func__	/usr/local/cuda/include/math_functions.hpp	/^__func__(double exp2(double a))$/;"	f
__func__	/usr/local/cuda/include/math_functions.hpp	/^__func__(double expm1(double a))$/;"	f
__func__	/usr/local/cuda/include/math_functions.hpp	/^__func__(double fdim(double a, double b))$/;"	f
__func__	/usr/local/cuda/include/math_functions.hpp	/^__func__(double fma (double a, double b, double c))$/;"	f
__func__	/usr/local/cuda/include/math_functions.hpp	/^__func__(double fmax(double a, double b))$/;"	f
__func__	/usr/local/cuda/include/math_functions.hpp	/^__func__(double fmin(double a, double b))$/;"	f
__func__	/usr/local/cuda/include/math_functions.hpp	/^__func__(double lgamma(double a))$/;"	f
__func__	/usr/local/cuda/include/math_functions.hpp	/^__func__(double log1p(double a))$/;"	f
__func__	/usr/local/cuda/include/math_functions.hpp	/^__func__(double log2(double a))$/;"	f
__func__	/usr/local/cuda/include/math_functions.hpp	/^__func__(double logb(double a))$/;"	f
__func__	/usr/local/cuda/include/math_functions.hpp	/^__func__(double nan(const char *tagp))$/;"	f
__func__	/usr/local/cuda/include/math_functions.hpp	/^__func__(double nearbyint(double a))$/;"	f
__func__	/usr/local/cuda/include/math_functions.hpp	/^__func__(double nextafter(double a, double b))$/;"	f
__func__	/usr/local/cuda/include/math_functions.hpp	/^__func__(double normcdf(double a))$/;"	f
__func__	/usr/local/cuda/include/math_functions.hpp	/^__func__(double normcdfinv(double a))$/;"	f
__func__	/usr/local/cuda/include/math_functions.hpp	/^__func__(double rcbrt(double a))$/;"	f
__func__	/usr/local/cuda/include/math_functions.hpp	/^__func__(double remainder(double a, double b))$/;"	f
__func__	/usr/local/cuda/include/math_functions.hpp	/^__func__(double remquo(double a, double b, int *quo))$/;"	f
__func__	/usr/local/cuda/include/math_functions.hpp	/^__func__(double rint(double a))$/;"	f
__func__	/usr/local/cuda/include/math_functions.hpp	/^__func__(double round(double a))$/;"	f
__func__	/usr/local/cuda/include/math_functions.hpp	/^__func__(double rsqrt(double a))$/;"	f
__func__	/usr/local/cuda/include/math_functions.hpp	/^__func__(double scalbln(double a, long int b))$/;"	f
__func__	/usr/local/cuda/include/math_functions.hpp	/^__func__(double scalbn(double a, int b))$/;"	f
__func__	/usr/local/cuda/include/math_functions.hpp	/^__func__(double sinpi(double a))$/;"	f
__func__	/usr/local/cuda/include/math_functions.hpp	/^__func__(double tgamma(double a))$/;"	f
__func__	/usr/local/cuda/include/math_functions.hpp	/^__func__(double trunc(double a))$/;"	f
__func__	/usr/local/cuda/include/math_functions.hpp	/^__func__(float acoshf(float a))$/;"	f
__func__	/usr/local/cuda/include/math_functions.hpp	/^__func__(float asinhf(float a))$/;"	f
__func__	/usr/local/cuda/include/math_functions.hpp	/^__func__(float atanhf(float a))$/;"	f
__func__	/usr/local/cuda/include/math_functions.hpp	/^__func__(float cbrtf(float a))$/;"	f
__func__	/usr/local/cuda/include/math_functions.hpp	/^__func__(float copysignf(float a, float b))$/;"	f
__func__	/usr/local/cuda/include/math_functions.hpp	/^__func__(float cospif(float a))$/;"	f
__func__	/usr/local/cuda/include/math_functions.hpp	/^__func__(float erfcf(float a))$/;"	f
__func__	/usr/local/cuda/include/math_functions.hpp	/^__func__(float erfcinvf(float a))$/;"	f
__func__	/usr/local/cuda/include/math_functions.hpp	/^__func__(float erfcxf(float a))$/;"	f
__func__	/usr/local/cuda/include/math_functions.hpp	/^__func__(float erff(float a))$/;"	f
__func__	/usr/local/cuda/include/math_functions.hpp	/^__func__(float erfinvf(float a))$/;"	f
__func__	/usr/local/cuda/include/math_functions.hpp	/^__func__(float exp10f(float a))$/;"	f
__func__	/usr/local/cuda/include/math_functions.hpp	/^__func__(float exp2f(float a))$/;"	f
__func__	/usr/local/cuda/include/math_functions.hpp	/^__func__(float expm1f(float a))$/;"	f
__func__	/usr/local/cuda/include/math_functions.hpp	/^__func__(float fdimf(float a, float b))$/;"	f
__func__	/usr/local/cuda/include/math_functions.hpp	/^__func__(float fmaf(float a, float b, float c))$/;"	f
__func__	/usr/local/cuda/include/math_functions.hpp	/^__func__(float fmaxf(float a, float b))$/;"	f
__func__	/usr/local/cuda/include/math_functions.hpp	/^__func__(float fminf(float a, float b))$/;"	f
__func__	/usr/local/cuda/include/math_functions.hpp	/^__func__(float lgammaf(float a))$/;"	f
__func__	/usr/local/cuda/include/math_functions.hpp	/^__func__(float log1pf(float a))$/;"	f
__func__	/usr/local/cuda/include/math_functions.hpp	/^__func__(float log2f(float a))$/;"	f
__func__	/usr/local/cuda/include/math_functions.hpp	/^__func__(float logbf(float a))$/;"	f
__func__	/usr/local/cuda/include/math_functions.hpp	/^__func__(float nanf(const char *tagp))$/;"	f
__func__	/usr/local/cuda/include/math_functions.hpp	/^__func__(float nearbyintf(float a))$/;"	f
__func__	/usr/local/cuda/include/math_functions.hpp	/^__func__(float nextafterf(float a, float b))$/;"	f
__func__	/usr/local/cuda/include/math_functions.hpp	/^__func__(float normcdff(float a))$/;"	f
__func__	/usr/local/cuda/include/math_functions.hpp	/^__func__(float normcdfinvf(float a))$/;"	f
__func__	/usr/local/cuda/include/math_functions.hpp	/^__func__(float rcbrtf(float a))$/;"	f
__func__	/usr/local/cuda/include/math_functions.hpp	/^__func__(float remainderf(float a, float b))$/;"	f
__func__	/usr/local/cuda/include/math_functions.hpp	/^__func__(float remquof(float a, float b, int *quo))$/;"	f
__func__	/usr/local/cuda/include/math_functions.hpp	/^__func__(float rintf(float a))$/;"	f
__func__	/usr/local/cuda/include/math_functions.hpp	/^__func__(float roundf(float a))$/;"	f
__func__	/usr/local/cuda/include/math_functions.hpp	/^__func__(float rsqrtf(float a))$/;"	f
__func__	/usr/local/cuda/include/math_functions.hpp	/^__func__(float scalblnf(float a, long int b))$/;"	f
__func__	/usr/local/cuda/include/math_functions.hpp	/^__func__(float scalbnf(float a, int b))$/;"	f
__func__	/usr/local/cuda/include/math_functions.hpp	/^__func__(float sinpif(float a))$/;"	f
__func__	/usr/local/cuda/include/math_functions.hpp	/^__func__(float tgammaf(float a))$/;"	f
__func__	/usr/local/cuda/include/math_functions.hpp	/^__func__(float truncf(float a))$/;"	f
__func__	/usr/local/cuda/include/math_functions.hpp	/^__func__(int __finite(double a))$/;"	f
__func__	/usr/local/cuda/include/math_functions.hpp	/^__func__(int __finitef(float a))$/;"	f
__func__	/usr/local/cuda/include/math_functions.hpp	/^__func__(int __finitel(long double a))$/;"	f
__func__	/usr/local/cuda/include/math_functions.hpp	/^__func__(int __isinf(double a))$/;"	f
__func__	/usr/local/cuda/include/math_functions.hpp	/^__func__(int __isinff(float a))$/;"	f
__func__	/usr/local/cuda/include/math_functions.hpp	/^__func__(int __isinfl(long double a))$/;"	f
__func__	/usr/local/cuda/include/math_functions.hpp	/^__func__(int __isnan(double a))$/;"	f
__func__	/usr/local/cuda/include/math_functions.hpp	/^__func__(int __isnanf(float a))$/;"	f
__func__	/usr/local/cuda/include/math_functions.hpp	/^__func__(int __isnanl(long double a))$/;"	f
__func__	/usr/local/cuda/include/math_functions.hpp	/^__func__(int __signbit(double a))$/;"	f
__func__	/usr/local/cuda/include/math_functions.hpp	/^__func__(int __signbitf(float a))$/;"	f
__func__	/usr/local/cuda/include/math_functions.hpp	/^__func__(int __signbitl(long double a))$/;"	f
__func__	/usr/local/cuda/include/math_functions.hpp	/^__func__(int ilogb(double a))$/;"	f
__func__	/usr/local/cuda/include/math_functions.hpp	/^__func__(int ilogbf(float a))$/;"	f
__func__	/usr/local/cuda/include/math_functions.hpp	/^__func__(long int lrint(double a))$/;"	f
__func__	/usr/local/cuda/include/math_functions.hpp	/^__func__(long int lrintf(float a))$/;"	f
__func__	/usr/local/cuda/include/math_functions.hpp	/^__func__(long int lround(double a))$/;"	f
__func__	/usr/local/cuda/include/math_functions.hpp	/^__func__(long int lroundf(float a))$/;"	f
__func__	/usr/local/cuda/include/math_functions.hpp	/^__func__(long long int llrint(double a))$/;"	f
__func__	/usr/local/cuda/include/math_functions.hpp	/^__func__(long long int llrintf(float a))$/;"	f
__func__	/usr/local/cuda/include/math_functions.hpp	/^__func__(long long int llround(double a))$/;"	f
__func__	/usr/local/cuda/include/math_functions.hpp	/^__func__(long long int llroundf(float a))$/;"	f
__func__	/usr/local/cuda/include/math_functions.hpp	/^__func__(unsigned long long int __internal_host_nan_kernel(const char *s))$/;"	f
__func__	/usr/local/cuda/include/math_functions.hpp	/^__func__(void sincos(double a, double *sptr, double *cptr))$/;"	f
__func__	/usr/local/cuda/include/math_functions.hpp	/^__func__(void sincosf(float a, float *sptr, float *cptr))$/;"	f
__func__	/usr/local/cuda/include/math_functions.hpp	/^__func__(void sincospi(double a, double *sptr, double *cptr))$/;"	f
__func__	/usr/local/cuda/include/math_functions.hpp	/^__func__(void sincospif(float a, float *sptr, float *cptr))$/;"	f
__funnelshift_l	/usr/local/cuda/include/sm_32_intrinsics.hpp	/^__SM_32_INTRINSICS_DECL__ unsigned int __funnelshift_l(unsigned int lo, unsigned int hi, unsigned int shift)$/;"	f
__funnelshift_lc	/usr/local/cuda/include/sm_32_intrinsics.hpp	/^__SM_32_INTRINSICS_DECL__ unsigned int __funnelshift_lc(unsigned int lo, unsigned int hi, unsigned int shift)$/;"	f
__funnelshift_r	/usr/local/cuda/include/sm_32_intrinsics.hpp	/^__SM_32_INTRINSICS_DECL__ unsigned int __funnelshift_r(unsigned int lo, unsigned int hi, unsigned int shift)$/;"	f
__funnelshift_rc	/usr/local/cuda/include/sm_32_intrinsics.hpp	/^__SM_32_INTRINSICS_DECL__ unsigned int __funnelshift_rc(unsigned int lo, unsigned int hi, unsigned int shift)$/;"	f
__get__cr_lgamma_table_host	/usr/local/cuda/include/curand_kernel.h	/^__host__ static inline double *__get__cr_lgamma_table_host(void) {$/;"	f
__get_mrg32k3a_matrix	/usr/local/cuda/include/curand_kernel.h	/^__device__ static inline double *__get_mrg32k3a_matrix(int n)$/;"	f
__get_mrg32k3a_matrix_host	/usr/local/cuda/include/curand_kernel.h	/^__host__ static inline double *__get_mrg32k3a_matrix_host(int n)$/;"	f
__get_precalculated_matrix	/usr/local/cuda/include/curand_kernel.h	/^__device__ static inline unsigned int *__get_precalculated_matrix(int n)$/;"	f
__get_precalculated_matrix_host	/usr/local/cuda/include/curand_kernel.h	/^__host__ static inline unsigned int *__get_precalculated_matrix_host(int n)$/;"	f
__h2div	/usr/local/cuda/include/cuda_fp16.hpp	/^__CUDA_FP16_DECL__ __half2 __h2div(__half2 a, __half2 b) {$/;"	f
__hadd	/usr/local/cuda/include/cuda_fp16.hpp	/^__CUDA_FP16_DECL__ __half __hadd(const __half a, const __half b)$/;"	f
__hadd	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ int __hadd(int a, int b)$/;"	f
__hadd2	/usr/local/cuda/include/cuda_fp16.hpp	/^__CUDA_FP16_DECL__ __half2 __hadd2(const __half2 a, const __half2 b)$/;"	f
__hadd2_sat	/usr/local/cuda/include/cuda_fp16.hpp	/^__CUDA_FP16_DECL__ __half2 __hadd2_sat(const __half2 a, const __half2 b)$/;"	f
__hadd_sat	/usr/local/cuda/include/cuda_fp16.hpp	/^__CUDA_FP16_DECL__ __half __hadd_sat(const __half a, const __half b)$/;"	f
__half22float2	/usr/local/cuda/include/cuda_fp16.hpp	/^__CUDA_FP16_DECL__ float2 __half22float2(const __half2 l)$/;"	f
__half2float	/usr/local/cuda/include/cuda_fp16.hpp	/^__CUDA_FP16_DECL__ float __half2float(const __half h)$/;"	f
__half2float	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ float __half2float(unsigned short h)$/;"	f
__half2half2	/usr/local/cuda/include/cuda_fp16.hpp	/^__CUDA_FP16_DECL__ __half2 __half2half2(const __half lh)$/;"	f
__half2int_rd	/usr/local/cuda/include/cuda_fp16.hpp	/^__CUDA_FP16_DECL__ int __half2int_rd(__half h)$/;"	f
__half2int_rn	/usr/local/cuda/include/cuda_fp16.hpp	/^__CUDA_FP16_DECL__ int __half2int_rn(__half h)$/;"	f
__half2int_ru	/usr/local/cuda/include/cuda_fp16.hpp	/^__CUDA_FP16_DECL__ int __half2int_ru(__half h)$/;"	f
__half2int_rz	/usr/local/cuda/include/cuda_fp16.hpp	/^__CUDA_FP16_DECL__ int __half2int_rz(__half h)$/;"	f
__half2ll_rd	/usr/local/cuda/include/cuda_fp16.hpp	/^__CUDA_FP16_DECL__ long long int __half2ll_rd(__half h)$/;"	f
__half2ll_rn	/usr/local/cuda/include/cuda_fp16.hpp	/^__CUDA_FP16_DECL__ long long int __half2ll_rn(__half h)$/;"	f
__half2ll_ru	/usr/local/cuda/include/cuda_fp16.hpp	/^__CUDA_FP16_DECL__ long long int __half2ll_ru(__half h)$/;"	f
__half2ll_rz	/usr/local/cuda/include/cuda_fp16.hpp	/^__CUDA_FP16_DECL__ long long int __half2ll_rz(__half h)$/;"	f
__half2short_rd	/usr/local/cuda/include/cuda_fp16.hpp	/^__CUDA_FP16_DECL__ short int __half2short_rd(__half h)$/;"	f
__half2short_rn	/usr/local/cuda/include/cuda_fp16.hpp	/^__CUDA_FP16_DECL__ short int __half2short_rn(__half h)$/;"	f
__half2short_ru	/usr/local/cuda/include/cuda_fp16.hpp	/^__CUDA_FP16_DECL__ short int __half2short_ru(__half h)$/;"	f
__half2short_rz	/usr/local/cuda/include/cuda_fp16.hpp	/^__CUDA_FP16_DECL__ short int __half2short_rz(__half h)$/;"	f
__half2uint_rd	/usr/local/cuda/include/cuda_fp16.hpp	/^__CUDA_FP16_DECL__ unsigned int __half2uint_rd(__half h)$/;"	f
__half2uint_rn	/usr/local/cuda/include/cuda_fp16.hpp	/^__CUDA_FP16_DECL__ unsigned int __half2uint_rn(__half h)$/;"	f
__half2uint_ru	/usr/local/cuda/include/cuda_fp16.hpp	/^__CUDA_FP16_DECL__ unsigned int __half2uint_ru(__half h)$/;"	f
__half2uint_rz	/usr/local/cuda/include/cuda_fp16.hpp	/^__CUDA_FP16_DECL__ unsigned int __half2uint_rz(__half h)$/;"	f
__half2ull_rd	/usr/local/cuda/include/cuda_fp16.hpp	/^__CUDA_FP16_DECL__ unsigned long long int __half2ull_rd(__half h)$/;"	f
__half2ull_rn	/usr/local/cuda/include/cuda_fp16.hpp	/^__CUDA_FP16_DECL__ unsigned long long int __half2ull_rn(__half h)$/;"	f
__half2ull_ru	/usr/local/cuda/include/cuda_fp16.hpp	/^__CUDA_FP16_DECL__ unsigned long long int __half2ull_ru(__half h)$/;"	f
__half2ull_rz	/usr/local/cuda/include/cuda_fp16.hpp	/^__CUDA_FP16_DECL__ unsigned long long int __half2ull_rz(__half h)$/;"	f
__half2ushort_rd	/usr/local/cuda/include/cuda_fp16.hpp	/^__CUDA_FP16_DECL__ unsigned short int __half2ushort_rd(__half h)$/;"	f
__half2ushort_rn	/usr/local/cuda/include/cuda_fp16.hpp	/^__CUDA_FP16_DECL__ unsigned short int __half2ushort_rn(__half h)$/;"	f
__half2ushort_ru	/usr/local/cuda/include/cuda_fp16.hpp	/^__CUDA_FP16_DECL__ unsigned short int __half2ushort_ru(__half h)$/;"	f
__half2ushort_rz	/usr/local/cuda/include/cuda_fp16.hpp	/^__CUDA_FP16_DECL__ unsigned short int __half2ushort_rz(__half h)$/;"	f
__half_as_short	/usr/local/cuda/include/cuda_fp16.hpp	/^__CUDA_FP16_DECL__ short int __half_as_short(const __half h)$/;"	f
__half_as_ushort	/usr/local/cuda/include/cuda_fp16.hpp	/^__CUDA_FP16_DECL__ unsigned short int __half_as_ushort(const __half h)$/;"	f
__halves2half2	/usr/local/cuda/include/cuda_fp16.hpp	/^__CUDA_FP16_DECL__ __half2 __halves2half2(const __half l, const __half h)$/;"	f
__hbeq2	/usr/local/cuda/include/cuda_fp16.hpp	/^__CUDA_FP16_DECL__ bool __hbeq2(const __half2 a, const __half2 b)$/;"	f
__hbequ2	/usr/local/cuda/include/cuda_fp16.hpp	/^__CUDA_FP16_DECL__ bool __hbequ2(const __half2 a, const __half2 b)$/;"	f
__hbge2	/usr/local/cuda/include/cuda_fp16.hpp	/^__CUDA_FP16_DECL__ bool __hbge2(const __half2 a, const __half2 b)$/;"	f
__hbgeu2	/usr/local/cuda/include/cuda_fp16.hpp	/^__CUDA_FP16_DECL__ bool __hbgeu2(const __half2 a, const __half2 b)$/;"	f
__hbgt2	/usr/local/cuda/include/cuda_fp16.hpp	/^__CUDA_FP16_DECL__ bool __hbgt2(const __half2 a, const __half2 b)$/;"	f
__hbgtu2	/usr/local/cuda/include/cuda_fp16.hpp	/^__CUDA_FP16_DECL__ bool __hbgtu2(const __half2 a, const __half2 b)$/;"	f
__hble2	/usr/local/cuda/include/cuda_fp16.hpp	/^__CUDA_FP16_DECL__ bool __hble2(const __half2 a, const __half2 b)$/;"	f
__hbleu2	/usr/local/cuda/include/cuda_fp16.hpp	/^__CUDA_FP16_DECL__ bool __hbleu2(const __half2 a, const __half2 b)$/;"	f
__hblt2	/usr/local/cuda/include/cuda_fp16.hpp	/^__CUDA_FP16_DECL__ bool __hblt2(const __half2 a, const __half2 b)$/;"	f
__hbltu2	/usr/local/cuda/include/cuda_fp16.hpp	/^__CUDA_FP16_DECL__ bool __hbltu2(const __half2 a, const __half2 b)$/;"	f
__hbne2	/usr/local/cuda/include/cuda_fp16.hpp	/^__CUDA_FP16_DECL__ bool __hbne2(const __half2 a, const __half2 b)$/;"	f
__hbneu2	/usr/local/cuda/include/cuda_fp16.hpp	/^__CUDA_FP16_DECL__ bool __hbneu2(const __half2 a, const __half2 b)$/;"	f
__hcos_internal	/usr/local/cuda/include/cuda_fp16.hpp	/^__CUDA_FP16_DECL__ __half __hcos_internal(const __half a) {$/;"	f
__hdiv	/usr/local/cuda/include/cuda_fp16.hpp	/^__CUDA_FP16_DECL__ __half __hdiv(__half a, __half b) {$/;"	f
__heq	/usr/local/cuda/include/cuda_fp16.hpp	/^__CUDA_FP16_DECL__ bool __heq(const __half a, const __half b)$/;"	f
__heq2	/usr/local/cuda/include/cuda_fp16.hpp	/^__CUDA_FP16_DECL__ __half2 __heq2(const __half2 a, const __half2 b)$/;"	f
__hequ	/usr/local/cuda/include/cuda_fp16.hpp	/^__CUDA_FP16_DECL__ bool __hequ(const __half a, const __half b)$/;"	f
__hequ2	/usr/local/cuda/include/cuda_fp16.hpp	/^__CUDA_FP16_DECL__ __half2 __hequ2(const __half2 a, const __half2 b)$/;"	f
__hfma	/usr/local/cuda/include/cuda_fp16.hpp	/^__CUDA_FP16_DECL__ __half __hfma(const __half a, const __half b, const __half c)$/;"	f
__hfma2	/usr/local/cuda/include/cuda_fp16.hpp	/^__CUDA_FP16_DECL__ __half2 __hfma2(const __half2 a, const __half2 b, const __half2 c)$/;"	f
__hfma2_sat	/usr/local/cuda/include/cuda_fp16.hpp	/^__CUDA_FP16_DECL__ __half2 __hfma2_sat(const __half2 a, const __half2 b, const __half2 c)$/;"	f
__hfma_sat	/usr/local/cuda/include/cuda_fp16.hpp	/^__CUDA_FP16_DECL__ __half __hfma_sat(const __half a, const __half b, const __half c)$/;"	f
__hge	/usr/local/cuda/include/cuda_fp16.hpp	/^__CUDA_FP16_DECL__ bool __hge(const __half a, const __half b)$/;"	f
__hge2	/usr/local/cuda/include/cuda_fp16.hpp	/^__CUDA_FP16_DECL__ __half2 __hge2(const __half2 a, const __half2 b)$/;"	f
__hgeu	/usr/local/cuda/include/cuda_fp16.hpp	/^__CUDA_FP16_DECL__ bool __hgeu(const __half a, const __half b)$/;"	f
__hgeu2	/usr/local/cuda/include/cuda_fp16.hpp	/^__CUDA_FP16_DECL__ __half2 __hgeu2(const __half2 a, const __half2 b)$/;"	f
__hgt	/usr/local/cuda/include/cuda_fp16.hpp	/^__CUDA_FP16_DECL__ bool __hgt(const __half a, const __half b)$/;"	f
__hgt2	/usr/local/cuda/include/cuda_fp16.hpp	/^__CUDA_FP16_DECL__ __half2 __hgt2(const __half2 a, const __half2 b)$/;"	f
__hgtu	/usr/local/cuda/include/cuda_fp16.hpp	/^__CUDA_FP16_DECL__ bool __hgtu(const __half a, const __half b)$/;"	f
__hgtu2	/usr/local/cuda/include/cuda_fp16.hpp	/^__CUDA_FP16_DECL__ __half2 __hgtu2(const __half2 a, const __half2 b)$/;"	f
__high2float	/usr/local/cuda/include/cuda_fp16.hpp	/^__CUDA_FP16_DECL__ float __high2float(const __half2 l)$/;"	f
__high2half	/usr/local/cuda/include/cuda_fp16.hpp	/^__CUDA_FP16_DECL__ __half __high2half(const __half2 h)$/;"	f
__high2half2	/usr/local/cuda/include/cuda_fp16.hpp	/^__CUDA_FP16_DECL__ __half2 __high2half2(const __half2 l)$/;"	f
__highs2half2	/usr/local/cuda/include/cuda_fp16.hpp	/^__CUDA_FP16_DECL__ __half2 __highs2half2(const __half2 l, const __half2 h)$/;"	f
__hiloint2double	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ double __hiloint2double(int a, int b)$/;"	f
__hisinf	/usr/local/cuda/include/cuda_fp16.hpp	/^__CUDA_FP16_DECL__ int __hisinf(const __half a)$/;"	f
__hisnan	/usr/local/cuda/include/cuda_fp16.hpp	/^__CUDA_FP16_DECL__ bool __hisnan(const __half a)$/;"	f
__hisnan2	/usr/local/cuda/include/cuda_fp16.hpp	/^__CUDA_FP16_DECL__ __half2 __hisnan2(const __half2 a)$/;"	f
__hle	/usr/local/cuda/include/cuda_fp16.hpp	/^__CUDA_FP16_DECL__ bool __hle(const __half a, const __half b)$/;"	f
__hle2	/usr/local/cuda/include/cuda_fp16.hpp	/^__CUDA_FP16_DECL__ __half2 __hle2(const __half2 a, const __half2 b)$/;"	f
__hleu	/usr/local/cuda/include/cuda_fp16.hpp	/^__CUDA_FP16_DECL__ bool __hleu(const __half a, const __half b)$/;"	f
__hleu2	/usr/local/cuda/include/cuda_fp16.hpp	/^__CUDA_FP16_DECL__ __half2 __hleu2(const __half2 a, const __half2 b)$/;"	f
__hlt	/usr/local/cuda/include/cuda_fp16.hpp	/^__CUDA_FP16_DECL__ bool __hlt(const __half a, const __half b)$/;"	f
__hlt2	/usr/local/cuda/include/cuda_fp16.hpp	/^__CUDA_FP16_DECL__ __half2 __hlt2(const __half2 a, const __half2 b)$/;"	f
__hltu	/usr/local/cuda/include/cuda_fp16.hpp	/^__CUDA_FP16_DECL__ bool __hltu(const __half a, const __half b)$/;"	f
__hltu2	/usr/local/cuda/include/cuda_fp16.hpp	/^__CUDA_FP16_DECL__ __half2 __hltu2(const __half2 a, const __half2 b)$/;"	f
__hmul	/usr/local/cuda/include/cuda_fp16.hpp	/^__CUDA_FP16_DECL__ __half __hmul(const __half a, const __half b)$/;"	f
__hmul2	/usr/local/cuda/include/cuda_fp16.hpp	/^__CUDA_FP16_DECL__ __half2 __hmul2(const __half2 a, const __half2 b)$/;"	f
__hmul2_sat	/usr/local/cuda/include/cuda_fp16.hpp	/^__CUDA_FP16_DECL__ __half2 __hmul2_sat(const __half2 a, const __half2 b)$/;"	f
__hmul_sat	/usr/local/cuda/include/cuda_fp16.hpp	/^__CUDA_FP16_DECL__ __half __hmul_sat(const __half a, const __half b)$/;"	f
__hne	/usr/local/cuda/include/cuda_fp16.hpp	/^__CUDA_FP16_DECL__ bool __hne(const __half a, const __half b)$/;"	f
__hne2	/usr/local/cuda/include/cuda_fp16.hpp	/^__CUDA_FP16_DECL__ __half2 __hne2(const __half2 a, const __half2 b)$/;"	f
__hneg	/usr/local/cuda/include/cuda_fp16.hpp	/^__CUDA_FP16_DECL__ __half __hneg(const __half a)$/;"	f
__hneg2	/usr/local/cuda/include/cuda_fp16.hpp	/^__CUDA_FP16_DECL__ __half2 __hneg2(const __half2 a)$/;"	f
__hneu	/usr/local/cuda/include/cuda_fp16.hpp	/^__CUDA_FP16_DECL__ bool __hneu(const __half a, const __half b)$/;"	f
__hneu2	/usr/local/cuda/include/cuda_fp16.hpp	/^__CUDA_FP16_DECL__ __half2 __hneu2(const __half2 a, const __half2 b)$/;"	f
__hsin_internal	/usr/local/cuda/include/cuda_fp16.hpp	/^__CUDA_FP16_DECL__ __half __hsin_internal(const __half a) {$/;"	f
__hsub	/usr/local/cuda/include/cuda_fp16.hpp	/^__CUDA_FP16_DECL__ __half __hsub(const __half a, const __half b)$/;"	f
__hsub2	/usr/local/cuda/include/cuda_fp16.hpp	/^__CUDA_FP16_DECL__ __half2 __hsub2(const __half2 a, const __half2 b)$/;"	f
__hsub2_sat	/usr/local/cuda/include/cuda_fp16.hpp	/^__CUDA_FP16_DECL__ __half2 __hsub2_sat(const __half2 a, const __half2 b)$/;"	f
__hsub_sat	/usr/local/cuda/include/cuda_fp16.hpp	/^__CUDA_FP16_DECL__ __half __hsub_sat(const __half a, const __half b)$/;"	f
__iAtomicAdd	/usr/local/cuda/include/device_functions.hpp	/^int __iAtomicAdd(int *p, int val)$/;"	f
__iAtomicAdd_block	/usr/local/cuda/include/device_functions.hpp	/^int __iAtomicAdd_block(int *p, int val)$/;"	f
__iAtomicAdd_system	/usr/local/cuda/include/device_functions.hpp	/^int __iAtomicAdd_system(int *p, int val)$/;"	f
__iAtomicAnd	/usr/local/cuda/include/device_functions.hpp	/^int __iAtomicAnd(int *p, int val)$/;"	f
__iAtomicAnd_block	/usr/local/cuda/include/device_functions.hpp	/^int __iAtomicAnd_block(int *p, int val)$/;"	f
__iAtomicAnd_system	/usr/local/cuda/include/device_functions.hpp	/^int __iAtomicAnd_system(int *p, int val)$/;"	f
__iAtomicCAS	/usr/local/cuda/include/device_functions.hpp	/^int __iAtomicCAS(int *p, int compare, int val)$/;"	f
__iAtomicCAS_block	/usr/local/cuda/include/device_functions.hpp	/^int __iAtomicCAS_block(int *p, int compare, int val)$/;"	f
__iAtomicCAS_system	/usr/local/cuda/include/device_functions.hpp	/^int __iAtomicCAS_system(int *p, int compare, int val)$/;"	f
__iAtomicExch	/usr/local/cuda/include/device_functions.hpp	/^int __iAtomicExch(int *p, int val)$/;"	f
__iAtomicExch_block	/usr/local/cuda/include/device_functions.hpp	/^int __iAtomicExch_block(int *p, int val)$/;"	f
__iAtomicExch_system	/usr/local/cuda/include/device_functions.hpp	/^int __iAtomicExch_system(int *p, int val)$/;"	f
__iAtomicMax	/usr/local/cuda/include/device_functions.hpp	/^int __iAtomicMax(int *p, int val)$/;"	f
__iAtomicMax_block	/usr/local/cuda/include/device_functions.hpp	/^int __iAtomicMax_block(int *p, int val)$/;"	f
__iAtomicMax_system	/usr/local/cuda/include/device_functions.hpp	/^int __iAtomicMax_system(int *p, int val)$/;"	f
__iAtomicMin	/usr/local/cuda/include/device_functions.hpp	/^int __iAtomicMin(int *p, int val)$/;"	f
__iAtomicMin_block	/usr/local/cuda/include/device_functions.hpp	/^int __iAtomicMin_block(int *p, int val)$/;"	f
__iAtomicMin_system	/usr/local/cuda/include/device_functions.hpp	/^int __iAtomicMin_system(int *p, int val)$/;"	f
__iAtomicOr	/usr/local/cuda/include/device_functions.hpp	/^int __iAtomicOr(int *p, int val)$/;"	f
__iAtomicOr_block	/usr/local/cuda/include/device_functions.hpp	/^int __iAtomicOr_block(int *p, int val)$/;"	f
__iAtomicOr_system	/usr/local/cuda/include/device_functions.hpp	/^int __iAtomicOr_system(int *p, int val)$/;"	f
__iAtomicXor	/usr/local/cuda/include/device_functions.hpp	/^int __iAtomicXor(int *p, int val)$/;"	f
__iAtomicXor_block	/usr/local/cuda/include/device_functions.hpp	/^int __iAtomicXor_block(int *p, int val)$/;"	f
__iAtomicXor_system	/usr/local/cuda/include/device_functions.hpp	/^int __iAtomicXor_system(int *p, int val)$/;"	f
__illAtomicMax	/usr/local/cuda/include/device_functions.hpp	/^long long __illAtomicMax(long long *p, long long val)$/;"	f
__illAtomicMax_block	/usr/local/cuda/include/device_functions.hpp	/^long long __illAtomicMax_block(long long *p, long long val)$/;"	f
__illAtomicMax_system	/usr/local/cuda/include/device_functions.hpp	/^long long __illAtomicMax_system(long long *p, long long val)$/;"	f
__illAtomicMin	/usr/local/cuda/include/device_functions.hpp	/^long long __illAtomicMin(long long *p, long long val)$/;"	f
__illAtomicMin_block	/usr/local/cuda/include/device_functions.hpp	/^long long __illAtomicMin_block(long long *p, long long val)$/;"	f
__illAtomicMin_system	/usr/local/cuda/include/device_functions.hpp	/^long long __illAtomicMin_system(long long *p, long long val)$/;"	f
__int2double_rn	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ double __int2double_rn(int i)$/;"	f
__int2float_rd	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ float __int2float_rd(int in)$/;"	f
__int2float_rn	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ float __int2float_rn(int in)$/;"	f
__int2float_ru	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ float __int2float_ru(int in)$/;"	f
__int2float_rz	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ float __int2float_rz(int in)$/;"	f
__int2half_rd	/usr/local/cuda/include/cuda_fp16.hpp	/^__CUDA_FP16_DECL__ __half __int2half_rd(int i)$/;"	f
__int2half_rn	/usr/local/cuda/include/cuda_fp16.hpp	/^__CUDA_FP16_DECL__ __half __int2half_rn(int i)$/;"	f
__int2half_ru	/usr/local/cuda/include/cuda_fp16.hpp	/^__CUDA_FP16_DECL__ __half __int2half_ru(int i)$/;"	f
__int2half_rz	/usr/local/cuda/include/cuda_fp16.hpp	/^__CUDA_FP16_DECL__ __half __int2half_rz(int i)$/;"	f
__int_as_float	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ float __int_as_float(int x)$/;"	f
__internal	/usr/local/cuda/include/cooperative_groups.h	/^namespace __internal {$/;"	n
__internal	/usr/local/cuda/include/cooperative_groups_helpers.h	/^namespace __internal {$/;"	n
__internal_sin_cos_kernel	/usr/local/cuda/include/cuda_fp16.hpp	/^static __device__ __forceinline__ float __internal_sin_cos_kernel(float x, int i)$/;"	f
__internal_trig_reduction_kernel	/usr/local/cuda/include/cuda_fp16.hpp	/^static __device__ __forceinline__ float __internal_trig_reduction_kernel(float a, int *quadrant)$/;"	f
__isGlobal	/usr/local/cuda/include/sm_20_intrinsics.hpp	/^__SM_20_INTRINSICS_DECL__ unsigned int __isGlobal(const void *ptr)$/;"	f
__isfinite	/usr/local/cuda/include/math_functions_dbl_ptx3.hpp	/^__MATH_FUNCTIONS_DBL_PTX3_DECL__ int __isfinite(\/* we do not support long double yet, hence double *\/double a)$/;"	f
__isfinited	/usr/local/cuda/include/math_functions_dbl_ptx3.hpp	/^__MATH_FUNCTIONS_DBL_PTX3_DECL__ int __isfinited(double a)$/;"	f
__isfinitef	/usr/local/cuda/include/math_functions.hpp	/^__MATH_FUNCTIONS_DECL__ int __isfinitef(float a)$/;"	f
__isinf	/usr/local/cuda/include/math_functions_dbl_ptx3.hpp	/^__MATH_FUNCTIONS_DBL_PTX3_DECL__ int __isinf(\/* we do not support long double yet, hence double *\/double a)$/;"	f
__isinfd	/usr/local/cuda/include/math_functions_dbl_ptx3.hpp	/^__MATH_FUNCTIONS_DBL_PTX3_DECL__ int __isinfd(double a)$/;"	f
__isinfl	/usr/local/cuda/include/math_functions_dbl_ptx3.hpp	/^__MATH_FUNCTIONS_DBL_PTX3_DECL__ int __isinfl(\/* we do not support long double yet, hence double *\/double a)$/;"	f
__isnan	/usr/local/cuda/include/math_functions_dbl_ptx3.hpp	/^__MATH_FUNCTIONS_DBL_PTX3_DECL__ int __isnan(\/* we do not support long double yet, hence double *\/double a)$/;"	f
__isnand	/usr/local/cuda/include/math_functions_dbl_ptx3.hpp	/^__MATH_FUNCTIONS_DBL_PTX3_DECL__ int __isnand(double a)$/;"	f
__isnanl	/usr/local/cuda/include/math_functions_dbl_ptx3.hpp	/^__MATH_FUNCTIONS_DBL_PTX3_DECL__ int __isnanl(\/* we do not support long double yet, hence double *\/double a)$/;"	f
__ldca	/usr/local/cuda/include/cuda_fp16.hpp	/^__CUDA_FP16_DECL__ __half __ldca(const __half *ptr)$/;"	f
__ldca	/usr/local/cuda/include/cuda_fp16.hpp	/^__CUDA_FP16_DECL__ __half2 __ldca(const  __half2 *ptr)$/;"	f
__ldca	/usr/local/cuda/include/sm_32_intrinsics.hpp	/^__SM_32_INTRINSICS_DECL__ char __ldca(const char *ptr) { unsigned int ret; asm volatile ("ld.global.ca.s8 %0, [%1];"  : "=r"(ret) : __LDG_PTR (ptr)); return (char)ret; }$/;"	f
__ldca	/usr/local/cuda/include/sm_32_intrinsics.hpp	/^__SM_32_INTRINSICS_DECL__ char2 __ldca(const char2 *ptr) { char2 ret; int2 tmp; asm volatile ("ld.global.ca.v2.s8 {%0,%1}, [%2];"  : "=r"(tmp.x), "=r"(tmp.y) : __LDG_PTR (ptr)); ret.x = (char)tmp.x; ret.y = (char)tmp.y; return ret; }$/;"	f
__ldca	/usr/local/cuda/include/sm_32_intrinsics.hpp	/^__SM_32_INTRINSICS_DECL__ char4 __ldca(const char4 *ptr) { char4 ret; int4 tmp; asm volatile ("ld.global.ca.v4.s8 {%0,%1,%2,%3}, [%4];"  : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : __LDG_PTR (ptr)); ret.x = (char)tmp.x; ret.y = (char)tmp.y; ret.z = (char)tmp.z; ret.w = (char)tmp.w; return ret; }$/;"	f
__ldca	/usr/local/cuda/include/sm_32_intrinsics.hpp	/^__SM_32_INTRINSICS_DECL__ double __ldca(const double *ptr) { double ret; asm volatile ("ld.global.ca.f64 %0, [%1];"  : "=d"(ret) : __LDG_PTR (ptr)); return ret; }$/;"	f
__ldca	/usr/local/cuda/include/sm_32_intrinsics.hpp	/^__SM_32_INTRINSICS_DECL__ double2 __ldca(const double2 *ptr) { double2 ret; asm volatile ("ld.global.ca.v2.f64 {%0,%1}, [%2];"  : "=d"(ret.x), "=d"(ret.y) : __LDG_PTR (ptr)); return ret; }$/;"	f
__ldca	/usr/local/cuda/include/sm_32_intrinsics.hpp	/^__SM_32_INTRINSICS_DECL__ float __ldca(const float *ptr) { float ret; asm volatile ("ld.global.ca.f32 %0, [%1];"  : "=f"(ret) : __LDG_PTR (ptr)); return ret; }$/;"	f
__ldca	/usr/local/cuda/include/sm_32_intrinsics.hpp	/^__SM_32_INTRINSICS_DECL__ float2 __ldca(const float2 *ptr) { float2 ret; asm volatile ("ld.global.ca.v2.f32 {%0,%1}, [%2];"  : "=f"(ret.x), "=f"(ret.y) : __LDG_PTR (ptr)); return ret; }$/;"	f
__ldca	/usr/local/cuda/include/sm_32_intrinsics.hpp	/^__SM_32_INTRINSICS_DECL__ float4 __ldca(const float4 *ptr) { float4 ret; asm volatile ("ld.global.ca.v4.f32 {%0,%1,%2,%3}, [%4];"  : "=f"(ret.x), "=f"(ret.y), "=f"(ret.z), "=f"(ret.w) : __LDG_PTR (ptr)); return ret; }$/;"	f
__ldca	/usr/local/cuda/include/sm_32_intrinsics.hpp	/^__SM_32_INTRINSICS_DECL__ int __ldca(const int *ptr) { unsigned int ret; asm volatile ("ld.global.ca.s32 %0, [%1];"  : "=r"(ret) : __LDG_PTR (ptr)); return (int)ret; }$/;"	f
__ldca	/usr/local/cuda/include/sm_32_intrinsics.hpp	/^__SM_32_INTRINSICS_DECL__ int2 __ldca(const int2 *ptr) { int2 ret; asm volatile ("ld.global.ca.v2.s32 {%0,%1}, [%2];"  : "=r"(ret.x), "=r"(ret.y) : __LDG_PTR (ptr)); return ret; }$/;"	f
__ldca	/usr/local/cuda/include/sm_32_intrinsics.hpp	/^__SM_32_INTRINSICS_DECL__ int4 __ldca(const int4 *ptr) { int4 ret; asm volatile ("ld.global.ca.v4.s32 {%0,%1,%2,%3}, [%4];"  : "=r"(ret.x), "=r"(ret.y), "=r"(ret.z), "=r"(ret.w) : __LDG_PTR (ptr)); return ret; }$/;"	f
__ldca	/usr/local/cuda/include/sm_32_intrinsics.hpp	/^__SM_32_INTRINSICS_DECL__ long __ldca(const long *ptr) { unsigned long ret; asm volatile ("ld.global.ca.s32 %0, [%1];"  : "=r"(ret) : __LDG_PTR (ptr)); return (long)ret; }$/;"	f
__ldca	/usr/local/cuda/include/sm_32_intrinsics.hpp	/^__SM_32_INTRINSICS_DECL__ long __ldca(const long *ptr) { unsigned long ret; asm volatile ("ld.global.ca.s64 %0, [%1];"  : "=l"(ret) : __LDG_PTR (ptr)); return (long)ret; }$/;"	f
__ldca	/usr/local/cuda/include/sm_32_intrinsics.hpp	/^__SM_32_INTRINSICS_DECL__ long long __ldca(const long long *ptr) { unsigned long long ret; asm volatile ("ld.global.ca.s64 %0, [%1];"  : "=l"(ret) : __LDG_PTR (ptr)); return (long long)ret; }$/;"	f
__ldca	/usr/local/cuda/include/sm_32_intrinsics.hpp	/^__SM_32_INTRINSICS_DECL__ longlong2 __ldca(const longlong2 *ptr) { longlong2 ret; asm volatile ("ld.global.ca.v2.s64 {%0,%1}, [%2];"  : "=l"(ret.x), "=l"(ret.y) : __LDG_PTR (ptr)); return ret; }$/;"	f
__ldca	/usr/local/cuda/include/sm_32_intrinsics.hpp	/^__SM_32_INTRINSICS_DECL__ short __ldca(const short *ptr) { unsigned short ret; asm volatile ("ld.global.ca.s16 %0, [%1];"  : "=h"(ret) : __LDG_PTR (ptr)); return (short)ret; }$/;"	f
__ldca	/usr/local/cuda/include/sm_32_intrinsics.hpp	/^__SM_32_INTRINSICS_DECL__ short2 __ldca(const short2 *ptr) { short2 ret; asm volatile ("ld.global.ca.v2.s16 {%0,%1}, [%2];"  : "=h"(ret.x), "=h"(ret.y) : __LDG_PTR (ptr)); return ret; }$/;"	f
__ldca	/usr/local/cuda/include/sm_32_intrinsics.hpp	/^__SM_32_INTRINSICS_DECL__ short4 __ldca(const short4 *ptr) { short4 ret; asm volatile ("ld.global.ca.v4.s16 {%0,%1,%2,%3}, [%4];"  : "=h"(ret.x), "=h"(ret.y), "=h"(ret.z), "=h"(ret.w) : __LDG_PTR (ptr)); return ret; }$/;"	f
__ldca	/usr/local/cuda/include/sm_32_intrinsics.hpp	/^__SM_32_INTRINSICS_DECL__ signed char __ldca(const signed char *ptr) { unsigned int ret; asm volatile ("ld.global.ca.s8 %0, [%1];"  : "=r"(ret) : __LDG_PTR (ptr)); return (signed char)ret; }$/;"	f
__ldca	/usr/local/cuda/include/sm_32_intrinsics.hpp	/^__SM_32_INTRINSICS_DECL__ uchar2 __ldca(const uchar2 *ptr) { uchar2 ret; uint2 tmp; asm volatile ("ld.global.ca.v2.u8 {%0,%1}, [%2];"  : "=r"(tmp.x), "=r"(tmp.y) : __LDG_PTR (ptr)); ret.x = (unsigned char)tmp.x; ret.y = (unsigned char)tmp.y; return ret; }$/;"	f
__ldca	/usr/local/cuda/include/sm_32_intrinsics.hpp	/^__SM_32_INTRINSICS_DECL__ uchar4 __ldca(const uchar4 *ptr) { uchar4 ret; uint4 tmp; asm volatile ("ld.global.ca.v4.u8 {%0,%1,%2,%3}, [%4];"  : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : __LDG_PTR (ptr)); ret.x = (unsigned char)tmp.x; ret.y = (unsigned char)tmp.y; ret.z = (unsigned char)tmp.z; ret.w = (unsigned char)tmp.w; return ret; }$/;"	f
__ldca	/usr/local/cuda/include/sm_32_intrinsics.hpp	/^__SM_32_INTRINSICS_DECL__ uint2 __ldca(const uint2 *ptr) { uint2 ret; asm volatile ("ld.global.ca.v2.u32 {%0,%1}, [%2];"  : "=r"(ret.x), "=r"(ret.y) : __LDG_PTR (ptr)); return ret; }$/;"	f
__ldca	/usr/local/cuda/include/sm_32_intrinsics.hpp	/^__SM_32_INTRINSICS_DECL__ uint4 __ldca(const uint4 *ptr) { uint4 ret; asm volatile ("ld.global.ca.v4.u32 {%0,%1,%2,%3}, [%4];"  : "=r"(ret.x), "=r"(ret.y), "=r"(ret.z), "=r"(ret.w) : __LDG_PTR (ptr)); return ret; }$/;"	f
__ldca	/usr/local/cuda/include/sm_32_intrinsics.hpp	/^__SM_32_INTRINSICS_DECL__ ulonglong2 __ldca(const ulonglong2 *ptr) { ulonglong2 ret; asm volatile ("ld.global.ca.v2.u64 {%0,%1}, [%2];"  : "=l"(ret.x), "=l"(ret.y) : __LDG_PTR (ptr)); return ret; }$/;"	f
__ldca	/usr/local/cuda/include/sm_32_intrinsics.hpp	/^__SM_32_INTRINSICS_DECL__ unsigned char __ldca(const unsigned char *ptr) { unsigned int ret; asm volatile ("ld.global.ca.u8 %0, [%1];"  : "=r"(ret) : __LDG_PTR (ptr));  return (unsigned char)ret; }$/;"	f
__ldca	/usr/local/cuda/include/sm_32_intrinsics.hpp	/^__SM_32_INTRINSICS_DECL__ unsigned int __ldca(const unsigned int *ptr) { unsigned int ret; asm volatile ("ld.global.ca.u32 %0, [%1];"  : "=r"(ret) : __LDG_PTR (ptr)); return ret; }$/;"	f
__ldca	/usr/local/cuda/include/sm_32_intrinsics.hpp	/^__SM_32_INTRINSICS_DECL__ unsigned long __ldca(const unsigned long *ptr) { unsigned long ret; asm volatile ("ld.global.ca.u32 %0, [%1];"  : "=r"(ret) : __LDG_PTR (ptr)); return ret; }$/;"	f
__ldca	/usr/local/cuda/include/sm_32_intrinsics.hpp	/^__SM_32_INTRINSICS_DECL__ unsigned long __ldca(const unsigned long *ptr) { unsigned long ret; asm volatile ("ld.global.ca.u64 %0, [%1];"  : "=l"(ret) : __LDG_PTR (ptr)); return ret; }$/;"	f
__ldca	/usr/local/cuda/include/sm_32_intrinsics.hpp	/^__SM_32_INTRINSICS_DECL__ unsigned long long __ldca(const unsigned long long *ptr) { unsigned long long ret; asm volatile ("ld.global.ca.u64 %0, [%1];"  : "=l"(ret) : __LDG_PTR (ptr)); return ret; }$/;"	f
__ldca	/usr/local/cuda/include/sm_32_intrinsics.hpp	/^__SM_32_INTRINSICS_DECL__ unsigned short __ldca(const unsigned short *ptr) { unsigned short ret; asm volatile ("ld.global.ca.u16 %0, [%1];"  : "=h"(ret) : __LDG_PTR (ptr)); return ret; }$/;"	f
__ldca	/usr/local/cuda/include/sm_32_intrinsics.hpp	/^__SM_32_INTRINSICS_DECL__ ushort2 __ldca(const ushort2 *ptr) { ushort2 ret; asm volatile ("ld.global.ca.v2.u16 {%0,%1}, [%2];"  : "=h"(ret.x), "=h"(ret.y) : __LDG_PTR (ptr)); return ret; }$/;"	f
__ldca	/usr/local/cuda/include/sm_32_intrinsics.hpp	/^__SM_32_INTRINSICS_DECL__ ushort4 __ldca(const ushort4 *ptr) { ushort4 ret; asm volatile ("ld.global.ca.v4.u16 {%0,%1,%2,%3}, [%4];"  : "=h"(ret.x), "=h"(ret.y), "=h"(ret.z), "=h"(ret.w) : __LDG_PTR (ptr)); return ret; }$/;"	f
__ldcg	/usr/local/cuda/include/cuda_fp16.hpp	/^__CUDA_FP16_DECL__ __half __ldcg(const __half *ptr)$/;"	f
__ldcg	/usr/local/cuda/include/cuda_fp16.hpp	/^__CUDA_FP16_DECL__ __half2 __ldcg(const  __half2 *ptr)$/;"	f
__ldcg	/usr/local/cuda/include/sm_32_intrinsics.hpp	/^__SM_32_INTRINSICS_DECL__ char __ldcg(const char *ptr) { unsigned int ret; asm volatile ("ld.global.cg.s8 %0, [%1];"  : "=r"(ret) : __LDG_PTR (ptr)); return (char)ret; }$/;"	f
__ldcg	/usr/local/cuda/include/sm_32_intrinsics.hpp	/^__SM_32_INTRINSICS_DECL__ char2 __ldcg(const char2 *ptr) { char2 ret; int2 tmp; asm volatile ("ld.global.cg.v2.s8 {%0,%1}, [%2];"  : "=r"(tmp.x), "=r"(tmp.y) : __LDG_PTR (ptr)); ret.x = (char)tmp.x; ret.y = (char)tmp.y; return ret; }$/;"	f
__ldcg	/usr/local/cuda/include/sm_32_intrinsics.hpp	/^__SM_32_INTRINSICS_DECL__ char4 __ldcg(const char4 *ptr) { char4 ret; int4 tmp; asm volatile ("ld.global.cg.v4.s8 {%0,%1,%2,%3}, [%4];"  : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : __LDG_PTR (ptr)); ret.x = (char)tmp.x; ret.y = (char)tmp.y; ret.z = (char)tmp.z; ret.w = (char)tmp.w; return ret; }$/;"	f
__ldcg	/usr/local/cuda/include/sm_32_intrinsics.hpp	/^__SM_32_INTRINSICS_DECL__ double __ldcg(const double *ptr) { double ret; asm volatile ("ld.global.cg.f64 %0, [%1];"  : "=d"(ret) : __LDG_PTR (ptr)); return ret; }$/;"	f
__ldcg	/usr/local/cuda/include/sm_32_intrinsics.hpp	/^__SM_32_INTRINSICS_DECL__ double2 __ldcg(const double2 *ptr) { double2 ret; asm volatile ("ld.global.cg.v2.f64 {%0,%1}, [%2];"  : "=d"(ret.x), "=d"(ret.y) : __LDG_PTR (ptr)); return ret; }$/;"	f
__ldcg	/usr/local/cuda/include/sm_32_intrinsics.hpp	/^__SM_32_INTRINSICS_DECL__ float __ldcg(const float *ptr) { float ret; asm volatile ("ld.global.cg.f32 %0, [%1];"  : "=f"(ret) : __LDG_PTR (ptr)); return ret; }$/;"	f
__ldcg	/usr/local/cuda/include/sm_32_intrinsics.hpp	/^__SM_32_INTRINSICS_DECL__ float2 __ldcg(const float2 *ptr) { float2 ret; asm volatile ("ld.global.cg.v2.f32 {%0,%1}, [%2];"  : "=f"(ret.x), "=f"(ret.y) : __LDG_PTR (ptr)); return ret; }$/;"	f
__ldcg	/usr/local/cuda/include/sm_32_intrinsics.hpp	/^__SM_32_INTRINSICS_DECL__ float4 __ldcg(const float4 *ptr) { float4 ret; asm volatile ("ld.global.cg.v4.f32 {%0,%1,%2,%3}, [%4];"  : "=f"(ret.x), "=f"(ret.y), "=f"(ret.z), "=f"(ret.w) : __LDG_PTR (ptr)); return ret; }$/;"	f
__ldcg	/usr/local/cuda/include/sm_32_intrinsics.hpp	/^__SM_32_INTRINSICS_DECL__ int __ldcg(const int *ptr) { unsigned int ret; asm volatile ("ld.global.cg.s32 %0, [%1];"  : "=r"(ret) : __LDG_PTR (ptr)); return (int)ret; }$/;"	f
__ldcg	/usr/local/cuda/include/sm_32_intrinsics.hpp	/^__SM_32_INTRINSICS_DECL__ int2 __ldcg(const int2 *ptr) { int2 ret; asm volatile ("ld.global.cg.v2.s32 {%0,%1}, [%2];"  : "=r"(ret.x), "=r"(ret.y) : __LDG_PTR (ptr)); return ret; }$/;"	f
__ldcg	/usr/local/cuda/include/sm_32_intrinsics.hpp	/^__SM_32_INTRINSICS_DECL__ int4 __ldcg(const int4 *ptr) { int4 ret; asm volatile ("ld.global.cg.v4.s32 {%0,%1,%2,%3}, [%4];"  : "=r"(ret.x), "=r"(ret.y), "=r"(ret.z), "=r"(ret.w) : __LDG_PTR (ptr)); return ret; }$/;"	f
__ldcg	/usr/local/cuda/include/sm_32_intrinsics.hpp	/^__SM_32_INTRINSICS_DECL__ long __ldcg(const long *ptr) { unsigned long ret; asm volatile ("ld.global.cg.s32 %0, [%1];"  : "=r"(ret) : __LDG_PTR (ptr)); return (long)ret; }$/;"	f
__ldcg	/usr/local/cuda/include/sm_32_intrinsics.hpp	/^__SM_32_INTRINSICS_DECL__ long __ldcg(const long *ptr) { unsigned long ret; asm volatile ("ld.global.cg.s64 %0, [%1];"  : "=l"(ret) : __LDG_PTR (ptr)); return (long)ret; }$/;"	f
__ldcg	/usr/local/cuda/include/sm_32_intrinsics.hpp	/^__SM_32_INTRINSICS_DECL__ long long __ldcg(const long long *ptr) { unsigned long long ret; asm volatile ("ld.global.cg.s64 %0, [%1];"  : "=l"(ret) : __LDG_PTR (ptr)); return (long long)ret; }$/;"	f
__ldcg	/usr/local/cuda/include/sm_32_intrinsics.hpp	/^__SM_32_INTRINSICS_DECL__ longlong2 __ldcg(const longlong2 *ptr) { longlong2 ret; asm volatile ("ld.global.cg.v2.s64 {%0,%1}, [%2];"  : "=l"(ret.x), "=l"(ret.y) : __LDG_PTR (ptr)); return ret; }$/;"	f
__ldcg	/usr/local/cuda/include/sm_32_intrinsics.hpp	/^__SM_32_INTRINSICS_DECL__ short __ldcg(const short *ptr) { unsigned short ret; asm volatile ("ld.global.cg.s16 %0, [%1];"  : "=h"(ret) : __LDG_PTR (ptr)); return (short)ret; }$/;"	f
__ldcg	/usr/local/cuda/include/sm_32_intrinsics.hpp	/^__SM_32_INTRINSICS_DECL__ short2 __ldcg(const short2 *ptr) { short2 ret; asm volatile ("ld.global.cg.v2.s16 {%0,%1}, [%2];"  : "=h"(ret.x), "=h"(ret.y) : __LDG_PTR (ptr)); return ret; }$/;"	f
__ldcg	/usr/local/cuda/include/sm_32_intrinsics.hpp	/^__SM_32_INTRINSICS_DECL__ short4 __ldcg(const short4 *ptr) { short4 ret; asm volatile ("ld.global.cg.v4.s16 {%0,%1,%2,%3}, [%4];"  : "=h"(ret.x), "=h"(ret.y), "=h"(ret.z), "=h"(ret.w) : __LDG_PTR (ptr)); return ret; }$/;"	f
__ldcg	/usr/local/cuda/include/sm_32_intrinsics.hpp	/^__SM_32_INTRINSICS_DECL__ signed char __ldcg(const signed char *ptr) { unsigned int ret; asm volatile ("ld.global.cg.s8 %0, [%1];"  : "=r"(ret) : __LDG_PTR (ptr)); return (signed char)ret; }$/;"	f
__ldcg	/usr/local/cuda/include/sm_32_intrinsics.hpp	/^__SM_32_INTRINSICS_DECL__ uchar2 __ldcg(const uchar2 *ptr) { uchar2 ret; uint2 tmp; asm volatile ("ld.global.cg.v2.u8 {%0,%1}, [%2];"  : "=r"(tmp.x), "=r"(tmp.y) : __LDG_PTR (ptr)); ret.x = (unsigned char)tmp.x; ret.y = (unsigned char)tmp.y; return ret; }$/;"	f
__ldcg	/usr/local/cuda/include/sm_32_intrinsics.hpp	/^__SM_32_INTRINSICS_DECL__ uchar4 __ldcg(const uchar4 *ptr) { uchar4 ret; uint4 tmp; asm volatile ("ld.global.cg.v4.u8 {%0,%1,%2,%3}, [%4];"  : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : __LDG_PTR (ptr)); ret.x = (unsigned char)tmp.x; ret.y = (unsigned char)tmp.y; ret.z = (unsigned char)tmp.z; ret.w = (unsigned char)tmp.w; return ret; }$/;"	f
__ldcg	/usr/local/cuda/include/sm_32_intrinsics.hpp	/^__SM_32_INTRINSICS_DECL__ uint2 __ldcg(const uint2 *ptr) { uint2 ret; asm volatile ("ld.global.cg.v2.u32 {%0,%1}, [%2];"  : "=r"(ret.x), "=r"(ret.y) : __LDG_PTR (ptr)); return ret; }$/;"	f
__ldcg	/usr/local/cuda/include/sm_32_intrinsics.hpp	/^__SM_32_INTRINSICS_DECL__ uint4 __ldcg(const uint4 *ptr) { uint4 ret; asm volatile ("ld.global.cg.v4.u32 {%0,%1,%2,%3}, [%4];"  : "=r"(ret.x), "=r"(ret.y), "=r"(ret.z), "=r"(ret.w) : __LDG_PTR (ptr)); return ret; }$/;"	f
__ldcg	/usr/local/cuda/include/sm_32_intrinsics.hpp	/^__SM_32_INTRINSICS_DECL__ ulonglong2 __ldcg(const ulonglong2 *ptr) { ulonglong2 ret; asm volatile ("ld.global.cg.v2.u64 {%0,%1}, [%2];"  : "=l"(ret.x), "=l"(ret.y) : __LDG_PTR (ptr)); return ret; }$/;"	f
__ldcg	/usr/local/cuda/include/sm_32_intrinsics.hpp	/^__SM_32_INTRINSICS_DECL__ unsigned char __ldcg(const unsigned char *ptr) { unsigned int ret; asm volatile ("ld.global.cg.u8 %0, [%1];"  : "=r"(ret) : __LDG_PTR (ptr));  return (unsigned char)ret; }$/;"	f
__ldcg	/usr/local/cuda/include/sm_32_intrinsics.hpp	/^__SM_32_INTRINSICS_DECL__ unsigned int __ldcg(const unsigned int *ptr) { unsigned int ret; asm volatile ("ld.global.cg.u32 %0, [%1];"  : "=r"(ret) : __LDG_PTR (ptr)); return ret; }$/;"	f
__ldcg	/usr/local/cuda/include/sm_32_intrinsics.hpp	/^__SM_32_INTRINSICS_DECL__ unsigned long __ldcg(const unsigned long *ptr) { unsigned long ret; asm volatile ("ld.global.cg.u32 %0, [%1];"  : "=r"(ret) : __LDG_PTR (ptr)); return ret; }$/;"	f
__ldcg	/usr/local/cuda/include/sm_32_intrinsics.hpp	/^__SM_32_INTRINSICS_DECL__ unsigned long __ldcg(const unsigned long *ptr) { unsigned long ret; asm volatile ("ld.global.cg.u64 %0, [%1];"  : "=l"(ret) : __LDG_PTR (ptr)); return ret; }$/;"	f
__ldcg	/usr/local/cuda/include/sm_32_intrinsics.hpp	/^__SM_32_INTRINSICS_DECL__ unsigned long long __ldcg(const unsigned long long *ptr) { unsigned long long ret; asm volatile ("ld.global.cg.u64 %0, [%1];"  : "=l"(ret) : __LDG_PTR (ptr)); return ret; }$/;"	f
__ldcg	/usr/local/cuda/include/sm_32_intrinsics.hpp	/^__SM_32_INTRINSICS_DECL__ unsigned short __ldcg(const unsigned short *ptr) { unsigned short ret; asm volatile ("ld.global.cg.u16 %0, [%1];"  : "=h"(ret) : __LDG_PTR (ptr)); return ret; }$/;"	f
__ldcg	/usr/local/cuda/include/sm_32_intrinsics.hpp	/^__SM_32_INTRINSICS_DECL__ ushort2 __ldcg(const ushort2 *ptr) { ushort2 ret; asm volatile ("ld.global.cg.v2.u16 {%0,%1}, [%2];"  : "=h"(ret.x), "=h"(ret.y) : __LDG_PTR (ptr)); return ret; }$/;"	f
__ldcg	/usr/local/cuda/include/sm_32_intrinsics.hpp	/^__SM_32_INTRINSICS_DECL__ ushort4 __ldcg(const ushort4 *ptr) { ushort4 ret; asm volatile ("ld.global.cg.v4.u16 {%0,%1,%2,%3}, [%4];"  : "=h"(ret.x), "=h"(ret.y), "=h"(ret.z), "=h"(ret.w) : __LDG_PTR (ptr)); return ret; }$/;"	f
__ldcs	/usr/local/cuda/include/cuda_fp16.hpp	/^__CUDA_FP16_DECL__ __half __ldcs(const __half *ptr)$/;"	f
__ldcs	/usr/local/cuda/include/cuda_fp16.hpp	/^__CUDA_FP16_DECL__ __half2 __ldcs(const  __half2 *ptr)$/;"	f
__ldcs	/usr/local/cuda/include/sm_32_intrinsics.hpp	/^__SM_32_INTRINSICS_DECL__ char __ldcs(const char *ptr) { unsigned int ret; asm volatile ("ld.global.cs.s8 %0, [%1];"  : "=r"(ret) : __LDG_PTR (ptr)); return (char)ret; }$/;"	f
__ldcs	/usr/local/cuda/include/sm_32_intrinsics.hpp	/^__SM_32_INTRINSICS_DECL__ char2 __ldcs(const char2 *ptr) { char2 ret; int2 tmp; asm volatile ("ld.global.cs.v2.s8 {%0,%1}, [%2];"  : "=r"(tmp.x), "=r"(tmp.y) : __LDG_PTR (ptr)); ret.x = (char)tmp.x; ret.y = (char)tmp.y; return ret; }$/;"	f
__ldcs	/usr/local/cuda/include/sm_32_intrinsics.hpp	/^__SM_32_INTRINSICS_DECL__ char4 __ldcs(const char4 *ptr) { char4 ret; int4 tmp; asm volatile ("ld.global.cs.v4.s8 {%0,%1,%2,%3}, [%4];"  : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : __LDG_PTR (ptr)); ret.x = (char)tmp.x; ret.y = (char)tmp.y; ret.z = (char)tmp.z; ret.w = (char)tmp.w; return ret; }$/;"	f
__ldcs	/usr/local/cuda/include/sm_32_intrinsics.hpp	/^__SM_32_INTRINSICS_DECL__ double __ldcs(const double *ptr) { double ret; asm volatile ("ld.global.cs.f64 %0, [%1];"  : "=d"(ret) : __LDG_PTR (ptr)); return ret; }$/;"	f
__ldcs	/usr/local/cuda/include/sm_32_intrinsics.hpp	/^__SM_32_INTRINSICS_DECL__ double2 __ldcs(const double2 *ptr) { double2 ret; asm volatile ("ld.global.cs.v2.f64 {%0,%1}, [%2];"  : "=d"(ret.x), "=d"(ret.y) : __LDG_PTR (ptr)); return ret; }$/;"	f
__ldcs	/usr/local/cuda/include/sm_32_intrinsics.hpp	/^__SM_32_INTRINSICS_DECL__ float __ldcs(const float *ptr) { float ret; asm volatile ("ld.global.cs.f32 %0, [%1];"  : "=f"(ret) : __LDG_PTR (ptr)); return ret; }$/;"	f
__ldcs	/usr/local/cuda/include/sm_32_intrinsics.hpp	/^__SM_32_INTRINSICS_DECL__ float2 __ldcs(const float2 *ptr) { float2 ret; asm volatile ("ld.global.cs.v2.f32 {%0,%1}, [%2];"  : "=f"(ret.x), "=f"(ret.y) : __LDG_PTR (ptr)); return ret; }$/;"	f
__ldcs	/usr/local/cuda/include/sm_32_intrinsics.hpp	/^__SM_32_INTRINSICS_DECL__ float4 __ldcs(const float4 *ptr) { float4 ret; asm volatile ("ld.global.cs.v4.f32 {%0,%1,%2,%3}, [%4];"  : "=f"(ret.x), "=f"(ret.y), "=f"(ret.z), "=f"(ret.w) : __LDG_PTR (ptr)); return ret; }$/;"	f
__ldcs	/usr/local/cuda/include/sm_32_intrinsics.hpp	/^__SM_32_INTRINSICS_DECL__ int __ldcs(const int *ptr) { unsigned int ret; asm volatile ("ld.global.cs.s32 %0, [%1];"  : "=r"(ret) : __LDG_PTR (ptr)); return (int)ret; }$/;"	f
__ldcs	/usr/local/cuda/include/sm_32_intrinsics.hpp	/^__SM_32_INTRINSICS_DECL__ int2 __ldcs(const int2 *ptr) { int2 ret; asm volatile ("ld.global.cs.v2.s32 {%0,%1}, [%2];"  : "=r"(ret.x), "=r"(ret.y) : __LDG_PTR (ptr)); return ret; }$/;"	f
__ldcs	/usr/local/cuda/include/sm_32_intrinsics.hpp	/^__SM_32_INTRINSICS_DECL__ int4 __ldcs(const int4 *ptr) { int4 ret; asm volatile ("ld.global.cs.v4.s32 {%0,%1,%2,%3}, [%4];"  : "=r"(ret.x), "=r"(ret.y), "=r"(ret.z), "=r"(ret.w) : __LDG_PTR (ptr)); return ret; }$/;"	f
__ldcs	/usr/local/cuda/include/sm_32_intrinsics.hpp	/^__SM_32_INTRINSICS_DECL__ long __ldcs(const long *ptr) { unsigned long ret; asm volatile ("ld.global.cs.s32 %0, [%1];"  : "=r"(ret) : __LDG_PTR (ptr)); return (long)ret; }$/;"	f
__ldcs	/usr/local/cuda/include/sm_32_intrinsics.hpp	/^__SM_32_INTRINSICS_DECL__ long __ldcs(const long *ptr) { unsigned long ret; asm volatile ("ld.global.cs.s64 %0, [%1];"  : "=l"(ret) : __LDG_PTR (ptr)); return (long)ret; }$/;"	f
__ldcs	/usr/local/cuda/include/sm_32_intrinsics.hpp	/^__SM_32_INTRINSICS_DECL__ long long __ldcs(const long long *ptr) { unsigned long long ret; asm volatile ("ld.global.cs.s64 %0, [%1];"  : "=l"(ret) : __LDG_PTR (ptr)); return (long long)ret; }$/;"	f
__ldcs	/usr/local/cuda/include/sm_32_intrinsics.hpp	/^__SM_32_INTRINSICS_DECL__ longlong2 __ldcs(const longlong2 *ptr) { longlong2 ret; asm volatile ("ld.global.cs.v2.s64 {%0,%1}, [%2];"  : "=l"(ret.x), "=l"(ret.y) : __LDG_PTR (ptr)); return ret; }$/;"	f
__ldcs	/usr/local/cuda/include/sm_32_intrinsics.hpp	/^__SM_32_INTRINSICS_DECL__ short __ldcs(const short *ptr) { unsigned short ret; asm volatile ("ld.global.cs.s16 %0, [%1];"  : "=h"(ret) : __LDG_PTR (ptr)); return (short)ret; }$/;"	f
__ldcs	/usr/local/cuda/include/sm_32_intrinsics.hpp	/^__SM_32_INTRINSICS_DECL__ short2 __ldcs(const short2 *ptr) { short2 ret; asm volatile ("ld.global.cs.v2.s16 {%0,%1}, [%2];"  : "=h"(ret.x), "=h"(ret.y) : __LDG_PTR (ptr)); return ret; }$/;"	f
__ldcs	/usr/local/cuda/include/sm_32_intrinsics.hpp	/^__SM_32_INTRINSICS_DECL__ short4 __ldcs(const short4 *ptr) { short4 ret; asm volatile ("ld.global.cs.v4.s16 {%0,%1,%2,%3}, [%4];"  : "=h"(ret.x), "=h"(ret.y), "=h"(ret.z), "=h"(ret.w) : __LDG_PTR (ptr)); return ret; }$/;"	f
__ldcs	/usr/local/cuda/include/sm_32_intrinsics.hpp	/^__SM_32_INTRINSICS_DECL__ signed char __ldcs(const signed char *ptr) { unsigned int ret; asm volatile ("ld.global.cs.s8 %0, [%1];"  : "=r"(ret) : __LDG_PTR (ptr)); return (signed char)ret; }$/;"	f
__ldcs	/usr/local/cuda/include/sm_32_intrinsics.hpp	/^__SM_32_INTRINSICS_DECL__ uchar2 __ldcs(const uchar2 *ptr) { uchar2 ret; uint2 tmp; asm volatile ("ld.global.cs.v2.u8 {%0,%1}, [%2];"  : "=r"(tmp.x), "=r"(tmp.y) : __LDG_PTR (ptr)); ret.x = (unsigned char)tmp.x; ret.y = (unsigned char)tmp.y; return ret; }$/;"	f
__ldcs	/usr/local/cuda/include/sm_32_intrinsics.hpp	/^__SM_32_INTRINSICS_DECL__ uchar4 __ldcs(const uchar4 *ptr) { uchar4 ret; uint4 tmp; asm volatile ("ld.global.cs.v4.u8 {%0,%1,%2,%3}, [%4];"  : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : __LDG_PTR (ptr)); ret.x = (unsigned char)tmp.x; ret.y = (unsigned char)tmp.y; ret.z = (unsigned char)tmp.z; ret.w = (unsigned char)tmp.w; return ret; }$/;"	f
__ldcs	/usr/local/cuda/include/sm_32_intrinsics.hpp	/^__SM_32_INTRINSICS_DECL__ uint2 __ldcs(const uint2 *ptr) { uint2 ret; asm volatile ("ld.global.cs.v2.u32 {%0,%1}, [%2];"  : "=r"(ret.x), "=r"(ret.y) : __LDG_PTR (ptr)); return ret; }$/;"	f
__ldcs	/usr/local/cuda/include/sm_32_intrinsics.hpp	/^__SM_32_INTRINSICS_DECL__ uint4 __ldcs(const uint4 *ptr) { uint4 ret; asm volatile ("ld.global.cs.v4.u32 {%0,%1,%2,%3}, [%4];"  : "=r"(ret.x), "=r"(ret.y), "=r"(ret.z), "=r"(ret.w) : __LDG_PTR (ptr)); return ret; }$/;"	f
__ldcs	/usr/local/cuda/include/sm_32_intrinsics.hpp	/^__SM_32_INTRINSICS_DECL__ ulonglong2 __ldcs(const ulonglong2 *ptr) { ulonglong2 ret; asm volatile ("ld.global.cs.v2.u64 {%0,%1}, [%2];"  : "=l"(ret.x), "=l"(ret.y) : __LDG_PTR (ptr)); return ret; }$/;"	f
__ldcs	/usr/local/cuda/include/sm_32_intrinsics.hpp	/^__SM_32_INTRINSICS_DECL__ unsigned char __ldcs(const unsigned char *ptr) { unsigned int ret; asm volatile ("ld.global.cs.u8 %0, [%1];"  : "=r"(ret) : __LDG_PTR (ptr));  return (unsigned char)ret; }$/;"	f
__ldcs	/usr/local/cuda/include/sm_32_intrinsics.hpp	/^__SM_32_INTRINSICS_DECL__ unsigned int __ldcs(const unsigned int *ptr) { unsigned int ret; asm volatile ("ld.global.cs.u32 %0, [%1];"  : "=r"(ret) : __LDG_PTR (ptr)); return ret; }$/;"	f
__ldcs	/usr/local/cuda/include/sm_32_intrinsics.hpp	/^__SM_32_INTRINSICS_DECL__ unsigned long __ldcs(const unsigned long *ptr) { unsigned long ret; asm volatile ("ld.global.cs.u32 %0, [%1];"  : "=r"(ret) : __LDG_PTR (ptr)); return ret; }$/;"	f
__ldcs	/usr/local/cuda/include/sm_32_intrinsics.hpp	/^__SM_32_INTRINSICS_DECL__ unsigned long __ldcs(const unsigned long *ptr) { unsigned long ret; asm volatile ("ld.global.cs.u64 %0, [%1];"  : "=l"(ret) : __LDG_PTR (ptr)); return ret; }$/;"	f
__ldcs	/usr/local/cuda/include/sm_32_intrinsics.hpp	/^__SM_32_INTRINSICS_DECL__ unsigned long long __ldcs(const unsigned long long *ptr) { unsigned long long ret; asm volatile ("ld.global.cs.u64 %0, [%1];"  : "=l"(ret) : __LDG_PTR (ptr)); return ret; }$/;"	f
__ldcs	/usr/local/cuda/include/sm_32_intrinsics.hpp	/^__SM_32_INTRINSICS_DECL__ unsigned short __ldcs(const unsigned short *ptr) { unsigned short ret; asm volatile ("ld.global.cs.u16 %0, [%1];"  : "=h"(ret) : __LDG_PTR (ptr)); return ret; }$/;"	f
__ldcs	/usr/local/cuda/include/sm_32_intrinsics.hpp	/^__SM_32_INTRINSICS_DECL__ ushort2 __ldcs(const ushort2 *ptr) { ushort2 ret; asm volatile ("ld.global.cs.v2.u16 {%0,%1}, [%2];"  : "=h"(ret.x), "=h"(ret.y) : __LDG_PTR (ptr)); return ret; }$/;"	f
__ldcs	/usr/local/cuda/include/sm_32_intrinsics.hpp	/^__SM_32_INTRINSICS_DECL__ ushort4 __ldcs(const ushort4 *ptr) { ushort4 ret; asm volatile ("ld.global.cs.v4.u16 {%0,%1,%2,%3}, [%4];"  : "=h"(ret.x), "=h"(ret.y), "=h"(ret.z), "=h"(ret.w) : __LDG_PTR (ptr)); return ret; }$/;"	f
__ldg	/usr/local/cuda/include/cuda_fp16.hpp	/^__CUDA_FP16_DECL__ __half __ldg(const __half *ptr)$/;"	f
__ldg	/usr/local/cuda/include/cuda_fp16.hpp	/^__CUDA_FP16_DECL__ __half2 __ldg(const  __half2 *ptr)$/;"	f
__ldg	/usr/local/cuda/include/sm_32_intrinsics.hpp	/^__SM_32_INTRINSICS_DECL__ char __ldg(const char *ptr) { unsigned int ret; asm volatile ("ld.global.nc.s8 %0, [%1];"  : "=r"(ret) : __LDG_PTR (ptr)); return (char)ret; }$/;"	f
__ldg	/usr/local/cuda/include/sm_32_intrinsics.hpp	/^__SM_32_INTRINSICS_DECL__ char2 __ldg(const char2 *ptr) { char2 ret; int2 tmp; asm volatile ("ld.global.nc.v2.s8 {%0,%1}, [%2];"  : "=r"(tmp.x), "=r"(tmp.y) : __LDG_PTR (ptr)); ret.x = (char)tmp.x; ret.y = (char)tmp.y; return ret; }$/;"	f
__ldg	/usr/local/cuda/include/sm_32_intrinsics.hpp	/^__SM_32_INTRINSICS_DECL__ char4 __ldg(const char4 *ptr) { char4 ret; int4 tmp; asm volatile ("ld.global.nc.v4.s8 {%0,%1,%2,%3}, [%4];"  : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : __LDG_PTR (ptr)); ret.x = (char)tmp.x; ret.y = (char)tmp.y; ret.z = (char)tmp.z; ret.w = (char)tmp.w; return ret; }$/;"	f
__ldg	/usr/local/cuda/include/sm_32_intrinsics.hpp	/^__SM_32_INTRINSICS_DECL__ double __ldg(const double *ptr) { double ret; asm volatile ("ld.global.nc.f64 %0, [%1];"  : "=d"(ret) : __LDG_PTR (ptr)); return ret; }$/;"	f
__ldg	/usr/local/cuda/include/sm_32_intrinsics.hpp	/^__SM_32_INTRINSICS_DECL__ double2 __ldg(const double2 *ptr) { double2 ret; asm volatile ("ld.global.nc.v2.f64 {%0,%1}, [%2];"  : "=d"(ret.x), "=d"(ret.y) : __LDG_PTR (ptr)); return ret; }$/;"	f
__ldg	/usr/local/cuda/include/sm_32_intrinsics.hpp	/^__SM_32_INTRINSICS_DECL__ float __ldg(const float *ptr) { float ret; asm volatile ("ld.global.nc.f32 %0, [%1];"  : "=f"(ret) : __LDG_PTR (ptr)); return ret; }$/;"	f
__ldg	/usr/local/cuda/include/sm_32_intrinsics.hpp	/^__SM_32_INTRINSICS_DECL__ float2 __ldg(const float2 *ptr) { float2 ret; asm volatile ("ld.global.nc.v2.f32 {%0,%1}, [%2];"  : "=f"(ret.x), "=f"(ret.y) : __LDG_PTR (ptr)); return ret; }$/;"	f
__ldg	/usr/local/cuda/include/sm_32_intrinsics.hpp	/^__SM_32_INTRINSICS_DECL__ float4 __ldg(const float4 *ptr) { float4 ret; asm volatile ("ld.global.nc.v4.f32 {%0,%1,%2,%3}, [%4];"  : "=f"(ret.x), "=f"(ret.y), "=f"(ret.z), "=f"(ret.w) : __LDG_PTR (ptr)); return ret; }$/;"	f
__ldg	/usr/local/cuda/include/sm_32_intrinsics.hpp	/^__SM_32_INTRINSICS_DECL__ int __ldg(const int *ptr) { unsigned int ret; asm volatile ("ld.global.nc.s32 %0, [%1];"  : "=r"(ret) : __LDG_PTR (ptr)); return (int)ret; }$/;"	f
__ldg	/usr/local/cuda/include/sm_32_intrinsics.hpp	/^__SM_32_INTRINSICS_DECL__ int2 __ldg(const int2 *ptr) { int2 ret; asm volatile ("ld.global.nc.v2.s32 {%0,%1}, [%2];"  : "=r"(ret.x), "=r"(ret.y) : __LDG_PTR (ptr)); return ret; }$/;"	f
__ldg	/usr/local/cuda/include/sm_32_intrinsics.hpp	/^__SM_32_INTRINSICS_DECL__ int4 __ldg(const int4 *ptr) { int4 ret; asm volatile ("ld.global.nc.v4.s32 {%0,%1,%2,%3}, [%4];"  : "=r"(ret.x), "=r"(ret.y), "=r"(ret.z), "=r"(ret.w) : __LDG_PTR (ptr)); return ret; }$/;"	f
__ldg	/usr/local/cuda/include/sm_32_intrinsics.hpp	/^__SM_32_INTRINSICS_DECL__ long __ldg(const long *ptr) { unsigned long ret; asm volatile ("ld.global.nc.s32 %0, [%1];"  : "=r"(ret) : __LDG_PTR (ptr)); return (long)ret; }$/;"	f
__ldg	/usr/local/cuda/include/sm_32_intrinsics.hpp	/^__SM_32_INTRINSICS_DECL__ long __ldg(const long *ptr) { unsigned long ret; asm volatile ("ld.global.nc.s64 %0, [%1];"  : "=l"(ret) : __LDG_PTR (ptr)); return (long)ret; }$/;"	f
__ldg	/usr/local/cuda/include/sm_32_intrinsics.hpp	/^__SM_32_INTRINSICS_DECL__ long long __ldg(const long long *ptr) { unsigned long long ret; asm volatile ("ld.global.nc.s64 %0, [%1];"  : "=l"(ret) : __LDG_PTR (ptr)); return (long long)ret; }$/;"	f
__ldg	/usr/local/cuda/include/sm_32_intrinsics.hpp	/^__SM_32_INTRINSICS_DECL__ longlong2 __ldg(const longlong2 *ptr) { longlong2 ret; asm volatile ("ld.global.nc.v2.s64 {%0,%1}, [%2];"  : "=l"(ret.x), "=l"(ret.y) : __LDG_PTR (ptr)); return ret; }$/;"	f
__ldg	/usr/local/cuda/include/sm_32_intrinsics.hpp	/^__SM_32_INTRINSICS_DECL__ short __ldg(const short *ptr) { unsigned short ret; asm volatile ("ld.global.nc.s16 %0, [%1];"  : "=h"(ret) : __LDG_PTR (ptr)); return (short)ret; }$/;"	f
__ldg	/usr/local/cuda/include/sm_32_intrinsics.hpp	/^__SM_32_INTRINSICS_DECL__ short2 __ldg(const short2 *ptr) { short2 ret; asm volatile ("ld.global.nc.v2.s16 {%0,%1}, [%2];"  : "=h"(ret.x), "=h"(ret.y) : __LDG_PTR (ptr)); return ret; }$/;"	f
__ldg	/usr/local/cuda/include/sm_32_intrinsics.hpp	/^__SM_32_INTRINSICS_DECL__ short4 __ldg(const short4 *ptr) { short4 ret; asm volatile ("ld.global.nc.v4.s16 {%0,%1,%2,%3}, [%4];"  : "=h"(ret.x), "=h"(ret.y), "=h"(ret.z), "=h"(ret.w) : __LDG_PTR (ptr)); return ret; }$/;"	f
__ldg	/usr/local/cuda/include/sm_32_intrinsics.hpp	/^__SM_32_INTRINSICS_DECL__ signed char __ldg(const signed char *ptr) { unsigned int ret; asm volatile ("ld.global.nc.s8 %0, [%1];"  : "=r"(ret) : __LDG_PTR (ptr)); return (signed char)ret; }$/;"	f
__ldg	/usr/local/cuda/include/sm_32_intrinsics.hpp	/^__SM_32_INTRINSICS_DECL__ uchar2 __ldg(const uchar2 *ptr) { uchar2 ret; uint2 tmp; asm volatile ("ld.global.nc.v2.u8 {%0,%1}, [%2];"  : "=r"(tmp.x), "=r"(tmp.y) : __LDG_PTR (ptr)); ret.x = (unsigned char)tmp.x; ret.y = (unsigned char)tmp.y; return ret; }$/;"	f
__ldg	/usr/local/cuda/include/sm_32_intrinsics.hpp	/^__SM_32_INTRINSICS_DECL__ uchar4 __ldg(const uchar4 *ptr) { uchar4 ret; uint4 tmp; asm volatile ("ld.global.nc.v4.u8 {%0,%1,%2,%3}, [%4];"  : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : __LDG_PTR (ptr)); ret.x = (unsigned char)tmp.x; ret.y = (unsigned char)tmp.y; ret.z = (unsigned char)tmp.z; ret.w = (unsigned char)tmp.w; return ret; }$/;"	f
__ldg	/usr/local/cuda/include/sm_32_intrinsics.hpp	/^__SM_32_INTRINSICS_DECL__ uint2 __ldg(const uint2 *ptr) { uint2 ret; asm volatile ("ld.global.nc.v2.u32 {%0,%1}, [%2];"  : "=r"(ret.x), "=r"(ret.y) : __LDG_PTR (ptr)); return ret; }$/;"	f
__ldg	/usr/local/cuda/include/sm_32_intrinsics.hpp	/^__SM_32_INTRINSICS_DECL__ uint4 __ldg(const uint4 *ptr) { uint4 ret; asm volatile ("ld.global.nc.v4.u32 {%0,%1,%2,%3}, [%4];"  : "=r"(ret.x), "=r"(ret.y), "=r"(ret.z), "=r"(ret.w) : __LDG_PTR (ptr)); return ret; }$/;"	f
__ldg	/usr/local/cuda/include/sm_32_intrinsics.hpp	/^__SM_32_INTRINSICS_DECL__ ulonglong2 __ldg(const ulonglong2 *ptr) { ulonglong2 ret; asm volatile ("ld.global.nc.v2.u64 {%0,%1}, [%2];"  : "=l"(ret.x), "=l"(ret.y) : __LDG_PTR (ptr)); return ret; }$/;"	f
__ldg	/usr/local/cuda/include/sm_32_intrinsics.hpp	/^__SM_32_INTRINSICS_DECL__ unsigned char __ldg(const unsigned char *ptr) { unsigned int ret; asm volatile ("ld.global.nc.u8 %0, [%1];"  : "=r"(ret) : __LDG_PTR (ptr));  return (unsigned char)ret; }$/;"	f
__ldg	/usr/local/cuda/include/sm_32_intrinsics.hpp	/^__SM_32_INTRINSICS_DECL__ unsigned int __ldg(const unsigned int *ptr) { unsigned int ret; asm volatile ("ld.global.nc.u32 %0, [%1];"  : "=r"(ret) : __LDG_PTR (ptr)); return ret; }$/;"	f
__ldg	/usr/local/cuda/include/sm_32_intrinsics.hpp	/^__SM_32_INTRINSICS_DECL__ unsigned long __ldg(const unsigned long *ptr) { unsigned long ret; asm volatile ("ld.global.nc.u32 %0, [%1];"  : "=r"(ret) : __LDG_PTR (ptr)); return ret; }$/;"	f
__ldg	/usr/local/cuda/include/sm_32_intrinsics.hpp	/^__SM_32_INTRINSICS_DECL__ unsigned long __ldg(const unsigned long *ptr) { unsigned long ret; asm volatile ("ld.global.nc.u64 %0, [%1];"  : "=l"(ret) : __LDG_PTR (ptr)); return ret; }$/;"	f
__ldg	/usr/local/cuda/include/sm_32_intrinsics.hpp	/^__SM_32_INTRINSICS_DECL__ unsigned long long __ldg(const unsigned long long *ptr) { unsigned long long ret; asm volatile ("ld.global.nc.u64 %0, [%1];"  : "=l"(ret) : __LDG_PTR (ptr)); return ret; }$/;"	f
__ldg	/usr/local/cuda/include/sm_32_intrinsics.hpp	/^__SM_32_INTRINSICS_DECL__ unsigned short __ldg(const unsigned short *ptr) { unsigned short ret; asm volatile ("ld.global.nc.u16 %0, [%1];"  : "=h"(ret) : __LDG_PTR (ptr)); return ret; }$/;"	f
__ldg	/usr/local/cuda/include/sm_32_intrinsics.hpp	/^__SM_32_INTRINSICS_DECL__ ushort2 __ldg(const ushort2 *ptr) { ushort2 ret; asm volatile ("ld.global.nc.v2.u16 {%0,%1}, [%2];"  : "=h"(ret.x), "=h"(ret.y) : __LDG_PTR (ptr)); return ret; }$/;"	f
__ldg	/usr/local/cuda/include/sm_32_intrinsics.hpp	/^__SM_32_INTRINSICS_DECL__ ushort4 __ldg(const ushort4 *ptr) { ushort4 ret; asm volatile ("ld.global.nc.v4.u16 {%0,%1,%2,%3}, [%4];"  : "=h"(ret.x), "=h"(ret.y), "=h"(ret.z), "=h"(ret.w) : __LDG_PTR (ptr)); return ret; }$/;"	f
__ll2double_rd	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ double __ll2double_rd(long long l)$/;"	f
__ll2double_rn	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ double __ll2double_rn(long long l)$/;"	f
__ll2double_ru	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ double __ll2double_ru(long long l)$/;"	f
__ll2double_rz	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ double __ll2double_rz(long long l)$/;"	f
__ll2float_rd	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ float __ll2float_rd(long long l)$/;"	f
__ll2float_rn	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ float __ll2float_rn(long long l)$/;"	f
__ll2float_ru	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ float __ll2float_ru(long long l)$/;"	f
__ll2float_rz	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ float __ll2float_rz(long long l)$/;"	f
__ll2half_rd	/usr/local/cuda/include/cuda_fp16.hpp	/^__CUDA_FP16_DECL__ __half __ll2half_rd(long long int i)$/;"	f
__ll2half_rn	/usr/local/cuda/include/cuda_fp16.hpp	/^__CUDA_FP16_DECL__ __half __ll2half_rn(long long int i)$/;"	f
__ll2half_ru	/usr/local/cuda/include/cuda_fp16.hpp	/^__CUDA_FP16_DECL__ __half __ll2half_ru(long long int i)$/;"	f
__ll2half_rz	/usr/local/cuda/include/cuda_fp16.hpp	/^__CUDA_FP16_DECL__ __half __ll2half_rz(long long int i)$/;"	f
__llAtomicAnd	/usr/local/cuda/include/device_functions.hpp	/^long long int __llAtomicAnd(long long int *p, long long int val)$/;"	f
__llAtomicAnd_block	/usr/local/cuda/include/device_functions.hpp	/^long long int __llAtomicAnd_block(long long int *p, long long int val)$/;"	f
__llAtomicAnd_system	/usr/local/cuda/include/device_functions.hpp	/^long long int __llAtomicAnd_system(long long int *p, long long int val)$/;"	f
__llAtomicOr	/usr/local/cuda/include/device_functions.hpp	/^long long int __llAtomicOr(long long int *p, long long int val)$/;"	f
__llAtomicOr_block	/usr/local/cuda/include/device_functions.hpp	/^long long int __llAtomicOr_block(long long int *p, long long int val)$/;"	f
__llAtomicOr_system	/usr/local/cuda/include/device_functions.hpp	/^long long int __llAtomicOr_system(long long int *p, long long int val)$/;"	f
__llAtomicXor	/usr/local/cuda/include/device_functions.hpp	/^long long int __llAtomicXor(long long int *p, long long int val)$/;"	f
__llAtomicXor_block	/usr/local/cuda/include/device_functions.hpp	/^long long int __llAtomicXor_block(long long int *p, long long int val)$/;"	f
__llAtomicXor_system	/usr/local/cuda/include/device_functions.hpp	/^long long int __llAtomicXor_system(long long int *p, long long int val)$/;"	f
__local_warpSize	/usr/local/cuda/include/cuda_fp16.h	1026;"	d
__local_warpSize	/usr/local/cuda/include/cuda_fp16.h	988;"	d
__local_warpSize	/usr/local/cuda/include/sm_30_intrinsics.h	227;"	d
__local_warpSize	/usr/local/cuda/include/sm_30_intrinsics.h	89;"	d
__local_warpSize	/usr/local/cuda/include/sm_30_intrinsics.hpp	590;"	d
__local_warpSize	/usr/local/cuda/include/sm_30_intrinsics.hpp	88;"	d
__longlong_as_double	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ double __longlong_as_double(long long x)$/;"	f
__low2float	/usr/local/cuda/include/cuda_fp16.hpp	/^__CUDA_FP16_DECL__ float __low2float(const __half2 l)$/;"	f
__low2half	/usr/local/cuda/include/cuda_fp16.hpp	/^__CUDA_FP16_DECL__ __half __low2half(const __half2 h)$/;"	f
__low2half2	/usr/local/cuda/include/cuda_fp16.hpp	/^__CUDA_FP16_DECL__ __half2 __low2half2(const __half2 l)$/;"	f
__lowhigh2highlow	/usr/local/cuda/include/cuda_fp16.hpp	/^__CUDA_FP16_DECL__ __half2 __lowhigh2highlow(const __half2 lh)$/;"	f
__lows2half2	/usr/local/cuda/include/cuda_fp16.hpp	/^__CUDA_FP16_DECL__ __half2 __lows2half2(const __half2 l, const __half2 h)$/;"	f
__mul24	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ int __mul24(int x, int y)$/;"	f
__mul64hi	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ long long __mul64hi(long long x, long long y)$/;"	f
__mulhi	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ int __mulhi(int x, int y)$/;"	f
__nv_isurf_trait	/usr/local/cuda/include/surface_indirect_functions.h	/^template<> struct __nv_isurf_trait<char1> { typedef void type; };$/;"	s
__nv_isurf_trait	/usr/local/cuda/include/surface_indirect_functions.h	/^template<> struct __nv_isurf_trait<char2> { typedef void type; };$/;"	s
__nv_isurf_trait	/usr/local/cuda/include/surface_indirect_functions.h	/^template<> struct __nv_isurf_trait<char4> { typedef void type; };$/;"	s
__nv_isurf_trait	/usr/local/cuda/include/surface_indirect_functions.h	/^template<> struct __nv_isurf_trait<char> { typedef void type; };$/;"	s
__nv_isurf_trait	/usr/local/cuda/include/surface_indirect_functions.h	/^template<> struct __nv_isurf_trait<float1> { typedef void type; };$/;"	s
__nv_isurf_trait	/usr/local/cuda/include/surface_indirect_functions.h	/^template<> struct __nv_isurf_trait<float2> { typedef void type; };$/;"	s
__nv_isurf_trait	/usr/local/cuda/include/surface_indirect_functions.h	/^template<> struct __nv_isurf_trait<float4> { typedef void type; };$/;"	s
__nv_isurf_trait	/usr/local/cuda/include/surface_indirect_functions.h	/^template<> struct __nv_isurf_trait<float> { typedef void type; };$/;"	s
__nv_isurf_trait	/usr/local/cuda/include/surface_indirect_functions.h	/^template<> struct __nv_isurf_trait<int1> { typedef void type; };$/;"	s
__nv_isurf_trait	/usr/local/cuda/include/surface_indirect_functions.h	/^template<> struct __nv_isurf_trait<int2> { typedef void type; };$/;"	s
__nv_isurf_trait	/usr/local/cuda/include/surface_indirect_functions.h	/^template<> struct __nv_isurf_trait<int4> { typedef void type; };$/;"	s
__nv_isurf_trait	/usr/local/cuda/include/surface_indirect_functions.h	/^template<> struct __nv_isurf_trait<int> { typedef void type; };$/;"	s
__nv_isurf_trait	/usr/local/cuda/include/surface_indirect_functions.h	/^template<> struct __nv_isurf_trait<long long> { typedef void type; };$/;"	s
__nv_isurf_trait	/usr/local/cuda/include/surface_indirect_functions.h	/^template<> struct __nv_isurf_trait<longlong1> { typedef void type; };$/;"	s
__nv_isurf_trait	/usr/local/cuda/include/surface_indirect_functions.h	/^template<> struct __nv_isurf_trait<longlong2> { typedef void type; };$/;"	s
__nv_isurf_trait	/usr/local/cuda/include/surface_indirect_functions.h	/^template<> struct __nv_isurf_trait<short1> { typedef void type; };$/;"	s
__nv_isurf_trait	/usr/local/cuda/include/surface_indirect_functions.h	/^template<> struct __nv_isurf_trait<short2> { typedef void type; };$/;"	s
__nv_isurf_trait	/usr/local/cuda/include/surface_indirect_functions.h	/^template<> struct __nv_isurf_trait<short4> { typedef void type; };$/;"	s
__nv_isurf_trait	/usr/local/cuda/include/surface_indirect_functions.h	/^template<> struct __nv_isurf_trait<short> { typedef void type; };$/;"	s
__nv_isurf_trait	/usr/local/cuda/include/surface_indirect_functions.h	/^template<> struct __nv_isurf_trait<signed char> { typedef void type; };$/;"	s
__nv_isurf_trait	/usr/local/cuda/include/surface_indirect_functions.h	/^template<> struct __nv_isurf_trait<uchar1> { typedef void type; };$/;"	s
__nv_isurf_trait	/usr/local/cuda/include/surface_indirect_functions.h	/^template<> struct __nv_isurf_trait<uchar2> { typedef void type; };$/;"	s
__nv_isurf_trait	/usr/local/cuda/include/surface_indirect_functions.h	/^template<> struct __nv_isurf_trait<uchar4> { typedef void type; };$/;"	s
__nv_isurf_trait	/usr/local/cuda/include/surface_indirect_functions.h	/^template<> struct __nv_isurf_trait<uint1> { typedef void type; };$/;"	s
__nv_isurf_trait	/usr/local/cuda/include/surface_indirect_functions.h	/^template<> struct __nv_isurf_trait<uint2> { typedef void type; };$/;"	s
__nv_isurf_trait	/usr/local/cuda/include/surface_indirect_functions.h	/^template<> struct __nv_isurf_trait<uint4> { typedef void type; };$/;"	s
__nv_isurf_trait	/usr/local/cuda/include/surface_indirect_functions.h	/^template<> struct __nv_isurf_trait<ulonglong1> { typedef void type; };$/;"	s
__nv_isurf_trait	/usr/local/cuda/include/surface_indirect_functions.h	/^template<> struct __nv_isurf_trait<ulonglong2> { typedef void type; };$/;"	s
__nv_isurf_trait	/usr/local/cuda/include/surface_indirect_functions.h	/^template<> struct __nv_isurf_trait<unsigned char> { typedef void type; };$/;"	s
__nv_isurf_trait	/usr/local/cuda/include/surface_indirect_functions.h	/^template<> struct __nv_isurf_trait<unsigned int> { typedef void type; };$/;"	s
__nv_isurf_trait	/usr/local/cuda/include/surface_indirect_functions.h	/^template<> struct __nv_isurf_trait<unsigned long long> { typedef void type; };$/;"	s
__nv_isurf_trait	/usr/local/cuda/include/surface_indirect_functions.h	/^template<> struct __nv_isurf_trait<unsigned short> { typedef void type; };$/;"	s
__nv_isurf_trait	/usr/local/cuda/include/surface_indirect_functions.h	/^template<> struct __nv_isurf_trait<ushort1> { typedef void type; };$/;"	s
__nv_isurf_trait	/usr/local/cuda/include/surface_indirect_functions.h	/^template<> struct __nv_isurf_trait<ushort2> { typedef void type; };$/;"	s
__nv_isurf_trait	/usr/local/cuda/include/surface_indirect_functions.h	/^template<> struct __nv_isurf_trait<ushort4> { typedef void type; };$/;"	s
__nv_isurf_trait	/usr/local/cuda/include/surface_indirect_functions.h	/^template<typename T> struct __nv_isurf_trait { };$/;"	s
__nv_itex_trait	/usr/local/cuda/include/texture_indirect_functions.h	/^template <typename T> struct __nv_itex_trait {   };$/;"	s
__nv_itex_trait	/usr/local/cuda/include/texture_indirect_functions.h	/^template<> struct __nv_itex_trait<char1> { typedef void type; };$/;"	s
__nv_itex_trait	/usr/local/cuda/include/texture_indirect_functions.h	/^template<> struct __nv_itex_trait<char2> { typedef void type; };$/;"	s
__nv_itex_trait	/usr/local/cuda/include/texture_indirect_functions.h	/^template<> struct __nv_itex_trait<char4> { typedef void type; };$/;"	s
__nv_itex_trait	/usr/local/cuda/include/texture_indirect_functions.h	/^template<> struct __nv_itex_trait<char> { typedef void type; };$/;"	s
__nv_itex_trait	/usr/local/cuda/include/texture_indirect_functions.h	/^template<> struct __nv_itex_trait<float1> { typedef void type; };$/;"	s
__nv_itex_trait	/usr/local/cuda/include/texture_indirect_functions.h	/^template<> struct __nv_itex_trait<float2> { typedef void type; };$/;"	s
__nv_itex_trait	/usr/local/cuda/include/texture_indirect_functions.h	/^template<> struct __nv_itex_trait<float4> { typedef void type; };$/;"	s
__nv_itex_trait	/usr/local/cuda/include/texture_indirect_functions.h	/^template<> struct __nv_itex_trait<float> { typedef void type; };$/;"	s
__nv_itex_trait	/usr/local/cuda/include/texture_indirect_functions.h	/^template<> struct __nv_itex_trait<int1> { typedef void type; };$/;"	s
__nv_itex_trait	/usr/local/cuda/include/texture_indirect_functions.h	/^template<> struct __nv_itex_trait<int2> { typedef void type; };$/;"	s
__nv_itex_trait	/usr/local/cuda/include/texture_indirect_functions.h	/^template<> struct __nv_itex_trait<int4> { typedef void type; };$/;"	s
__nv_itex_trait	/usr/local/cuda/include/texture_indirect_functions.h	/^template<> struct __nv_itex_trait<int> { typedef void type; };$/;"	s
__nv_itex_trait	/usr/local/cuda/include/texture_indirect_functions.h	/^template<> struct __nv_itex_trait<long1> { typedef void type; };$/;"	s
__nv_itex_trait	/usr/local/cuda/include/texture_indirect_functions.h	/^template<> struct __nv_itex_trait<long2> { typedef void type; };$/;"	s
__nv_itex_trait	/usr/local/cuda/include/texture_indirect_functions.h	/^template<> struct __nv_itex_trait<long4> { typedef void type; };$/;"	s
__nv_itex_trait	/usr/local/cuda/include/texture_indirect_functions.h	/^template<> struct __nv_itex_trait<long> { typedef void type; };$/;"	s
__nv_itex_trait	/usr/local/cuda/include/texture_indirect_functions.h	/^template<> struct __nv_itex_trait<short1> { typedef void type; };$/;"	s
__nv_itex_trait	/usr/local/cuda/include/texture_indirect_functions.h	/^template<> struct __nv_itex_trait<short2> { typedef void type; };$/;"	s
__nv_itex_trait	/usr/local/cuda/include/texture_indirect_functions.h	/^template<> struct __nv_itex_trait<short4> { typedef void type; };$/;"	s
__nv_itex_trait	/usr/local/cuda/include/texture_indirect_functions.h	/^template<> struct __nv_itex_trait<short> { typedef void type; };$/;"	s
__nv_itex_trait	/usr/local/cuda/include/texture_indirect_functions.h	/^template<> struct __nv_itex_trait<signed char> { typedef void type; };$/;"	s
__nv_itex_trait	/usr/local/cuda/include/texture_indirect_functions.h	/^template<> struct __nv_itex_trait<uchar1> { typedef void type; };$/;"	s
__nv_itex_trait	/usr/local/cuda/include/texture_indirect_functions.h	/^template<> struct __nv_itex_trait<uchar2> { typedef void type; };$/;"	s
__nv_itex_trait	/usr/local/cuda/include/texture_indirect_functions.h	/^template<> struct __nv_itex_trait<uchar4> { typedef void type; };$/;"	s
__nv_itex_trait	/usr/local/cuda/include/texture_indirect_functions.h	/^template<> struct __nv_itex_trait<uint1> { typedef void type; };$/;"	s
__nv_itex_trait	/usr/local/cuda/include/texture_indirect_functions.h	/^template<> struct __nv_itex_trait<uint2> { typedef void type; };$/;"	s
__nv_itex_trait	/usr/local/cuda/include/texture_indirect_functions.h	/^template<> struct __nv_itex_trait<uint4> { typedef void type; };$/;"	s
__nv_itex_trait	/usr/local/cuda/include/texture_indirect_functions.h	/^template<> struct __nv_itex_trait<ulong1> { typedef void type; };$/;"	s
__nv_itex_trait	/usr/local/cuda/include/texture_indirect_functions.h	/^template<> struct __nv_itex_trait<ulong2> { typedef void type; };$/;"	s
__nv_itex_trait	/usr/local/cuda/include/texture_indirect_functions.h	/^template<> struct __nv_itex_trait<ulong4> { typedef void type; };$/;"	s
__nv_itex_trait	/usr/local/cuda/include/texture_indirect_functions.h	/^template<> struct __nv_itex_trait<unsigned char> { typedef void type; };$/;"	s
__nv_itex_trait	/usr/local/cuda/include/texture_indirect_functions.h	/^template<> struct __nv_itex_trait<unsigned int> { typedef void type; };$/;"	s
__nv_itex_trait	/usr/local/cuda/include/texture_indirect_functions.h	/^template<> struct __nv_itex_trait<unsigned long> { typedef void type; };$/;"	s
__nv_itex_trait	/usr/local/cuda/include/texture_indirect_functions.h	/^template<> struct __nv_itex_trait<unsigned short> { typedef void type; };$/;"	s
__nv_itex_trait	/usr/local/cuda/include/texture_indirect_functions.h	/^template<> struct __nv_itex_trait<ushort1> { typedef void type; };$/;"	s
__nv_itex_trait	/usr/local/cuda/include/texture_indirect_functions.h	/^template<> struct __nv_itex_trait<ushort2> { typedef void type; };$/;"	s
__nv_itex_trait	/usr/local/cuda/include/texture_indirect_functions.h	/^template<> struct __nv_itex_trait<ushort4> { typedef void type; };$/;"	s
__nv_lambda_preheader_injection	/usr/local/cuda/include/cuda_runtime.h	/^struct  __device_builtin__ __nv_lambda_preheader_injection { };$/;"	s
__nv_surf_trait	/usr/local/cuda/include/surface_functions.h	/^template <typename T> struct __nv_surf_trait {  typedef void * cast_type; };$/;"	s
__nv_surf_trait	/usr/local/cuda/include/surface_functions.h	/^template<> struct __nv_surf_trait<char1> {  typedef char1 * cast_type; };$/;"	s
__nv_surf_trait	/usr/local/cuda/include/surface_functions.h	/^template<> struct __nv_surf_trait<char2> {  typedef char2 * cast_type; };$/;"	s
__nv_surf_trait	/usr/local/cuda/include/surface_functions.h	/^template<> struct __nv_surf_trait<char4> {  typedef char4 * cast_type; };$/;"	s
__nv_surf_trait	/usr/local/cuda/include/surface_functions.h	/^template<> struct __nv_surf_trait<char> {  typedef char * cast_type; };$/;"	s
__nv_surf_trait	/usr/local/cuda/include/surface_functions.h	/^template<> struct __nv_surf_trait<float1> {  typedef float1 * cast_type; };$/;"	s
__nv_surf_trait	/usr/local/cuda/include/surface_functions.h	/^template<> struct __nv_surf_trait<float2> {  typedef float2 * cast_type; };$/;"	s
__nv_surf_trait	/usr/local/cuda/include/surface_functions.h	/^template<> struct __nv_surf_trait<float4> {  typedef float4 * cast_type; };$/;"	s
__nv_surf_trait	/usr/local/cuda/include/surface_functions.h	/^template<> struct __nv_surf_trait<float> {  typedef float * cast_type; };$/;"	s
__nv_surf_trait	/usr/local/cuda/include/surface_functions.h	/^template<> struct __nv_surf_trait<int1> {  typedef int1 * cast_type; };$/;"	s
__nv_surf_trait	/usr/local/cuda/include/surface_functions.h	/^template<> struct __nv_surf_trait<int2> {  typedef int2 * cast_type; };$/;"	s
__nv_surf_trait	/usr/local/cuda/include/surface_functions.h	/^template<> struct __nv_surf_trait<int4> {  typedef int4 * cast_type; };$/;"	s
__nv_surf_trait	/usr/local/cuda/include/surface_functions.h	/^template<> struct __nv_surf_trait<int> {  typedef int * cast_type; };$/;"	s
__nv_surf_trait	/usr/local/cuda/include/surface_functions.h	/^template<> struct __nv_surf_trait<long long> {  typedef long long * cast_type; };$/;"	s
__nv_surf_trait	/usr/local/cuda/include/surface_functions.h	/^template<> struct __nv_surf_trait<long1> {  typedef int1 * cast_type; };$/;"	s
__nv_surf_trait	/usr/local/cuda/include/surface_functions.h	/^template<> struct __nv_surf_trait<long2> {  typedef int2 * cast_type; };$/;"	s
__nv_surf_trait	/usr/local/cuda/include/surface_functions.h	/^template<> struct __nv_surf_trait<long4> {  typedef uint4 * cast_type; };$/;"	s
__nv_surf_trait	/usr/local/cuda/include/surface_functions.h	/^template<> struct __nv_surf_trait<long> {  typedef int * cast_type; };$/;"	s
__nv_surf_trait	/usr/local/cuda/include/surface_functions.h	/^template<> struct __nv_surf_trait<longlong1> {  typedef longlong1 * cast_type; };$/;"	s
__nv_surf_trait	/usr/local/cuda/include/surface_functions.h	/^template<> struct __nv_surf_trait<longlong2> {  typedef longlong2 * cast_type; };$/;"	s
__nv_surf_trait	/usr/local/cuda/include/surface_functions.h	/^template<> struct __nv_surf_trait<short1> {  typedef short1 * cast_type; };$/;"	s
__nv_surf_trait	/usr/local/cuda/include/surface_functions.h	/^template<> struct __nv_surf_trait<short2> {  typedef short2 * cast_type; };$/;"	s
__nv_surf_trait	/usr/local/cuda/include/surface_functions.h	/^template<> struct __nv_surf_trait<short4> {  typedef short4 * cast_type; };$/;"	s
__nv_surf_trait	/usr/local/cuda/include/surface_functions.h	/^template<> struct __nv_surf_trait<short> {  typedef short * cast_type; };$/;"	s
__nv_surf_trait	/usr/local/cuda/include/surface_functions.h	/^template<> struct __nv_surf_trait<signed char> {  typedef signed char * cast_type; };$/;"	s
__nv_surf_trait	/usr/local/cuda/include/surface_functions.h	/^template<> struct __nv_surf_trait<uchar1> {  typedef uchar1 * cast_type; };$/;"	s
__nv_surf_trait	/usr/local/cuda/include/surface_functions.h	/^template<> struct __nv_surf_trait<uchar2> {  typedef uchar2 * cast_type; };$/;"	s
__nv_surf_trait	/usr/local/cuda/include/surface_functions.h	/^template<> struct __nv_surf_trait<uchar4> {  typedef uchar4 * cast_type; };$/;"	s
__nv_surf_trait	/usr/local/cuda/include/surface_functions.h	/^template<> struct __nv_surf_trait<uint1> {  typedef uint1 * cast_type; };$/;"	s
__nv_surf_trait	/usr/local/cuda/include/surface_functions.h	/^template<> struct __nv_surf_trait<uint2> {  typedef uint2 * cast_type; };$/;"	s
__nv_surf_trait	/usr/local/cuda/include/surface_functions.h	/^template<> struct __nv_surf_trait<uint4> {  typedef uint4 * cast_type; };$/;"	s
__nv_surf_trait	/usr/local/cuda/include/surface_functions.h	/^template<> struct __nv_surf_trait<ulong1> {  typedef uint1 * cast_type; };$/;"	s
__nv_surf_trait	/usr/local/cuda/include/surface_functions.h	/^template<> struct __nv_surf_trait<ulong2> {  typedef uint2 * cast_type; };$/;"	s
__nv_surf_trait	/usr/local/cuda/include/surface_functions.h	/^template<> struct __nv_surf_trait<ulong4> {  typedef int4 * cast_type; };$/;"	s
__nv_surf_trait	/usr/local/cuda/include/surface_functions.h	/^template<> struct __nv_surf_trait<ulonglong1> {  typedef ulonglong1 * cast_type; };$/;"	s
__nv_surf_trait	/usr/local/cuda/include/surface_functions.h	/^template<> struct __nv_surf_trait<ulonglong2> {  typedef ulonglong2 * cast_type; };$/;"	s
__nv_surf_trait	/usr/local/cuda/include/surface_functions.h	/^template<> struct __nv_surf_trait<unsigned char> {  typedef unsigned char * cast_type; };$/;"	s
__nv_surf_trait	/usr/local/cuda/include/surface_functions.h	/^template<> struct __nv_surf_trait<unsigned int> {  typedef unsigned int * cast_type; };$/;"	s
__nv_surf_trait	/usr/local/cuda/include/surface_functions.h	/^template<> struct __nv_surf_trait<unsigned long long> {  typedef unsigned long long * cast_type; };$/;"	s
__nv_surf_trait	/usr/local/cuda/include/surface_functions.h	/^template<> struct __nv_surf_trait<unsigned long> {  typedef unsigned int * cast_type; };$/;"	s
__nv_surf_trait	/usr/local/cuda/include/surface_functions.h	/^template<> struct __nv_surf_trait<unsigned short> {  typedef unsigned short * cast_type; };$/;"	s
__nv_surf_trait	/usr/local/cuda/include/surface_functions.h	/^template<> struct __nv_surf_trait<ushort1> {  typedef ushort1 * cast_type; };$/;"	s
__nv_surf_trait	/usr/local/cuda/include/surface_functions.h	/^template<> struct __nv_surf_trait<ushort2> {  typedef ushort2 * cast_type; };$/;"	s
__nv_surf_trait	/usr/local/cuda/include/surface_functions.h	/^template<> struct __nv_surf_trait<ushort4> {  typedef ushort4 * cast_type; };$/;"	s
__nv_tex2dgather_ret	/usr/local/cuda/include/texture_fetch_functions.h	/^struct __nv_tex2dgather_ret { };$/;"	s
__nv_tex2dgather_ret	/usr/local/cuda/include/texture_fetch_functions.h	/^template <> struct __nv_tex2dgather_ret<char1> { typedef char4 type; };$/;"	s
__nv_tex2dgather_ret	/usr/local/cuda/include/texture_fetch_functions.h	/^template <> struct __nv_tex2dgather_ret<char2> { typedef char4 type; };$/;"	s
__nv_tex2dgather_ret	/usr/local/cuda/include/texture_fetch_functions.h	/^template <> struct __nv_tex2dgather_ret<char3> { typedef char4 type; };$/;"	s
__nv_tex2dgather_ret	/usr/local/cuda/include/texture_fetch_functions.h	/^template <> struct __nv_tex2dgather_ret<char4> { typedef char4 type; };$/;"	s
__nv_tex2dgather_ret	/usr/local/cuda/include/texture_fetch_functions.h	/^template <> struct __nv_tex2dgather_ret<char> { typedef char4 type; };$/;"	s
__nv_tex2dgather_ret	/usr/local/cuda/include/texture_fetch_functions.h	/^template <> struct __nv_tex2dgather_ret<float1> { typedef float4 type; };$/;"	s
__nv_tex2dgather_ret	/usr/local/cuda/include/texture_fetch_functions.h	/^template <> struct __nv_tex2dgather_ret<float2> { typedef float4 type; };$/;"	s
__nv_tex2dgather_ret	/usr/local/cuda/include/texture_fetch_functions.h	/^template <> struct __nv_tex2dgather_ret<float3> { typedef float4 type; };$/;"	s
__nv_tex2dgather_ret	/usr/local/cuda/include/texture_fetch_functions.h	/^template <> struct __nv_tex2dgather_ret<float4> { typedef float4 type; };$/;"	s
__nv_tex2dgather_ret	/usr/local/cuda/include/texture_fetch_functions.h	/^template <> struct __nv_tex2dgather_ret<float> { typedef float4 type; };$/;"	s
__nv_tex2dgather_ret	/usr/local/cuda/include/texture_fetch_functions.h	/^template <> struct __nv_tex2dgather_ret<int1> { typedef int4 type; };$/;"	s
__nv_tex2dgather_ret	/usr/local/cuda/include/texture_fetch_functions.h	/^template <> struct __nv_tex2dgather_ret<int2> { typedef int4 type; };$/;"	s
__nv_tex2dgather_ret	/usr/local/cuda/include/texture_fetch_functions.h	/^template <> struct __nv_tex2dgather_ret<int3> { typedef int4 type; };$/;"	s
__nv_tex2dgather_ret	/usr/local/cuda/include/texture_fetch_functions.h	/^template <> struct __nv_tex2dgather_ret<int4> { typedef int4 type; };$/;"	s
__nv_tex2dgather_ret	/usr/local/cuda/include/texture_fetch_functions.h	/^template <> struct __nv_tex2dgather_ret<int> { typedef int4 type; };$/;"	s
__nv_tex2dgather_ret	/usr/local/cuda/include/texture_fetch_functions.h	/^template <> struct __nv_tex2dgather_ret<short1> { typedef short4 type; };$/;"	s
__nv_tex2dgather_ret	/usr/local/cuda/include/texture_fetch_functions.h	/^template <> struct __nv_tex2dgather_ret<short2> { typedef short4 type; };$/;"	s
__nv_tex2dgather_ret	/usr/local/cuda/include/texture_fetch_functions.h	/^template <> struct __nv_tex2dgather_ret<short3> { typedef short4 type; };$/;"	s
__nv_tex2dgather_ret	/usr/local/cuda/include/texture_fetch_functions.h	/^template <> struct __nv_tex2dgather_ret<short4> { typedef short4 type; };$/;"	s
__nv_tex2dgather_ret	/usr/local/cuda/include/texture_fetch_functions.h	/^template <> struct __nv_tex2dgather_ret<short> { typedef short4 type; };$/;"	s
__nv_tex2dgather_ret	/usr/local/cuda/include/texture_fetch_functions.h	/^template <> struct __nv_tex2dgather_ret<signed char> { typedef char4 type; };$/;"	s
__nv_tex2dgather_ret	/usr/local/cuda/include/texture_fetch_functions.h	/^template <> struct __nv_tex2dgather_ret<uchar1> { typedef uchar4 type; };$/;"	s
__nv_tex2dgather_ret	/usr/local/cuda/include/texture_fetch_functions.h	/^template <> struct __nv_tex2dgather_ret<uchar2> { typedef uchar4 type; };$/;"	s
__nv_tex2dgather_ret	/usr/local/cuda/include/texture_fetch_functions.h	/^template <> struct __nv_tex2dgather_ret<uchar3> { typedef uchar4 type; };$/;"	s
__nv_tex2dgather_ret	/usr/local/cuda/include/texture_fetch_functions.h	/^template <> struct __nv_tex2dgather_ret<uchar4> { typedef uchar4 type; };$/;"	s
__nv_tex2dgather_ret	/usr/local/cuda/include/texture_fetch_functions.h	/^template <> struct __nv_tex2dgather_ret<uint1> { typedef uint4 type; };$/;"	s
__nv_tex2dgather_ret	/usr/local/cuda/include/texture_fetch_functions.h	/^template <> struct __nv_tex2dgather_ret<uint2> { typedef uint4 type; };$/;"	s
__nv_tex2dgather_ret	/usr/local/cuda/include/texture_fetch_functions.h	/^template <> struct __nv_tex2dgather_ret<uint3> { typedef uint4 type; };$/;"	s
__nv_tex2dgather_ret	/usr/local/cuda/include/texture_fetch_functions.h	/^template <> struct __nv_tex2dgather_ret<uint4> { typedef uint4 type; };$/;"	s
__nv_tex2dgather_ret	/usr/local/cuda/include/texture_fetch_functions.h	/^template <> struct __nv_tex2dgather_ret<unsigned char> { typedef uchar4 type; };$/;"	s
__nv_tex2dgather_ret	/usr/local/cuda/include/texture_fetch_functions.h	/^template <> struct __nv_tex2dgather_ret<unsigned int> { typedef uint4 type; };$/;"	s
__nv_tex2dgather_ret	/usr/local/cuda/include/texture_fetch_functions.h	/^template <> struct __nv_tex2dgather_ret<unsigned short> { typedef ushort4 type; };$/;"	s
__nv_tex2dgather_ret	/usr/local/cuda/include/texture_fetch_functions.h	/^template <> struct __nv_tex2dgather_ret<ushort1> { typedef ushort4 type; };$/;"	s
__nv_tex2dgather_ret	/usr/local/cuda/include/texture_fetch_functions.h	/^template <> struct __nv_tex2dgather_ret<ushort2> { typedef ushort4 type; };$/;"	s
__nv_tex2dgather_ret	/usr/local/cuda/include/texture_fetch_functions.h	/^template <> struct __nv_tex2dgather_ret<ushort3> { typedef ushort4 type; };$/;"	s
__nv_tex2dgather_ret	/usr/local/cuda/include/texture_fetch_functions.h	/^template <> struct __nv_tex2dgather_ret<ushort4> { typedef ushort4 type; };$/;"	s
__nv_tex2dgather_rmnf_ret	/usr/local/cuda/include/texture_fetch_functions.h	/^template<> struct __nv_tex2dgather_rmnf_ret<char1> { typedef float4 type; };$/;"	s
__nv_tex2dgather_rmnf_ret	/usr/local/cuda/include/texture_fetch_functions.h	/^template<> struct __nv_tex2dgather_rmnf_ret<char2> { typedef float4 type; };$/;"	s
__nv_tex2dgather_rmnf_ret	/usr/local/cuda/include/texture_fetch_functions.h	/^template<> struct __nv_tex2dgather_rmnf_ret<char3> { typedef float4 type; };$/;"	s
__nv_tex2dgather_rmnf_ret	/usr/local/cuda/include/texture_fetch_functions.h	/^template<> struct __nv_tex2dgather_rmnf_ret<char4> { typedef float4 type; };$/;"	s
__nv_tex2dgather_rmnf_ret	/usr/local/cuda/include/texture_fetch_functions.h	/^template<> struct __nv_tex2dgather_rmnf_ret<char> { typedef float4 type; };$/;"	s
__nv_tex2dgather_rmnf_ret	/usr/local/cuda/include/texture_fetch_functions.h	/^template<> struct __nv_tex2dgather_rmnf_ret<short1> { typedef float4 type; };$/;"	s
__nv_tex2dgather_rmnf_ret	/usr/local/cuda/include/texture_fetch_functions.h	/^template<> struct __nv_tex2dgather_rmnf_ret<short2> { typedef float4 type; };$/;"	s
__nv_tex2dgather_rmnf_ret	/usr/local/cuda/include/texture_fetch_functions.h	/^template<> struct __nv_tex2dgather_rmnf_ret<short3> { typedef float4 type; };$/;"	s
__nv_tex2dgather_rmnf_ret	/usr/local/cuda/include/texture_fetch_functions.h	/^template<> struct __nv_tex2dgather_rmnf_ret<short4> { typedef float4 type; };$/;"	s
__nv_tex2dgather_rmnf_ret	/usr/local/cuda/include/texture_fetch_functions.h	/^template<> struct __nv_tex2dgather_rmnf_ret<signed char> { typedef float4 type; };$/;"	s
__nv_tex2dgather_rmnf_ret	/usr/local/cuda/include/texture_fetch_functions.h	/^template<> struct __nv_tex2dgather_rmnf_ret<signed short> { typedef float4 type; };$/;"	s
__nv_tex2dgather_rmnf_ret	/usr/local/cuda/include/texture_fetch_functions.h	/^template<> struct __nv_tex2dgather_rmnf_ret<uchar1> { typedef float4 type; };$/;"	s
__nv_tex2dgather_rmnf_ret	/usr/local/cuda/include/texture_fetch_functions.h	/^template<> struct __nv_tex2dgather_rmnf_ret<uchar2> { typedef float4 type; };$/;"	s
__nv_tex2dgather_rmnf_ret	/usr/local/cuda/include/texture_fetch_functions.h	/^template<> struct __nv_tex2dgather_rmnf_ret<uchar3> { typedef float4 type; };$/;"	s
__nv_tex2dgather_rmnf_ret	/usr/local/cuda/include/texture_fetch_functions.h	/^template<> struct __nv_tex2dgather_rmnf_ret<uchar4> { typedef float4 type; };$/;"	s
__nv_tex2dgather_rmnf_ret	/usr/local/cuda/include/texture_fetch_functions.h	/^template<> struct __nv_tex2dgather_rmnf_ret<unsigned char> { typedef float4 type; };$/;"	s
__nv_tex2dgather_rmnf_ret	/usr/local/cuda/include/texture_fetch_functions.h	/^template<> struct __nv_tex2dgather_rmnf_ret<unsigned short> { typedef float4 type; };$/;"	s
__nv_tex2dgather_rmnf_ret	/usr/local/cuda/include/texture_fetch_functions.h	/^template<> struct __nv_tex2dgather_rmnf_ret<ushort1> { typedef float4 type; };$/;"	s
__nv_tex2dgather_rmnf_ret	/usr/local/cuda/include/texture_fetch_functions.h	/^template<> struct __nv_tex2dgather_rmnf_ret<ushort2> { typedef float4 type; };$/;"	s
__nv_tex2dgather_rmnf_ret	/usr/local/cuda/include/texture_fetch_functions.h	/^template<> struct __nv_tex2dgather_rmnf_ret<ushort3> { typedef float4 type; };$/;"	s
__nv_tex2dgather_rmnf_ret	/usr/local/cuda/include/texture_fetch_functions.h	/^template<> struct __nv_tex2dgather_rmnf_ret<ushort4> { typedef float4 type; };$/;"	s
__nv_tex2dgather_rmnf_ret	/usr/local/cuda/include/texture_fetch_functions.h	/^template<typename T> struct __nv_tex2dgather_rmnf_ret { };$/;"	s
__nv_tex_rmet_cast	/usr/local/cuda/include/texture_fetch_functions.h	/^template <typename T> struct __nv_tex_rmet_cast { typedef T* type;  };$/;"	s
__nv_tex_rmet_cast	/usr/local/cuda/include/texture_fetch_functions.h	/^template<> struct __nv_tex_rmet_cast<long1> { typedef int1 *type; };$/;"	s
__nv_tex_rmet_cast	/usr/local/cuda/include/texture_fetch_functions.h	/^template<> struct __nv_tex_rmet_cast<long2> { typedef int2 *type; };$/;"	s
__nv_tex_rmet_cast	/usr/local/cuda/include/texture_fetch_functions.h	/^template<> struct __nv_tex_rmet_cast<long4> { typedef int4 *type; };$/;"	s
__nv_tex_rmet_cast	/usr/local/cuda/include/texture_fetch_functions.h	/^template<> struct __nv_tex_rmet_cast<long> { typedef int *type; };$/;"	s
__nv_tex_rmet_cast	/usr/local/cuda/include/texture_fetch_functions.h	/^template<> struct __nv_tex_rmet_cast<ulong1> { typedef uint1 *type; };$/;"	s
__nv_tex_rmet_cast	/usr/local/cuda/include/texture_fetch_functions.h	/^template<> struct __nv_tex_rmet_cast<ulong2> { typedef uint2 *type; };$/;"	s
__nv_tex_rmet_cast	/usr/local/cuda/include/texture_fetch_functions.h	/^template<> struct __nv_tex_rmet_cast<ulong4> { typedef uint4 *type; };$/;"	s
__nv_tex_rmet_cast	/usr/local/cuda/include/texture_fetch_functions.h	/^template<> struct __nv_tex_rmet_cast<unsigned long> { typedef unsigned int *type; };$/;"	s
__nv_tex_rmet_ret	/usr/local/cuda/include/texture_fetch_functions.h	/^struct __nv_tex_rmet_ret { };$/;"	s
__nv_tex_rmet_ret	/usr/local/cuda/include/texture_fetch_functions.h	/^template<> struct __nv_tex_rmet_ret<char1> { typedef char1 type; };$/;"	s
__nv_tex_rmet_ret	/usr/local/cuda/include/texture_fetch_functions.h	/^template<> struct __nv_tex_rmet_ret<char2> { typedef char2 type; };$/;"	s
__nv_tex_rmet_ret	/usr/local/cuda/include/texture_fetch_functions.h	/^template<> struct __nv_tex_rmet_ret<char4> { typedef char4 type; };$/;"	s
__nv_tex_rmet_ret	/usr/local/cuda/include/texture_fetch_functions.h	/^template<> struct __nv_tex_rmet_ret<char> { typedef char type; };$/;"	s
__nv_tex_rmet_ret	/usr/local/cuda/include/texture_fetch_functions.h	/^template<> struct __nv_tex_rmet_ret<float1> { typedef float1 type; };$/;"	s
__nv_tex_rmet_ret	/usr/local/cuda/include/texture_fetch_functions.h	/^template<> struct __nv_tex_rmet_ret<float2> { typedef float2 type; };$/;"	s
__nv_tex_rmet_ret	/usr/local/cuda/include/texture_fetch_functions.h	/^template<> struct __nv_tex_rmet_ret<float4> { typedef float4 type; };$/;"	s
__nv_tex_rmet_ret	/usr/local/cuda/include/texture_fetch_functions.h	/^template<> struct __nv_tex_rmet_ret<float> { typedef float type; };$/;"	s
__nv_tex_rmet_ret	/usr/local/cuda/include/texture_fetch_functions.h	/^template<> struct __nv_tex_rmet_ret<int1> { typedef int1 type; };$/;"	s
__nv_tex_rmet_ret	/usr/local/cuda/include/texture_fetch_functions.h	/^template<> struct __nv_tex_rmet_ret<int2> { typedef int2 type; };$/;"	s
__nv_tex_rmet_ret	/usr/local/cuda/include/texture_fetch_functions.h	/^template<> struct __nv_tex_rmet_ret<int4> { typedef int4 type; };$/;"	s
__nv_tex_rmet_ret	/usr/local/cuda/include/texture_fetch_functions.h	/^template<> struct __nv_tex_rmet_ret<int> { typedef int type; };$/;"	s
__nv_tex_rmet_ret	/usr/local/cuda/include/texture_fetch_functions.h	/^template<> struct __nv_tex_rmet_ret<long1> { typedef long1 type; };$/;"	s
__nv_tex_rmet_ret	/usr/local/cuda/include/texture_fetch_functions.h	/^template<> struct __nv_tex_rmet_ret<long2> { typedef long2 type; };$/;"	s
__nv_tex_rmet_ret	/usr/local/cuda/include/texture_fetch_functions.h	/^template<> struct __nv_tex_rmet_ret<long4> { typedef long4 type; };$/;"	s
__nv_tex_rmet_ret	/usr/local/cuda/include/texture_fetch_functions.h	/^template<> struct __nv_tex_rmet_ret<long> { typedef long type; };$/;"	s
__nv_tex_rmet_ret	/usr/local/cuda/include/texture_fetch_functions.h	/^template<> struct __nv_tex_rmet_ret<short1> { typedef short1 type; };$/;"	s
__nv_tex_rmet_ret	/usr/local/cuda/include/texture_fetch_functions.h	/^template<> struct __nv_tex_rmet_ret<short2> { typedef short2 type; };$/;"	s
__nv_tex_rmet_ret	/usr/local/cuda/include/texture_fetch_functions.h	/^template<> struct __nv_tex_rmet_ret<short4> { typedef short4 type; };$/;"	s
__nv_tex_rmet_ret	/usr/local/cuda/include/texture_fetch_functions.h	/^template<> struct __nv_tex_rmet_ret<short> { typedef short type; };$/;"	s
__nv_tex_rmet_ret	/usr/local/cuda/include/texture_fetch_functions.h	/^template<> struct __nv_tex_rmet_ret<signed char> { typedef signed char type; };$/;"	s
__nv_tex_rmet_ret	/usr/local/cuda/include/texture_fetch_functions.h	/^template<> struct __nv_tex_rmet_ret<uchar1> { typedef uchar1 type; };$/;"	s
__nv_tex_rmet_ret	/usr/local/cuda/include/texture_fetch_functions.h	/^template<> struct __nv_tex_rmet_ret<uchar2> { typedef uchar2 type; };$/;"	s
__nv_tex_rmet_ret	/usr/local/cuda/include/texture_fetch_functions.h	/^template<> struct __nv_tex_rmet_ret<uchar4> { typedef uchar4 type; };$/;"	s
__nv_tex_rmet_ret	/usr/local/cuda/include/texture_fetch_functions.h	/^template<> struct __nv_tex_rmet_ret<uint1> { typedef uint1 type; };$/;"	s
__nv_tex_rmet_ret	/usr/local/cuda/include/texture_fetch_functions.h	/^template<> struct __nv_tex_rmet_ret<uint2> { typedef uint2 type; };$/;"	s
__nv_tex_rmet_ret	/usr/local/cuda/include/texture_fetch_functions.h	/^template<> struct __nv_tex_rmet_ret<uint4> { typedef uint4 type; };$/;"	s
__nv_tex_rmet_ret	/usr/local/cuda/include/texture_fetch_functions.h	/^template<> struct __nv_tex_rmet_ret<ulong1> { typedef ulong1 type; };$/;"	s
__nv_tex_rmet_ret	/usr/local/cuda/include/texture_fetch_functions.h	/^template<> struct __nv_tex_rmet_ret<ulong2> { typedef ulong2 type; };$/;"	s
__nv_tex_rmet_ret	/usr/local/cuda/include/texture_fetch_functions.h	/^template<> struct __nv_tex_rmet_ret<ulong4> { typedef ulong4 type; };$/;"	s
__nv_tex_rmet_ret	/usr/local/cuda/include/texture_fetch_functions.h	/^template<> struct __nv_tex_rmet_ret<unsigned char> { typedef unsigned char type; };$/;"	s
__nv_tex_rmet_ret	/usr/local/cuda/include/texture_fetch_functions.h	/^template<> struct __nv_tex_rmet_ret<unsigned int> { typedef unsigned int type; };$/;"	s
__nv_tex_rmet_ret	/usr/local/cuda/include/texture_fetch_functions.h	/^template<> struct __nv_tex_rmet_ret<unsigned long> { typedef unsigned long type; };$/;"	s
__nv_tex_rmet_ret	/usr/local/cuda/include/texture_fetch_functions.h	/^template<> struct __nv_tex_rmet_ret<unsigned short> { typedef unsigned short type; };$/;"	s
__nv_tex_rmet_ret	/usr/local/cuda/include/texture_fetch_functions.h	/^template<> struct __nv_tex_rmet_ret<ushort1> { typedef ushort1 type; };$/;"	s
__nv_tex_rmet_ret	/usr/local/cuda/include/texture_fetch_functions.h	/^template<> struct __nv_tex_rmet_ret<ushort2> { typedef ushort2 type; };$/;"	s
__nv_tex_rmet_ret	/usr/local/cuda/include/texture_fetch_functions.h	/^template<> struct __nv_tex_rmet_ret<ushort4> { typedef ushort4 type; };$/;"	s
__nv_tex_rmnf_ret	/usr/local/cuda/include/texture_fetch_functions.h	/^struct __nv_tex_rmnf_ret { };$/;"	s
__nv_tex_rmnf_ret	/usr/local/cuda/include/texture_fetch_functions.h	/^template <> struct __nv_tex_rmnf_ret<char1> { typedef float1 type; };$/;"	s
__nv_tex_rmnf_ret	/usr/local/cuda/include/texture_fetch_functions.h	/^template <> struct __nv_tex_rmnf_ret<char2> { typedef float2 type; };$/;"	s
__nv_tex_rmnf_ret	/usr/local/cuda/include/texture_fetch_functions.h	/^template <> struct __nv_tex_rmnf_ret<char4> { typedef float4 type; };$/;"	s
__nv_tex_rmnf_ret	/usr/local/cuda/include/texture_fetch_functions.h	/^template <> struct __nv_tex_rmnf_ret<char> { typedef float type; };$/;"	s
__nv_tex_rmnf_ret	/usr/local/cuda/include/texture_fetch_functions.h	/^template <> struct __nv_tex_rmnf_ret<short1> { typedef float1 type; };$/;"	s
__nv_tex_rmnf_ret	/usr/local/cuda/include/texture_fetch_functions.h	/^template <> struct __nv_tex_rmnf_ret<short2> { typedef float2 type; };$/;"	s
__nv_tex_rmnf_ret	/usr/local/cuda/include/texture_fetch_functions.h	/^template <> struct __nv_tex_rmnf_ret<short4> { typedef float4 type; };$/;"	s
__nv_tex_rmnf_ret	/usr/local/cuda/include/texture_fetch_functions.h	/^template <> struct __nv_tex_rmnf_ret<short> { typedef float type; };$/;"	s
__nv_tex_rmnf_ret	/usr/local/cuda/include/texture_fetch_functions.h	/^template <> struct __nv_tex_rmnf_ret<signed char> { typedef float type; };$/;"	s
__nv_tex_rmnf_ret	/usr/local/cuda/include/texture_fetch_functions.h	/^template <> struct __nv_tex_rmnf_ret<uchar1> { typedef float1 type; };$/;"	s
__nv_tex_rmnf_ret	/usr/local/cuda/include/texture_fetch_functions.h	/^template <> struct __nv_tex_rmnf_ret<uchar2> { typedef float2 type; };$/;"	s
__nv_tex_rmnf_ret	/usr/local/cuda/include/texture_fetch_functions.h	/^template <> struct __nv_tex_rmnf_ret<uchar4> { typedef float4 type; };$/;"	s
__nv_tex_rmnf_ret	/usr/local/cuda/include/texture_fetch_functions.h	/^template <> struct __nv_tex_rmnf_ret<unsigned char> { typedef float type; };$/;"	s
__nv_tex_rmnf_ret	/usr/local/cuda/include/texture_fetch_functions.h	/^template <> struct __nv_tex_rmnf_ret<unsigned short> { typedef float type; };$/;"	s
__nv_tex_rmnf_ret	/usr/local/cuda/include/texture_fetch_functions.h	/^template <> struct __nv_tex_rmnf_ret<ushort1> { typedef float1 type; };$/;"	s
__nv_tex_rmnf_ret	/usr/local/cuda/include/texture_fetch_functions.h	/^template <> struct __nv_tex_rmnf_ret<ushort2> { typedef float2 type; };$/;"	s
__nv_tex_rmnf_ret	/usr/local/cuda/include/texture_fetch_functions.h	/^template <> struct __nv_tex_rmnf_ret<ushort4> { typedef float4 type; };$/;"	s
__nvml_nvml_h__	/usr/local/cuda/include/nvml.h	71;"	d
__nvvm_atom_add_gen_i	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__  int  __nvvm_atom_add_gen_i(volatile int *ptr,$/;"	f
__nvvm_atom_add_gen_ll	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ long long __nvvm_atom_add_gen_ll($/;"	f
__nvvm_atom_and_gen_i	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ int __nvvm_atom_and_gen_i(volatile int *ptr,$/;"	f
__nvvm_atom_and_gen_ll	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ long long __nvvm_atom_and_gen_ll($/;"	f
__nvvm_atom_cas_gen_i	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ int __nvvm_atom_cas_gen_i(volatile int *ptr,$/;"	f
__nvvm_atom_cas_gen_ll	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ long long __nvvm_atom_cas_gen_ll($/;"	f
__nvvm_atom_max_gen_i	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ int __nvvm_atom_max_gen_i(volatile int *ptr,$/;"	f
__nvvm_atom_max_gen_ll	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ long long __nvvm_atom_max_gen_ll($/;"	f
__nvvm_atom_max_gen_ui	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ unsigned __nvvm_atom_max_gen_ui($/;"	f
__nvvm_atom_max_gen_ull	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ unsigned long long __nvvm_atom_max_gen_ull($/;"	f
__nvvm_atom_min_gen_i	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ int __nvvm_atom_min_gen_i(volatile int *ptr,$/;"	f
__nvvm_atom_min_gen_ll	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ long long __nvvm_atom_min_gen_ll($/;"	f
__nvvm_atom_min_gen_ui	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ unsigned __nvvm_atom_min_gen_ui($/;"	f
__nvvm_atom_min_gen_ull	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ unsigned long long __nvvm_atom_min_gen_ull($/;"	f
__nvvm_atom_or_gen_i	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ int __nvvm_atom_or_gen_i(volatile int *ptr,$/;"	f
__nvvm_atom_or_gen_ll	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ long long __nvvm_atom_or_gen_ll($/;"	f
__nvvm_atom_xchg_gen_i	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ int __nvvm_atom_xchg_gen_i(volatile int *ptr,$/;"	f
__nvvm_atom_xchg_gen_ll	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ long long __nvvm_atom_xchg_gen_ll($/;"	f
__nvvm_atom_xor_gen_i	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ int __nvvm_atom_xor_gen_i(volatile int *ptr,$/;"	f
__nvvm_atom_xor_gen_ll	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ long long __nvvm_atom_xor_gen_ll($/;"	f
__occDivideRoundUp	/usr/local/cuda/include/cuda_occupancy.h	/^static __OCC_INLINE int __occDivideRoundUp(int x, int y)$/;"	f
__occMin	/usr/local/cuda/include/cuda_occupancy.h	/^static __OCC_INLINE int __occMin(int lhs, int rhs)$/;"	f
__occRoundUp	/usr/local/cuda/include/cuda_occupancy.h	/^static __OCC_INLINE int __occRoundUp(int x, int y)$/;"	f
__pm0	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ unsigned int __pm0(void)$/;"	f
__pm1	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ unsigned int __pm1(void)$/;"	f
__pm2	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ unsigned int __pm2(void)$/;"	f
__pm3	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ unsigned int __pm3(void)$/;"	f
__popc	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ int __popc(unsigned int x)$/;"	f
__popcll	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ int __popcll(unsigned long long x)$/;"	f
__prof_trigger	/usr/local/cuda/include/device_functions.hpp	331;"	d
__rhadd	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ int __rhadd(int a, int b)$/;"	f
__sad	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ unsigned int __sad(int x, int y, unsigned int z)$/;"	f
__saturatef	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ float __saturatef(float x)$/;"	f
__shfl	/usr/local/cuda/include/cuda_fp16.hpp	/^__CUDA_FP16_DECL__ __half __shfl(__half var, int delta, int width)$/;"	f
__shfl	/usr/local/cuda/include/cuda_fp16.hpp	/^__CUDA_FP16_DECL__ __half2 __shfl(__half2 var, int delta, int width)$/;"	f
__shfl	/usr/local/cuda/include/sm_30_intrinsics.hpp	/^__SM_30_INTRINSICS_DECL__ double __shfl(double var, int srcLane, int width) {$/;"	f
__shfl	/usr/local/cuda/include/sm_30_intrinsics.hpp	/^__SM_30_INTRINSICS_DECL__ float __shfl(float var, int srcLane, int width) {$/;"	f
__shfl	/usr/local/cuda/include/sm_30_intrinsics.hpp	/^__SM_30_INTRINSICS_DECL__ int __shfl(int var, int srcLane, int width) {$/;"	f
__shfl	/usr/local/cuda/include/sm_30_intrinsics.hpp	/^__SM_30_INTRINSICS_DECL__ long __shfl(long var, int srcLane, int width) {$/;"	f
__shfl	/usr/local/cuda/include/sm_30_intrinsics.hpp	/^__SM_30_INTRINSICS_DECL__ long long __shfl(long long var, int srcLane, int width) {$/;"	f
__shfl	/usr/local/cuda/include/sm_30_intrinsics.hpp	/^__SM_30_INTRINSICS_DECL__ unsigned int __shfl(unsigned int var, int srcLane, int width) {$/;"	f
__shfl	/usr/local/cuda/include/sm_30_intrinsics.hpp	/^__SM_30_INTRINSICS_DECL__ unsigned long __shfl(unsigned long var, int srcLane, int width) {$/;"	f
__shfl	/usr/local/cuda/include/sm_30_intrinsics.hpp	/^__SM_30_INTRINSICS_DECL__ unsigned long long __shfl(unsigned long long var, int srcLane, int width) {$/;"	f
__shfl_down	/usr/local/cuda/include/cuda_fp16.hpp	/^__CUDA_FP16_DECL__ __half __shfl_down(__half var, unsigned int delta, int width)$/;"	f
__shfl_down	/usr/local/cuda/include/cuda_fp16.hpp	/^__CUDA_FP16_DECL__ __half2 __shfl_down(__half2 var, unsigned int delta, int width)$/;"	f
__shfl_down	/usr/local/cuda/include/sm_30_intrinsics.hpp	/^__SM_30_INTRINSICS_DECL__ double __shfl_down(double var, unsigned int delta, int width) {$/;"	f
__shfl_down	/usr/local/cuda/include/sm_30_intrinsics.hpp	/^__SM_30_INTRINSICS_DECL__ float __shfl_down(float var, unsigned int delta, int width) {$/;"	f
__shfl_down	/usr/local/cuda/include/sm_30_intrinsics.hpp	/^__SM_30_INTRINSICS_DECL__ int __shfl_down(int var, unsigned int delta, int width) {$/;"	f
__shfl_down	/usr/local/cuda/include/sm_30_intrinsics.hpp	/^__SM_30_INTRINSICS_DECL__ long __shfl_down(long var, unsigned int delta, int width) {$/;"	f
__shfl_down	/usr/local/cuda/include/sm_30_intrinsics.hpp	/^__SM_30_INTRINSICS_DECL__ long long __shfl_down(long long var, unsigned int delta, int width) {$/;"	f
__shfl_down	/usr/local/cuda/include/sm_30_intrinsics.hpp	/^__SM_30_INTRINSICS_DECL__ unsigned int __shfl_down(unsigned int var, unsigned int delta, int width) {$/;"	f
__shfl_down	/usr/local/cuda/include/sm_30_intrinsics.hpp	/^__SM_30_INTRINSICS_DECL__ unsigned long __shfl_down(unsigned long var, unsigned int delta, int width) {$/;"	f
__shfl_down	/usr/local/cuda/include/sm_30_intrinsics.hpp	/^__SM_30_INTRINSICS_DECL__ unsigned long long __shfl_down(unsigned long long var, unsigned int delta, int width) {$/;"	f
__shfl_down_sync	/usr/local/cuda/include/cuda_fp16.hpp	/^__CUDA_FP16_DECL__ __half __shfl_down_sync(unsigned mask, __half var, unsigned int delta, int width)$/;"	f
__shfl_down_sync	/usr/local/cuda/include/cuda_fp16.hpp	/^__CUDA_FP16_DECL__ __half2 __shfl_down_sync(unsigned mask, __half2 var, unsigned int delta, int width)$/;"	f
__shfl_down_sync	/usr/local/cuda/include/sm_30_intrinsics.hpp	/^__SM_30_INTRINSICS_DECL__ double __shfl_down_sync(unsigned mask, double var, unsigned int delta, int width) {$/;"	f
__shfl_down_sync	/usr/local/cuda/include/sm_30_intrinsics.hpp	/^__SM_30_INTRINSICS_DECL__ float __shfl_down_sync(unsigned mask, float var, unsigned int delta, int width) {$/;"	f
__shfl_down_sync	/usr/local/cuda/include/sm_30_intrinsics.hpp	/^__SM_30_INTRINSICS_DECL__ int __shfl_down_sync(unsigned mask, int var, unsigned int delta, int width) {$/;"	f
__shfl_down_sync	/usr/local/cuda/include/sm_30_intrinsics.hpp	/^__SM_30_INTRINSICS_DECL__ long __shfl_down_sync(unsigned mask, long var, unsigned int delta, int width) {$/;"	f
__shfl_down_sync	/usr/local/cuda/include/sm_30_intrinsics.hpp	/^__SM_30_INTRINSICS_DECL__ long long __shfl_down_sync(unsigned mask, long long var, unsigned int delta, int width) {$/;"	f
__shfl_down_sync	/usr/local/cuda/include/sm_30_intrinsics.hpp	/^__SM_30_INTRINSICS_DECL__ unsigned int __shfl_down_sync(unsigned mask, unsigned int var, unsigned int delta, int width) {$/;"	f
__shfl_down_sync	/usr/local/cuda/include/sm_30_intrinsics.hpp	/^__SM_30_INTRINSICS_DECL__ unsigned long __shfl_down_sync(unsigned mask, unsigned long var, unsigned int delta, int width) {$/;"	f
__shfl_down_sync	/usr/local/cuda/include/sm_30_intrinsics.hpp	/^__SM_30_INTRINSICS_DECL__ unsigned long long __shfl_down_sync(unsigned mask, unsigned long long var, unsigned int delta, int width) {$/;"	f
__shfl_sync	/usr/local/cuda/include/cuda_fp16.hpp	/^__CUDA_FP16_DECL__ __half __shfl_sync(unsigned mask, __half var, int delta, int width)$/;"	f
__shfl_sync	/usr/local/cuda/include/cuda_fp16.hpp	/^__CUDA_FP16_DECL__ __half2 __shfl_sync(unsigned mask, __half2 var, int delta, int width)$/;"	f
__shfl_sync	/usr/local/cuda/include/sm_30_intrinsics.hpp	/^__SM_30_INTRINSICS_DECL__ double __shfl_sync(unsigned mask, double var, int srcLane, int width) {$/;"	f
__shfl_sync	/usr/local/cuda/include/sm_30_intrinsics.hpp	/^__SM_30_INTRINSICS_DECL__ float __shfl_sync(unsigned mask, float var, int srcLane, int width) {$/;"	f
__shfl_sync	/usr/local/cuda/include/sm_30_intrinsics.hpp	/^__SM_30_INTRINSICS_DECL__ int __shfl_sync(unsigned mask, int var, int srcLane, int width) {$/;"	f
__shfl_sync	/usr/local/cuda/include/sm_30_intrinsics.hpp	/^__SM_30_INTRINSICS_DECL__ long __shfl_sync(unsigned mask, long var, int srcLane, int width) {$/;"	f
__shfl_sync	/usr/local/cuda/include/sm_30_intrinsics.hpp	/^__SM_30_INTRINSICS_DECL__ long long __shfl_sync(unsigned mask, long long var, int srcLane, int width) {$/;"	f
__shfl_sync	/usr/local/cuda/include/sm_30_intrinsics.hpp	/^__SM_30_INTRINSICS_DECL__ unsigned int __shfl_sync(unsigned mask, unsigned int var, int srcLane, int width) {$/;"	f
__shfl_sync	/usr/local/cuda/include/sm_30_intrinsics.hpp	/^__SM_30_INTRINSICS_DECL__ unsigned long __shfl_sync(unsigned mask, unsigned long var, int srcLane, int width) {$/;"	f
__shfl_sync	/usr/local/cuda/include/sm_30_intrinsics.hpp	/^__SM_30_INTRINSICS_DECL__ unsigned long long __shfl_sync(unsigned mask, unsigned long long var, int srcLane, int width) {$/;"	f
__shfl_up	/usr/local/cuda/include/cuda_fp16.hpp	/^__CUDA_FP16_DECL__ __half __shfl_up(__half var, unsigned int delta, int width)$/;"	f
__shfl_up	/usr/local/cuda/include/cuda_fp16.hpp	/^__CUDA_FP16_DECL__ __half2 __shfl_up(__half2 var, unsigned int delta, int width)$/;"	f
__shfl_up	/usr/local/cuda/include/sm_30_intrinsics.hpp	/^__SM_30_INTRINSICS_DECL__ double __shfl_up(double var, unsigned int delta, int width) {$/;"	f
__shfl_up	/usr/local/cuda/include/sm_30_intrinsics.hpp	/^__SM_30_INTRINSICS_DECL__ float __shfl_up(float var, unsigned int delta, int width) {$/;"	f
__shfl_up	/usr/local/cuda/include/sm_30_intrinsics.hpp	/^__SM_30_INTRINSICS_DECL__ int __shfl_up(int var, unsigned int delta, int width) {$/;"	f
__shfl_up	/usr/local/cuda/include/sm_30_intrinsics.hpp	/^__SM_30_INTRINSICS_DECL__ long __shfl_up(long var, unsigned int delta, int width) {$/;"	f
__shfl_up	/usr/local/cuda/include/sm_30_intrinsics.hpp	/^__SM_30_INTRINSICS_DECL__ long long __shfl_up(long long var, unsigned int delta, int width) {$/;"	f
__shfl_up	/usr/local/cuda/include/sm_30_intrinsics.hpp	/^__SM_30_INTRINSICS_DECL__ unsigned int __shfl_up(unsigned int var, unsigned int delta, int width) {$/;"	f
__shfl_up	/usr/local/cuda/include/sm_30_intrinsics.hpp	/^__SM_30_INTRINSICS_DECL__ unsigned long __shfl_up(unsigned long var, unsigned int delta, int width) {$/;"	f
__shfl_up	/usr/local/cuda/include/sm_30_intrinsics.hpp	/^__SM_30_INTRINSICS_DECL__ unsigned long long __shfl_up(unsigned long long var, unsigned int delta, int width) {$/;"	f
__shfl_up_sync	/usr/local/cuda/include/cuda_fp16.hpp	/^__CUDA_FP16_DECL__ __half __shfl_up_sync(unsigned mask, __half var, unsigned int delta, int width)$/;"	f
__shfl_up_sync	/usr/local/cuda/include/cuda_fp16.hpp	/^__CUDA_FP16_DECL__ __half2 __shfl_up_sync(unsigned mask, __half2 var, unsigned int delta, int width)$/;"	f
__shfl_up_sync	/usr/local/cuda/include/sm_30_intrinsics.hpp	/^__SM_30_INTRINSICS_DECL__ double __shfl_up_sync(unsigned mask, double var, unsigned int delta, int width) {$/;"	f
__shfl_up_sync	/usr/local/cuda/include/sm_30_intrinsics.hpp	/^__SM_30_INTRINSICS_DECL__ float __shfl_up_sync(unsigned mask, float var, unsigned int delta, int width) {$/;"	f
__shfl_up_sync	/usr/local/cuda/include/sm_30_intrinsics.hpp	/^__SM_30_INTRINSICS_DECL__ int __shfl_up_sync(unsigned mask, int var, unsigned int delta, int width) {$/;"	f
__shfl_up_sync	/usr/local/cuda/include/sm_30_intrinsics.hpp	/^__SM_30_INTRINSICS_DECL__ long __shfl_up_sync(unsigned mask, long var, unsigned int delta, int width) {$/;"	f
__shfl_up_sync	/usr/local/cuda/include/sm_30_intrinsics.hpp	/^__SM_30_INTRINSICS_DECL__ long long __shfl_up_sync(unsigned mask, long long var, unsigned int delta, int width) {$/;"	f
__shfl_up_sync	/usr/local/cuda/include/sm_30_intrinsics.hpp	/^__SM_30_INTRINSICS_DECL__ unsigned int __shfl_up_sync(unsigned mask, unsigned int var, unsigned int delta, int width) {$/;"	f
__shfl_up_sync	/usr/local/cuda/include/sm_30_intrinsics.hpp	/^__SM_30_INTRINSICS_DECL__ unsigned long __shfl_up_sync(unsigned mask, unsigned long var, unsigned int delta, int width) {$/;"	f
__shfl_up_sync	/usr/local/cuda/include/sm_30_intrinsics.hpp	/^__SM_30_INTRINSICS_DECL__ unsigned long long __shfl_up_sync(unsigned mask, unsigned long long var, unsigned int delta, int width) {$/;"	f
__shfl_xor	/usr/local/cuda/include/cuda_fp16.hpp	/^__CUDA_FP16_DECL__ __half __shfl_xor(__half var, int delta, int width)$/;"	f
__shfl_xor	/usr/local/cuda/include/cuda_fp16.hpp	/^__CUDA_FP16_DECL__ __half2 __shfl_xor(__half2 var, int delta, int width)$/;"	f
__shfl_xor	/usr/local/cuda/include/sm_30_intrinsics.hpp	/^__SM_30_INTRINSICS_DECL__ double __shfl_xor(double var, int laneMask, int width) {$/;"	f
__shfl_xor	/usr/local/cuda/include/sm_30_intrinsics.hpp	/^__SM_30_INTRINSICS_DECL__ float __shfl_xor(float var, int laneMask, int width) {$/;"	f
__shfl_xor	/usr/local/cuda/include/sm_30_intrinsics.hpp	/^__SM_30_INTRINSICS_DECL__ int __shfl_xor(int var, int laneMask, int width) {$/;"	f
__shfl_xor	/usr/local/cuda/include/sm_30_intrinsics.hpp	/^__SM_30_INTRINSICS_DECL__ long __shfl_xor(long var, int laneMask, int width) {$/;"	f
__shfl_xor	/usr/local/cuda/include/sm_30_intrinsics.hpp	/^__SM_30_INTRINSICS_DECL__ long long __shfl_xor(long long var, int laneMask, int width) {$/;"	f
__shfl_xor	/usr/local/cuda/include/sm_30_intrinsics.hpp	/^__SM_30_INTRINSICS_DECL__ unsigned int __shfl_xor(unsigned int var, int laneMask, int width) {$/;"	f
__shfl_xor	/usr/local/cuda/include/sm_30_intrinsics.hpp	/^__SM_30_INTRINSICS_DECL__ unsigned long __shfl_xor(unsigned long var, int laneMask, int width) {$/;"	f
__shfl_xor	/usr/local/cuda/include/sm_30_intrinsics.hpp	/^__SM_30_INTRINSICS_DECL__ unsigned long long __shfl_xor(unsigned long long var, int laneMask, int width) {$/;"	f
__shfl_xor_sync	/usr/local/cuda/include/cuda_fp16.hpp	/^__CUDA_FP16_DECL__ __half __shfl_xor_sync(unsigned mask, __half var, int delta, int width)$/;"	f
__shfl_xor_sync	/usr/local/cuda/include/cuda_fp16.hpp	/^__CUDA_FP16_DECL__ __half2 __shfl_xor_sync(unsigned mask, __half2 var, int delta, int width)$/;"	f
__shfl_xor_sync	/usr/local/cuda/include/sm_30_intrinsics.hpp	/^__SM_30_INTRINSICS_DECL__ double __shfl_xor_sync(unsigned mask, double var, int laneMask, int width) {$/;"	f
__shfl_xor_sync	/usr/local/cuda/include/sm_30_intrinsics.hpp	/^__SM_30_INTRINSICS_DECL__ float __shfl_xor_sync(unsigned mask, float var, int laneMask, int width) {$/;"	f
__shfl_xor_sync	/usr/local/cuda/include/sm_30_intrinsics.hpp	/^__SM_30_INTRINSICS_DECL__ int __shfl_xor_sync(unsigned mask, int var, int laneMask, int width) {$/;"	f
__shfl_xor_sync	/usr/local/cuda/include/sm_30_intrinsics.hpp	/^__SM_30_INTRINSICS_DECL__ long __shfl_xor_sync(unsigned mask, long var, int laneMask, int width) {$/;"	f
__shfl_xor_sync	/usr/local/cuda/include/sm_30_intrinsics.hpp	/^__SM_30_INTRINSICS_DECL__ long long __shfl_xor_sync(unsigned mask, long long var, int laneMask, int width) {$/;"	f
__shfl_xor_sync	/usr/local/cuda/include/sm_30_intrinsics.hpp	/^__SM_30_INTRINSICS_DECL__ unsigned int __shfl_xor_sync(unsigned mask, unsigned int var, int laneMask, int width) {$/;"	f
__shfl_xor_sync	/usr/local/cuda/include/sm_30_intrinsics.hpp	/^__SM_30_INTRINSICS_DECL__ unsigned long __shfl_xor_sync(unsigned mask, unsigned long var, int laneMask, int width) {$/;"	f
__shfl_xor_sync	/usr/local/cuda/include/sm_30_intrinsics.hpp	/^__SM_30_INTRINSICS_DECL__ unsigned long long __shfl_xor_sync(unsigned mask, unsigned long long var, int laneMask, int width) {$/;"	f
__short2half_rd	/usr/local/cuda/include/cuda_fp16.hpp	/^__CUDA_FP16_DECL__ __half __short2half_rd(short int i)$/;"	f
__short2half_rn	/usr/local/cuda/include/cuda_fp16.hpp	/^__CUDA_FP16_DECL__ __half __short2half_rn(short int i)$/;"	f
__short2half_ru	/usr/local/cuda/include/cuda_fp16.hpp	/^__CUDA_FP16_DECL__ __half __short2half_ru(short int i)$/;"	f
__short2half_rz	/usr/local/cuda/include/cuda_fp16.hpp	/^__CUDA_FP16_DECL__ __half __short2half_rz(short int i)$/;"	f
__short_as_half	/usr/local/cuda/include/cuda_fp16.hpp	/^__CUDA_FP16_DECL__ __half __short_as_half(const short int i)$/;"	f
__signbitd	/usr/local/cuda/include/math_functions_dbl_ptx3.hpp	/^__MATH_FUNCTIONS_DBL_PTX3_DECL__ int __signbitd(double a)$/;"	f
__signbitl	/usr/local/cuda/include/math_functions_dbl_ptx3.hpp	/^__MATH_FUNCTIONS_DBL_PTX3_DECL__ int __signbitl(\/* we do not support long double yet, hence double *\/double a)$/;"	f
__syncthreads_and	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ int __syncthreads_and(int predicate)$/;"	f
__syncthreads_count	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ int __syncthreads_count(int predicate)$/;"	f
__syncthreads_or	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ int __syncthreads_or(int predicate)$/;"	f
__syncwarp	/usr/local/cuda/include/sm_30_intrinsics.hpp	/^void  __syncwarp(unsigned mask) {$/;"	f
__thread_block_tile_base	/usr/local/cuda/include/cooperative_groups.h	/^    _CG_QUALIFIER __thread_block_tile_base() : thread_group(__internal::CoalescedTile) {$/;"	f	class:__thread_block_tile_base
__thread_block_tile_base	/usr/local/cuda/include/cooperative_groups.h	/^class __thread_block_tile_base : public thread_group$/;"	c
__threadfence	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ void __threadfence()$/;"	f
__threadfence_block	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ void __threadfence_block()$/;"	f
__threadfence_system	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ void __threadfence_system()$/;"	f
__trap	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ void __trap(void)$/;"	f
__uAtomicAdd	/usr/local/cuda/include/device_functions.hpp	/^unsigned int __uAtomicAdd(unsigned int *p, unsigned int val)$/;"	f
__uAtomicAdd_block	/usr/local/cuda/include/device_functions.hpp	/^unsigned int __uAtomicAdd_block(unsigned int *p, unsigned int val)$/;"	f
__uAtomicAdd_system	/usr/local/cuda/include/device_functions.hpp	/^unsigned int __uAtomicAdd_system(unsigned int *p, unsigned int val)$/;"	f
__uAtomicAnd	/usr/local/cuda/include/device_functions.hpp	/^unsigned int __uAtomicAnd(unsigned int *p, unsigned int val)$/;"	f
__uAtomicAnd_block	/usr/local/cuda/include/device_functions.hpp	/^unsigned int __uAtomicAnd_block(unsigned int *p, unsigned int val)$/;"	f
__uAtomicAnd_system	/usr/local/cuda/include/device_functions.hpp	/^unsigned int __uAtomicAnd_system(unsigned int *p, unsigned int val)$/;"	f
__uAtomicCAS	/usr/local/cuda/include/device_functions.hpp	/^unsigned int __uAtomicCAS(unsigned int *p, unsigned int compare,$/;"	f
__uAtomicCAS_block	/usr/local/cuda/include/device_functions.hpp	/^unsigned int __uAtomicCAS_block(unsigned int *p, unsigned int compare,$/;"	f
__uAtomicCAS_system	/usr/local/cuda/include/device_functions.hpp	/^unsigned int __uAtomicCAS_system(unsigned int *p, unsigned int compare,$/;"	f
__uAtomicDec	/usr/local/cuda/include/device_functions.hpp	/^unsigned int __uAtomicDec(unsigned int *p, unsigned int val)$/;"	f
__uAtomicDec_block	/usr/local/cuda/include/device_functions.hpp	/^unsigned int __uAtomicDec_block(unsigned int *p, unsigned int val)$/;"	f
__uAtomicDec_system	/usr/local/cuda/include/device_functions.hpp	/^unsigned int __uAtomicDec_system(unsigned int *p, unsigned int val)$/;"	f
__uAtomicExch	/usr/local/cuda/include/device_functions.hpp	/^unsigned int __uAtomicExch(unsigned int *p, unsigned int val)$/;"	f
__uAtomicExch_block	/usr/local/cuda/include/device_functions.hpp	/^unsigned int __uAtomicExch_block(unsigned int *p, unsigned int val)$/;"	f
__uAtomicExch_system	/usr/local/cuda/include/device_functions.hpp	/^unsigned int __uAtomicExch_system(unsigned int *p, unsigned int val)$/;"	f
__uAtomicInc	/usr/local/cuda/include/device_functions.hpp	/^unsigned int __uAtomicInc(unsigned int *p, unsigned int val)$/;"	f
__uAtomicInc_block	/usr/local/cuda/include/device_functions.hpp	/^unsigned int __uAtomicInc_block(unsigned int *p, unsigned int val)$/;"	f
__uAtomicInc_system	/usr/local/cuda/include/device_functions.hpp	/^unsigned int __uAtomicInc_system(unsigned int *p, unsigned int val)$/;"	f
__uAtomicMax	/usr/local/cuda/include/device_functions.hpp	/^unsigned int __uAtomicMax(unsigned int *p, unsigned int val)$/;"	f
__uAtomicMax_block	/usr/local/cuda/include/device_functions.hpp	/^unsigned int __uAtomicMax_block(unsigned int *p, unsigned int val)$/;"	f
__uAtomicMax_system	/usr/local/cuda/include/device_functions.hpp	/^unsigned int __uAtomicMax_system(unsigned int *p, unsigned int val)$/;"	f
__uAtomicMin	/usr/local/cuda/include/device_functions.hpp	/^unsigned int __uAtomicMin(unsigned int *p, unsigned int val)$/;"	f
__uAtomicMin_block	/usr/local/cuda/include/device_functions.hpp	/^unsigned int __uAtomicMin_block(unsigned int *p, unsigned int val)$/;"	f
__uAtomicMin_system	/usr/local/cuda/include/device_functions.hpp	/^unsigned int __uAtomicMin_system(unsigned int *p, unsigned int val)$/;"	f
__uAtomicOr	/usr/local/cuda/include/device_functions.hpp	/^unsigned int __uAtomicOr(unsigned int *p, unsigned int val)$/;"	f
__uAtomicOr_block	/usr/local/cuda/include/device_functions.hpp	/^unsigned int __uAtomicOr_block(unsigned int *p, unsigned int val)$/;"	f
__uAtomicOr_system	/usr/local/cuda/include/device_functions.hpp	/^unsigned int __uAtomicOr_system(unsigned int *p, unsigned int val)$/;"	f
__uAtomicXor	/usr/local/cuda/include/device_functions.hpp	/^unsigned int __uAtomicXor(unsigned int *p, unsigned int val)$/;"	f
__uAtomicXor_block	/usr/local/cuda/include/device_functions.hpp	/^unsigned int __uAtomicXor_block(unsigned int *p, unsigned int val)$/;"	f
__uAtomicXor_system	/usr/local/cuda/include/device_functions.hpp	/^unsigned int __uAtomicXor_system(unsigned int *p, unsigned int val)$/;"	f
__uhadd	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ unsigned int __uhadd(unsigned int a, unsigned int b)$/;"	f
__uint2double_rn	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ double __uint2double_rn(unsigned int i)$/;"	f
__uint2float_rd	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ float __uint2float_rd(unsigned int in)$/;"	f
__uint2float_rn	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ float __uint2float_rn(unsigned int in)$/;"	f
__uint2float_ru	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ float __uint2float_ru(unsigned int in)$/;"	f
__uint2float_rz	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ float __uint2float_rz(unsigned int in)$/;"	f
__uint2half_rd	/usr/local/cuda/include/cuda_fp16.hpp	/^__CUDA_FP16_DECL__ __half __uint2half_rd(unsigned int i)$/;"	f
__uint2half_rn	/usr/local/cuda/include/cuda_fp16.hpp	/^__CUDA_FP16_DECL__ __half __uint2half_rn(unsigned int i)$/;"	f
__uint2half_ru	/usr/local/cuda/include/cuda_fp16.hpp	/^__CUDA_FP16_DECL__ __half __uint2half_ru(unsigned int i)$/;"	f
__uint2half_rz	/usr/local/cuda/include/cuda_fp16.hpp	/^__CUDA_FP16_DECL__ __half __uint2half_rz(unsigned int i)$/;"	f
__uint_as_float	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ float __uint_as_float(unsigned int x)$/;"	f
__ull2double_rd	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ double __ull2double_rd(unsigned long long l)$/;"	f
__ull2double_rn	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ double __ull2double_rn(unsigned long long l)$/;"	f
__ull2double_ru	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ double __ull2double_ru(unsigned long long l)$/;"	f
__ull2double_rz	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ double __ull2double_rz(unsigned long long l)$/;"	f
__ull2float_rd	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ float __ull2float_rd(unsigned long long l)$/;"	f
__ull2float_rn	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ float __ull2float_rn(unsigned long long l)$/;"	f
__ull2float_ru	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ float __ull2float_ru(unsigned long long l)$/;"	f
__ull2float_rz	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ float __ull2float_rz(unsigned long long l)$/;"	f
__ull2half_rd	/usr/local/cuda/include/cuda_fp16.hpp	/^__CUDA_FP16_DECL__ __half __ull2half_rd(unsigned long long int i)$/;"	f
__ull2half_rn	/usr/local/cuda/include/cuda_fp16.hpp	/^__CUDA_FP16_DECL__ __half __ull2half_rn(unsigned long long int i)$/;"	f
__ull2half_ru	/usr/local/cuda/include/cuda_fp16.hpp	/^__CUDA_FP16_DECL__ __half __ull2half_ru(unsigned long long int i)$/;"	f
__ull2half_rz	/usr/local/cuda/include/cuda_fp16.hpp	/^__CUDA_FP16_DECL__ __half __ull2half_rz(unsigned long long int i)$/;"	f
__ullAtomicAdd	/usr/local/cuda/include/device_functions.hpp	/^unsigned long long __ullAtomicAdd(unsigned long long *p, unsigned long long val)$/;"	f
__ullAtomicAdd_block	/usr/local/cuda/include/device_functions.hpp	/^unsigned long long __ullAtomicAdd_block(unsigned long long *p, unsigned long long val)$/;"	f
__ullAtomicAdd_system	/usr/local/cuda/include/device_functions.hpp	/^unsigned long long __ullAtomicAdd_system(unsigned long long *p, unsigned long long val)$/;"	f
__ullAtomicAnd	/usr/local/cuda/include/device_functions.hpp	/^unsigned long long int __ullAtomicAnd(unsigned long long int *p,$/;"	f
__ullAtomicAnd_block	/usr/local/cuda/include/device_functions.hpp	/^unsigned long long __ullAtomicAnd_block(unsigned long long *p, unsigned long long val)$/;"	f
__ullAtomicAnd_system	/usr/local/cuda/include/device_functions.hpp	/^unsigned long long __ullAtomicAnd_system(unsigned long long *p, unsigned long long val)$/;"	f
__ullAtomicCAS	/usr/local/cuda/include/device_functions.hpp	/^unsigned long long int __ullAtomicCAS(unsigned long long int *p,$/;"	f
__ullAtomicCAS_block	/usr/local/cuda/include/device_functions.hpp	/^unsigned long long int __ullAtomicCAS_block(unsigned long long int *p,$/;"	f
__ullAtomicCAS_system	/usr/local/cuda/include/device_functions.hpp	/^unsigned long long int __ullAtomicCAS_system(unsigned long long int *p,$/;"	f
__ullAtomicExch	/usr/local/cuda/include/device_functions.hpp	/^unsigned long long __ullAtomicExch(unsigned long long *p,$/;"	f
__ullAtomicExch_block	/usr/local/cuda/include/device_functions.hpp	/^unsigned long long __ullAtomicExch_block(unsigned long long *p, unsigned long long val)$/;"	f
__ullAtomicExch_system	/usr/local/cuda/include/device_functions.hpp	/^unsigned long long __ullAtomicExch_system(unsigned long long *p, unsigned long long val)$/;"	f
__ullAtomicMax	/usr/local/cuda/include/device_functions.hpp	/^unsigned long long __ullAtomicMax(unsigned long long *p, unsigned long long val)$/;"	f
__ullAtomicMax_block	/usr/local/cuda/include/device_functions.hpp	/^unsigned long long __ullAtomicMax_block(unsigned long long *p, unsigned long long val)$/;"	f
__ullAtomicMax_system	/usr/local/cuda/include/device_functions.hpp	/^unsigned long long __ullAtomicMax_system(unsigned long long *p, unsigned long long val)$/;"	f
__ullAtomicMin	/usr/local/cuda/include/device_functions.hpp	/^unsigned long long __ullAtomicMin(unsigned long long *p, unsigned long long val)$/;"	f
__ullAtomicMin_block	/usr/local/cuda/include/device_functions.hpp	/^unsigned long long __ullAtomicMin_block(unsigned long long *p, unsigned long long val)$/;"	f
__ullAtomicMin_system	/usr/local/cuda/include/device_functions.hpp	/^unsigned long long __ullAtomicMin_system(unsigned long long *p, unsigned long long val)$/;"	f
__ullAtomicOr	/usr/local/cuda/include/device_functions.hpp	/^unsigned long long int __ullAtomicOr(unsigned long long int *p,$/;"	f
__ullAtomicOr_block	/usr/local/cuda/include/device_functions.hpp	/^unsigned long long __ullAtomicOr_block(unsigned long long *p, unsigned long long val)$/;"	f
__ullAtomicOr_system	/usr/local/cuda/include/device_functions.hpp	/^unsigned long long __ullAtomicOr_system(unsigned long long *p, unsigned long long val)$/;"	f
__ullAtomicXor	/usr/local/cuda/include/device_functions.hpp	/^unsigned long long int __ullAtomicXor(unsigned long long int *p,$/;"	f
__ullAtomicXor_block	/usr/local/cuda/include/device_functions.hpp	/^unsigned long long __ullAtomicXor_block(unsigned long long *p, unsigned long long val)$/;"	f
__ullAtomicXor_system	/usr/local/cuda/include/device_functions.hpp	/^unsigned long long __ullAtomicXor_system(unsigned long long *p, unsigned long long val)$/;"	f
__umul24	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ unsigned int __umul24(unsigned int x, unsigned int y)$/;"	f
__umul64hi	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ unsigned long long __umul64hi(unsigned long long x,$/;"	f
__umulhi	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ unsigned int __umulhi(unsigned int x, unsigned int y)$/;"	f
__uni_sync	/usr/local/cuda/include/sm_30_intrinsics.hpp	/^int __uni_sync(unsigned mask, int pred) {$/;"	f
__urhadd	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ unsigned int __urhadd(unsigned int a, unsigned int b)$/;"	f
__usad	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ unsigned int __usad(unsigned int x,$/;"	f
__ushort2half_rd	/usr/local/cuda/include/cuda_fp16.hpp	/^__CUDA_FP16_DECL__ __half __ushort2half_rd(unsigned short int i)$/;"	f
__ushort2half_rn	/usr/local/cuda/include/cuda_fp16.hpp	/^__CUDA_FP16_DECL__ __half __ushort2half_rn(unsigned short int i)$/;"	f
__ushort2half_ru	/usr/local/cuda/include/cuda_fp16.hpp	/^__CUDA_FP16_DECL__ __half __ushort2half_ru(unsigned short int i)$/;"	f
__ushort2half_rz	/usr/local/cuda/include/cuda_fp16.hpp	/^__CUDA_FP16_DECL__ __half __ushort2half_rz(unsigned short int i)$/;"	f
__ushort_as_half	/usr/local/cuda/include/cuda_fp16.hpp	/^__CUDA_FP16_DECL__ __half __ushort_as_half(const unsigned short int i)$/;"	f
__vabs2	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ unsigned int __vabs2(unsigned int a)$/;"	f
__vabs4	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ unsigned int __vabs4(unsigned int a)$/;"	f
__vabsdiffs2	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ unsigned int __vabsdiffs2(unsigned int a, unsigned int b)$/;"	f
__vabsdiffs4	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ unsigned int __vabsdiffs4(unsigned int a, unsigned int b)$/;"	f
__vabsdiffu2	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ unsigned int __vabsdiffu2(unsigned int a, unsigned int b)$/;"	f
__vabsdiffu4	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ unsigned int __vabsdiffu4(unsigned int a, unsigned int b)$/;"	f
__vabsss2	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ unsigned int __vabsss2(unsigned int a)$/;"	f
__vabsss4	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ unsigned int __vabsss4(unsigned int a)$/;"	f
__vadd2	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ unsigned int __vadd2(unsigned int a, unsigned int b)$/;"	f
__vadd4	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ unsigned int __vadd4(unsigned int a, unsigned int b)$/;"	f
__vaddss2	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ unsigned int __vaddss2 (unsigned int a, unsigned int b)$/;"	f
__vaddss4	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ unsigned int __vaddss4 (unsigned int a, unsigned int b)$/;"	f
__vaddus2	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ unsigned int __vaddus2 (unsigned int a, unsigned int b)$/;"	f
__vaddus4	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ unsigned int __vaddus4 (unsigned int a, unsigned int b)$/;"	f
__vavgs2	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ unsigned int __vavgs2(unsigned int a, unsigned int b)$/;"	f
__vavgs4	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ unsigned int __vavgs4(unsigned int a, unsigned int b)$/;"	f
__vavgu2	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ unsigned int __vavgu2(unsigned int a, unsigned int b)$/;"	f
__vavgu4	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ unsigned int __vavgu4(unsigned int a, unsigned int b)$/;"	f
__vcmpeq2	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ unsigned int __vcmpeq2(unsigned int a, unsigned int b)$/;"	f
__vcmpeq4	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ unsigned int __vcmpeq4(unsigned int a, unsigned int b)$/;"	f
__vcmpges2	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ unsigned int __vcmpges2(unsigned int a, unsigned int b)$/;"	f
__vcmpges4	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ unsigned int __vcmpges4(unsigned int a, unsigned int b)$/;"	f
__vcmpgeu2	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ unsigned int __vcmpgeu2(unsigned int a, unsigned int b)$/;"	f
__vcmpgeu4	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ unsigned int __vcmpgeu4(unsigned int a, unsigned int b)$/;"	f
__vcmpgts2	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ unsigned int __vcmpgts2(unsigned int a, unsigned int b)$/;"	f
__vcmpgts4	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ unsigned int __vcmpgts4(unsigned int a, unsigned int b)$/;"	f
__vcmpgtu2	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ unsigned int __vcmpgtu2(unsigned int a, unsigned int b)$/;"	f
__vcmpgtu4	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ unsigned int __vcmpgtu4(unsigned int a, unsigned int b)$/;"	f
__vcmples2	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ unsigned int __vcmples2(unsigned int a, unsigned int b)$/;"	f
__vcmples4	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ unsigned int __vcmples4(unsigned int a, unsigned int b)$/;"	f
__vcmpleu2	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ unsigned int __vcmpleu2(unsigned int a, unsigned int b)$/;"	f
__vcmpleu4	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ unsigned int __vcmpleu4(unsigned int a, unsigned int b)$/;"	f
__vcmplts2	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ unsigned int __vcmplts2(unsigned int a, unsigned int b)$/;"	f
__vcmplts4	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ unsigned int __vcmplts4(unsigned int a, unsigned int b)$/;"	f
__vcmpltu2	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ unsigned int __vcmpltu2(unsigned int a, unsigned int b)$/;"	f
__vcmpltu4	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ unsigned int __vcmpltu4(unsigned int a, unsigned int b)$/;"	f
__vcmpne2	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ unsigned int __vcmpne2(unsigned int a, unsigned int b)$/;"	f
__vcmpne4	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ unsigned int __vcmpne4(unsigned int a, unsigned int b)$/;"	f
__vhaddu2	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ unsigned int __vhaddu2(unsigned int a, unsigned int b)$/;"	f
__vhaddu4	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ unsigned int __vhaddu4(unsigned int a, unsigned int b)$/;"	f
__vmaxs2	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ unsigned int __vmaxs2(unsigned int a, unsigned int b)$/;"	f
__vmaxs4	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ unsigned int __vmaxs4(unsigned int a, unsigned int b)$/;"	f
__vmaxu2	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ unsigned int __vmaxu2(unsigned int a, unsigned int b)$/;"	f
__vmaxu4	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ unsigned int __vmaxu4(unsigned int a, unsigned int b)$/;"	f
__vmins2	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ unsigned int __vmins2(unsigned int a, unsigned int b)$/;"	f
__vmins4	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ unsigned int __vmins4(unsigned int a, unsigned int b)$/;"	f
__vminu2	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ unsigned int __vminu2(unsigned int a, unsigned int b)$/;"	f
__vminu4	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ unsigned int __vminu4(unsigned int a, unsigned int b)$/;"	f
__vneg2	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ unsigned int __vneg2(unsigned int a)$/;"	f
__vneg4	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ unsigned int __vneg4(unsigned int a)$/;"	f
__vnegss2	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ unsigned int __vnegss2(unsigned int a)$/;"	f
__vnegss4	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ unsigned int __vnegss4(unsigned int a)$/;"	f
__vsads2	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ unsigned int __vsads2(unsigned int a, unsigned int b)$/;"	f
__vsads4	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ unsigned int __vsads4(unsigned int a, unsigned int b)$/;"	f
__vsadu2	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ unsigned int __vsadu2(unsigned int a, unsigned int b)$/;"	f
__vsadu4	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ unsigned int __vsadu4(unsigned int a, unsigned int b)$/;"	f
__vseteq2	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ unsigned int __vseteq2(unsigned int a, unsigned int b)$/;"	f
__vseteq4	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ unsigned int __vseteq4(unsigned int a, unsigned int b)$/;"	f
__vsetges2	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ unsigned int __vsetges2(unsigned int a, unsigned int b)$/;"	f
__vsetges4	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ unsigned int __vsetges4(unsigned int a, unsigned int b)$/;"	f
__vsetgeu2	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ unsigned int __vsetgeu2(unsigned int a, unsigned int b)$/;"	f
__vsetgeu4	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ unsigned int __vsetgeu4(unsigned int a, unsigned int b)$/;"	f
__vsetgts2	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ unsigned int __vsetgts2(unsigned int a, unsigned int b)$/;"	f
__vsetgts4	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ unsigned int __vsetgts4(unsigned int a, unsigned int b)$/;"	f
__vsetgtu2	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ unsigned int __vsetgtu2(unsigned int a, unsigned int b)$/;"	f
__vsetgtu4	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ unsigned int __vsetgtu4(unsigned int a, unsigned int b)$/;"	f
__vsetles2	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ unsigned int __vsetles2(unsigned int a, unsigned int b)$/;"	f
__vsetles4	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ unsigned int __vsetles4(unsigned int a, unsigned int b)$/;"	f
__vsetleu2	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ unsigned int __vsetleu2(unsigned int a, unsigned int b)$/;"	f
__vsetleu4	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ unsigned int __vsetleu4(unsigned int a, unsigned int b)$/;"	f
__vsetlts2	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ unsigned int __vsetlts2(unsigned int a, unsigned int b)$/;"	f
__vsetlts4	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ unsigned int __vsetlts4(unsigned int a, unsigned int b)$/;"	f
__vsetltu2	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ unsigned int __vsetltu2(unsigned int a, unsigned int b)$/;"	f
__vsetltu4	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ unsigned int __vsetltu4(unsigned int a, unsigned int b)$/;"	f
__vsetne2	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ unsigned int __vsetne2(unsigned int a, unsigned int b)$/;"	f
__vsetne4	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ unsigned int __vsetne4(unsigned int a, unsigned int b)$/;"	f
__vsub2	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ unsigned int __vsub2(unsigned int a, unsigned int b)$/;"	f
__vsub4	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ unsigned int __vsub4(unsigned int a, unsigned int b)$/;"	f
__vsubss2	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ unsigned int __vsubss2 (unsigned int a, unsigned int b)$/;"	f
__vsubss4	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ unsigned int __vsubss4(unsigned int a, unsigned int b)$/;"	f
__vsubus2	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ unsigned int __vsubus2 (unsigned int a, unsigned int b)$/;"	f
__vsubus4	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ unsigned int __vsubus4(unsigned int a, unsigned int b)$/;"	f
_curand_M2_double	/usr/local/cuda/include/curand_poisson.h	/^QUALIFIERS unsigned int _curand_M2_double(T x, curandDistributionM2Shift_t distributionM2)$/;"	f
_curand_M2_double4	/usr/local/cuda/include/curand_poisson.h	/^QUALIFIERS uint4 _curand_M2_double4(T x, curandDistributionM2Shift_t distributionM2)$/;"	f
_curand_binary_search_double	/usr/local/cuda/include/curand_poisson.h	/^QUALIFIERS unsigned int _curand_binary_search_double(T x, curandDistributionShift_t distribution)$/;"	f
_curand_box_muller	/usr/local/cuda/include/curand_normal.h	/^QUALIFIERS float2 _curand_box_muller(unsigned int x, unsigned int y)$/;"	f
_curand_box_muller_double	/usr/local/cuda/include/curand_normal.h	/^_curand_box_muller_double(unsigned int x0, unsigned int x1, $/;"	f
_curand_discrete	/usr/local/cuda/include/curand_discrete2.h	/^QUALIFIERS unsigned int _curand_discrete(T x, curandDiscreteDistribution_t discrete_distribution){$/;"	f
_curand_init_scratch	/usr/local/cuda/include/curand_kernel.h	/^QUALIFIERS void _curand_init_scratch(unsigned long long seed, $/;"	f
_curand_normal_icdf	/usr/local/cuda/include/curand_normal_static.h	/^QUALIFIERS_STATIC float _curand_normal_icdf(unsigned int x)$/;"	f
_curand_normal_icdf	/usr/local/cuda/include/curand_normal_static.h	/^QUALIFIERS_STATIC float _curand_normal_icdf(unsigned long long x)$/;"	f
_curand_normal_icdf_double	/usr/local/cuda/include/curand_normal_static.h	/^QUALIFIERS_STATIC double _curand_normal_icdf_double(unsigned int x)$/;"	f
_curand_normal_icdf_double	/usr/local/cuda/include/curand_normal_static.h	/^QUALIFIERS_STATIC double _curand_normal_icdf_double(unsigned long long x)$/;"	f
_curand_poisson	/usr/local/cuda/include/curand_poisson.h	/^QUALIFIERS unsigned int _curand_poisson(T x, double lambda)$/;"	f
_curand_poisson_ITR_double	/usr/local/cuda/include/curand_poisson.h	/^QUALIFIERS unsigned int _curand_poisson_ITR_double(T x, double lambda)$/;"	f
_curand_poisson_from_normal	/usr/local/cuda/include/curand_poisson.h	/^QUALIFIERS unsigned int _curand_poisson_from_normal(T x, double lambda)$/;"	f
_curand_uniform	/usr/local/cuda/include/curand_uniform.h	/^QUALIFIERS float _curand_uniform(unsigned int x)$/;"	f
_curand_uniform	/usr/local/cuda/include/curand_uniform.h	/^QUALIFIERS float _curand_uniform(unsigned long long x)$/;"	f
_curand_uniform4	/usr/local/cuda/include/curand_uniform.h	/^QUALIFIERS float4 _curand_uniform4(uint4 x)$/;"	f
_curand_uniform4_double	/usr/local/cuda/include/curand_uniform.h	/^QUALIFIERS double4 _curand_uniform4_double(uint4 x)$/;"	f
_curand_uniform_double	/usr/local/cuda/include/curand_uniform.h	/^QUALIFIERS double _curand_uniform_double(unsigned int x)$/;"	f
_curand_uniform_double	/usr/local/cuda/include/curand_uniform.h	/^QUALIFIERS double _curand_uniform_double(unsigned long long x)$/;"	f
_curand_uniform_double_hq	/usr/local/cuda/include/curand_uniform.h	/^QUALIFIERS double _curand_uniform_double_hq(unsigned int x, unsigned int y)$/;"	f
_data	/usr/local/cuda/include/cooperative_groups.h	/^    } _data;$/;"	m	class:grid_group
_data	/usr/local/cuda/include/cooperative_groups.h	/^    } _data;$/;"	m	class:multi_grid_group
_data	/usr/local/cuda/include/cooperative_groups.h	/^    } _data;$/;"	m	class:thread_group
_dsign	/usr/local/cuda/include/math_functions.hpp	/^__MATH_FUNCTIONS_DECL__ int _dsign(double a)$/;"	f
_fdsign	/usr/local/cuda/include/math_functions.hpp	/^__MATH_FUNCTIONS_DECL__ int _fdsign(float a)$/;"	f
_get_tiled_threads	/usr/local/cuda/include/cooperative_groups.h	/^    _CG_QUALIFIER coalesced_group _get_tiled_threads(unsigned int tilesz) const {$/;"	f	class:coalesced_group
_get_tiled_threads	/usr/local/cuda/include/cooperative_groups.h	/^    _CG_QUALIFIER thread_group _get_tiled_threads(unsigned int tilesz) const {$/;"	f	class:thread_block
_ldsign	/usr/local/cuda/include/math_functions.hpp	/^__MATH_FUNCTIONS_DECL__ int _ldsign(\/* we do not support long double yet, hence double *\/double a)$/;"	f
_packLanes	/usr/local/cuda/include/cooperative_groups.h	/^    _CG_QUALIFIER unsigned int _packLanes(unsigned laneMask) const {$/;"	f	class:coalesced_group
_philox4x32round	/usr/local/cuda/include/curand_philox4x32_x.h	/^QUALIFIERS uint4 _philox4x32round(uint4 ctr, uint2 key)$/;"	f
_skipahead_scratch	/usr/local/cuda/include/curand_kernel.h	/^QUALIFIERS void _skipahead_scratch(unsigned long long x, T *state, unsigned int *scratch)$/;"	f
_skipahead_sequence_scratch	/usr/local/cuda/include/curand_kernel.h	/^QUALIFIERS void _skipahead_sequence_scratch(unsigned long long x, T *state, unsigned int *scratch)$/;"	f
_skipahead_stride	/usr/local/cuda/include/curand_kernel.h	/^QUALIFIERS void _skipahead_stride(int n_log2, PT state)$/;"	f
aComponentAcHtSel	/usr/local/cuda/include/nppi_compression_functions.h	/^    Npp8u aComponentAcHtSel[4]; \/**< AC Huffman table selector per component *\/$/;"	m	struct:__anon165
aComponentDcHtSel	/usr/local/cuda/include/nppi_compression_functions.h	/^    Npp8u aComponentDcHtSel[4]; \/**< DC Huffman table selector per component *\/$/;"	m	struct:__anon165
aComponentIdx	/usr/local/cuda/include/nppi_compression_functions.h	/^    Npp8u aComponentIdx[4]; \/**< Frame-indexes of components.$/;"	m	struct:__anon165
aComponentSubsampling	/usr/local/cuda/include/nppi_compression_functions.h	/^    NppiSize aComponentSubsampling[4]; \/**< Subsampling factors of component, as described in frame header *\/$/;"	m	struct:__anon164
aTransformedCoeffs	/usr/local/cuda/include/nppi_geometry_transforms.h	/^    Npp64f aTransformedCoeffs[2][3]; \/* FOR INTERNAL USE, DO NOT INITIALIZE  *\/$/;"	m	struct:__anon170
abs	/usr/local/cuda/include/math_functions.hpp	/^__host__ __device__ __cudart_builtin__ double    abs(double in)          { return fabs(in); }$/;"	f
abs	/usr/local/cuda/include/math_functions.hpp	/^__host__ __device__ __cudart_builtin__ float     abs(float in)           { return fabsf(in); }$/;"	f
abs	/usr/local/cuda/include/math_functions.hpp	/^__host__ __device__ __cudart_builtin__ long int  abs(long int in)        { return llabs(in); }$/;"	f
abs	/usr/local/cuda/include/math_functions.hpp	/^__host__ __device__ __cudart_builtin__ long long int abs(long long int a) { return llabs(a); }$/;"	f
abs	/usr/local/cuda/include/math_functions.hpp	/^static __inline__ __host__ __device__ __cudart_builtin__ long long int abs(long long int a)$/;"	f
acos	/usr/local/cuda/include/math_functions.hpp	/^__host__ __device__ __cudart_builtin__ float     acos(float in)          { return acosf(in); }$/;"	f
acosh	/usr/local/cuda/include/math_functions.hpp	/^__MATH_FUNCTIONS_DECL__ float acosh(float a)$/;"	f
activate	src/activations.c	/^float activate(float x, ACTIVATION a)$/;"	f
activate_array	src/activations.c	/^void activate_array(float *x, const int n, const ACTIVATION a)$/;"	f
activeBlocksPerMultiprocessor	/usr/local/cuda/include/cuda_occupancy.h	/^    int activeBlocksPerMultiprocessor; \/\/ Occupancy$/;"	m	struct:cudaOccResult
activeRefIdx	/usr/local/cuda/include/dynlink_cuviddec.h	/^    unsigned int activeRefIdx[3];$/;"	m	struct:_CUVIDVP9PICPARAMS
adaptive_tcoeff_level_prediction_flag	/usr/local/cuda/include/dynlink_cuviddec.h	/^    unsigned char adaptive_tcoeff_level_prediction_flag;$/;"	m	struct:_CUVIDH264SVCEXT
add_bias	src/convolutional_layer.c	/^void add_bias(float *output, float *biases, int batch, int n, int size)$/;"	f
add_pixel	src/image.c	/^void add_pixel(image m, int x, int y, int c, float val)$/;"	f
address	/usr/local/cuda/include/cuda.h	/^        CUdeviceptr address;$/;"	m	struct:CUstreamBatchMemOpParams_union::CUstreamMemOpWaitValueParams_st
address	/usr/local/cuda/include/cuda.h	/^        CUdeviceptr address;$/;"	m	struct:CUstreamBatchMemOpParams_union::CUstreamMemOpWriteValueParams_st
addressMode	/usr/local/cuda/include/cuda.h	/^    CUaddress_mode addressMode[3];  \/**< Address modes *\/$/;"	m	struct:CUDA_TEXTURE_DESC_st
addressMode	/usr/local/cuda/include/texture_types.h	/^    enum cudaTextureAddressMode  addressMode[3];$/;"	m	struct:textureReference	typeref:enum:textureReference::cudaTextureAddressMode
addressMode	/usr/local/cuda/include/texture_types.h	/^    enum cudaTextureAddressMode addressMode[3];$/;"	m	struct:cudaTextureDesc	typeref:enum:cudaTextureDesc::cudaTextureAddressMode
ai2_bin_conv2D	src/binary_convolution.c	/^void ai2_bin_conv2D(float *output, const BINARY_WORD *input, const BINARY_WORD *weights, int ix, int iy, int wx, int wy, int pad, int stride) {$/;"	f
ai2_bin_conv_layer	src/binary_convolution.h	/^} ai2_bin_conv_layer;$/;"	t	typeref:struct:__anon1
ai2_bin_dp	src/binary_convolution.c	/^int ai2_bin_dp(BINARY_WORD *a, BINARY_WORD *b, dim3 vdim) {     \/\/ TODO unroll$/;"	f
ai2_bin_forward	src/binary_convolution.c	/^void ai2_bin_forward(ai2_bin_conv_layer *l) {$/;"	f
ai2_bin_to_flt	src/binary_convolution.c	/^void ai2_bin_to_flt(float *real_vol, BINARY_WORD *binary_vol, dim3 dim) {   \/\/ TODO unit tests$/;"	f
ai2_bitset	src/binary_convolution.c	/^void ai2_bitset(BINARY_WORD *bword, unsigned int position) {$/;"	f
ai2_calc_alpha	src/binary_convolution.c	/^void ai2_calc_alpha(float *alpha_plane, float *alpha_volume, dim3 vdim) {$/;"	f
ai2_calc_beta	src/binary_convolution.c	/^void ai2_calc_beta(float *beta_plane, float *beta_volume, dim3 vdim) {$/;"	f
ai2_flt_to_bin	src/binary_convolution.c	/^void ai2_flt_to_bin(BINARY_WORD *binary_vol, float *real_vol, dim3 dim) {$/;"	f
ai2_free_bin_conv_layer	src/binary_convolution.c	/^void ai2_free_bin_conv_layer(ai2_bin_conv_layer *layer) {$/;"	f
ai2_getFltOutput	src/binary_convolution.c	/^float* ai2_getFltOutput(ai2_bin_conv_layer *layer) {$/;"	f
ai2_isFloatWhole	src/binary_convolution.c	/^int ai2_isFloatWhole(float f) { \/\/ TODO unit test$/;"	f
ai2_is_set	src/binary_convolution.c	/^int ai2_is_set(BINARY_WORD bword, unsigned int position) {$/;"	f
ai2_make_bin_conv_layer	src/binary_convolution.c	/^ai2_bin_conv_layer ai2_make_bin_conv_layer(int b, int c, int ix, int iy, int wx, int wy, int s, int pad) {$/;"	f
ai2_pointwise_mul_mm	src/binary_convolution.c	/^void ai2_pointwise_mul_mm(float *output, const float *input, int N) {$/;"	f
ai2_pointwise_mul_mm_2d	src/binary_convolution.c	/^void ai2_pointwise_mul_mm_2d(float *output, const float *alpha, int ix, int iy, int wx, int wy, int pad) {$/;"	f
ai2_setBinInput	src/binary_convolution.c	/^void ai2_setBinInput(ai2_bin_conv_layer *layer, BINARY_WORD *new_input) {$/;"	f
ai2_setBinOutput	src/binary_convolution.c	/^void ai2_setBinOutput(ai2_bin_conv_layer *layer, BINARY_WORD *new_output) {$/;"	f
ai2_setBinWeights	src/binary_convolution.c	/^void ai2_setBinWeights(ai2_bin_conv_layer *layer, BINARY_WORD *new_weights) {$/;"	f
ai2_setFltAlpha	src/binary_convolution.c	/^void ai2_setFltAlpha(ai2_bin_conv_layer *layer, float *new_alpha) {$/;"	f
ai2_setFltBeta	src/binary_convolution.c	/^void ai2_setFltBeta(ai2_bin_conv_layer *layer, float *new_beta) {$/;"	f
ai2_setFltInput	src/binary_convolution.c	/^void ai2_setFltInput(ai2_bin_conv_layer *layer, float *new_input) {$/;"	f
ai2_setFltNewBeta	src/binary_convolution.c	/^void ai2_setFltNewBeta(ai2_bin_conv_layer *layer, float *new_new_beta) {$/;"	f
ai2_setFltOutput	src/binary_convolution.c	/^void ai2_setFltOutput(ai2_bin_conv_layer *layer, float *new_output) {$/;"	f
ai2_setFltWeights	src/binary_convolution.c	/^void ai2_setFltWeights(ai2_bin_conv_layer *layer, float *new_weights) {$/;"	f
ai2_throw_error	src/binary_convolution.c	/^void ai2_throw_error(char *str) {$/;"	f
ai2_transpose3D	src/binary_convolution.c	/^void ai2_transpose3D(float *data, dim3 d) {$/;"	f
algo	/usr/local/cuda/include/cudnn.h	/^    cudnnConvolutionBwdDataAlgo_t   algo;$/;"	m	struct:__anon70
algo	/usr/local/cuda/include/cudnn.h	/^    cudnnConvolutionBwdFilterAlgo_t algo;$/;"	m	struct:__anon67
algo	/usr/local/cuda/include/cudnn.h	/^    cudnnConvolutionFwdAlgo_t   algo;$/;"	m	struct:__anon64
algorithm	/usr/local/cuda/include/nvgraph.h	/^       nvgraphSpectralClusteringType_t algorithm ; \/\/ algorithm to use$/;"	m	struct:SpectralClusteringParameter
alias	/usr/local/cuda/include/cuda.h	/^        CUdeviceptr alias; \/**< For driver internal use. Initial value is unimportant. *\/$/;"	m	struct:CUstreamBatchMemOpParams_union::CUstreamMemOpWaitValueParams_st
alias	/usr/local/cuda/include/cuda.h	/^        CUdeviceptr alias; \/**< For driver internal use. Initial value is unimportant. *\/$/;"	m	struct:CUstreamBatchMemOpParams_union::CUstreamMemOpWriteValueParams_st
all	/usr/local/cuda/include/cooperative_groups.h	/^    _CG_QUALIFIER int all(int predicate) const {$/;"	f	class:__thread_block_tile_base
all	/usr/local/cuda/include/cooperative_groups.h	/^    _CG_QUALIFIER int all(int predicate) const {$/;"	f	class:coalesced_group
all	/usr/local/cuda/include/device_atomic_functions.hpp	/^__DEVICE_ATOMIC_FUNCTIONS_DECL__ bool all(bool cond)$/;"	f
allocatedRegistersPerBlock	/usr/local/cuda/include/cuda_occupancy.h	/^    int allocatedRegistersPerBlock;    \/\/ Actual number of registers allocated per$/;"	m	struct:cudaOccResult
allocatedSharedMemPerBlock	/usr/local/cuda/include/cuda_occupancy.h	/^    size_t allocatedSharedMemPerBlock; \/\/ Actual size of shared memory allocated$/;"	m	struct:cudaOccResult
allow_high_precision_mv	/usr/local/cuda/include/dynlink_cuviddec.h	/^    unsigned short allow_high_precision_mv : 1;$/;"	m	struct:_CUVIDVP9PICPARAMS
alpha	src/binary_convolution.h	/^    float *alpha;       \/\/ we assume alpha is calculated at the beginning of initialization$/;"	m	struct:__anon1
alpha_plane	src/common.h	/^    dim3 alpha_plane;$/;"	m	struct:__anon6
alphanum_to_int	src/utils.c	/^int alphanum_to_int(char c)$/;"	f
alternate_scan	/usr/local/cuda/include/dynlink_cuviddec.h	/^    int alternate_scan;$/;"	m	struct:_CUVIDMPEG2PICPARAMS
alternate_vertical_scan_flag	/usr/local/cuda/include/dynlink_cuviddec.h	/^    int alternate_vertical_scan_flag;$/;"	m	struct:_CUVIDMPEG4PICPARAMS
amp_enabled_flag	/usr/local/cuda/include/dynlink_cuviddec.h	/^    unsigned char amp_enabled_flag;$/;"	m	struct:_CUVIDHEVCPICPARAMS
any	/usr/local/cuda/include/cooperative_groups.h	/^    _CG_QUALIFIER int any(int predicate) const {$/;"	f	class:__thread_block_tile_base
any	/usr/local/cuda/include/cooperative_groups.h	/^    _CG_QUALIFIER int any(int predicate) const {$/;"	f	class:coalesced_group
any	/usr/local/cuda/include/device_atomic_functions.hpp	/^__DEVICE_ATOMIC_FUNCTIONS_DECL__ bool any(bool cond)$/;"	f
apComponentBuffer	/usr/local/cuda/include/nppi_compression_functions.h	/^    Npp16s * apComponentBuffer[4]; \/**<$/;"	m	struct:__anon164
apCpuBuffer	/usr/local/cuda/include/nppi_compression_functions.h	/^    void * apCpuBuffer[NPPI_JPEG_DECODE_N_BUFFERS];$/;"	m	struct:__anon167
apGpuBuffer	/usr/local/cuda/include/nppi_compression_functions.h	/^    void * apGpuBuffer[NPPI_JPEG_DECODE_N_BUFFERS];$/;"	m	struct:__anon167
apRawAcHtTable	/usr/local/cuda/include/nppi_compression_functions.h	/^    const Npp8u * apRawAcHtTable[4]; \/**< See \\ref apRawDcHtTable *\/$/;"	m	struct:__anon165
apRawDcHtTable	/usr/local/cuda/include/nppi_compression_functions.h	/^    const Npp8u * apRawDcHtTable[4]; \/**< Pointers to DC Huffman table description in the raw format$/;"	m	struct:__anon165
args	/usr/local/cuda/include/driver_types.h	/^    void **args;         \/**< Arguments *\/$/;"	m	struct:cudaLaunchParams
array	/usr/local/cuda/include/cuda.h	/^        } array;$/;"	m	union:CUDA_RESOURCE_DESC_st::__anon41	typeref:struct:CUDA_RESOURCE_DESC_st::__anon41::__anon42
array	/usr/local/cuda/include/driver_types.h	/^			cudaArray_t array;                 \/**< CUDA array *\/$/;"	m	struct:cudaResourceDesc::__anon109::__anon110
array	/usr/local/cuda/include/driver_types.h	/^		} array;$/;"	m	union:cudaResourceDesc::__anon109	typeref:struct:cudaResourceDesc::__anon109::__anon110
ascii	/usr/local/cuda/include/nvToolsExt.h	/^    const char* ascii;$/;"	m	union:nvtxMessageValue_t
asin	/usr/local/cuda/include/math_functions.hpp	/^__host__ __device__ __cudart_builtin__ float     asin(float in)          { return asinf(in); }$/;"	f
asinh	/usr/local/cuda/include/math_functions.hpp	/^__MATH_FUNCTIONS_DECL__ float asinh(float a)$/;"	f
asyncEngineCount	/usr/local/cuda/include/driver_types.h	/^    int    asyncEngineCount;           \/**< Number of asynchronous engines *\/$/;"	m	struct:cudaDeviceProp
atan	/usr/local/cuda/include/math_functions.hpp	/^__host__ __device__ __cudart_builtin__ float     atan(float in)          { return atanf(in); }$/;"	f
atan2	/usr/local/cuda/include/math_functions.hpp	/^__host__ __device__ __cudart_builtin__ float     atan2(float a, float b) { return atan2f(a, b); }$/;"	f
atanh	/usr/local/cuda/include/math_functions.hpp	/^__MATH_FUNCTIONS_DECL__ float atanh(float a)$/;"	f
atomicAdd	/usr/local/cuda/include/device_atomic_functions.hpp	/^__DEVICE_ATOMIC_FUNCTIONS_DECL__ int atomicAdd(int *address, int val)$/;"	f
atomicAdd	/usr/local/cuda/include/device_atomic_functions.hpp	/^__DEVICE_ATOMIC_FUNCTIONS_DECL__ unsigned int atomicAdd(unsigned int *address, unsigned int val)$/;"	f
atomicAdd	/usr/local/cuda/include/device_atomic_functions.hpp	/^__DEVICE_ATOMIC_FUNCTIONS_DECL__ unsigned long long int atomicAdd(unsigned long long int *address, unsigned long long int val)$/;"	f
atomicAdd	/usr/local/cuda/include/sm_20_atomic_functions.hpp	/^__SM_20_ATOMIC_FUNCTIONS_DECL__ float atomicAdd(float *address, float val)$/;"	f
atomicAdd	/usr/local/cuda/include/sm_60_atomic_functions.hpp	/^__SM_60_ATOMIC_FUNCTIONS_DECL__ double atomicAdd(double *address, double val)$/;"	f
atomicAdd_block	/usr/local/cuda/include/sm_60_atomic_functions.hpp	/^double atomicAdd_block(double *address, double val)$/;"	f
atomicAdd_block	/usr/local/cuda/include/sm_60_atomic_functions.hpp	/^float atomicAdd_block(float *address, float val)$/;"	f
atomicAdd_block	/usr/local/cuda/include/sm_60_atomic_functions.hpp	/^int atomicAdd_block(int *address, int val)$/;"	f
atomicAdd_block	/usr/local/cuda/include/sm_60_atomic_functions.hpp	/^unsigned int atomicAdd_block(unsigned int *address, unsigned int val)$/;"	f
atomicAdd_block	/usr/local/cuda/include/sm_60_atomic_functions.hpp	/^unsigned long long atomicAdd_block(unsigned long long *address, unsigned long long val)$/;"	f
atomicAdd_system	/usr/local/cuda/include/sm_60_atomic_functions.hpp	/^double atomicAdd_system(double *address, double val)$/;"	f
atomicAdd_system	/usr/local/cuda/include/sm_60_atomic_functions.hpp	/^float atomicAdd_system(float *address, float val)$/;"	f
atomicAdd_system	/usr/local/cuda/include/sm_60_atomic_functions.hpp	/^int atomicAdd_system(int *address, int val)$/;"	f
atomicAdd_system	/usr/local/cuda/include/sm_60_atomic_functions.hpp	/^unsigned int atomicAdd_system(unsigned int *address, unsigned int val)$/;"	f
atomicAdd_system	/usr/local/cuda/include/sm_60_atomic_functions.hpp	/^unsigned long long atomicAdd_system(unsigned long long *address, unsigned long long val)$/;"	f
atomicAnd	/usr/local/cuda/include/device_atomic_functions.hpp	/^__DEVICE_ATOMIC_FUNCTIONS_DECL__ int atomicAnd(int *address, int val)$/;"	f
atomicAnd	/usr/local/cuda/include/device_atomic_functions.hpp	/^__DEVICE_ATOMIC_FUNCTIONS_DECL__ unsigned int atomicAnd(unsigned int *address, unsigned int val)$/;"	f
atomicAnd	/usr/local/cuda/include/sm_32_atomic_functions.hpp	/^__SM_32_ATOMIC_FUNCTIONS_DECL__ long long atomicAnd(long long *address, long long val)$/;"	f
atomicAnd	/usr/local/cuda/include/sm_32_atomic_functions.hpp	/^__SM_32_ATOMIC_FUNCTIONS_DECL__ unsigned long long atomicAnd(unsigned long long *address, unsigned long long val)$/;"	f
atomicAnd_block	/usr/local/cuda/include/sm_60_atomic_functions.hpp	/^int atomicAnd_block(int *address, int val)$/;"	f
atomicAnd_block	/usr/local/cuda/include/sm_60_atomic_functions.hpp	/^long long atomicAnd_block(long long *address, long long val)$/;"	f
atomicAnd_block	/usr/local/cuda/include/sm_60_atomic_functions.hpp	/^unsigned int atomicAnd_block(unsigned int *address, unsigned int val)$/;"	f
atomicAnd_block	/usr/local/cuda/include/sm_60_atomic_functions.hpp	/^unsigned long long atomicAnd_block(unsigned long long *address, unsigned long long val)$/;"	f
atomicAnd_system	/usr/local/cuda/include/sm_60_atomic_functions.hpp	/^int atomicAnd_system(int *address, int val)$/;"	f
atomicAnd_system	/usr/local/cuda/include/sm_60_atomic_functions.hpp	/^long long atomicAnd_system(long long *address, long long val)$/;"	f
atomicAnd_system	/usr/local/cuda/include/sm_60_atomic_functions.hpp	/^unsigned int atomicAnd_system(unsigned int *address, unsigned int val)$/;"	f
atomicAnd_system	/usr/local/cuda/include/sm_60_atomic_functions.hpp	/^unsigned long long atomicAnd_system(unsigned long long *address, unsigned long long val)$/;"	f
atomicCAS	/usr/local/cuda/include/device_atomic_functions.hpp	/^__DEVICE_ATOMIC_FUNCTIONS_DECL__ int atomicCAS(int *address, int compare, int val)$/;"	f
atomicCAS	/usr/local/cuda/include/device_atomic_functions.hpp	/^__DEVICE_ATOMIC_FUNCTIONS_DECL__ unsigned int atomicCAS(unsigned int *address, unsigned int compare, unsigned int val)$/;"	f
atomicCAS	/usr/local/cuda/include/device_atomic_functions.hpp	/^__DEVICE_ATOMIC_FUNCTIONS_DECL__ unsigned long long int atomicCAS(unsigned long long int *address, unsigned long long int compare, unsigned long long int val)$/;"	f
atomicCAS_block	/usr/local/cuda/include/sm_60_atomic_functions.hpp	/^int atomicCAS_block(int *address, int compare, int val)$/;"	f
atomicCAS_block	/usr/local/cuda/include/sm_60_atomic_functions.hpp	/^unsigned int atomicCAS_block(unsigned int *address, unsigned int compare,$/;"	f
atomicCAS_block	/usr/local/cuda/include/sm_60_atomic_functions.hpp	/^unsigned long long int atomicCAS_block(unsigned long long int *address,$/;"	f
atomicCAS_system	/usr/local/cuda/include/sm_60_atomic_functions.hpp	/^int atomicCAS_system(int *address, int compare, int val)$/;"	f
atomicCAS_system	/usr/local/cuda/include/sm_60_atomic_functions.hpp	/^unsigned int atomicCAS_system(unsigned int *address, unsigned int compare,$/;"	f
atomicCAS_system	/usr/local/cuda/include/sm_60_atomic_functions.hpp	/^unsigned long long int atomicCAS_system(unsigned long long int *address,$/;"	f
atomicDec	/usr/local/cuda/include/device_atomic_functions.hpp	/^__DEVICE_ATOMIC_FUNCTIONS_DECL__ unsigned int atomicDec(unsigned int *address, unsigned int val)$/;"	f
atomicDec_block	/usr/local/cuda/include/sm_60_atomic_functions.hpp	/^unsigned int atomicDec_block(unsigned int *address, unsigned int val)$/;"	f
atomicDec_system	/usr/local/cuda/include/sm_60_atomic_functions.hpp	/^unsigned int atomicDec_system(unsigned int *address, unsigned int val)$/;"	f
atomicExch	/usr/local/cuda/include/device_atomic_functions.hpp	/^__DEVICE_ATOMIC_FUNCTIONS_DECL__ float atomicExch(float *address, float val)$/;"	f
atomicExch	/usr/local/cuda/include/device_atomic_functions.hpp	/^__DEVICE_ATOMIC_FUNCTIONS_DECL__ int atomicExch(int *address, int val)$/;"	f
atomicExch	/usr/local/cuda/include/device_atomic_functions.hpp	/^__DEVICE_ATOMIC_FUNCTIONS_DECL__ unsigned int atomicExch(unsigned int *address, unsigned int val)$/;"	f
atomicExch	/usr/local/cuda/include/device_atomic_functions.hpp	/^__DEVICE_ATOMIC_FUNCTIONS_DECL__ unsigned long long int atomicExch(unsigned long long int *address, unsigned long long int val)$/;"	f
atomicExch_block	/usr/local/cuda/include/sm_60_atomic_functions.hpp	/^float atomicExch_block(float *address, float val)$/;"	f
atomicExch_block	/usr/local/cuda/include/sm_60_atomic_functions.hpp	/^int atomicExch_block(int *address, int val)$/;"	f
atomicExch_block	/usr/local/cuda/include/sm_60_atomic_functions.hpp	/^unsigned int atomicExch_block(unsigned int *address, unsigned int val)$/;"	f
atomicExch_block	/usr/local/cuda/include/sm_60_atomic_functions.hpp	/^unsigned long long atomicExch_block(unsigned long long *address, unsigned long long val)$/;"	f
atomicExch_system	/usr/local/cuda/include/sm_60_atomic_functions.hpp	/^float atomicExch_system(float *address, float val)$/;"	f
atomicExch_system	/usr/local/cuda/include/sm_60_atomic_functions.hpp	/^int atomicExch_system(int *address, int val)$/;"	f
atomicExch_system	/usr/local/cuda/include/sm_60_atomic_functions.hpp	/^unsigned int atomicExch_system(unsigned int *address, unsigned int val)$/;"	f
atomicExch_system	/usr/local/cuda/include/sm_60_atomic_functions.hpp	/^unsigned long long atomicExch_system(unsigned long long *address, unsigned long long val)$/;"	f
atomicInc	/usr/local/cuda/include/device_atomic_functions.hpp	/^__DEVICE_ATOMIC_FUNCTIONS_DECL__ unsigned int atomicInc(unsigned int *address, unsigned int val)$/;"	f
atomicInc_block	/usr/local/cuda/include/sm_60_atomic_functions.hpp	/^unsigned int atomicInc_block(unsigned int *address, unsigned int val)$/;"	f
atomicInc_system	/usr/local/cuda/include/sm_60_atomic_functions.hpp	/^unsigned int atomicInc_system(unsigned int *address, unsigned int val)$/;"	f
atomicMax	/usr/local/cuda/include/device_atomic_functions.hpp	/^__DEVICE_ATOMIC_FUNCTIONS_DECL__ int atomicMax(int *address, int val)$/;"	f
atomicMax	/usr/local/cuda/include/device_atomic_functions.hpp	/^__DEVICE_ATOMIC_FUNCTIONS_DECL__ unsigned int atomicMax(unsigned int *address, unsigned int val)$/;"	f
atomicMax	/usr/local/cuda/include/sm_32_atomic_functions.hpp	/^__SM_32_ATOMIC_FUNCTIONS_DECL__ long long atomicMax(long long *address, long long val)$/;"	f
atomicMax	/usr/local/cuda/include/sm_32_atomic_functions.hpp	/^__SM_32_ATOMIC_FUNCTIONS_DECL__ unsigned long long atomicMax(unsigned long long *address, unsigned long long val)$/;"	f
atomicMax_block	/usr/local/cuda/include/sm_60_atomic_functions.hpp	/^int atomicMax_block(int *address, int val)$/;"	f
atomicMax_block	/usr/local/cuda/include/sm_60_atomic_functions.hpp	/^long long atomicMax_block(long long *address, long long val)$/;"	f
atomicMax_block	/usr/local/cuda/include/sm_60_atomic_functions.hpp	/^unsigned int atomicMax_block(unsigned int *address, unsigned int val)$/;"	f
atomicMax_block	/usr/local/cuda/include/sm_60_atomic_functions.hpp	/^unsigned long long atomicMax_block(unsigned long long *address, unsigned long long val)$/;"	f
atomicMax_system	/usr/local/cuda/include/sm_60_atomic_functions.hpp	/^int atomicMax_system(int *address, int val)$/;"	f
atomicMax_system	/usr/local/cuda/include/sm_60_atomic_functions.hpp	/^long long atomicMax_system(long long *address, long long val)$/;"	f
atomicMax_system	/usr/local/cuda/include/sm_60_atomic_functions.hpp	/^unsigned int atomicMax_system(unsigned int *address, unsigned int val)$/;"	f
atomicMax_system	/usr/local/cuda/include/sm_60_atomic_functions.hpp	/^unsigned long long atomicMax_system(unsigned long long *address, unsigned long long val)$/;"	f
atomicMin	/usr/local/cuda/include/device_atomic_functions.hpp	/^__DEVICE_ATOMIC_FUNCTIONS_DECL__ int atomicMin(int *address, int val)$/;"	f
atomicMin	/usr/local/cuda/include/device_atomic_functions.hpp	/^__DEVICE_ATOMIC_FUNCTIONS_DECL__ unsigned int atomicMin(unsigned int *address, unsigned int val)$/;"	f
atomicMin	/usr/local/cuda/include/sm_32_atomic_functions.hpp	/^__SM_32_ATOMIC_FUNCTIONS_DECL__ long long atomicMin(long long *address, long long val)$/;"	f
atomicMin	/usr/local/cuda/include/sm_32_atomic_functions.hpp	/^__SM_32_ATOMIC_FUNCTIONS_DECL__ unsigned long long atomicMin(unsigned long long *address, unsigned long long val)$/;"	f
atomicMin_block	/usr/local/cuda/include/sm_60_atomic_functions.hpp	/^int atomicMin_block(int *address, int val)$/;"	f
atomicMin_block	/usr/local/cuda/include/sm_60_atomic_functions.hpp	/^long long atomicMin_block(long long *address, long long val)$/;"	f
atomicMin_block	/usr/local/cuda/include/sm_60_atomic_functions.hpp	/^unsigned int atomicMin_block(unsigned int *address, unsigned int val)$/;"	f
atomicMin_block	/usr/local/cuda/include/sm_60_atomic_functions.hpp	/^unsigned long long atomicMin_block(unsigned long long *address, unsigned long long val)$/;"	f
atomicMin_system	/usr/local/cuda/include/sm_60_atomic_functions.hpp	/^int atomicMin_system(int *address, int val)$/;"	f
atomicMin_system	/usr/local/cuda/include/sm_60_atomic_functions.hpp	/^long long atomicMin_system(long long *address, long long val)$/;"	f
atomicMin_system	/usr/local/cuda/include/sm_60_atomic_functions.hpp	/^unsigned int atomicMin_system(unsigned int *address, unsigned int val)$/;"	f
atomicMin_system	/usr/local/cuda/include/sm_60_atomic_functions.hpp	/^unsigned long long atomicMin_system(unsigned long long *address, unsigned long long val)$/;"	f
atomicOr	/usr/local/cuda/include/device_atomic_functions.hpp	/^__DEVICE_ATOMIC_FUNCTIONS_DECL__ int atomicOr(int *address, int val)$/;"	f
atomicOr	/usr/local/cuda/include/device_atomic_functions.hpp	/^__DEVICE_ATOMIC_FUNCTIONS_DECL__ unsigned int atomicOr(unsigned int *address, unsigned int val)$/;"	f
atomicOr	/usr/local/cuda/include/sm_32_atomic_functions.hpp	/^__SM_32_ATOMIC_FUNCTIONS_DECL__ long long atomicOr(long long *address, long long val)$/;"	f
atomicOr	/usr/local/cuda/include/sm_32_atomic_functions.hpp	/^__SM_32_ATOMIC_FUNCTIONS_DECL__ unsigned long long atomicOr(unsigned long long *address, unsigned long long val)$/;"	f
atomicOr_block	/usr/local/cuda/include/sm_60_atomic_functions.hpp	/^int atomicOr_block(int *address, int val)$/;"	f
atomicOr_block	/usr/local/cuda/include/sm_60_atomic_functions.hpp	/^long long atomicOr_block(long long *address, long long val)$/;"	f
atomicOr_block	/usr/local/cuda/include/sm_60_atomic_functions.hpp	/^unsigned int atomicOr_block(unsigned int *address, unsigned int val)$/;"	f
atomicOr_block	/usr/local/cuda/include/sm_60_atomic_functions.hpp	/^unsigned long long atomicOr_block(unsigned long long *address, unsigned long long val)$/;"	f
atomicOr_system	/usr/local/cuda/include/sm_60_atomic_functions.hpp	/^int atomicOr_system(int *address, int val)$/;"	f
atomicOr_system	/usr/local/cuda/include/sm_60_atomic_functions.hpp	/^long long atomicOr_system(long long *address, long long val)$/;"	f
atomicOr_system	/usr/local/cuda/include/sm_60_atomic_functions.hpp	/^unsigned int atomicOr_system(unsigned int *address, unsigned int val)$/;"	f
atomicOr_system	/usr/local/cuda/include/sm_60_atomic_functions.hpp	/^unsigned long long atomicOr_system(unsigned long long *address, unsigned long long val)$/;"	f
atomicSub	/usr/local/cuda/include/device_atomic_functions.hpp	/^__DEVICE_ATOMIC_FUNCTIONS_DECL__ int atomicSub(int *address, int val)$/;"	f
atomicSub	/usr/local/cuda/include/device_atomic_functions.hpp	/^__DEVICE_ATOMIC_FUNCTIONS_DECL__ unsigned int atomicSub(unsigned int *address, unsigned int val)$/;"	f
atomicSub_block	/usr/local/cuda/include/sm_60_atomic_functions.hpp	/^int atomicSub_block(int *address, int val)$/;"	f
atomicSub_block	/usr/local/cuda/include/sm_60_atomic_functions.hpp	/^unsigned int atomicSub_block(unsigned int *address, unsigned int val)$/;"	f
atomicSub_system	/usr/local/cuda/include/sm_60_atomic_functions.hpp	/^int atomicSub_system(int *address, int val)$/;"	f
atomicSub_system	/usr/local/cuda/include/sm_60_atomic_functions.hpp	/^unsigned int atomicSub_system(unsigned int *address, unsigned int val)$/;"	f
atomicXor	/usr/local/cuda/include/device_atomic_functions.hpp	/^__DEVICE_ATOMIC_FUNCTIONS_DECL__ int atomicXor(int *address, int val)$/;"	f
atomicXor	/usr/local/cuda/include/device_atomic_functions.hpp	/^__DEVICE_ATOMIC_FUNCTIONS_DECL__ unsigned int atomicXor(unsigned int *address, unsigned int val)$/;"	f
atomicXor	/usr/local/cuda/include/sm_32_atomic_functions.hpp	/^__SM_32_ATOMIC_FUNCTIONS_DECL__ long long atomicXor(long long *address, long long val)$/;"	f
atomicXor	/usr/local/cuda/include/sm_32_atomic_functions.hpp	/^__SM_32_ATOMIC_FUNCTIONS_DECL__ unsigned long long atomicXor(unsigned long long *address, unsigned long long val)$/;"	f
atomicXor_block	/usr/local/cuda/include/sm_60_atomic_functions.hpp	/^int atomicXor_block(int *address, int val)$/;"	f
atomicXor_block	/usr/local/cuda/include/sm_60_atomic_functions.hpp	/^long long atomicXor_block(long long *address, long long val)$/;"	f
atomicXor_block	/usr/local/cuda/include/sm_60_atomic_functions.hpp	/^unsigned int atomicXor_block(unsigned int *address, unsigned int val)$/;"	f
atomicXor_block	/usr/local/cuda/include/sm_60_atomic_functions.hpp	/^unsigned long long atomicXor_block(unsigned long long *address, unsigned long long val)$/;"	f
atomicXor_system	/usr/local/cuda/include/sm_60_atomic_functions.hpp	/^int atomicXor_system(int *address, int val)$/;"	f
atomicXor_system	/usr/local/cuda/include/sm_60_atomic_functions.hpp	/^long long atomicXor_system(long long *address, long long val)$/;"	f
atomicXor_system	/usr/local/cuda/include/sm_60_atomic_functions.hpp	/^unsigned int atomicXor_system(unsigned int *address, unsigned int val)$/;"	f
atomicXor_system	/usr/local/cuda/include/sm_60_atomic_functions.hpp	/^unsigned long long atomicXor_system(unsigned long long *address, unsigned long long val)$/;"	f
attribs	/usr/local/cuda/include/nvToolsExtMeta.h	/^typedef struct NvtxDomainResourceCreate  { nvtxDomainHandle_t domain; const nvtxResourceAttributes_t* attribs; } NvtxDomainResourceCreate;$/;"	m	struct:NvtxDomainResourceCreate
attribs	/usr/local/cuda/include/nvToolsExtMeta.h	/^typedef struct NvtxSyncUserCreate  { nvtxDomainHandle_t domain; const nvtxSyncUserAttributes_t* attribs; } NvtxSyncUserCreate;$/;"	m	struct:NvtxSyncUserCreate
averageFps	/usr/local/cuda/include/nvml.h	/^    unsigned int       averageFps;      \/\/!< Moving average encode frames per second$/;"	m	struct:nvmlEncoderSessionInfo_st
averageLatency	/usr/local/cuda/include/nvml.h	/^    unsigned int       averageLatency;   \/\/!< Moving average encode latency in microseconds$/;"	m	struct:nvmlEncoderSessionInfo_st
avg	src/demo.c	/^static float *avg;$/;"	v	file:
avgpool_layer	src/avgpool_layer.h	/^typedef layer avgpool_layer;$/;"	t
axpy_cpu	src/blas.c	/^void axpy_cpu(int N, float ALPHA, float *X, int INCX, float *Y, int INCY)$/;"	f
bRefBaseLayer	/usr/local/cuda/include/dynlink_cuviddec.h	/^    int bRefBaseLayer;                  \/**< whether to store ref base pic *\/$/;"	m	struct:_CUVIDH264SVCEXT
backward_activation_layer	src/activation_layer.c	/^void backward_activation_layer(layer l, network net)$/;"	f
backward_activation_layer_gpu	src/activation_layer.c	/^void backward_activation_layer_gpu(layer l, network net)$/;"	f
backward_avgpool_layer	src/avgpool_layer.c	/^void backward_avgpool_layer(const avgpool_layer l, network net)$/;"	f
backward_batchnorm_layer	src/batchnorm_layer.c	/^void backward_batchnorm_layer(layer l, network net)$/;"	f
backward_batchnorm_layer_gpu	src/batchnorm_layer.c	/^void backward_batchnorm_layer_gpu(layer l, network net)$/;"	f
backward_bias	src/convolutional_layer.c	/^void backward_bias(float *bias_updates, float *delta, int batch, int n, int size)$/;"	f
backward_connected_layer	src/connected_layer.c	/^void backward_connected_layer(layer l, network net)$/;"	f
backward_connected_layer_gpu	src/connected_layer.c	/^void backward_connected_layer_gpu(layer l, network net)$/;"	f
backward_convolutional_layer	src/convolutional_layer.c	/^void backward_convolutional_layer(convolutional_layer l, network net)$/;"	f
backward_cost_layer	src/cost_layer.c	/^void backward_cost_layer(const cost_layer l, network net)$/;"	f
backward_cost_layer_gpu	src/cost_layer.c	/^void backward_cost_layer_gpu(const cost_layer l, network net)$/;"	f
backward_crnn_layer	src/crnn_layer.c	/^void backward_crnn_layer(layer l, network net)$/;"	f
backward_crnn_layer_gpu	src/crnn_layer.c	/^void backward_crnn_layer_gpu(layer l, network net)$/;"	f
backward_crop_layer	src/crop_layer.c	/^void backward_crop_layer(const crop_layer l, network net){}$/;"	f
backward_crop_layer_gpu	src/crop_layer.c	/^void backward_crop_layer_gpu(const crop_layer l, network net){}$/;"	f
backward_deconvolutional_layer	src/deconvolutional_layer.c	/^void backward_deconvolutional_layer(layer l, network net)$/;"	f
backward_detection_layer	src/detection_layer.c	/^void backward_detection_layer(const detection_layer l, network net)$/;"	f
backward_detection_layer_gpu	src/detection_layer.c	/^void backward_detection_layer_gpu(detection_layer l, network net)$/;"	f
backward_dropout_layer	src/dropout_layer.c	/^void backward_dropout_layer(dropout_layer l, network net)$/;"	f
backward_gru_layer	src/gru_layer.c	/^void backward_gru_layer(layer l, network net)$/;"	f
backward_gru_layer_gpu	src/gru_layer.c	/^void backward_gru_layer_gpu(layer l, network net)$/;"	f
backward_local_layer	src/local_layer.c	/^void backward_local_layer(local_layer l, network net)$/;"	f
backward_local_layer_gpu	src/local_layer.c	/^void backward_local_layer_gpu(local_layer l, network net)$/;"	f
backward_lstm_layer	src/lstm_layer.c	/^void backward_lstm_layer(layer l, network state)$/;"	f
backward_lstm_layer_gpu	src/lstm_layer.c	/^void backward_lstm_layer_gpu(layer l, network state)$/;"	f
backward_maxpool_layer	src/maxpool_layer.c	/^void backward_maxpool_layer(const maxpool_layer l, network net)$/;"	f
backward_network	src/network.c	/^void backward_network(network net)$/;"	f
backward_normalization_layer	src/normalization_layer.c	/^void backward_normalization_layer(const layer layer, network net)$/;"	f
backward_normalization_layer_gpu	src/normalization_layer.c	/^void backward_normalization_layer_gpu(const layer layer, network net)$/;"	f
backward_region_layer	src/region_layer.c	/^void backward_region_layer(const layer l, network net)$/;"	f
backward_region_layer_gpu	src/region_layer.c	/^void backward_region_layer_gpu(const layer l, network net)$/;"	f
backward_reorg_layer	src/reorg_layer.c	/^void backward_reorg_layer(const layer l, network net)$/;"	f
backward_reorg_layer_gpu	src/reorg_layer.c	/^void backward_reorg_layer_gpu(layer l, network net)$/;"	f
backward_rnn_layer	src/rnn_layer.c	/^void backward_rnn_layer(layer l, network net)$/;"	f
backward_rnn_layer_gpu	src/rnn_layer.c	/^void backward_rnn_layer_gpu(layer l, network net)$/;"	f
backward_route_layer	src/route_layer.c	/^void backward_route_layer(const route_layer l, network net)$/;"	f
backward_route_layer_gpu	src/route_layer.c	/^void backward_route_layer_gpu(const route_layer l, network net)$/;"	f
backward_scale_cpu	src/batchnorm_layer.c	/^void backward_scale_cpu(float *x_norm, float *delta, int batch, int n, int size, float *scale_updates)$/;"	f
backward_shortcut_layer	src/shortcut_layer.c	/^void backward_shortcut_layer(const layer l, network net)$/;"	f
backward_shortcut_layer_gpu	src/shortcut_layer.c	/^void backward_shortcut_layer_gpu(const layer l, network net)$/;"	f
backward_softmax_layer	src/softmax_layer.c	/^void backward_softmax_layer(const softmax_layer l, network net)$/;"	f
backward_softmax_layer_gpu	src/softmax_layer.c	/^void backward_softmax_layer_gpu(const softmax_layer layer, network net)$/;"	f
ballot	/usr/local/cuda/include/cooperative_groups.h	/^    _CG_QUALIFIER unsigned int ballot(int predicate) const {$/;"	f	class:__thread_block_tile_base
ballot	/usr/local/cuda/include/cooperative_groups.h	/^    _CG_QUALIFIER unsigned int ballot(int predicate) const {$/;"	f	class:coalesced_group
ballot	/usr/local/cuda/include/sm_20_intrinsics.hpp	/^__SM_20_INTRINSICS_DECL__ unsigned int ballot(bool pred)$/;"	f
bar1Free	/usr/local/cuda/include/nvml.h	/^    unsigned long long bar1Free;     \/\/!< Unallocated BAR1 Memory (in bytes)$/;"	m	struct:nvmlBAR1Memory_st
bar1Total	/usr/local/cuda/include/nvml.h	/^    unsigned long long bar1Total;    \/\/!< Total BAR1 Memory (in bytes)$/;"	m	struct:nvmlBAR1Memory_st
bar1Used	/usr/local/cuda/include/nvml.h	/^    unsigned long long bar1Used;     \/\/!< Allocated Used Memory (in bytes)$/;"	m	struct:nvmlBAR1Memory_st
basecfg	src/utils.c	/^char *basecfg(char *cfgfile)$/;"	f
batch	src/binary_convolution.h	/^    int batch;   \/\/ number of filter batches$/;"	m	struct:__anon1
batch	src/parser.c	/^    int batch;$/;"	m	struct:size_params	file:
bbox_comparator	src/compare.c	/^int bbox_comparator(const void *a, const void *b)$/;"	f
bbox_fight	src/compare.c	/^void bbox_fight(network net, sortable_bbox *a, sortable_bbox *b, int classes, int class)$/;"	f
bbox_update	src/compare.c	/^void bbox_update(sortable_bbox *a, sortable_bbox *b, int class, int result)$/;"	f
best_3d_shift	src/image.c	/^int best_3d_shift(image a, image b, int min, int max)$/;"	f
best_3d_shift_r	src/image.c	/^int best_3d_shift_r(image a, image b, int min, int max)$/;"	f
beta	src/binary_convolution.h	/^    float *beta;        \/\/ we assume beta is given to us$/;"	m	struct:__anon1
beta_plane	src/common.h	/^    dim3 beta_plane;$/;"	m	struct:__anon6
bgindex	src/stb_image.h	/^   int flags, bgindex, ratio, transparent, eflags;$/;"	m	struct:__anon26
bilinear_interpolate	src/image.c	/^float bilinear_interpolate(image im, float x, float y, int c)$/;"	f
binarize_cpu	src/convolutional_layer.c	/^void binarize_cpu(float *input, int n, float *binary)$/;"	f
binarize_image	src/image.c	/^image binarize_image(image im)$/;"	f
binarize_input	src/convolutional_layer.c	/^void binarize_input(float *input, int n, int size, float *binary)$/;"	f
binarize_weights	src/convolutional_layer.c	/^void binarize_weights(float *weights, int n, int size, float *binary)$/;"	f
binaryVersion	/usr/local/cuda/include/driver_types.h	/^   int binaryVersion;$/;"	m	struct:cudaFuncAttributes
binary_input	src/binary_convolution.h	/^    BINARY_WORD *binary_input;$/;"	m	struct:__anon1
binary_output	src/binary_convolution.h	/^    BINARY_WORD *binary_output;$/;"	m	struct:__anon1
binary_weights	src/binary_convolution.h	/^    BINARY_WORD *binary_weights;$/;"	m	struct:__anon1
bitDepthMinus8	/usr/local/cuda/include/dynlink_cuviddec.h	/^    unsigned long bitDepthMinus8;$/;"	m	struct:_CUVIDDECODECREATEINFO
bitDepthMinus8Chroma	/usr/local/cuda/include/dynlink_cuviddec.h	/^    unsigned char bitDepthMinus8Chroma;$/;"	m	struct:_CUVIDVP9PICPARAMS
bitDepthMinus8Luma	/usr/local/cuda/include/dynlink_cuviddec.h	/^    unsigned char bitDepthMinus8Luma;$/;"	m	struct:_CUVIDVP9PICPARAMS
bit_depth_chroma_minus8	/usr/local/cuda/include/dynlink_cuviddec.h	/^    unsigned char bit_depth_chroma_minus8;  \/\/ Must be 0 (only 8-bit supported)$/;"	m	struct:_CUVIDH264PICPARAMS
bit_depth_chroma_minus8	/usr/local/cuda/include/dynlink_cuviddec.h	/^    unsigned char bit_depth_chroma_minus8;$/;"	m	struct:_CUVIDHEVCPICPARAMS
bit_depth_chroma_minus8	/usr/local/cuda/include/dynlink_nvcuvid.h	/^    unsigned char bit_depth_chroma_minus8;  \/**< high bit depth Chroma *\/$/;"	m	struct:__anon123
bit_depth_luma_minus8	/usr/local/cuda/include/dynlink_cuviddec.h	/^    unsigned char bit_depth_luma_minus8;    \/\/ Must be 0 (only 8-bit supported)$/;"	m	struct:_CUVIDH264PICPARAMS
bit_depth_luma_minus8	/usr/local/cuda/include/dynlink_cuviddec.h	/^    unsigned char bit_depth_luma_minus8;$/;"	m	struct:_CUVIDHEVCPICPARAMS
bit_depth_luma_minus8	/usr/local/cuda/include/dynlink_nvcuvid.h	/^    unsigned char bit_depth_luma_minus8;    \/**< high bit depth Luma *\/$/;"	m	struct:__anon123
bitrate	/usr/local/cuda/include/dynlink_nvcuvid.h	/^    unsigned int bitrate;                   \/**< video bitrate (bps, 0=unknown) *\/$/;"	m	struct:__anon123
bitrate	/usr/local/cuda/include/dynlink_nvcuvid.h	/^    unsigned int bitrate;       \/**< For uncompressed, can also be used to determine bits per sample *\/$/;"	m	struct:__anon129
blas_handle	src/cuda.c	/^cublasHandle_t blas_handle()$/;"	f
blend_image	src/image.c	/^image blend_image(image fore, image back, float alpha)$/;"	f
blockDim	/usr/local/cuda/include/device_launch_parameters.h	/^dim3 __device_builtin__ __STORAGE__ blockDim;$/;"	v
blockDim	/usr/local/cuda/include/driver_types.h	/^    dim3 blockDim;       \/**< Block dimentions *\/$/;"	m	struct:cudaLaunchParams
blockDimX	/usr/local/cuda/include/cuda.h	/^    unsigned int blockDimX;      \/**< X dimension of each thread block *\/$/;"	m	struct:CUDA_LAUNCH_PARAMS_st
blockDimY	/usr/local/cuda/include/cuda.h	/^    unsigned int blockDimY;      \/**< Y dimension of each thread block *\/$/;"	m	struct:CUDA_LAUNCH_PARAMS_st
blockDimZ	/usr/local/cuda/include/cuda.h	/^    unsigned int blockDimZ;      \/**< Z dimension of each thread block *\/$/;"	m	struct:CUDA_LAUNCH_PARAMS_st
blockIdx	/usr/local/cuda/include/device_launch_parameters.h	/^uint3 __device_builtin__ __STORAGE__ blockIdx;$/;"	v
blockLimitBlocks	/usr/local/cuda/include/cuda_occupancy.h	/^    int blockLimitBlocks;              \/\/ Occupancy due to maximum number of blocks$/;"	m	struct:cudaOccResult
blockLimitRegs	/usr/local/cuda/include/cuda_occupancy.h	/^    int blockLimitRegs;                \/\/ Occupancy due to register$/;"	m	struct:cudaOccResult
blockLimitSharedMem	/usr/local/cuda/include/cuda_occupancy.h	/^    int blockLimitSharedMem;           \/\/ Occupancy due to shared memory$/;"	m	struct:cudaOccResult
blockLimitWarps	/usr/local/cuda/include/cuda_occupancy.h	/^    int blockLimitWarps;               \/\/ Occupancy due to block size limit$/;"	m	struct:cudaOccResult
borderColor	/usr/local/cuda/include/cuda.h	/^    float borderColor[4];           \/**< Border Color *\/$/;"	m	struct:CUDA_TEXTURE_DESC_st
borderColor	/usr/local/cuda/include/texture_types.h	/^    float                       borderColor[4];$/;"	m	struct:cudaTextureDesc
border_image	src/image.c	/^image border_image(image a, int border)$/;"	f
bottom	/usr/local/cuda/include/dynlink_cuviddec.h	/^        short bottom;$/;"	m	struct:_CUVIDDECODECREATEINFO::__anon114
bottom	/usr/local/cuda/include/dynlink_cuviddec.h	/^        short bottom;$/;"	m	struct:_CUVIDDECODECREATEINFO::__anon115
bottom	/usr/local/cuda/include/dynlink_nvcuvid.h	/^        int bottom;                         \/**< bottom position of display rect  *\/$/;"	m	struct:__anon123::__anon125
bottom_field_flag	/usr/local/cuda/include/dynlink_cuviddec.h	/^    int bottom_field_flag;                \/**< 0=top field, 1=bottom field (ignored if field_pic_flag=0) *\/$/;"	m	struct:_CUVIDPICPARAMS
bound_image	src/data.c	/^box bound_image(image im)$/;"	f
box_intersection	src/box.c	/^float box_intersection(box a, box b)$/;"	f
box_iou	src/box.c	/^float box_iou(box a, box b)$/;"	f
box_rmse	src/box.c	/^float box_rmse(box a, box b)$/;"	f
box_union	src/box.c	/^float box_union(box a, box b)$/;"	f
boxes	src/demo.c	/^static box *boxes;$/;"	v	file:
boxes2	src/demo.c	/^static box *boxes2;$/;"	v	file:
boxmuller_extra	/usr/local/cuda/include/curand_kernel.h	/^    float boxmuller_extra;$/;"	m	struct:curandStateMRG32k3a
boxmuller_extra	/usr/local/cuda/include/curand_kernel.h	/^    float boxmuller_extra;$/;"	m	struct:curandStateXORWOW
boxmuller_extra	/usr/local/cuda/include/curand_philox4x32_x.h	/^   float boxmuller_extra;$/;"	m	struct:curandStatePhilox4_32_10
boxmuller_extra_double	/usr/local/cuda/include/curand_kernel.h	/^    double boxmuller_extra_double;$/;"	m	struct:curandStateMRG32k3a
boxmuller_extra_double	/usr/local/cuda/include/curand_kernel.h	/^    double boxmuller_extra_double;$/;"	m	struct:curandStateXORWOW
boxmuller_extra_double	/usr/local/cuda/include/curand_philox4x32_x.h	/^   double boxmuller_extra_double;$/;"	m	struct:curandStatePhilox4_32_10
boxmuller_flag	/usr/local/cuda/include/curand_kernel.h	/^    int boxmuller_flag;$/;"	m	struct:curandStateMRG32k3a
boxmuller_flag	/usr/local/cuda/include/curand_kernel.h	/^    int boxmuller_flag;$/;"	m	struct:curandStateXORWOW
boxmuller_flag	/usr/local/cuda/include/curand_philox4x32_x.h	/^   int boxmuller_flag;$/;"	m	struct:curandStatePhilox4_32_10
boxmuller_flag_double	/usr/local/cuda/include/curand_kernel.h	/^    int boxmuller_flag_double;$/;"	m	struct:curandStateMRG32k3a
boxmuller_flag_double	/usr/local/cuda/include/curand_kernel.h	/^    int boxmuller_flag_double;$/;"	m	struct:curandStateXORWOW
boxmuller_flag_double	/usr/local/cuda/include/curand_philox4x32_x.h	/^   int boxmuller_flag_double;$/;"	m	struct:curandStatePhilox4_32_10
bridgeChipInfo	/usr/local/cuda/include/nvml.h	/^    nvmlBridgeChipInfo_t bridgeChipInfo[NVML_MAX_PHYSICAL_BRIDGE]; \/\/!< Hierarchy of Bridge Chips on the board$/;"	m	struct:nvmlBridgeChipHierarchy_st
bridgeCount	/usr/local/cuda/include/nvml.h	/^    unsigned char  bridgeCount;                 \/\/!< Number of Bridge Chips on the Board$/;"	m	struct:nvmlBridgeChipHierarchy_st
bsric02Info_t	/usr/local/cuda/include/cusparse.h	/^typedef struct bsric02Info *bsric02Info_t;$/;"	t	typeref:struct:bsric02Info
bsrilu02Info_t	/usr/local/cuda/include/cusparse.h	/^typedef struct bsrilu02Info *bsrilu02Info_t;$/;"	t	typeref:struct:bsrilu02Info
bsrsm2Info_t	/usr/local/cuda/include/cusparse.h	/^typedef struct bsrsm2Info *bsrsm2Info_t;$/;"	t	typeref:struct:bsrsm2Info
bsrsv2Info_t	/usr/local/cuda/include/cusparse.h	/^typedef struct bsrsv2Info *bsrsv2Info_t;$/;"	t	typeref:struct:bsrsv2Info
buff	src/demo.c	/^static image buff [3];$/;"	v	file:
buff_index	src/demo.c	/^static int buff_index = 0;$/;"	v	file:
buff_letter	src/demo.c	/^static image buff_letter[3];$/;"	v	file:
buffer_start	src/stb_image.h	/^   stbi_uc buffer_start[128];$/;"	m	struct:__anon13
buflen	src/stb_image.h	/^   int buflen;$/;"	m	struct:__anon13
build	/usr/local/cuda/include/nppdefs.h	/^    int    build;   \/**<  Build number. This reflects the nightly build this release was made from. *\/$/;"	m	struct:__anon146
build_mask	/usr/local/cuda/include/cooperative_groups.h	/^    _CG_QUALIFIER unsigned int build_mask() const {$/;"	f	class:__thread_block_tile_base
bus	/usr/local/cuda/include/nvml.h	/^    unsigned int bus;                \/\/!< The bus on which the device resides, 0 to 0xff$/;"	m	struct:nvmlPciInfo_st
busId	/usr/local/cuda/include/nvml.h	/^    char busId[NVML_DEVICE_PCI_BUS_ID_BUFFER_SIZE]; \/\/!< The tuple domain:bus:device.function PCI identifier (&amp; NULL terminator)$/;"	m	struct:nvmlPciInfo_st
busIdLegacy	/usr/local/cuda/include/nvml.h	/^    char busIdLegacy[NVML_DEVICE_PCI_BUS_ID_BUFFER_V2_SIZE]; \/\/!< The legacy tuple domain:bus:device.function PCI identifier (&amp; NULL terminator)$/;"	m	struct:nvmlPciInfo_st
bytes	/usr/local/cuda/include/cuda.h	/^    char bytes[16];$/;"	m	struct:CUuuid_st
bytes	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    char bytes[16];$/;"	m	struct:CUuuid_st
c	/usr/local/cuda/include/curand_kernel.h	/^    unsigned int i, x, c;$/;"	m	struct:curandStateScrambledSobol32
c	/usr/local/cuda/include/curand_kernel.h	/^    unsigned int i, x, c;$/;"	m	struct:curandStateSobol32
c	/usr/local/cuda/include/curand_kernel.h	/^    unsigned long long i, x, c;$/;"	m	struct:curandStateScrambledSobol64
c	/usr/local/cuda/include/curand_kernel.h	/^    unsigned long long i, x, c;$/;"	m	struct:curandStateSobol64
c	src/binary_convolution.h	/^    int c;       \/\/ channels, z$/;"	m	struct:__anon1
c	src/parser.c	/^    int c;$/;"	m	struct:size_params	file:
cabac_init_present_flag	/usr/local/cuda/include/dynlink_cuviddec.h	/^    unsigned char cabac_init_present_flag;$/;"	m	struct:_CUVIDHEVCPICPARAMS
cacheConfig	/usr/local/cuda/include/cuda_occupancy.h	/^    cudaOccCacheConfig cacheConfig; $/;"	m	struct:cudaOccDeviceState
cacheModeCA	/usr/local/cuda/include/driver_types.h	/^   int cacheModeCA;$/;"	m	struct:cudaFuncAttributes
calc_network_cost	src/network.c	/^void calc_network_cost(network net)$/;"	f
canMapHostMemory	/usr/local/cuda/include/driver_types.h	/^    int    canMapHostMemory;           \/**< Device can map host memory with cudaHostAlloc\/cudaHostGetDevicePointer *\/$/;"	m	struct:cudaDeviceProp
canUseHostPointerForRegisteredMem	/usr/local/cuda/include/driver_types.h	/^    int    canUseHostPointerForRegisteredMem; \/**< Device can access host registered memory at the same virtual address as the CPU *\/$/;"	m	struct:cudaDeviceProp
cap	src/demo.c	/^static CvCapture * cap;$/;"	v	file:
carveoutConfig	/usr/local/cuda/include/cuda_occupancy.h	/^    int carveoutConfig;$/;"	m	struct:cudaOccDeviceState
cast_type	/usr/local/cuda/include/surface_functions.h	/^template <typename T> struct __nv_surf_trait {  typedef void * cast_type; };$/;"	t	struct:__nv_surf_trait
cast_type	/usr/local/cuda/include/surface_functions.h	/^template<> struct __nv_surf_trait<char1> {  typedef char1 * cast_type; };$/;"	t	struct:__nv_surf_trait
cast_type	/usr/local/cuda/include/surface_functions.h	/^template<> struct __nv_surf_trait<char2> {  typedef char2 * cast_type; };$/;"	t	struct:__nv_surf_trait
cast_type	/usr/local/cuda/include/surface_functions.h	/^template<> struct __nv_surf_trait<char4> {  typedef char4 * cast_type; };$/;"	t	struct:__nv_surf_trait
cast_type	/usr/local/cuda/include/surface_functions.h	/^template<> struct __nv_surf_trait<char> {  typedef char * cast_type; };$/;"	t	struct:__nv_surf_trait
cast_type	/usr/local/cuda/include/surface_functions.h	/^template<> struct __nv_surf_trait<float1> {  typedef float1 * cast_type; };$/;"	t	struct:__nv_surf_trait
cast_type	/usr/local/cuda/include/surface_functions.h	/^template<> struct __nv_surf_trait<float2> {  typedef float2 * cast_type; };$/;"	t	struct:__nv_surf_trait
cast_type	/usr/local/cuda/include/surface_functions.h	/^template<> struct __nv_surf_trait<float4> {  typedef float4 * cast_type; };$/;"	t	struct:__nv_surf_trait
cast_type	/usr/local/cuda/include/surface_functions.h	/^template<> struct __nv_surf_trait<float> {  typedef float * cast_type; };$/;"	t	struct:__nv_surf_trait
cast_type	/usr/local/cuda/include/surface_functions.h	/^template<> struct __nv_surf_trait<int1> {  typedef int1 * cast_type; };$/;"	t	struct:__nv_surf_trait
cast_type	/usr/local/cuda/include/surface_functions.h	/^template<> struct __nv_surf_trait<int2> {  typedef int2 * cast_type; };$/;"	t	struct:__nv_surf_trait
cast_type	/usr/local/cuda/include/surface_functions.h	/^template<> struct __nv_surf_trait<int4> {  typedef int4 * cast_type; };$/;"	t	struct:__nv_surf_trait
cast_type	/usr/local/cuda/include/surface_functions.h	/^template<> struct __nv_surf_trait<int> {  typedef int * cast_type; };$/;"	t	struct:__nv_surf_trait
cast_type	/usr/local/cuda/include/surface_functions.h	/^template<> struct __nv_surf_trait<long long> {  typedef long long * cast_type; };$/;"	t	struct:__nv_surf_trait
cast_type	/usr/local/cuda/include/surface_functions.h	/^template<> struct __nv_surf_trait<long1> {  typedef int1 * cast_type; };$/;"	t	struct:__nv_surf_trait
cast_type	/usr/local/cuda/include/surface_functions.h	/^template<> struct __nv_surf_trait<long2> {  typedef int2 * cast_type; };$/;"	t	struct:__nv_surf_trait
cast_type	/usr/local/cuda/include/surface_functions.h	/^template<> struct __nv_surf_trait<long4> {  typedef uint4 * cast_type; };$/;"	t	struct:__nv_surf_trait
cast_type	/usr/local/cuda/include/surface_functions.h	/^template<> struct __nv_surf_trait<long> {  typedef int * cast_type; };$/;"	t	struct:__nv_surf_trait
cast_type	/usr/local/cuda/include/surface_functions.h	/^template<> struct __nv_surf_trait<longlong1> {  typedef longlong1 * cast_type; };$/;"	t	struct:__nv_surf_trait
cast_type	/usr/local/cuda/include/surface_functions.h	/^template<> struct __nv_surf_trait<longlong2> {  typedef longlong2 * cast_type; };$/;"	t	struct:__nv_surf_trait
cast_type	/usr/local/cuda/include/surface_functions.h	/^template<> struct __nv_surf_trait<short1> {  typedef short1 * cast_type; };$/;"	t	struct:__nv_surf_trait
cast_type	/usr/local/cuda/include/surface_functions.h	/^template<> struct __nv_surf_trait<short2> {  typedef short2 * cast_type; };$/;"	t	struct:__nv_surf_trait
cast_type	/usr/local/cuda/include/surface_functions.h	/^template<> struct __nv_surf_trait<short4> {  typedef short4 * cast_type; };$/;"	t	struct:__nv_surf_trait
cast_type	/usr/local/cuda/include/surface_functions.h	/^template<> struct __nv_surf_trait<short> {  typedef short * cast_type; };$/;"	t	struct:__nv_surf_trait
cast_type	/usr/local/cuda/include/surface_functions.h	/^template<> struct __nv_surf_trait<signed char> {  typedef signed char * cast_type; };$/;"	t	struct:__nv_surf_trait
cast_type	/usr/local/cuda/include/surface_functions.h	/^template<> struct __nv_surf_trait<uchar1> {  typedef uchar1 * cast_type; };$/;"	t	struct:__nv_surf_trait
cast_type	/usr/local/cuda/include/surface_functions.h	/^template<> struct __nv_surf_trait<uchar2> {  typedef uchar2 * cast_type; };$/;"	t	struct:__nv_surf_trait
cast_type	/usr/local/cuda/include/surface_functions.h	/^template<> struct __nv_surf_trait<uchar4> {  typedef uchar4 * cast_type; };$/;"	t	struct:__nv_surf_trait
cast_type	/usr/local/cuda/include/surface_functions.h	/^template<> struct __nv_surf_trait<uint1> {  typedef uint1 * cast_type; };$/;"	t	struct:__nv_surf_trait
cast_type	/usr/local/cuda/include/surface_functions.h	/^template<> struct __nv_surf_trait<uint2> {  typedef uint2 * cast_type; };$/;"	t	struct:__nv_surf_trait
cast_type	/usr/local/cuda/include/surface_functions.h	/^template<> struct __nv_surf_trait<uint4> {  typedef uint4 * cast_type; };$/;"	t	struct:__nv_surf_trait
cast_type	/usr/local/cuda/include/surface_functions.h	/^template<> struct __nv_surf_trait<ulong1> {  typedef uint1 * cast_type; };$/;"	t	struct:__nv_surf_trait
cast_type	/usr/local/cuda/include/surface_functions.h	/^template<> struct __nv_surf_trait<ulong2> {  typedef uint2 * cast_type; };$/;"	t	struct:__nv_surf_trait
cast_type	/usr/local/cuda/include/surface_functions.h	/^template<> struct __nv_surf_trait<ulong4> {  typedef int4 * cast_type; };$/;"	t	struct:__nv_surf_trait
cast_type	/usr/local/cuda/include/surface_functions.h	/^template<> struct __nv_surf_trait<ulonglong1> {  typedef ulonglong1 * cast_type; };$/;"	t	struct:__nv_surf_trait
cast_type	/usr/local/cuda/include/surface_functions.h	/^template<> struct __nv_surf_trait<ulonglong2> {  typedef ulonglong2 * cast_type; };$/;"	t	struct:__nv_surf_trait
cast_type	/usr/local/cuda/include/surface_functions.h	/^template<> struct __nv_surf_trait<unsigned char> {  typedef unsigned char * cast_type; };$/;"	t	struct:__nv_surf_trait
cast_type	/usr/local/cuda/include/surface_functions.h	/^template<> struct __nv_surf_trait<unsigned int> {  typedef unsigned int * cast_type; };$/;"	t	struct:__nv_surf_trait
cast_type	/usr/local/cuda/include/surface_functions.h	/^template<> struct __nv_surf_trait<unsigned long long> {  typedef unsigned long long * cast_type; };$/;"	t	struct:__nv_surf_trait
cast_type	/usr/local/cuda/include/surface_functions.h	/^template<> struct __nv_surf_trait<unsigned long> {  typedef unsigned int * cast_type; };$/;"	t	struct:__nv_surf_trait
cast_type	/usr/local/cuda/include/surface_functions.h	/^template<> struct __nv_surf_trait<unsigned short> {  typedef unsigned short * cast_type; };$/;"	t	struct:__nv_surf_trait
cast_type	/usr/local/cuda/include/surface_functions.h	/^template<> struct __nv_surf_trait<ushort1> {  typedef ushort1 * cast_type; };$/;"	t	struct:__nv_surf_trait
cast_type	/usr/local/cuda/include/surface_functions.h	/^template<> struct __nv_surf_trait<ushort2> {  typedef ushort2 * cast_type; };$/;"	t	struct:__nv_surf_trait
cast_type	/usr/local/cuda/include/surface_functions.h	/^template<> struct __nv_surf_trait<ushort4> {  typedef ushort4 * cast_type; };$/;"	t	struct:__nv_surf_trait
category	/usr/local/cuda/include/nvToolsExt.h	/^    uint32_t category;$/;"	m	struct:nvtxEventAttributes_v2
cause	/usr/local/cuda/include/nvml.h	/^    char cause[256];               \/\/!< If amber, a text description of the cause$/;"	m	struct:nvmlLedState_st
cbrt	/usr/local/cuda/include/math_functions.hpp	/^__MATH_FUNCTIONS_DECL__ float cbrt(float a)$/;"	f
ceil	/usr/local/cuda/include/math_functions.hpp	/^__host__ __device__ __cudart_builtin__ float     ceil(float in)          { return ceilf(in); }$/;"	f
cellSize	/usr/local/cuda/include/nppdefs.h	/^    int      cellSize;             \/**<  square cell size (pixels). *\/$/;"	m	struct:__anon157
center_crop_image	src/image.c	/^image center_crop_image(image im, int w, int h)$/;"	f
cg_assert	/usr/local/cuda/include/cooperative_groups_helpers.h	110;"	d
cg_assert	/usr/local/cuda/include/cooperative_groups_helpers.h	113;"	d
change_leaves	src/tree.c	/^void change_leaves(tree *t, char *leaf_list)$/;"	f
channel	src/stb_image.h	/^   stbi_uc size,type,channel;$/;"	m	struct:__anon24
channelDesc	/usr/local/cuda/include/surface_types.h	/^    struct cudaChannelFormatDesc channelDesc;$/;"	m	struct:surfaceReference	typeref:struct:surfaceReference::cudaChannelFormatDesc
channelDesc	/usr/local/cuda/include/texture_types.h	/^    struct cudaChannelFormatDesc channelDesc;$/;"	m	struct:textureReference	typeref:struct:textureReference::cudaChannelFormatDesc
channels	/usr/local/cuda/include/dynlink_nvcuvid.h	/^    unsigned int channels;      \/**< number of audio channels *\/$/;"	m	struct:__anon129
char1	/usr/local/cuda/include/vector_types.h	/^struct __device_builtin__ char1$/;"	s
char1	/usr/local/cuda/include/vector_types.h	/^typedef __device_builtin__ struct char1 char1;$/;"	t	typeref:struct:char1
char2	/usr/local/cuda/include/vector_types.h	/^typedef __device_builtin__ struct char2 char2;$/;"	t	typeref:struct:char2
char3	/usr/local/cuda/include/vector_types.h	/^struct __device_builtin__ char3$/;"	s
char3	/usr/local/cuda/include/vector_types.h	/^typedef __device_builtin__ struct char3 char3;$/;"	t	typeref:struct:char3
char4	/usr/local/cuda/include/vector_types.h	/^typedef __device_builtin__ struct char4 char4;$/;"	t	typeref:struct:char4
check_error	src/cuda.c	/^void check_error(cudaError_t status)$/;"	f
chroma_format	/usr/local/cuda/include/dynlink_nvcuvid.h	/^    cudaVideoChromaFormat chroma_format;    \/**<  Chroma format *\/$/;"	m	struct:__anon123
chroma_phase_x_plus1_flag	/usr/local/cuda/include/dynlink_cuviddec.h	/^    unsigned char chroma_phase_x_plus1_flag;$/;"	m	struct:_CUVIDH264SVCEXT
chroma_phase_y_plus1	/usr/local/cuda/include/dynlink_cuviddec.h	/^    unsigned char chroma_phase_y_plus1;$/;"	m	struct:_CUVIDH264SVCEXT
chroma_qp_index_offset	/usr/local/cuda/include/dynlink_cuviddec.h	/^    int chroma_qp_index_offset;$/;"	m	struct:_CUVIDH264PICPARAMS
class	src/box.c	/^    int class;$/;"	m	struct:__anon2	file:
class	src/compare.c	/^    int class;$/;"	m	struct:__anon7	file:
classes	src/compare.c	/^    int classes;$/;"	m	struct:__anon7	file:
classifierSize	/usr/local/cuda/include/nppdefs.h	/^    NppiSize classifierSize;$/;"	m	struct:__anon158
classifierStep	/usr/local/cuda/include/nppdefs.h	/^    size_t   classifierStep;$/;"	m	struct:__anon158
classifiers	/usr/local/cuda/include/nppdefs.h	/^    Npp32s * classifiers;       \/**<  packed classifier data 40 bytes each *\/$/;"	m	struct:__anon158
clock64	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ long long clock64()$/;"	f
clockRate	/usr/local/cuda/include/cuda.h	/^    int clockRate;              \/**< Clock frequency in kilohertz *\/$/;"	m	struct:CUdevprop_st
clockRate	/usr/local/cuda/include/driver_types.h	/^    int    clockRate;                  \/**< Clock frequency in kilohertz *\/$/;"	m	struct:cudaDeviceProp
clockRate	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    int clockRate;              \/**< Clock frequency in kilohertz *\/$/;"	m	struct:CUdevprop_st
coalesced_group	/usr/local/cuda/include/cooperative_groups.h	/^    _CG_QUALIFIER coalesced_group(unsigned int mask) : thread_group(__internal::Coalesced) {$/;"	f	class:coalesced_group
coalesced_group	/usr/local/cuda/include/cooperative_groups.h	/^class coalesced_group : public thread_group$/;"	c
coalesced_threads	/usr/local/cuda/include/cooperative_groups.h	/^_CG_QUALIFIER coalesced_group coalesced_threads()$/;"	f
code	src/stb_image.h	/^   stbi__uint16 code[256];$/;"	m	struct:__anon15
code_bits	src/stb_image.h	/^   int            code_bits;   \/\/ number of valid bits$/;"	m	struct:__anon16
code_buffer	src/stb_image.h	/^   stbi__uint32   code_buffer; \/\/ jpeg entropy-coded buffer$/;"	m	struct:__anon16
code_buffer	src/stb_image.h	/^   stbi__uint32 code_buffer;$/;"	m	struct:__anon20
codec	/usr/local/cuda/include/dynlink_nvcuvid.h	/^    cudaAudioCodec codec;       \/**< Compression format  *\/$/;"	m	struct:__anon129
codec	/usr/local/cuda/include/dynlink_nvcuvid.h	/^    cudaVideoCodec codec;                   \/**< Compression format  *\/$/;"	m	struct:__anon123
codecType	/usr/local/cuda/include/nvml.h	/^    nvmlEncoderType_t  codecType;       \/\/!< Video encoder type$/;"	m	struct:nvmlEncoderSessionInfo_st
coded_height	/usr/local/cuda/include/dynlink_nvcuvid.h	/^    unsigned int coded_height;              \/**< coded frame height  *\/$/;"	m	struct:__anon123
coded_width	/usr/local/cuda/include/dynlink_nvcuvid.h	/^    unsigned int coded_width;               \/**< coded frame width *\/$/;"	m	struct:__anon123
codes	src/stb_image.h	/^   stbi__gif_lzw codes[4096];$/;"	m	struct:__anon26
coeff	src/stb_image.h	/^      short   *coeff;   \/\/ progressive only$/;"	m	struct:__anon16::__anon17
coeff_h	src/stb_image.h	/^      int      coeff_w, coeff_h; \/\/ number of 8x8 coefficient blocks$/;"	m	struct:__anon16::__anon17
coeff_w	src/stb_image.h	/^      int      coeff_w, coeff_h; \/\/ number of 8x8 coefficient blocks$/;"	m	struct:__anon16::__anon17
col2im_add_pixel	src/col2im.c	/^void col2im_add_pixel(float *im, int height, int width, int channels,$/;"	f
col2im_cpu	src/col2im.c	/^void col2im_cpu(float* data_col,$/;"	f
collapse_image_layers	src/image.c	/^image collapse_image_layers(image source, int border)$/;"	f
collapse_images_horz	src/image.c	/^image collapse_images_horz(image *ims, int n)$/;"	f
collapse_images_vert	src/image.c	/^image collapse_images_vert(image *ims, int n)$/;"	f
color	/usr/local/cuda/include/nvToolsExt.h	/^    uint32_t color;$/;"	m	struct:nvtxEventAttributes_v2
color	/usr/local/cuda/include/nvml.h	/^    nvmlLedColor_t color;          \/\/!< GREEN or AMBER$/;"	m	struct:nvmlLedState_st
colorSpace	/usr/local/cuda/include/dynlink_cuviddec.h	/^    unsigned char colorSpace;$/;"	m	struct:_CUVIDVP9PICPARAMS
colorType	/usr/local/cuda/include/nvToolsExt.h	/^    int32_t colorType;              \/* nvtxColorType_t *\/$/;"	m	struct:nvtxEventAttributes_v2
color_primaries	/usr/local/cuda/include/dynlink_nvcuvid.h	/^        unsigned char color_primaries;$/;"	m	struct:__anon123::__anon127
color_table	src/stb_image.h	/^   stbi_uc *color_table;$/;"	m	struct:__anon26
colors	src/image.c	/^float colors[6][3] = { {1,0,1}, {0,0,1},{0,1,1},{0,1,0},{1,1,0},{1,0,0} };$/;"	v
column_width_minus1	/usr/local/cuda/include/dynlink_cuviddec.h	/^    unsigned short column_width_minus1[21];$/;"	m	struct:_CUVIDHEVCPICPARAMS
command_queue	src/gemm_fpga.c	/^static cl_command_queue command_queue = NULL;$/;"	v	file:
compare_networks	src/network.c	/^void compare_networks(network n1, network n2, data test)$/;"	f
composite_3d	src/image.c	/^void composite_3d(char *f1, char *f2, char *out, int delta)$/;"	f
composite_image	src/image.c	/^void composite_image(image source, image dest, int dx, int dy)$/;"	f
computeFatBinaryFormat_t	/usr/local/cuda/include/fatbinary.h	/^typedef struct fatBinaryHeader *computeFatBinaryFormat_t;$/;"	t	typeref:struct:fatBinaryHeader
computeMajor	/usr/local/cuda/include/cuda_occupancy.h	/^    int    computeMajor;                \/\/ Compute capability major version$/;"	m	struct:cudaOccDeviceProp
computeMinor	/usr/local/cuda/include/cuda_occupancy.h	/^    int    computeMinor;                \/\/ Compute capability minor$/;"	m	struct:cudaOccDeviceProp
computeMode	/usr/local/cuda/include/driver_types.h	/^    int    computeMode;                \/**< Compute mode (See ::cudaComputeMode) *\/$/;"	m	struct:cudaDeviceProp
computePreemptionSupported	/usr/local/cuda/include/driver_types.h	/^    int    computePreemptionSupported; \/**< Device supports Compute Preemption *\/$/;"	m	struct:cudaDeviceProp
concat_data	src/data.c	/^data concat_data(data d1, data d2)$/;"	f
concat_datas	src/data.c	/^data concat_datas(data *d, int n)$/;"	f
concat_matrix	src/data.c	/^matrix concat_matrix(matrix m1, matrix m2)$/;"	f
concealment_motion_vectors	/usr/local/cuda/include/dynlink_cuviddec.h	/^    int concealment_motion_vectors;$/;"	m	struct:_CUVIDMPEG2PICPARAMS
concurrentKernels	/usr/local/cuda/include/driver_types.h	/^    int    concurrentKernels;          \/**< Device can possibly execute multiple kernels concurrently *\/$/;"	m	struct:cudaDeviceProp
concurrentManagedAccess	/usr/local/cuda/include/driver_types.h	/^    int    concurrentManagedAccess;    \/**< Device can coherently access managed memory concurrently with the CPU *\/$/;"	m	struct:cudaDeviceProp
constSizeBytes	/usr/local/cuda/include/driver_types.h	/^   size_t constSizeBytes;$/;"	m	struct:cudaFuncAttributes
const_cpu	src/blas.c	/^void const_cpu(int N, float ALPHA, float *X, int INCX)$/;"	f
constrain	src/utils.c	/^float constrain(float min, float max, float a)$/;"	f
constrain_image	src/image.c	/^void constrain_image(image im)$/;"	f
constrain_int	src/utils.c	/^int constrain_int(int a, int min, int max)$/;"	f
constrained_intra_pred_flag	/usr/local/cuda/include/dynlink_cuviddec.h	/^    int constrained_intra_pred_flag;$/;"	m	struct:_CUVIDH264PICPARAMS
constrained_intra_pred_flag	/usr/local/cuda/include/dynlink_cuviddec.h	/^    unsigned char constrained_intra_pred_flag;$/;"	m	struct:_CUVIDHEVCPICPARAMS
constrained_intra_resampling_flag	/usr/local/cuda/include/dynlink_cuviddec.h	/^    unsigned char constrained_intra_resampling_flag;$/;"	m	struct:_CUVIDH264SVCEXT
context	src/gemm_fpga.c	/^static cl_context context = NULL;$/;"	v	file:
convolutional_layer	src/convolutional_layer.h	/^typedef layer convolutional_layer;$/;"	t
convolutional_out_height	src/convolutional_layer.c	/^int convolutional_out_height(convolutional_layer l)$/;"	f
convolutional_out_width	src/convolutional_layer.c	/^int convolutional_out_width(convolutional_layer l)$/;"	f
cooperativeLaunch	/usr/local/cuda/include/driver_types.h	/^    int    cooperativeLaunch;          \/**< Device supports launching cooperative kernels via ::cudaLaunchCooperativeKernel *\/$/;"	m	struct:cudaDeviceProp
cooperativeMultiDeviceLaunch	/usr/local/cuda/include/driver_types.h	/^    int    cooperativeMultiDeviceLaunch; \/**< Device can participate in cooperative kernels launched via ::cudaLaunchCooperativeKernelMultiDevice *\/$/;"	m	struct:cudaDeviceProp
copy_cpu	src/blas.c	/^void copy_cpu(int N, float *X, int INCX, float *Y, int INCY)$/;"	f
copy_data	src/data.c	/^data copy_data(data d)$/;"	f
copy_image	src/image.c	/^image copy_image(image p)$/;"	f
copy_image_into	src/image.c	/^void copy_image_into(image src, image dest)$/;"	f
copy_matrix	src/matrix.c	/^matrix copy_matrix(matrix m)$/;"	f
copy_string	src/utils.c	/^char *copy_string(char *s)$/;"	f
copysign	/usr/local/cuda/include/math_functions.hpp	/^__MATH_FUNCTIONS_DECL__ double copysign(double a, float b)$/;"	f
copysign	/usr/local/cuda/include/math_functions.hpp	/^__MATH_FUNCTIONS_DECL__ double copysign(float a, double b)$/;"	f
copysign	/usr/local/cuda/include/math_functions.hpp	/^__MATH_FUNCTIONS_DECL__ float copysign(float a, float b)$/;"	f
correct_boxes	src/data.c	/^void correct_boxes(box_label *boxes, int n, float dx, float dy, float sx, float sy, int flip)$/;"	f
correct_region_boxes	src/region_layer.c	/^void correct_region_boxes(box *boxes, int n, int w, int h, int netw, int neth, int relative)$/;"	f
cos	/usr/local/cuda/include/math_functions.hpp	/^__host__ __device__ __cudart_builtin__ float     cos(float in)           { return cosf(in); }$/;"	f
cosh	/usr/local/cuda/include/math_functions.hpp	/^__host__ __device__ __cudart_builtin__ float     cosh(float in)          { return coshf(in); }$/;"	f
cospi	/usr/local/cuda/include/math_functions.hpp	/^__MATH_FUNCTIONS_DECL__ float cospi(float a)$/;"	f
cospi	/usr/local/cuda/include/math_functions_dbl_ptx3.hpp	/^__MATH_FUNCTIONS_DBL_PTX3_DECL__ double cospi(double a)$/;"	f
cospif	/usr/local/cuda/include/math_functions.hpp	/^__MATH_FUNCTIONS_DECL__ float cospif(float a) \/* __THROW *\/$/;"	f
cost_layer	src/cost_layer.h	/^typedef layer cost_layer;$/;"	t
count	/usr/local/cuda/include/nvml.h	/^    unsigned int count;              \/\/!< Number of fans in unit$/;"	m	struct:nvmlUnitFanSpeeds_st
count_fields	src/utils.c	/^int count_fields(char *line)$/;"	f
counterDevice	/usr/local/cuda/include/nppdefs.h	/^    Npp32s * counterDevice;$/;"	m	struct:__anon158
crop_image	src/image.c	/^image crop_image(image im, int dx, int dy, int w, int h)$/;"	f
crop_layer	src/crop_layer.h	/^typedef layer crop_layer;$/;"	t
csrcholInfoHost_t	/usr/local/cuda/include/cusolverSp_LOWLEVEL_PREVIEW.h	/^typedef struct csrcholInfoHost *csrcholInfoHost_t;$/;"	t	typeref:struct:csrcholInfoHost
csrcholInfo_t	/usr/local/cuda/include/cusolverSp_LOWLEVEL_PREVIEW.h	/^typedef struct csrcholInfo *csrcholInfo_t;$/;"	t	typeref:struct:csrcholInfo
csrgemm2Info_t	/usr/local/cuda/include/cusparse.h	/^typedef struct csrgemm2Info *csrgemm2Info_t;$/;"	t	typeref:struct:csrgemm2Info
csric02Info_t	/usr/local/cuda/include/cusparse.h	/^typedef struct csric02Info *csric02Info_t;$/;"	t	typeref:struct:csric02Info
csrilu02Info_t	/usr/local/cuda/include/cusparse.h	/^typedef struct csrilu02Info *csrilu02Info_t;$/;"	t	typeref:struct:csrilu02Info
csrluInfoHost_t	/usr/local/cuda/include/cusolverSp_LOWLEVEL_PREVIEW.h	/^typedef struct csrluInfoHost *csrluInfoHost_t;$/;"	t	typeref:struct:csrluInfoHost
csrqrInfoHost_t	/usr/local/cuda/include/cusolverSp_LOWLEVEL_PREVIEW.h	/^typedef struct csrqrInfoHost *csrqrInfoHost_t;$/;"	t	typeref:struct:csrqrInfoHost
csrqrInfo_t	/usr/local/cuda/include/cusolverSp.h	/^typedef struct csrqrInfo *csrqrInfo_t;$/;"	t	typeref:struct:csrqrInfo
csrsv2Info_t	/usr/local/cuda/include/cusparse.h	/^typedef struct csrsv2Info *csrsv2Info_t;$/;"	t	typeref:struct:csrsv2Info
csru2csrInfo_t	/usr/local/cuda/include/cusparse.h	/^typedef struct csru2csrInfo *csru2csrInfo_t;$/;"	t	typeref:struct:csru2csrInfo
csv_to_matrix	src/matrix.c	/^matrix csv_to_matrix(char *filename)$/;"	f
cta	/usr/local/cuda/include/cooperative_groups_helpers.h	/^    namespace cta {$/;"	n	namespace:__internal
ctr	/usr/local/cuda/include/curand_philox4x32_x.h	/^   uint4 ctr;$/;"	m	struct:curandStatePhilox4_32_10
cuArray3DCreate	/usr/local/cuda/include/cuda.h	11902;"	d
cuArray3DCreate	/usr/local/cuda/include/cuda.h	122;"	d
cuArray3DGetDescriptor	/usr/local/cuda/include/cuda.h	11903;"	d
cuArray3DGetDescriptor	/usr/local/cuda/include/cuda.h	123;"	d
cuArrayCreate	/usr/local/cuda/include/cuda.h	11900;"	d
cuArrayCreate	/usr/local/cuda/include/cuda.h	120;"	d
cuArrayGetDescriptor	/usr/local/cuda/include/cuda.h	11901;"	d
cuArrayGetDescriptor	/usr/local/cuda/include/cuda.h	121;"	d
cuCabs	/usr/local/cuda/include/cuComplex.h	/^__host__ __device__ static __inline__ double cuCabs (cuDoubleComplex x)$/;"	f
cuCabsf	/usr/local/cuda/include/cuComplex.h	/^__host__ __device__ static __inline__ float cuCabsf (cuFloatComplex x)$/;"	f
cuCadd	/usr/local/cuda/include/cuComplex.h	/^__host__ __device__ static __inline__ cuDoubleComplex cuCadd(cuDoubleComplex x,$/;"	f
cuCaddf	/usr/local/cuda/include/cuComplex.h	/^__host__ __device__ static __inline__ cuFloatComplex cuCaddf (cuFloatComplex x,$/;"	f
cuCdiv	/usr/local/cuda/include/cuComplex.h	/^__host__ __device__ static __inline__ cuDoubleComplex cuCdiv(cuDoubleComplex x,$/;"	f
cuCdivf	/usr/local/cuda/include/cuComplex.h	/^__host__ __device__ static __inline__ cuFloatComplex cuCdivf (cuFloatComplex x,$/;"	f
cuCfma	/usr/local/cuda/include/cuComplex.h	/^__host__ __device__ static __inline__  cuDoubleComplex cuCfma( cuDoubleComplex x, cuDoubleComplex y, cuDoubleComplex d)$/;"	f
cuCfmaf	/usr/local/cuda/include/cuComplex.h	/^__host__ __device__ static __inline__  cuComplex cuCfmaf( cuComplex x, cuComplex y, cuComplex d)$/;"	f
cuCimag	/usr/local/cuda/include/cuComplex.h	/^__host__ __device__ static __inline__ double cuCimag (cuDoubleComplex x) $/;"	f
cuCimagf	/usr/local/cuda/include/cuComplex.h	/^__host__ __device__ static __inline__ float cuCimagf (cuFloatComplex x) $/;"	f
cuCmul	/usr/local/cuda/include/cuComplex.h	/^__host__ __device__ static __inline__ cuDoubleComplex cuCmul(cuDoubleComplex x,$/;"	f
cuCmulf	/usr/local/cuda/include/cuComplex.h	/^__host__ __device__ static __inline__ cuFloatComplex cuCmulf (cuFloatComplex x,$/;"	f
cuComplex	/usr/local/cuda/include/cuComplex.h	/^typedef cuFloatComplex cuComplex;$/;"	t
cuComplexDoubleToFloat	/usr/local/cuda/include/cuComplex.h	/^__host__ __device__ static __inline__ cuFloatComplex cuComplexDoubleToFloat$/;"	f
cuComplexFloatToDouble	/usr/local/cuda/include/cuComplex.h	/^__host__ __device__ static __inline__ cuDoubleComplex cuComplexFloatToDouble$/;"	f
cuConj	/usr/local/cuda/include/cuComplex.h	/^__host__ __device__ static __inline__ cuDoubleComplex cuConj(cuDoubleComplex x)$/;"	f
cuConjf	/usr/local/cuda/include/cuComplex.h	/^__host__ __device__ static __inline__ cuFloatComplex cuConjf (cuFloatComplex x)$/;"	f
cuCreal	/usr/local/cuda/include/cuComplex.h	/^__host__ __device__ static __inline__ double cuCreal (cuDoubleComplex x) $/;"	f
cuCrealf	/usr/local/cuda/include/cuComplex.h	/^__host__ __device__ static __inline__ float cuCrealf (cuFloatComplex x) $/;"	f
cuCsub	/usr/local/cuda/include/cuComplex.h	/^__host__ __device__ static __inline__ cuDoubleComplex cuCsub(cuDoubleComplex x,$/;"	f
cuCsubf	/usr/local/cuda/include/cuComplex.h	/^__host__ __device__ static __inline__ cuFloatComplex cuCsubf (cuFloatComplex x,$/;"	f
cuCtxCreate	/usr/local/cuda/include/cuda.h	11867;"	d
cuCtxCreate	/usr/local/cuda/include/cuda.h	87;"	d
cuCtxDestroy	/usr/local/cuda/include/cuda.h	11908;"	d
cuCtxDestroy	/usr/local/cuda/include/cuda.h	129;"	d
cuCtxPopCurrent	/usr/local/cuda/include/cuda.h	11909;"	d
cuCtxPopCurrent	/usr/local/cuda/include/cuda.h	130;"	d
cuCtxPushCurrent	/usr/local/cuda/include/cuda.h	11910;"	d
cuCtxPushCurrent	/usr/local/cuda/include/cuda.h	131;"	d
cuDeviceTotalMem	/usr/local/cuda/include/cuda.h	11866;"	d
cuDeviceTotalMem	/usr/local/cuda/include/cuda.h	86;"	d
cuDoubleComplex	/usr/local/cuda/include/cuComplex.h	/^typedef double2 cuDoubleComplex;$/;"	t
cuEventDestroy	/usr/local/cuda/include/cuda.h	11912;"	d
cuEventDestroy	/usr/local/cuda/include/cuda.h	133;"	d
cuEventRecord	/usr/local/cuda/include/cuda.h	11932;"	d
cuEventRecord	/usr/local/cuda/include/cuda.h	177;"	d
cuFloatComplex	/usr/local/cuda/include/cuComplex.h	/^typedef float2 cuFloatComplex;$/;"	t
cuFormat	/usr/local/cuda/include/cudaEGL.h	/^    CUarray_format cuFormat;            \/**< CUDA Array Format*\/$/;"	m	struct:CUeglFrame_st
cuGLCtxCreate	/usr/local/cuda/include/cudaGL.h	597;"	d
cuGLCtxCreate	/usr/local/cuda/include/cudaGL.h	76;"	d
cuGLGetDevices	/usr/local/cuda/include/cudaGL.h	600;"	d
cuGLGetDevices	/usr/local/cuda/include/cudaGL.h	81;"	d
cuGLMapBufferObject	/usr/local/cuda/include/cudaGL.h	598;"	d
cuGLMapBufferObject	/usr/local/cuda/include/cudaGL.h	77;"	d
cuGLMapBufferObjectAsync	/usr/local/cuda/include/cudaGL.h	599;"	d
cuGLMapBufferObjectAsync	/usr/local/cuda/include/cudaGL.h	78;"	d
cuGraphicsMapResources	/usr/local/cuda/include/cuda.h	11934;"	d
cuGraphicsMapResources	/usr/local/cuda/include/cuda.h	179;"	d
cuGraphicsResourceGetMappedPointer	/usr/local/cuda/include/cuda.h	11907;"	d
cuGraphicsResourceGetMappedPointer	/usr/local/cuda/include/cuda.h	126;"	d
cuGraphicsResourceSetMapFlags	/usr/local/cuda/include/cuda.h	11862;"	d
cuGraphicsResourceSetMapFlags	/usr/local/cuda/include/cuda.h	145;"	d
cuGraphicsUnmapResources	/usr/local/cuda/include/cuda.h	11935;"	d
cuGraphicsUnmapResources	/usr/local/cuda/include/cuda.h	180;"	d
cuLaunchCooperativeKernel	/usr/local/cuda/include/cuda.h	11942;"	d
cuLaunchCooperativeKernel	/usr/local/cuda/include/cuda.h	188;"	d
cuLaunchKernel	/usr/local/cuda/include/cuda.h	11933;"	d
cuLaunchKernel	/usr/local/cuda/include/cuda.h	178;"	d
cuLinkAddData	/usr/local/cuda/include/cuda.h	11864;"	d
cuLinkAddData	/usr/local/cuda/include/cuda.h	140;"	d
cuLinkAddFile	/usr/local/cuda/include/cuda.h	11865;"	d
cuLinkAddFile	/usr/local/cuda/include/cuda.h	141;"	d
cuLinkCreate	/usr/local/cuda/include/cuda.h	11863;"	d
cuLinkCreate	/usr/local/cuda/include/cuda.h	139;"	d
cuMemAlloc	/usr/local/cuda/include/cuda.h	11870;"	d
cuMemAlloc	/usr/local/cuda/include/cuda.h	90;"	d
cuMemAllocHost	/usr/local/cuda/include/cuda.h	11874;"	d
cuMemAllocHost	/usr/local/cuda/include/cuda.h	94;"	d
cuMemAllocPitch	/usr/local/cuda/include/cuda.h	11871;"	d
cuMemAllocPitch	/usr/local/cuda/include/cuda.h	91;"	d
cuMemFree	/usr/local/cuda/include/cuda.h	11872;"	d
cuMemFree	/usr/local/cuda/include/cuda.h	92;"	d
cuMemGetAddressRange	/usr/local/cuda/include/cuda.h	11873;"	d
cuMemGetAddressRange	/usr/local/cuda/include/cuda.h	93;"	d
cuMemGetInfo	/usr/local/cuda/include/cuda.h	11869;"	d
cuMemGetInfo	/usr/local/cuda/include/cuda.h	89;"	d
cuMemHostGetDevicePointer	/usr/local/cuda/include/cuda.h	11875;"	d
cuMemHostGetDevicePointer	/usr/local/cuda/include/cuda.h	95;"	d
cuMemHostRegister	/usr/local/cuda/include/cuda.h	11861;"	d
cuMemHostRegister	/usr/local/cuda/include/cuda.h	144;"	d
cuMemPrefetchAsync	/usr/local/cuda/include/cuda.h	11941;"	d
cuMemPrefetchAsync	/usr/local/cuda/include/cuda.h	161;"	d
cuMemcpy	/usr/local/cuda/include/cuda.h	11913;"	d
cuMemcpy	/usr/local/cuda/include/cuda.h	155;"	d
cuMemcpy2D	/usr/local/cuda/include/cuda.h	106;"	d
cuMemcpy2D	/usr/local/cuda/include/cuda.h	11886;"	d
cuMemcpy2DAsync	/usr/local/cuda/include/cuda.h	112;"	d
cuMemcpy2DAsync	/usr/local/cuda/include/cuda.h	11892;"	d
cuMemcpy2DUnaligned	/usr/local/cuda/include/cuda.h	107;"	d
cuMemcpy2DUnaligned	/usr/local/cuda/include/cuda.h	11887;"	d
cuMemcpy3D	/usr/local/cuda/include/cuda.h	108;"	d
cuMemcpy3D	/usr/local/cuda/include/cuda.h	11888;"	d
cuMemcpy3DAsync	/usr/local/cuda/include/cuda.h	113;"	d
cuMemcpy3DAsync	/usr/local/cuda/include/cuda.h	11893;"	d
cuMemcpy3DPeer	/usr/local/cuda/include/cuda.h	11917;"	d
cuMemcpy3DPeer	/usr/local/cuda/include/cuda.h	159;"	d
cuMemcpy3DPeerAsync	/usr/local/cuda/include/cuda.h	11918;"	d
cuMemcpy3DPeerAsync	/usr/local/cuda/include/cuda.h	160;"	d
cuMemcpyAsync	/usr/local/cuda/include/cuda.h	11914;"	d
cuMemcpyAsync	/usr/local/cuda/include/cuda.h	156;"	d
cuMemcpyAtoA	/usr/local/cuda/include/cuda.h	103;"	d
cuMemcpyAtoA	/usr/local/cuda/include/cuda.h	11883;"	d
cuMemcpyAtoD	/usr/local/cuda/include/cuda.h	100;"	d
cuMemcpyAtoD	/usr/local/cuda/include/cuda.h	11880;"	d
cuMemcpyAtoH	/usr/local/cuda/include/cuda.h	102;"	d
cuMemcpyAtoH	/usr/local/cuda/include/cuda.h	11882;"	d
cuMemcpyAtoHAsync	/usr/local/cuda/include/cuda.h	105;"	d
cuMemcpyAtoHAsync	/usr/local/cuda/include/cuda.h	11885;"	d
cuMemcpyDtoA	/usr/local/cuda/include/cuda.h	11879;"	d
cuMemcpyDtoA	/usr/local/cuda/include/cuda.h	99;"	d
cuMemcpyDtoD	/usr/local/cuda/include/cuda.h	11878;"	d
cuMemcpyDtoD	/usr/local/cuda/include/cuda.h	98;"	d
cuMemcpyDtoDAsync	/usr/local/cuda/include/cuda.h	111;"	d
cuMemcpyDtoDAsync	/usr/local/cuda/include/cuda.h	11891;"	d
cuMemcpyDtoH	/usr/local/cuda/include/cuda.h	11877;"	d
cuMemcpyDtoH	/usr/local/cuda/include/cuda.h	97;"	d
cuMemcpyDtoHAsync	/usr/local/cuda/include/cuda.h	110;"	d
cuMemcpyDtoHAsync	/usr/local/cuda/include/cuda.h	11890;"	d
cuMemcpyHtoA	/usr/local/cuda/include/cuda.h	101;"	d
cuMemcpyHtoA	/usr/local/cuda/include/cuda.h	11881;"	d
cuMemcpyHtoAAsync	/usr/local/cuda/include/cuda.h	104;"	d
cuMemcpyHtoAAsync	/usr/local/cuda/include/cuda.h	11884;"	d
cuMemcpyHtoD	/usr/local/cuda/include/cuda.h	11876;"	d
cuMemcpyHtoD	/usr/local/cuda/include/cuda.h	96;"	d
cuMemcpyHtoDAsync	/usr/local/cuda/include/cuda.h	109;"	d
cuMemcpyHtoDAsync	/usr/local/cuda/include/cuda.h	11889;"	d
cuMemcpyPeer	/usr/local/cuda/include/cuda.h	11915;"	d
cuMemcpyPeer	/usr/local/cuda/include/cuda.h	157;"	d
cuMemcpyPeerAsync	/usr/local/cuda/include/cuda.h	11916;"	d
cuMemcpyPeerAsync	/usr/local/cuda/include/cuda.h	158;"	d
cuMemsetD16	/usr/local/cuda/include/cuda.h	115;"	d
cuMemsetD16	/usr/local/cuda/include/cuda.h	11895;"	d
cuMemsetD16Async	/usr/local/cuda/include/cuda.h	11920;"	d
cuMemsetD16Async	/usr/local/cuda/include/cuda.h	164;"	d
cuMemsetD2D16	/usr/local/cuda/include/cuda.h	11898;"	d
cuMemsetD2D16	/usr/local/cuda/include/cuda.h	118;"	d
cuMemsetD2D16Async	/usr/local/cuda/include/cuda.h	11923;"	d
cuMemsetD2D16Async	/usr/local/cuda/include/cuda.h	167;"	d
cuMemsetD2D32	/usr/local/cuda/include/cuda.h	11899;"	d
cuMemsetD2D32	/usr/local/cuda/include/cuda.h	119;"	d
cuMemsetD2D32Async	/usr/local/cuda/include/cuda.h	11924;"	d
cuMemsetD2D32Async	/usr/local/cuda/include/cuda.h	168;"	d
cuMemsetD2D8	/usr/local/cuda/include/cuda.h	117;"	d
cuMemsetD2D8	/usr/local/cuda/include/cuda.h	11897;"	d
cuMemsetD2D8Async	/usr/local/cuda/include/cuda.h	11922;"	d
cuMemsetD2D8Async	/usr/local/cuda/include/cuda.h	166;"	d
cuMemsetD32	/usr/local/cuda/include/cuda.h	116;"	d
cuMemsetD32	/usr/local/cuda/include/cuda.h	11896;"	d
cuMemsetD32Async	/usr/local/cuda/include/cuda.h	11921;"	d
cuMemsetD32Async	/usr/local/cuda/include/cuda.h	165;"	d
cuMemsetD8	/usr/local/cuda/include/cuda.h	114;"	d
cuMemsetD8	/usr/local/cuda/include/cuda.h	11894;"	d
cuMemsetD8Async	/usr/local/cuda/include/cuda.h	11919;"	d
cuMemsetD8Async	/usr/local/cuda/include/cuda.h	163;"	d
cuModuleGetGlobal	/usr/local/cuda/include/cuda.h	11868;"	d
cuModuleGetGlobal	/usr/local/cuda/include/cuda.h	88;"	d
cuStreamAddCallback	/usr/local/cuda/include/cuda.h	11928;"	d
cuStreamAddCallback	/usr/local/cuda/include/cuda.h	173;"	d
cuStreamAttachMemAsync	/usr/local/cuda/include/cuda.h	11929;"	d
cuStreamAttachMemAsync	/usr/local/cuda/include/cuda.h	174;"	d
cuStreamBatchMemOp	/usr/local/cuda/include/cuda.h	11940;"	d
cuStreamBatchMemOp	/usr/local/cuda/include/cuda.h	186;"	d
cuStreamDestroy	/usr/local/cuda/include/cuda.h	11911;"	d
cuStreamDestroy	/usr/local/cuda/include/cuda.h	132;"	d
cuStreamGetFlags	/usr/local/cuda/include/cuda.h	11926;"	d
cuStreamGetFlags	/usr/local/cuda/include/cuda.h	171;"	d
cuStreamGetPriority	/usr/local/cuda/include/cuda.h	11925;"	d
cuStreamGetPriority	/usr/local/cuda/include/cuda.h	170;"	d
cuStreamQuery	/usr/local/cuda/include/cuda.h	11930;"	d
cuStreamQuery	/usr/local/cuda/include/cuda.h	175;"	d
cuStreamSynchronize	/usr/local/cuda/include/cuda.h	11931;"	d
cuStreamSynchronize	/usr/local/cuda/include/cuda.h	176;"	d
cuStreamWaitEvent	/usr/local/cuda/include/cuda.h	11927;"	d
cuStreamWaitEvent	/usr/local/cuda/include/cuda.h	172;"	d
cuStreamWaitValue32	/usr/local/cuda/include/cuda.h	11937;"	d
cuStreamWaitValue32	/usr/local/cuda/include/cuda.h	183;"	d
cuStreamWaitValue64	/usr/local/cuda/include/cuda.h	11939;"	d
cuStreamWaitValue64	/usr/local/cuda/include/cuda.h	185;"	d
cuStreamWriteValue32	/usr/local/cuda/include/cuda.h	11936;"	d
cuStreamWriteValue32	/usr/local/cuda/include/cuda.h	182;"	d
cuStreamWriteValue64	/usr/local/cuda/include/cuda.h	11938;"	d
cuStreamWriteValue64	/usr/local/cuda/include/cuda.h	184;"	d
cuTexRefGetAddress	/usr/local/cuda/include/cuda.h	11906;"	d
cuTexRefGetAddress	/usr/local/cuda/include/cuda.h	125;"	d
cuTexRefSetAddress	/usr/local/cuda/include/cuda.h	11904;"	d
cuTexRefSetAddress	/usr/local/cuda/include/cuda.h	124;"	d
cuTexRefSetAddress2D	/usr/local/cuda/include/cuda.h	11905;"	d
cuTexRefSetAddress2D	/usr/local/cuda/include/cuda.h	136;"	d
cuTexRefSetAddress2D	/usr/local/cuda/include/cuda.h	150;"	d
cuVDPAUCtxCreate	/usr/local/cuda/include/cudaVDPAU.h	288;"	d
cuVDPAUCtxCreate	/usr/local/cuda/include/cudaVDPAU.h	67;"	d
cu_qp_delta_enabled_flag	/usr/local/cuda/include/dynlink_cuviddec.h	/^    unsigned char cu_qp_delta_enabled_flag;$/;"	m	struct:_CUVIDHEVCPICPARAMS
cublasAtomicsMode_t	/usr/local/cuda/include/cublas_api.h	/^} cublasAtomicsMode_t;$/;"	t	typeref:enum:__anon36
cublasCaxpy	/usr/local/cuda/include/cublas_v2.h	98;"	d
cublasCcopy	/usr/local/cuda/include/cublas_v2.h	103;"	d
cublasCdotc	/usr/local/cuda/include/cublas_v2.h	85;"	d
cublasCdotu	/usr/local/cuda/include/cublas_v2.h	84;"	d
cublasCgbmv	/usr/local/cuda/include/cublas_v2.h	154;"	d
cublasCgemm	/usr/local/cuda/include/cublas_v2.h	240;"	d
cublasCgemv	/usr/local/cuda/include/cublas_v2.h	149;"	d
cublasCgerc	/usr/local/cuda/include/cublas_v2.h	208;"	d
cublasCgeru	/usr/local/cuda/include/cublas_v2.h	207;"	d
cublasChbmv	/usr/local/cuda/include/cublas_v2.h	196;"	d
cublasChemm	/usr/local/cuda/include/cublas_v2.h	261;"	d
cublasChemv	/usr/local/cuda/include/cublas_v2.h	191;"	d
cublasCher	/usr/local/cuda/include/cublas_v2.h	216;"	d
cublasCher2	/usr/local/cuda/include/cublas_v2.h	228;"	d
cublasCher2k	/usr/local/cuda/include/cublas_v2.h	254;"	d
cublasCherk	/usr/local/cuda/include/cublas_v2.h	247;"	d
cublasChpmv	/usr/local/cuda/include/cublas_v2.h	201;"	d
cublasChpr	/usr/local/cuda/include/cublas_v2.h	221;"	d
cublasChpr2	/usr/local/cuda/include/cublas_v2.h	233;"	d
cublasCreate	/usr/local/cuda/include/cublas_v2.h	67;"	d
cublasCrot	/usr/local/cuda/include/cublas_v2.h	128;"	d
cublasCrotg	/usr/local/cuda/include/cublas_v2.h	135;"	d
cublasCscal	/usr/local/cuda/include/cublas_v2.h	91;"	d
cublasCsrot	/usr/local/cuda/include/cublas_v2.h	129;"	d
cublasCsscal	/usr/local/cuda/include/cublas_v2.h	92;"	d
cublasCswap	/usr/local/cuda/include/cublas_v2.h	108;"	d
cublasCsymm	/usr/local/cuda/include/cublas_v2.h	259;"	d
cublasCsymv	/usr/local/cuda/include/cublas_v2.h	189;"	d
cublasCsyr	/usr/local/cuda/include/cublas_v2.h	214;"	d
cublasCsyr2	/usr/local/cuda/include/cublas_v2.h	226;"	d
cublasCsyr2k	/usr/local/cuda/include/cublas_v2.h	252;"	d
cublasCsyrk	/usr/local/cuda/include/cublas_v2.h	245;"	d
cublasCtbmv	/usr/local/cuda/include/cublas_v2.h	164;"	d
cublasCtbsv	/usr/local/cuda/include/cublas_v2.h	184;"	d
cublasCtpmv	/usr/local/cuda/include/cublas_v2.h	169;"	d
cublasCtpsv	/usr/local/cuda/include/cublas_v2.h	179;"	d
cublasCtrmm	/usr/local/cuda/include/cublas_v2.h	271;"	d
cublasCtrmv	/usr/local/cuda/include/cublas_v2.h	159;"	d
cublasCtrsm	/usr/local/cuda/include/cublas_v2.h	266;"	d
cublasCtrsv	/usr/local/cuda/include/cublas_v2.h	174;"	d
cublasDasum	/usr/local/cuda/include/cublas_v2.h	122;"	d
cublasDataType_t	/usr/local/cuda/include/cublas_api.h	/^typedef cudaDataType cublasDataType_t;$/;"	t
cublasDaxpy	/usr/local/cuda/include/cublas_v2.h	97;"	d
cublasDcopy	/usr/local/cuda/include/cublas_v2.h	102;"	d
cublasDdot	/usr/local/cuda/include/cublas_v2.h	83;"	d
cublasDestroy	/usr/local/cuda/include/cublas_v2.h	68;"	d
cublasDgbmv	/usr/local/cuda/include/cublas_v2.h	153;"	d
cublasDgemm	/usr/local/cuda/include/cublas_v2.h	239;"	d
cublasDgemv	/usr/local/cuda/include/cublas_v2.h	148;"	d
cublasDger	/usr/local/cuda/include/cublas_v2.h	206;"	d
cublasDiagType_t	/usr/local/cuda/include/cublas_api.h	/^} cublasDiagType_t; $/;"	t	typeref:enum:__anon32
cublasDnrm2	/usr/local/cuda/include/cublas_v2.h	78;"	d
cublasDrot	/usr/local/cuda/include/cublas_v2.h	127;"	d
cublasDrotg	/usr/local/cuda/include/cublas_v2.h	134;"	d
cublasDrotm	/usr/local/cuda/include/cublas_v2.h	139;"	d
cublasDrotmg	/usr/local/cuda/include/cublas_v2.h	142;"	d
cublasDsbmv	/usr/local/cuda/include/cublas_v2.h	195;"	d
cublasDscal	/usr/local/cuda/include/cublas_v2.h	90;"	d
cublasDspmv	/usr/local/cuda/include/cublas_v2.h	200;"	d
cublasDspr	/usr/local/cuda/include/cublas_v2.h	220;"	d
cublasDspr2	/usr/local/cuda/include/cublas_v2.h	232;"	d
cublasDswap	/usr/local/cuda/include/cublas_v2.h	107;"	d
cublasDsymm	/usr/local/cuda/include/cublas_v2.h	258;"	d
cublasDsymv	/usr/local/cuda/include/cublas_v2.h	188;"	d
cublasDsyr	/usr/local/cuda/include/cublas_v2.h	213;"	d
cublasDsyr2	/usr/local/cuda/include/cublas_v2.h	225;"	d
cublasDsyr2k	/usr/local/cuda/include/cublas_v2.h	251;"	d
cublasDsyrk	/usr/local/cuda/include/cublas_v2.h	244;"	d
cublasDtbmv	/usr/local/cuda/include/cublas_v2.h	163;"	d
cublasDtbsv	/usr/local/cuda/include/cublas_v2.h	183;"	d
cublasDtpmv	/usr/local/cuda/include/cublas_v2.h	168;"	d
cublasDtpsv	/usr/local/cuda/include/cublas_v2.h	178;"	d
cublasDtrmm	/usr/local/cuda/include/cublas_v2.h	270;"	d
cublasDtrmv	/usr/local/cuda/include/cublas_v2.h	158;"	d
cublasDtrsm	/usr/local/cuda/include/cublas_v2.h	265;"	d
cublasDtrsv	/usr/local/cuda/include/cublas_v2.h	173;"	d
cublasDzasum	/usr/local/cuda/include/cublas_v2.h	124;"	d
cublasDznrm2	/usr/local/cuda/include/cublas_v2.h	80;"	d
cublasFillMode_t	/usr/local/cuda/include/cublas_api.h	/^} cublasFillMode_t;$/;"	t	typeref:enum:__anon31
cublasGemmAlgo_t	/usr/local/cuda/include/cublas_api.h	/^} cublasGemmAlgo_t;$/;"	t	typeref:enum:__anon37
cublasGetPointerMode	/usr/local/cuda/include/cublas_v2.h	72;"	d
cublasGetStream	/usr/local/cuda/include/cublas_v2.h	71;"	d
cublasGetVersion	/usr/local/cuda/include/cublas_v2.h	69;"	d
cublasHandle_t	/usr/local/cuda/include/cublas_api.h	/^typedef struct cublasContext *cublasHandle_t;$/;"	t	typeref:struct:cublasContext
cublasIcamax	/usr/local/cuda/include/cublas_v2.h	113;"	d
cublasIcamin	/usr/local/cuda/include/cublas_v2.h	118;"	d
cublasIdamax	/usr/local/cuda/include/cublas_v2.h	112;"	d
cublasIdamin	/usr/local/cuda/include/cublas_v2.h	117;"	d
cublasIsamax	/usr/local/cuda/include/cublas_v2.h	111;"	d
cublasIsamin	/usr/local/cuda/include/cublas_v2.h	116;"	d
cublasIzamax	/usr/local/cuda/include/cublas_v2.h	114;"	d
cublasIzamin	/usr/local/cuda/include/cublas_v2.h	119;"	d
cublasMath_t	/usr/local/cuda/include/cublas_api.h	/^} cublasMath_t;$/;"	t	typeref:enum:__anon38
cublasOperation_t	/usr/local/cuda/include/cublas_api.h	/^} cublasOperation_t;$/;"	t	typeref:enum:__anon34
cublasPointerMode_t	/usr/local/cuda/include/cublas_api.h	/^} cublasPointerMode_t;$/;"	t	typeref:enum:__anon35
cublasSasum	/usr/local/cuda/include/cublas_v2.h	121;"	d
cublasSaxpy	/usr/local/cuda/include/cublas_v2.h	96;"	d
cublasScasum	/usr/local/cuda/include/cublas_v2.h	123;"	d
cublasScnrm2	/usr/local/cuda/include/cublas_v2.h	79;"	d
cublasScopy	/usr/local/cuda/include/cublas_v2.h	101;"	d
cublasSdot	/usr/local/cuda/include/cublas_v2.h	82;"	d
cublasSetPointerMode	/usr/local/cuda/include/cublas_v2.h	73;"	d
cublasSetStream	/usr/local/cuda/include/cublas_v2.h	70;"	d
cublasSgbmv	/usr/local/cuda/include/cublas_v2.h	152;"	d
cublasSgemm	/usr/local/cuda/include/cublas_v2.h	238;"	d
cublasSgemv	/usr/local/cuda/include/cublas_v2.h	147;"	d
cublasSger	/usr/local/cuda/include/cublas_v2.h	205;"	d
cublasSideMode_t	/usr/local/cuda/include/cublas_api.h	/^} cublasSideMode_t; $/;"	t	typeref:enum:__anon33
cublasSnrm2	/usr/local/cuda/include/cublas_v2.h	77;"	d
cublasSrot	/usr/local/cuda/include/cublas_v2.h	126;"	d
cublasSrotg	/usr/local/cuda/include/cublas_v2.h	133;"	d
cublasSrotm	/usr/local/cuda/include/cublas_v2.h	138;"	d
cublasSrotmg	/usr/local/cuda/include/cublas_v2.h	141;"	d
cublasSsbmv	/usr/local/cuda/include/cublas_v2.h	194;"	d
cublasSscal	/usr/local/cuda/include/cublas_v2.h	89;"	d
cublasSspmv	/usr/local/cuda/include/cublas_v2.h	199;"	d
cublasSspr	/usr/local/cuda/include/cublas_v2.h	219;"	d
cublasSspr2	/usr/local/cuda/include/cublas_v2.h	231;"	d
cublasSswap	/usr/local/cuda/include/cublas_v2.h	106;"	d
cublasSsymm	/usr/local/cuda/include/cublas_v2.h	257;"	d
cublasSsymv	/usr/local/cuda/include/cublas_v2.h	187;"	d
cublasSsyr	/usr/local/cuda/include/cublas_v2.h	212;"	d
cublasSsyr2	/usr/local/cuda/include/cublas_v2.h	224;"	d
cublasSsyr2k	/usr/local/cuda/include/cublas_v2.h	250;"	d
cublasSsyrk	/usr/local/cuda/include/cublas_v2.h	243;"	d
cublasStatus	/usr/local/cuda/include/cublas.h	84;"	d
cublasStatus_t	/usr/local/cuda/include/cublas_api.h	/^} cublasStatus_t;$/;"	t	typeref:enum:__anon30
cublasStbmv	/usr/local/cuda/include/cublas_v2.h	162;"	d
cublasStbsv	/usr/local/cuda/include/cublas_v2.h	182;"	d
cublasStpmv	/usr/local/cuda/include/cublas_v2.h	167;"	d
cublasStpsv	/usr/local/cuda/include/cublas_v2.h	177;"	d
cublasStrmm	/usr/local/cuda/include/cublas_v2.h	269;"	d
cublasStrmv	/usr/local/cuda/include/cublas_v2.h	157;"	d
cublasStrsm	/usr/local/cuda/include/cublas_v2.h	264;"	d
cublasStrsv	/usr/local/cuda/include/cublas_v2.h	172;"	d
cublasXtBlasOp_t	/usr/local/cuda/include/cublasXt.h	/^}cublasXtBlasOp_t;$/;"	t	typeref:enum:__anon29
cublasXtHandle_t	/usr/local/cuda/include/cublasXt.h	/^typedef struct cublasXtContext *cublasXtHandle_t;$/;"	t	typeref:struct:cublasXtContext
cublasXtOpType_t	/usr/local/cuda/include/cublasXt.h	/^}cublasXtOpType_t;$/;"	t	typeref:enum:__anon28
cublasXtPinnedMemMode_t	/usr/local/cuda/include/cublasXt.h	/^} cublasXtPinnedMemMode_t;$/;"	t	typeref:enum:__anon27
cublasZaxpy	/usr/local/cuda/include/cublas_v2.h	99;"	d
cublasZcopy	/usr/local/cuda/include/cublas_v2.h	104;"	d
cublasZdotc	/usr/local/cuda/include/cublas_v2.h	87;"	d
cublasZdotu	/usr/local/cuda/include/cublas_v2.h	86;"	d
cublasZdrot	/usr/local/cuda/include/cublas_v2.h	131;"	d
cublasZdscal	/usr/local/cuda/include/cublas_v2.h	94;"	d
cublasZgbmv	/usr/local/cuda/include/cublas_v2.h	155;"	d
cublasZgemm	/usr/local/cuda/include/cublas_v2.h	241;"	d
cublasZgemv	/usr/local/cuda/include/cublas_v2.h	150;"	d
cublasZgerc	/usr/local/cuda/include/cublas_v2.h	210;"	d
cublasZgeru	/usr/local/cuda/include/cublas_v2.h	209;"	d
cublasZhbmv	/usr/local/cuda/include/cublas_v2.h	197;"	d
cublasZhemm	/usr/local/cuda/include/cublas_v2.h	262;"	d
cublasZhemv	/usr/local/cuda/include/cublas_v2.h	192;"	d
cublasZher	/usr/local/cuda/include/cublas_v2.h	217;"	d
cublasZher2	/usr/local/cuda/include/cublas_v2.h	229;"	d
cublasZher2k	/usr/local/cuda/include/cublas_v2.h	255;"	d
cublasZherk	/usr/local/cuda/include/cublas_v2.h	248;"	d
cublasZhpmv	/usr/local/cuda/include/cublas_v2.h	202;"	d
cublasZhpr	/usr/local/cuda/include/cublas_v2.h	222;"	d
cublasZhpr2	/usr/local/cuda/include/cublas_v2.h	234;"	d
cublasZrot	/usr/local/cuda/include/cublas_v2.h	130;"	d
cublasZrotg	/usr/local/cuda/include/cublas_v2.h	136;"	d
cublasZscal	/usr/local/cuda/include/cublas_v2.h	93;"	d
cublasZswap	/usr/local/cuda/include/cublas_v2.h	109;"	d
cublasZsymm	/usr/local/cuda/include/cublas_v2.h	260;"	d
cublasZsymv	/usr/local/cuda/include/cublas_v2.h	190;"	d
cublasZsyr	/usr/local/cuda/include/cublas_v2.h	215;"	d
cublasZsyr2	/usr/local/cuda/include/cublas_v2.h	227;"	d
cublasZsyr2k	/usr/local/cuda/include/cublas_v2.h	253;"	d
cublasZsyrk	/usr/local/cuda/include/cublas_v2.h	246;"	d
cublasZtbmv	/usr/local/cuda/include/cublas_v2.h	165;"	d
cublasZtbsv	/usr/local/cuda/include/cublas_v2.h	185;"	d
cublasZtpmv	/usr/local/cuda/include/cublas_v2.h	170;"	d
cublasZtpsv	/usr/local/cuda/include/cublas_v2.h	180;"	d
cublasZtrmm	/usr/local/cuda/include/cublas_v2.h	272;"	d
cublasZtrmv	/usr/local/cuda/include/cublas_v2.h	160;"	d
cublasZtrsm	/usr/local/cuda/include/cublas_v2.h	267;"	d
cublasZtrsv	/usr/local/cuda/include/cublas_v2.h	175;"	d
cudaAddressModeBorder	/usr/local/cuda/include/texture_types.h	/^    cudaAddressModeBorder = 3     \/**< Border address mode *\/$/;"	e	enum:cudaTextureAddressMode
cudaAddressModeClamp	/usr/local/cuda/include/texture_types.h	/^    cudaAddressModeClamp  = 1,    \/**< Clamp to edge address mode *\/$/;"	e	enum:cudaTextureAddressMode
cudaAddressModeMirror	/usr/local/cuda/include/texture_types.h	/^    cudaAddressModeMirror = 2,    \/**< Mirror address mode *\/$/;"	e	enum:cudaTextureAddressMode
cudaAddressModeWrap	/usr/local/cuda/include/texture_types.h	/^    cudaAddressModeWrap   = 0,    \/**< Wrapping address mode *\/$/;"	e	enum:cudaTextureAddressMode
cudaArrayCubemap	/usr/local/cuda/include/driver_types.h	131;"	d
cudaArrayDefault	/usr/local/cuda/include/driver_types.h	128;"	d
cudaArrayLayered	/usr/local/cuda/include/driver_types.h	129;"	d
cudaArraySurfaceLoadStore	/usr/local/cuda/include/driver_types.h	130;"	d
cudaArrayTextureGather	/usr/local/cuda/include/driver_types.h	132;"	d
cudaArray_const_t	/usr/local/cuda/include/driver_types.h	/^typedef const struct cudaArray *cudaArray_const_t;$/;"	t	typeref:struct:cudaArray
cudaArray_t	/usr/local/cuda/include/driver_types.h	/^typedef struct cudaArray *cudaArray_t;$/;"	t	typeref:struct:cudaArray
cudaAudioCodec	/usr/local/cuda/include/dynlink_nvcuvid.h	/^} cudaAudioCodec;$/;"	t	typeref:enum:__anon122
cudaAudioCodec_AC3	/usr/local/cuda/include/dynlink_nvcuvid.h	/^    cudaAudioCodec_AC3,             \/**< Dolby Digital (AC3) Audio  *\/$/;"	e	enum:__anon122
cudaAudioCodec_LPCM	/usr/local/cuda/include/dynlink_nvcuvid.h	/^    cudaAudioCodec_LPCM             \/**< PCM Audio  *\/$/;"	e	enum:__anon122
cudaAudioCodec_MP3	/usr/local/cuda/include/dynlink_nvcuvid.h	/^    cudaAudioCodec_MP3,             \/**< MPEG-1 Layer III Audio  *\/$/;"	e	enum:__anon122
cudaAudioCodec_MPEG1	/usr/local/cuda/include/dynlink_nvcuvid.h	/^    cudaAudioCodec_MPEG1=0,         \/**< MPEG-1 Audio  *\/$/;"	e	enum:__anon122
cudaAudioCodec_MPEG2	/usr/local/cuda/include/dynlink_nvcuvid.h	/^    cudaAudioCodec_MPEG2,           \/**< MPEG-2 Audio  *\/$/;"	e	enum:__anon122
cudaBindSurfaceToArray	/usr/local/cuda/include/cuda_runtime.h	/^static __inline__ __host__ cudaError_t cudaBindSurfaceToArray($/;"	f
cudaBindTexture	/usr/local/cuda/include/cuda_runtime.h	/^static __inline__ __host__ cudaError_t cudaBindTexture($/;"	f
cudaBindTexture2D	/usr/local/cuda/include/cuda_runtime.h	/^static __inline__ __host__ cudaError_t cudaBindTexture2D($/;"	f
cudaBindTextureToArray	/usr/local/cuda/include/cuda_runtime.h	/^static __inline__ __host__ cudaError_t cudaBindTextureToArray($/;"	f
cudaBindTextureToMipmappedArray	/usr/local/cuda/include/cuda_runtime.h	/^static __inline__ __host__ cudaError_t cudaBindTextureToMipmappedArray($/;"	f
cudaBoundaryModeClamp	/usr/local/cuda/include/surface_types.h	/^    cudaBoundaryModeClamp = 1,    \/**< Clamp boundary mode *\/$/;"	e	enum:cudaSurfaceBoundaryMode
cudaBoundaryModeTrap	/usr/local/cuda/include/surface_types.h	/^    cudaBoundaryModeTrap  = 2     \/**< Trap boundary mode *\/$/;"	e	enum:cudaSurfaceBoundaryMode
cudaBoundaryModeZero	/usr/local/cuda/include/surface_types.h	/^    cudaBoundaryModeZero  = 0,    \/**< Zero boundary mode *\/$/;"	e	enum:cudaSurfaceBoundaryMode
cudaCGScope	/usr/local/cuda/include/driver_types.h	/^enum __device_builtin__ cudaCGScope {$/;"	g
cudaCGScopeGrid	/usr/local/cuda/include/driver_types.h	/^    cudaCGScopeGrid      = 1, \/**< Scope represented by a grid_group *\/$/;"	e	enum:cudaCGScope
cudaCGScopeInvalid	/usr/local/cuda/include/driver_types.h	/^    cudaCGScopeInvalid   = 0, \/**< Invalid cooperative group scope *\/$/;"	e	enum:cudaCGScope
cudaCGScopeMultiGrid	/usr/local/cuda/include/driver_types.h	/^    cudaCGScopeMultiGrid = 2  \/**< Scope represented by a multi_grid_group *\/$/;"	e	enum:cudaCGScope
cudaCSV	/usr/local/cuda/include/driver_types.h	/^    cudaCSV             = 0x01  \/**< Output mode Comma separated values format. *\/$/;"	e	enum:cudaOutputMode
cudaChannelFormatDesc	/usr/local/cuda/include/driver_types.h	/^struct __device_builtin__ cudaChannelFormatDesc$/;"	s
cudaChannelFormatKind	/usr/local/cuda/include/driver_types.h	/^enum __device_builtin__ cudaChannelFormatKind$/;"	g
cudaChannelFormatKindFloat	/usr/local/cuda/include/driver_types.h	/^    cudaChannelFormatKindFloat            =   2,      \/**< Float channel format *\/$/;"	e	enum:cudaChannelFormatKind
cudaChannelFormatKindNone	/usr/local/cuda/include/driver_types.h	/^    cudaChannelFormatKindNone             =   3       \/**< No channel format *\/$/;"	e	enum:cudaChannelFormatKind
cudaChannelFormatKindSigned	/usr/local/cuda/include/driver_types.h	/^    cudaChannelFormatKindSigned           =   0,      \/**< Signed channel format *\/$/;"	e	enum:cudaChannelFormatKind
cudaChannelFormatKindUnsigned	/usr/local/cuda/include/driver_types.h	/^    cudaChannelFormatKindUnsigned         =   1,      \/**< Unsigned channel format *\/$/;"	e	enum:cudaChannelFormatKind
cudaComputeMode	/usr/local/cuda/include/driver_types.h	/^enum __device_builtin__ cudaComputeMode$/;"	g
cudaComputeModeDefault	/usr/local/cuda/include/driver_types.h	/^    cudaComputeModeDefault          = 0,  \/**< Default compute mode (Multiple threads can use ::cudaSetDevice() with this device) *\/$/;"	e	enum:cudaComputeMode
cudaComputeModeExclusive	/usr/local/cuda/include/driver_types.h	/^    cudaComputeModeExclusive        = 1,  \/**< Compute-exclusive-thread mode (Only one thread in one process will be able to use ::cudaSetDevice() with this device) *\/$/;"	e	enum:cudaComputeMode
cudaComputeModeExclusiveProcess	/usr/local/cuda/include/driver_types.h	/^    cudaComputeModeExclusiveProcess = 3   \/**< Compute-exclusive-process mode (Many threads in one process will be able to use ::cudaSetDevice() with this device) *\/$/;"	e	enum:cudaComputeMode
cudaComputeModeProhibited	/usr/local/cuda/include/driver_types.h	/^    cudaComputeModeProhibited       = 2,  \/**< Compute-prohibited mode (No threads can use ::cudaSetDevice() with this device) *\/$/;"	e	enum:cudaComputeMode
cudaCooperativeLaunchMultiDeviceNoPostSync	/usr/local/cuda/include/driver_types.h	158;"	d
cudaCooperativeLaunchMultiDeviceNoPreSync	/usr/local/cuda/include/driver_types.h	151;"	d
cudaCpuDeviceId	/usr/local/cuda/include/driver_types.h	143;"	d
cudaCreateChannelDesc	/usr/local/cuda/include/channel_descriptor.h	/^template<> __inline__ __host__ cudaChannelFormatDesc cudaCreateChannelDesc<char1>(void)$/;"	f
cudaCreateChannelDesc	/usr/local/cuda/include/channel_descriptor.h	/^template<> __inline__ __host__ cudaChannelFormatDesc cudaCreateChannelDesc<char2>(void)$/;"	f
cudaCreateChannelDesc	/usr/local/cuda/include/channel_descriptor.h	/^template<> __inline__ __host__ cudaChannelFormatDesc cudaCreateChannelDesc<char4>(void)$/;"	f
cudaCreateChannelDesc	/usr/local/cuda/include/channel_descriptor.h	/^template<> __inline__ __host__ cudaChannelFormatDesc cudaCreateChannelDesc<char>(void)$/;"	f
cudaCreateChannelDesc	/usr/local/cuda/include/channel_descriptor.h	/^template<> __inline__ __host__ cudaChannelFormatDesc cudaCreateChannelDesc<float1>(void)$/;"	f
cudaCreateChannelDesc	/usr/local/cuda/include/channel_descriptor.h	/^template<> __inline__ __host__ cudaChannelFormatDesc cudaCreateChannelDesc<float2>(void)$/;"	f
cudaCreateChannelDesc	/usr/local/cuda/include/channel_descriptor.h	/^template<> __inline__ __host__ cudaChannelFormatDesc cudaCreateChannelDesc<float4>(void)$/;"	f
cudaCreateChannelDesc	/usr/local/cuda/include/channel_descriptor.h	/^template<> __inline__ __host__ cudaChannelFormatDesc cudaCreateChannelDesc<float>(void)$/;"	f
cudaCreateChannelDesc	/usr/local/cuda/include/channel_descriptor.h	/^template<> __inline__ __host__ cudaChannelFormatDesc cudaCreateChannelDesc<int1>(void)$/;"	f
cudaCreateChannelDesc	/usr/local/cuda/include/channel_descriptor.h	/^template<> __inline__ __host__ cudaChannelFormatDesc cudaCreateChannelDesc<int2>(void)$/;"	f
cudaCreateChannelDesc	/usr/local/cuda/include/channel_descriptor.h	/^template<> __inline__ __host__ cudaChannelFormatDesc cudaCreateChannelDesc<int4>(void)$/;"	f
cudaCreateChannelDesc	/usr/local/cuda/include/channel_descriptor.h	/^template<> __inline__ __host__ cudaChannelFormatDesc cudaCreateChannelDesc<int>(void)$/;"	f
cudaCreateChannelDesc	/usr/local/cuda/include/channel_descriptor.h	/^template<> __inline__ __host__ cudaChannelFormatDesc cudaCreateChannelDesc<long1>(void)$/;"	f
cudaCreateChannelDesc	/usr/local/cuda/include/channel_descriptor.h	/^template<> __inline__ __host__ cudaChannelFormatDesc cudaCreateChannelDesc<long2>(void)$/;"	f
cudaCreateChannelDesc	/usr/local/cuda/include/channel_descriptor.h	/^template<> __inline__ __host__ cudaChannelFormatDesc cudaCreateChannelDesc<long4>(void)$/;"	f
cudaCreateChannelDesc	/usr/local/cuda/include/channel_descriptor.h	/^template<> __inline__ __host__ cudaChannelFormatDesc cudaCreateChannelDesc<long>(void)$/;"	f
cudaCreateChannelDesc	/usr/local/cuda/include/channel_descriptor.h	/^template<> __inline__ __host__ cudaChannelFormatDesc cudaCreateChannelDesc<short1>(void)$/;"	f
cudaCreateChannelDesc	/usr/local/cuda/include/channel_descriptor.h	/^template<> __inline__ __host__ cudaChannelFormatDesc cudaCreateChannelDesc<short2>(void)$/;"	f
cudaCreateChannelDesc	/usr/local/cuda/include/channel_descriptor.h	/^template<> __inline__ __host__ cudaChannelFormatDesc cudaCreateChannelDesc<short4>(void)$/;"	f
cudaCreateChannelDesc	/usr/local/cuda/include/channel_descriptor.h	/^template<> __inline__ __host__ cudaChannelFormatDesc cudaCreateChannelDesc<short>(void)$/;"	f
cudaCreateChannelDesc	/usr/local/cuda/include/channel_descriptor.h	/^template<> __inline__ __host__ cudaChannelFormatDesc cudaCreateChannelDesc<signed char>(void)$/;"	f
cudaCreateChannelDesc	/usr/local/cuda/include/channel_descriptor.h	/^template<> __inline__ __host__ cudaChannelFormatDesc cudaCreateChannelDesc<uchar1>(void)$/;"	f
cudaCreateChannelDesc	/usr/local/cuda/include/channel_descriptor.h	/^template<> __inline__ __host__ cudaChannelFormatDesc cudaCreateChannelDesc<uchar2>(void)$/;"	f
cudaCreateChannelDesc	/usr/local/cuda/include/channel_descriptor.h	/^template<> __inline__ __host__ cudaChannelFormatDesc cudaCreateChannelDesc<uchar4>(void)$/;"	f
cudaCreateChannelDesc	/usr/local/cuda/include/channel_descriptor.h	/^template<> __inline__ __host__ cudaChannelFormatDesc cudaCreateChannelDesc<uint1>(void)$/;"	f
cudaCreateChannelDesc	/usr/local/cuda/include/channel_descriptor.h	/^template<> __inline__ __host__ cudaChannelFormatDesc cudaCreateChannelDesc<uint2>(void)$/;"	f
cudaCreateChannelDesc	/usr/local/cuda/include/channel_descriptor.h	/^template<> __inline__ __host__ cudaChannelFormatDesc cudaCreateChannelDesc<uint4>(void)$/;"	f
cudaCreateChannelDesc	/usr/local/cuda/include/channel_descriptor.h	/^template<> __inline__ __host__ cudaChannelFormatDesc cudaCreateChannelDesc<ulong1>(void)$/;"	f
cudaCreateChannelDesc	/usr/local/cuda/include/channel_descriptor.h	/^template<> __inline__ __host__ cudaChannelFormatDesc cudaCreateChannelDesc<ulong2>(void)$/;"	f
cudaCreateChannelDesc	/usr/local/cuda/include/channel_descriptor.h	/^template<> __inline__ __host__ cudaChannelFormatDesc cudaCreateChannelDesc<ulong4>(void)$/;"	f
cudaCreateChannelDesc	/usr/local/cuda/include/channel_descriptor.h	/^template<> __inline__ __host__ cudaChannelFormatDesc cudaCreateChannelDesc<unsigned char>(void)$/;"	f
cudaCreateChannelDesc	/usr/local/cuda/include/channel_descriptor.h	/^template<> __inline__ __host__ cudaChannelFormatDesc cudaCreateChannelDesc<unsigned int>(void)$/;"	f
cudaCreateChannelDesc	/usr/local/cuda/include/channel_descriptor.h	/^template<> __inline__ __host__ cudaChannelFormatDesc cudaCreateChannelDesc<unsigned long>(void)$/;"	f
cudaCreateChannelDesc	/usr/local/cuda/include/channel_descriptor.h	/^template<> __inline__ __host__ cudaChannelFormatDesc cudaCreateChannelDesc<unsigned short>(void)$/;"	f
cudaCreateChannelDesc	/usr/local/cuda/include/channel_descriptor.h	/^template<> __inline__ __host__ cudaChannelFormatDesc cudaCreateChannelDesc<ushort1>(void)$/;"	f
cudaCreateChannelDesc	/usr/local/cuda/include/channel_descriptor.h	/^template<> __inline__ __host__ cudaChannelFormatDesc cudaCreateChannelDesc<ushort2>(void)$/;"	f
cudaCreateChannelDesc	/usr/local/cuda/include/channel_descriptor.h	/^template<> __inline__ __host__ cudaChannelFormatDesc cudaCreateChannelDesc<ushort4>(void)$/;"	f
cudaCreateChannelDesc	/usr/local/cuda/include/channel_descriptor.h	/^template<class T> __inline__ __host__ cudaChannelFormatDesc cudaCreateChannelDesc(void)$/;"	f
cudaCreateChannelDescHalf	/usr/local/cuda/include/channel_descriptor.h	/^static __inline__ __host__ cudaChannelFormatDesc cudaCreateChannelDescHalf(void)$/;"	f
cudaCreateChannelDescHalf1	/usr/local/cuda/include/channel_descriptor.h	/^static __inline__ __host__ cudaChannelFormatDesc cudaCreateChannelDescHalf1(void)$/;"	f
cudaCreateChannelDescHalf2	/usr/local/cuda/include/channel_descriptor.h	/^static __inline__ __host__ cudaChannelFormatDesc cudaCreateChannelDescHalf2(void)$/;"	f
cudaCreateChannelDescHalf4	/usr/local/cuda/include/channel_descriptor.h	/^static __inline__ __host__ cudaChannelFormatDesc cudaCreateChannelDescHalf4(void)$/;"	f
cudaDataType	/usr/local/cuda/include/library_types.h	/^} cudaDataType; $/;"	t	typeref:enum:cudaDataType_t
cudaDataType_t	/usr/local/cuda/include/library_types.h	/^typedef enum cudaDataType_t$/;"	g
cudaDevAttrAsyncEngineCount	/usr/local/cuda/include/driver_types.h	/^    cudaDevAttrAsyncEngineCount               = 40, \/**< Number of asynchronous engines *\/$/;"	e	enum:cudaDeviceAttr
cudaDevAttrCanMapHostMemory	/usr/local/cuda/include/driver_types.h	/^    cudaDevAttrCanMapHostMemory               = 19, \/**< Device can map host memory into CUDA address space *\/$/;"	e	enum:cudaDeviceAttr
cudaDevAttrCanUseHostPointerForRegisteredMem	/usr/local/cuda/include/driver_types.h	/^    cudaDevAttrCanUseHostPointerForRegisteredMem = 91, \/**< Device can access host registered memory at the same virtual address as the CPU *\/$/;"	e	enum:cudaDeviceAttr
cudaDevAttrClockRate	/usr/local/cuda/include/driver_types.h	/^    cudaDevAttrClockRate                      = 13, \/**< Peak clock frequency in kilohertz *\/$/;"	e	enum:cudaDeviceAttr
cudaDevAttrComputeCapabilityMajor	/usr/local/cuda/include/driver_types.h	/^    cudaDevAttrComputeCapabilityMajor         = 75, \/**< Major compute capability version number *\/ $/;"	e	enum:cudaDeviceAttr
cudaDevAttrComputeCapabilityMinor	/usr/local/cuda/include/driver_types.h	/^    cudaDevAttrComputeCapabilityMinor         = 76, \/**< Minor compute capability version number *\/$/;"	e	enum:cudaDeviceAttr
cudaDevAttrComputeMode	/usr/local/cuda/include/driver_types.h	/^    cudaDevAttrComputeMode                    = 20, \/**< Compute mode (See ::cudaComputeMode for details) *\/$/;"	e	enum:cudaDeviceAttr
cudaDevAttrComputePreemptionSupported	/usr/local/cuda/include/driver_types.h	/^    cudaDevAttrComputePreemptionSupported     = 90, \/**< Device supports Compute Preemption *\/$/;"	e	enum:cudaDeviceAttr
cudaDevAttrConcurrentKernels	/usr/local/cuda/include/driver_types.h	/^    cudaDevAttrConcurrentKernels              = 31, \/**< Device can possibly execute multiple kernels concurrently *\/$/;"	e	enum:cudaDeviceAttr
cudaDevAttrConcurrentManagedAccess	/usr/local/cuda/include/driver_types.h	/^    cudaDevAttrConcurrentManagedAccess        = 89, \/**< Device can coherently access managed memory concurrently with the CPU *\/$/;"	e	enum:cudaDeviceAttr
cudaDevAttrCooperativeLaunch	/usr/local/cuda/include/driver_types.h	/^    cudaDevAttrCooperativeLaunch              = 95, \/**< Device supports launching cooperative kernels via ::cudaLaunchCooperativeKernel*\/$/;"	e	enum:cudaDeviceAttr
cudaDevAttrCooperativeMultiDeviceLaunch	/usr/local/cuda/include/driver_types.h	/^    cudaDevAttrCooperativeMultiDeviceLaunch   = 96, \/**< Device can participate in cooperative kernels launched via ::cudaLaunchCooperativeKernelMultiDevice *\/$/;"	e	enum:cudaDeviceAttr
cudaDevAttrEccEnabled	/usr/local/cuda/include/driver_types.h	/^    cudaDevAttrEccEnabled                     = 32, \/**< Device has ECC support enabled *\/$/;"	e	enum:cudaDeviceAttr
cudaDevAttrGlobalL1CacheSupported	/usr/local/cuda/include/driver_types.h	/^    cudaDevAttrGlobalL1CacheSupported         = 79, \/**< Device supports caching globals in L1 *\/$/;"	e	enum:cudaDeviceAttr
cudaDevAttrGlobalMemoryBusWidth	/usr/local/cuda/include/driver_types.h	/^    cudaDevAttrGlobalMemoryBusWidth           = 37, \/**< Global memory bus width in bits *\/$/;"	e	enum:cudaDeviceAttr
cudaDevAttrGpuOverlap	/usr/local/cuda/include/driver_types.h	/^    cudaDevAttrGpuOverlap                     = 15, \/**< Device can possibly copy memory and execute a kernel concurrently *\/$/;"	e	enum:cudaDeviceAttr
cudaDevAttrHostNativeAtomicSupported	/usr/local/cuda/include/driver_types.h	/^    cudaDevAttrHostNativeAtomicSupported      = 86, \/**< Link between the device and the host supports native atomic operations *\/$/;"	e	enum:cudaDeviceAttr
cudaDevAttrIntegrated	/usr/local/cuda/include/driver_types.h	/^    cudaDevAttrIntegrated                     = 18, \/**< Device is integrated with host memory *\/$/;"	e	enum:cudaDeviceAttr
cudaDevAttrIsMultiGpuBoard	/usr/local/cuda/include/driver_types.h	/^    cudaDevAttrIsMultiGpuBoard                = 84, \/**< Device is on a multi-GPU board *\/$/;"	e	enum:cudaDeviceAttr
cudaDevAttrKernelExecTimeout	/usr/local/cuda/include/driver_types.h	/^    cudaDevAttrKernelExecTimeout              = 17, \/**< Specifies whether there is a run time limit on kernels *\/$/;"	e	enum:cudaDeviceAttr
cudaDevAttrL2CacheSize	/usr/local/cuda/include/driver_types.h	/^    cudaDevAttrL2CacheSize                    = 38, \/**< Size of L2 cache in bytes *\/$/;"	e	enum:cudaDeviceAttr
cudaDevAttrLocalL1CacheSupported	/usr/local/cuda/include/driver_types.h	/^    cudaDevAttrLocalL1CacheSupported          = 80, \/**< Device supports caching locals in L1 *\/$/;"	e	enum:cudaDeviceAttr
cudaDevAttrManagedMemory	/usr/local/cuda/include/driver_types.h	/^    cudaDevAttrManagedMemory                  = 83, \/**< Device can allocate managed memory on this system *\/$/;"	e	enum:cudaDeviceAttr
cudaDevAttrMaxBlockDimX	/usr/local/cuda/include/driver_types.h	/^    cudaDevAttrMaxBlockDimX                   = 2,  \/**< Maximum block dimension X *\/$/;"	e	enum:cudaDeviceAttr
cudaDevAttrMaxBlockDimY	/usr/local/cuda/include/driver_types.h	/^    cudaDevAttrMaxBlockDimY                   = 3,  \/**< Maximum block dimension Y *\/$/;"	e	enum:cudaDeviceAttr
cudaDevAttrMaxBlockDimZ	/usr/local/cuda/include/driver_types.h	/^    cudaDevAttrMaxBlockDimZ                   = 4,  \/**< Maximum block dimension Z *\/$/;"	e	enum:cudaDeviceAttr
cudaDevAttrMaxGridDimX	/usr/local/cuda/include/driver_types.h	/^    cudaDevAttrMaxGridDimX                    = 5,  \/**< Maximum grid dimension X *\/$/;"	e	enum:cudaDeviceAttr
cudaDevAttrMaxGridDimY	/usr/local/cuda/include/driver_types.h	/^    cudaDevAttrMaxGridDimY                    = 6,  \/**< Maximum grid dimension Y *\/$/;"	e	enum:cudaDeviceAttr
cudaDevAttrMaxGridDimZ	/usr/local/cuda/include/driver_types.h	/^    cudaDevAttrMaxGridDimZ                    = 7,  \/**< Maximum grid dimension Z *\/$/;"	e	enum:cudaDeviceAttr
cudaDevAttrMaxPitch	/usr/local/cuda/include/driver_types.h	/^    cudaDevAttrMaxPitch                       = 11, \/**< Maximum pitch in bytes allowed by memory copies *\/$/;"	e	enum:cudaDeviceAttr
cudaDevAttrMaxRegistersPerBlock	/usr/local/cuda/include/driver_types.h	/^    cudaDevAttrMaxRegistersPerBlock           = 12, \/**< Maximum number of 32-bit registers available per block *\/$/;"	e	enum:cudaDeviceAttr
cudaDevAttrMaxRegistersPerMultiprocessor	/usr/local/cuda/include/driver_types.h	/^    cudaDevAttrMaxRegistersPerMultiprocessor  = 82, \/**< Maximum number of 32-bit registers available per multiprocessor *\/$/;"	e	enum:cudaDeviceAttr
cudaDevAttrMaxSharedMemoryPerBlock	/usr/local/cuda/include/driver_types.h	/^    cudaDevAttrMaxSharedMemoryPerBlock        = 8,  \/**< Maximum shared memory available per block in bytes *\/$/;"	e	enum:cudaDeviceAttr
cudaDevAttrMaxSharedMemoryPerBlockOptin	/usr/local/cuda/include/driver_types.h	/^    cudaDevAttrMaxSharedMemoryPerBlockOptin   = 97  \/**< The maximum optin shared memory per block. This value may vary by chip. See ::cudaFuncSetAttribute *\/$/;"	e	enum:cudaDeviceAttr
cudaDevAttrMaxSharedMemoryPerMultiprocessor	/usr/local/cuda/include/driver_types.h	/^    cudaDevAttrMaxSharedMemoryPerMultiprocessor = 81, \/**< Maximum shared memory available per multiprocessor in bytes *\/$/;"	e	enum:cudaDeviceAttr
cudaDevAttrMaxSurface1DLayeredLayers	/usr/local/cuda/include/driver_types.h	/^    cudaDevAttrMaxSurface1DLayeredLayers      = 62, \/**< Maximum layers in a 1D layered surface *\/$/;"	e	enum:cudaDeviceAttr
cudaDevAttrMaxSurface1DLayeredWidth	/usr/local/cuda/include/driver_types.h	/^    cudaDevAttrMaxSurface1DLayeredWidth       = 61, \/**< Maximum 1D layered surface width *\/$/;"	e	enum:cudaDeviceAttr
cudaDevAttrMaxSurface1DWidth	/usr/local/cuda/include/driver_types.h	/^    cudaDevAttrMaxSurface1DWidth              = 55, \/**< Maximum 1D surface width *\/$/;"	e	enum:cudaDeviceAttr
cudaDevAttrMaxSurface2DHeight	/usr/local/cuda/include/driver_types.h	/^    cudaDevAttrMaxSurface2DHeight             = 57, \/**< Maximum 2D surface height *\/$/;"	e	enum:cudaDeviceAttr
cudaDevAttrMaxSurface2DLayeredHeight	/usr/local/cuda/include/driver_types.h	/^    cudaDevAttrMaxSurface2DLayeredHeight      = 64, \/**< Maximum 2D layered surface height *\/$/;"	e	enum:cudaDeviceAttr
cudaDevAttrMaxSurface2DLayeredLayers	/usr/local/cuda/include/driver_types.h	/^    cudaDevAttrMaxSurface2DLayeredLayers      = 65, \/**< Maximum layers in a 2D layered surface *\/$/;"	e	enum:cudaDeviceAttr
cudaDevAttrMaxSurface2DLayeredWidth	/usr/local/cuda/include/driver_types.h	/^    cudaDevAttrMaxSurface2DLayeredWidth       = 63, \/**< Maximum 2D layered surface width *\/$/;"	e	enum:cudaDeviceAttr
cudaDevAttrMaxSurface2DWidth	/usr/local/cuda/include/driver_types.h	/^    cudaDevAttrMaxSurface2DWidth              = 56, \/**< Maximum 2D surface width *\/$/;"	e	enum:cudaDeviceAttr
cudaDevAttrMaxSurface3DDepth	/usr/local/cuda/include/driver_types.h	/^    cudaDevAttrMaxSurface3DDepth              = 60, \/**< Maximum 3D surface depth *\/$/;"	e	enum:cudaDeviceAttr
cudaDevAttrMaxSurface3DHeight	/usr/local/cuda/include/driver_types.h	/^    cudaDevAttrMaxSurface3DHeight             = 59, \/**< Maximum 3D surface height *\/$/;"	e	enum:cudaDeviceAttr
cudaDevAttrMaxSurface3DWidth	/usr/local/cuda/include/driver_types.h	/^    cudaDevAttrMaxSurface3DWidth              = 58, \/**< Maximum 3D surface width *\/$/;"	e	enum:cudaDeviceAttr
cudaDevAttrMaxSurfaceCubemapLayeredLayers	/usr/local/cuda/include/driver_types.h	/^    cudaDevAttrMaxSurfaceCubemapLayeredLayers = 68, \/**< Maximum layers in a cubemap layered surface *\/$/;"	e	enum:cudaDeviceAttr
cudaDevAttrMaxSurfaceCubemapLayeredWidth	/usr/local/cuda/include/driver_types.h	/^    cudaDevAttrMaxSurfaceCubemapLayeredWidth  = 67, \/**< Maximum cubemap layered surface width *\/$/;"	e	enum:cudaDeviceAttr
cudaDevAttrMaxSurfaceCubemapWidth	/usr/local/cuda/include/driver_types.h	/^    cudaDevAttrMaxSurfaceCubemapWidth         = 66, \/**< Maximum cubemap surface width *\/$/;"	e	enum:cudaDeviceAttr
cudaDevAttrMaxTexture1DLayeredLayers	/usr/local/cuda/include/driver_types.h	/^    cudaDevAttrMaxTexture1DLayeredLayers      = 43, \/**< Maximum layers in a 1D layered texture *\/$/;"	e	enum:cudaDeviceAttr
cudaDevAttrMaxTexture1DLayeredWidth	/usr/local/cuda/include/driver_types.h	/^    cudaDevAttrMaxTexture1DLayeredWidth       = 42, \/**< Maximum 1D layered texture width *\/$/;"	e	enum:cudaDeviceAttr
cudaDevAttrMaxTexture1DLinearWidth	/usr/local/cuda/include/driver_types.h	/^    cudaDevAttrMaxTexture1DLinearWidth        = 69, \/**< Maximum 1D linear texture width *\/$/;"	e	enum:cudaDeviceAttr
cudaDevAttrMaxTexture1DMipmappedWidth	/usr/local/cuda/include/driver_types.h	/^    cudaDevAttrMaxTexture1DMipmappedWidth     = 77, \/**< Maximum mipmapped 1D texture width *\/$/;"	e	enum:cudaDeviceAttr
cudaDevAttrMaxTexture1DWidth	/usr/local/cuda/include/driver_types.h	/^    cudaDevAttrMaxTexture1DWidth              = 21, \/**< Maximum 1D texture width *\/$/;"	e	enum:cudaDeviceAttr
cudaDevAttrMaxTexture2DGatherHeight	/usr/local/cuda/include/driver_types.h	/^    cudaDevAttrMaxTexture2DGatherHeight       = 46, \/**< Maximum 2D texture height if cudaArrayTextureGather is set *\/$/;"	e	enum:cudaDeviceAttr
cudaDevAttrMaxTexture2DGatherWidth	/usr/local/cuda/include/driver_types.h	/^    cudaDevAttrMaxTexture2DGatherWidth        = 45, \/**< Maximum 2D texture width if cudaArrayTextureGather is set *\/$/;"	e	enum:cudaDeviceAttr
cudaDevAttrMaxTexture2DHeight	/usr/local/cuda/include/driver_types.h	/^    cudaDevAttrMaxTexture2DHeight             = 23, \/**< Maximum 2D texture height *\/$/;"	e	enum:cudaDeviceAttr
cudaDevAttrMaxTexture2DLayeredHeight	/usr/local/cuda/include/driver_types.h	/^    cudaDevAttrMaxTexture2DLayeredHeight      = 28, \/**< Maximum 2D layered texture height *\/$/;"	e	enum:cudaDeviceAttr
cudaDevAttrMaxTexture2DLayeredLayers	/usr/local/cuda/include/driver_types.h	/^    cudaDevAttrMaxTexture2DLayeredLayers      = 29, \/**< Maximum layers in a 2D layered texture *\/$/;"	e	enum:cudaDeviceAttr
cudaDevAttrMaxTexture2DLayeredWidth	/usr/local/cuda/include/driver_types.h	/^    cudaDevAttrMaxTexture2DLayeredWidth       = 27, \/**< Maximum 2D layered texture width *\/$/;"	e	enum:cudaDeviceAttr
cudaDevAttrMaxTexture2DLinearHeight	/usr/local/cuda/include/driver_types.h	/^    cudaDevAttrMaxTexture2DLinearHeight       = 71, \/**< Maximum 2D linear texture height *\/$/;"	e	enum:cudaDeviceAttr
cudaDevAttrMaxTexture2DLinearPitch	/usr/local/cuda/include/driver_types.h	/^    cudaDevAttrMaxTexture2DLinearPitch        = 72, \/**< Maximum 2D linear texture pitch in bytes *\/$/;"	e	enum:cudaDeviceAttr
cudaDevAttrMaxTexture2DLinearWidth	/usr/local/cuda/include/driver_types.h	/^    cudaDevAttrMaxTexture2DLinearWidth        = 70, \/**< Maximum 2D linear texture width *\/$/;"	e	enum:cudaDeviceAttr
cudaDevAttrMaxTexture2DMipmappedHeight	/usr/local/cuda/include/driver_types.h	/^    cudaDevAttrMaxTexture2DMipmappedHeight    = 74, \/**< Maximum mipmapped 2D texture height *\/$/;"	e	enum:cudaDeviceAttr
cudaDevAttrMaxTexture2DMipmappedWidth	/usr/local/cuda/include/driver_types.h	/^    cudaDevAttrMaxTexture2DMipmappedWidth     = 73, \/**< Maximum mipmapped 2D texture width *\/$/;"	e	enum:cudaDeviceAttr
cudaDevAttrMaxTexture2DWidth	/usr/local/cuda/include/driver_types.h	/^    cudaDevAttrMaxTexture2DWidth              = 22, \/**< Maximum 2D texture width *\/$/;"	e	enum:cudaDeviceAttr
cudaDevAttrMaxTexture3DDepth	/usr/local/cuda/include/driver_types.h	/^    cudaDevAttrMaxTexture3DDepth              = 26, \/**< Maximum 3D texture depth *\/$/;"	e	enum:cudaDeviceAttr
cudaDevAttrMaxTexture3DDepthAlt	/usr/local/cuda/include/driver_types.h	/^    cudaDevAttrMaxTexture3DDepthAlt           = 49, \/**< Alternate maximum 3D texture depth *\/$/;"	e	enum:cudaDeviceAttr
cudaDevAttrMaxTexture3DHeight	/usr/local/cuda/include/driver_types.h	/^    cudaDevAttrMaxTexture3DHeight             = 25, \/**< Maximum 3D texture height *\/$/;"	e	enum:cudaDeviceAttr
cudaDevAttrMaxTexture3DHeightAlt	/usr/local/cuda/include/driver_types.h	/^    cudaDevAttrMaxTexture3DHeightAlt          = 48, \/**< Alternate maximum 3D texture height *\/$/;"	e	enum:cudaDeviceAttr
cudaDevAttrMaxTexture3DWidth	/usr/local/cuda/include/driver_types.h	/^    cudaDevAttrMaxTexture3DWidth              = 24, \/**< Maximum 3D texture width *\/$/;"	e	enum:cudaDeviceAttr
cudaDevAttrMaxTexture3DWidthAlt	/usr/local/cuda/include/driver_types.h	/^    cudaDevAttrMaxTexture3DWidthAlt           = 47, \/**< Alternate maximum 3D texture width *\/$/;"	e	enum:cudaDeviceAttr
cudaDevAttrMaxTextureCubemapLayeredLayers	/usr/local/cuda/include/driver_types.h	/^    cudaDevAttrMaxTextureCubemapLayeredLayers = 54, \/**< Maximum layers in a cubemap layered texture *\/$/;"	e	enum:cudaDeviceAttr
cudaDevAttrMaxTextureCubemapLayeredWidth	/usr/local/cuda/include/driver_types.h	/^    cudaDevAttrMaxTextureCubemapLayeredWidth  = 53, \/**< Maximum cubemap layered texture width\/height *\/$/;"	e	enum:cudaDeviceAttr
cudaDevAttrMaxTextureCubemapWidth	/usr/local/cuda/include/driver_types.h	/^    cudaDevAttrMaxTextureCubemapWidth         = 52, \/**< Maximum cubemap texture width\/height *\/$/;"	e	enum:cudaDeviceAttr
cudaDevAttrMaxThreadsPerBlock	/usr/local/cuda/include/driver_types.h	/^    cudaDevAttrMaxThreadsPerBlock             = 1,  \/**< Maximum number of threads per block *\/$/;"	e	enum:cudaDeviceAttr
cudaDevAttrMaxThreadsPerMultiProcessor	/usr/local/cuda/include/driver_types.h	/^    cudaDevAttrMaxThreadsPerMultiProcessor    = 39, \/**< Maximum resident threads per multiprocessor *\/$/;"	e	enum:cudaDeviceAttr
cudaDevAttrMemoryClockRate	/usr/local/cuda/include/driver_types.h	/^    cudaDevAttrMemoryClockRate                = 36, \/**< Peak memory clock frequency in kilohertz *\/$/;"	e	enum:cudaDeviceAttr
cudaDevAttrMultiGpuBoardGroupID	/usr/local/cuda/include/driver_types.h	/^    cudaDevAttrMultiGpuBoardGroupID           = 85, \/**< Unique identifier for a group of devices on the same multi-GPU board *\/$/;"	e	enum:cudaDeviceAttr
cudaDevAttrMultiProcessorCount	/usr/local/cuda/include/driver_types.h	/^    cudaDevAttrMultiProcessorCount            = 16, \/**< Number of multiprocessors on device *\/$/;"	e	enum:cudaDeviceAttr
cudaDevAttrPageableMemoryAccess	/usr/local/cuda/include/driver_types.h	/^    cudaDevAttrPageableMemoryAccess           = 88, \/**< Device supports coherently accessing pageable memory without calling cudaHostRegister on it *\/$/;"	e	enum:cudaDeviceAttr
cudaDevAttrPciBusId	/usr/local/cuda/include/driver_types.h	/^    cudaDevAttrPciBusId                       = 33, \/**< PCI bus ID of the device *\/$/;"	e	enum:cudaDeviceAttr
cudaDevAttrPciDeviceId	/usr/local/cuda/include/driver_types.h	/^    cudaDevAttrPciDeviceId                    = 34, \/**< PCI device ID of the device *\/$/;"	e	enum:cudaDeviceAttr
cudaDevAttrPciDomainId	/usr/local/cuda/include/driver_types.h	/^    cudaDevAttrPciDomainId                    = 50, \/**< PCI domain ID of the device *\/$/;"	e	enum:cudaDeviceAttr
cudaDevAttrReserved92	/usr/local/cuda/include/driver_types.h	/^    cudaDevAttrReserved92                     = 92,$/;"	e	enum:cudaDeviceAttr
cudaDevAttrReserved93	/usr/local/cuda/include/driver_types.h	/^    cudaDevAttrReserved93                     = 93,$/;"	e	enum:cudaDeviceAttr
cudaDevAttrReserved94	/usr/local/cuda/include/driver_types.h	/^    cudaDevAttrReserved94                     = 94,$/;"	e	enum:cudaDeviceAttr
cudaDevAttrSingleToDoublePrecisionPerfRatio	/usr/local/cuda/include/driver_types.h	/^    cudaDevAttrSingleToDoublePrecisionPerfRatio = 87, \/**< Ratio of single precision performance (in floating-point operations per second) to double precision performance *\/$/;"	e	enum:cudaDeviceAttr
cudaDevAttrStreamPrioritiesSupported	/usr/local/cuda/include/driver_types.h	/^    cudaDevAttrStreamPrioritiesSupported      = 78, \/**< Device supports stream priorities *\/$/;"	e	enum:cudaDeviceAttr
cudaDevAttrSurfaceAlignment	/usr/local/cuda/include/driver_types.h	/^    cudaDevAttrSurfaceAlignment               = 30, \/**< Alignment requirement for surfaces *\/$/;"	e	enum:cudaDeviceAttr
cudaDevAttrTccDriver	/usr/local/cuda/include/driver_types.h	/^    cudaDevAttrTccDriver                      = 35, \/**< Device is using TCC driver model *\/$/;"	e	enum:cudaDeviceAttr
cudaDevAttrTextureAlignment	/usr/local/cuda/include/driver_types.h	/^    cudaDevAttrTextureAlignment               = 14, \/**< Alignment requirement for textures *\/$/;"	e	enum:cudaDeviceAttr
cudaDevAttrTexturePitchAlignment	/usr/local/cuda/include/driver_types.h	/^    cudaDevAttrTexturePitchAlignment          = 51, \/**< Pitch alignment requirement for textures *\/$/;"	e	enum:cudaDeviceAttr
cudaDevAttrTotalConstantMemory	/usr/local/cuda/include/driver_types.h	/^    cudaDevAttrTotalConstantMemory            = 9,  \/**< Memory available on device for __constant__ variables in a CUDA C kernel in bytes *\/$/;"	e	enum:cudaDeviceAttr
cudaDevAttrUnifiedAddressing	/usr/local/cuda/include/driver_types.h	/^    cudaDevAttrUnifiedAddressing              = 41, \/**< Device shares a unified address space with the host *\/    $/;"	e	enum:cudaDeviceAttr
cudaDevAttrWarpSize	/usr/local/cuda/include/driver_types.h	/^    cudaDevAttrWarpSize                       = 10, \/**< Warp size in threads *\/$/;"	e	enum:cudaDeviceAttr
cudaDevP2PAttrAccessSupported	/usr/local/cuda/include/driver_types.h	/^    cudaDevP2PAttrAccessSupported              = 2, \/**< Peer access is enabled *\/$/;"	e	enum:cudaDeviceP2PAttr
cudaDevP2PAttrNativeAtomicSupported	/usr/local/cuda/include/driver_types.h	/^    cudaDevP2PAttrNativeAtomicSupported        = 3  \/**< Native atomic operation over the link supported *\/$/;"	e	enum:cudaDeviceP2PAttr
cudaDevP2PAttrPerformanceRank	/usr/local/cuda/include/driver_types.h	/^    cudaDevP2PAttrPerformanceRank              = 1, \/**< A relative value indicating the performance of the link between two devices *\/$/;"	e	enum:cudaDeviceP2PAttr
cudaDeviceAttr	/usr/local/cuda/include/driver_types.h	/^enum __device_builtin__ cudaDeviceAttr$/;"	g
cudaDeviceBlockingSync	/usr/local/cuda/include/driver_types.h	120;"	d
cudaDeviceGetAttribute	/usr/local/cuda/include/cuda_device_runtime_api.h	/^__device__ __NV_WEAK__ cudaError_t CUDARTAPI cudaDeviceGetAttribute(int *value, enum cudaDeviceAttr attr, int device)$/;"	f
cudaDeviceLmemResizeToMax	/usr/local/cuda/include/driver_types.h	125;"	d
cudaDeviceMapHost	/usr/local/cuda/include/driver_types.h	124;"	d
cudaDeviceMask	/usr/local/cuda/include/driver_types.h	126;"	d
cudaDeviceP2PAttr	/usr/local/cuda/include/driver_types.h	/^enum __device_builtin__ cudaDeviceP2PAttr {$/;"	g
cudaDeviceProp	/usr/local/cuda/include/driver_types.h	/^struct __device_builtin__ cudaDeviceProp$/;"	s
cudaDevicePropDontCare	/usr/local/cuda/include/driver_types.h	1453;"	d
cudaDeviceScheduleAuto	/usr/local/cuda/include/driver_types.h	116;"	d
cudaDeviceScheduleBlockingSync	/usr/local/cuda/include/driver_types.h	119;"	d
cudaDeviceScheduleMask	/usr/local/cuda/include/driver_types.h	123;"	d
cudaDeviceScheduleSpin	/usr/local/cuda/include/driver_types.h	117;"	d
cudaDeviceScheduleYield	/usr/local/cuda/include/driver_types.h	118;"	d
cudaError	/usr/local/cuda/include/driver_types.h	/^enum __device_builtin__ cudaError$/;"	g
cudaErrorAddressOfConstant	/usr/local/cuda/include/driver_types.h	/^    cudaErrorAddressOfConstant            =     22,$/;"	e	enum:cudaError
cudaErrorApiFailureBase	/usr/local/cuda/include/driver_types.h	/^    cudaErrorApiFailureBase               =  10000$/;"	e	enum:cudaError
cudaErrorAssert	/usr/local/cuda/include/driver_types.h	/^    cudaErrorAssert                        =    59,$/;"	e	enum:cudaError
cudaErrorCooperativeLaunchTooLarge	/usr/local/cuda/include/driver_types.h	/^    cudaErrorCooperativeLaunchTooLarge    =     82,$/;"	e	enum:cudaError
cudaErrorCudartUnloading	/usr/local/cuda/include/driver_types.h	/^    cudaErrorCudartUnloading              =     29,$/;"	e	enum:cudaError
cudaErrorDeviceAlreadyInUse	/usr/local/cuda/include/driver_types.h	/^    cudaErrorDeviceAlreadyInUse           =     54,$/;"	e	enum:cudaError
cudaErrorDevicesUnavailable	/usr/local/cuda/include/driver_types.h	/^    cudaErrorDevicesUnavailable           =     46,$/;"	e	enum:cudaError
cudaErrorDuplicateSurfaceName	/usr/local/cuda/include/driver_types.h	/^    cudaErrorDuplicateSurfaceName         =     45,$/;"	e	enum:cudaError
cudaErrorDuplicateTextureName	/usr/local/cuda/include/driver_types.h	/^    cudaErrorDuplicateTextureName         =     44,$/;"	e	enum:cudaError
cudaErrorDuplicateVariableName	/usr/local/cuda/include/driver_types.h	/^    cudaErrorDuplicateVariableName        =     43,$/;"	e	enum:cudaError
cudaErrorECCUncorrectable	/usr/local/cuda/include/driver_types.h	/^    cudaErrorECCUncorrectable             =     39,$/;"	e	enum:cudaError
cudaErrorHardwareStackError	/usr/local/cuda/include/driver_types.h	/^    cudaErrorHardwareStackError           =     72,$/;"	e	enum:cudaError
cudaErrorHostMemoryAlreadyRegistered	/usr/local/cuda/include/driver_types.h	/^    cudaErrorHostMemoryAlreadyRegistered  =     61,$/;"	e	enum:cudaError
cudaErrorHostMemoryNotRegistered	/usr/local/cuda/include/driver_types.h	/^    cudaErrorHostMemoryNotRegistered      =     62,$/;"	e	enum:cudaError
cudaErrorIllegalAddress	/usr/local/cuda/include/driver_types.h	/^    cudaErrorIllegalAddress               =     77,$/;"	e	enum:cudaError
cudaErrorIllegalInstruction	/usr/local/cuda/include/driver_types.h	/^    cudaErrorIllegalInstruction           =     73,$/;"	e	enum:cudaError
cudaErrorIncompatibleDriverContext	/usr/local/cuda/include/driver_types.h	/^    cudaErrorIncompatibleDriverContext    =     49,$/;"	e	enum:cudaError
cudaErrorInitializationError	/usr/local/cuda/include/driver_types.h	/^    cudaErrorInitializationError          =      3,$/;"	e	enum:cudaError
cudaErrorInsufficientDriver	/usr/local/cuda/include/driver_types.h	/^    cudaErrorInsufficientDriver           =     35,$/;"	e	enum:cudaError
cudaErrorInvalidAddressSpace	/usr/local/cuda/include/driver_types.h	/^    cudaErrorInvalidAddressSpace          =     75,$/;"	e	enum:cudaError
cudaErrorInvalidChannelDescriptor	/usr/local/cuda/include/driver_types.h	/^    cudaErrorInvalidChannelDescriptor     =     20,$/;"	e	enum:cudaError
cudaErrorInvalidConfiguration	/usr/local/cuda/include/driver_types.h	/^    cudaErrorInvalidConfiguration         =      9,$/;"	e	enum:cudaError
cudaErrorInvalidDevice	/usr/local/cuda/include/driver_types.h	/^    cudaErrorInvalidDevice                =     10,$/;"	e	enum:cudaError
cudaErrorInvalidDeviceFunction	/usr/local/cuda/include/driver_types.h	/^    cudaErrorInvalidDeviceFunction        =      8,$/;"	e	enum:cudaError
cudaErrorInvalidDevicePointer	/usr/local/cuda/include/driver_types.h	/^    cudaErrorInvalidDevicePointer         =     17,$/;"	e	enum:cudaError
cudaErrorInvalidFilterSetting	/usr/local/cuda/include/driver_types.h	/^    cudaErrorInvalidFilterSetting         =     26,$/;"	e	enum:cudaError
cudaErrorInvalidGraphicsContext	/usr/local/cuda/include/driver_types.h	/^    cudaErrorInvalidGraphicsContext       =     79,$/;"	e	enum:cudaError
cudaErrorInvalidHostPointer	/usr/local/cuda/include/driver_types.h	/^    cudaErrorInvalidHostPointer           =     16,$/;"	e	enum:cudaError
cudaErrorInvalidKernelImage	/usr/local/cuda/include/driver_types.h	/^    cudaErrorInvalidKernelImage           =     47,$/;"	e	enum:cudaError
cudaErrorInvalidMemcpyDirection	/usr/local/cuda/include/driver_types.h	/^    cudaErrorInvalidMemcpyDirection       =     21,$/;"	e	enum:cudaError
cudaErrorInvalidNormSetting	/usr/local/cuda/include/driver_types.h	/^    cudaErrorInvalidNormSetting           =     27,$/;"	e	enum:cudaError
cudaErrorInvalidPc	/usr/local/cuda/include/driver_types.h	/^    cudaErrorInvalidPc                    =     76,$/;"	e	enum:cudaError
cudaErrorInvalidPitchValue	/usr/local/cuda/include/driver_types.h	/^    cudaErrorInvalidPitchValue            =     12,$/;"	e	enum:cudaError
cudaErrorInvalidPtx	/usr/local/cuda/include/driver_types.h	/^    cudaErrorInvalidPtx                   =     78,$/;"	e	enum:cudaError
cudaErrorInvalidResourceHandle	/usr/local/cuda/include/driver_types.h	/^    cudaErrorInvalidResourceHandle        =     33,$/;"	e	enum:cudaError
cudaErrorInvalidSurface	/usr/local/cuda/include/driver_types.h	/^    cudaErrorInvalidSurface               =     37,$/;"	e	enum:cudaError
cudaErrorInvalidSymbol	/usr/local/cuda/include/driver_types.h	/^    cudaErrorInvalidSymbol                =     13,$/;"	e	enum:cudaError
cudaErrorInvalidTexture	/usr/local/cuda/include/driver_types.h	/^    cudaErrorInvalidTexture               =     18,$/;"	e	enum:cudaError
cudaErrorInvalidTextureBinding	/usr/local/cuda/include/driver_types.h	/^    cudaErrorInvalidTextureBinding        =     19,$/;"	e	enum:cudaError
cudaErrorInvalidValue	/usr/local/cuda/include/driver_types.h	/^    cudaErrorInvalidValue                 =     11,$/;"	e	enum:cudaError
cudaErrorJitCompilerNotFound	/usr/local/cuda/include/driver_types.h	/^    cudaErrorJitCompilerNotFound          =     81,$/;"	e	enum:cudaError
cudaErrorLaunchFailure	/usr/local/cuda/include/driver_types.h	/^    cudaErrorLaunchFailure                =      4,$/;"	e	enum:cudaError
cudaErrorLaunchFileScopedSurf	/usr/local/cuda/include/driver_types.h	/^    cudaErrorLaunchFileScopedSurf         =     67,$/;"	e	enum:cudaError
cudaErrorLaunchFileScopedTex	/usr/local/cuda/include/driver_types.h	/^    cudaErrorLaunchFileScopedTex          =     66,$/;"	e	enum:cudaError
cudaErrorLaunchMaxDepthExceeded	/usr/local/cuda/include/driver_types.h	/^    cudaErrorLaunchMaxDepthExceeded       =     65,$/;"	e	enum:cudaError
cudaErrorLaunchOutOfResources	/usr/local/cuda/include/driver_types.h	/^    cudaErrorLaunchOutOfResources         =      7,$/;"	e	enum:cudaError
cudaErrorLaunchPendingCountExceeded	/usr/local/cuda/include/driver_types.h	/^    cudaErrorLaunchPendingCountExceeded   =     69,$/;"	e	enum:cudaError
cudaErrorLaunchTimeout	/usr/local/cuda/include/driver_types.h	/^    cudaErrorLaunchTimeout                =      6,$/;"	e	enum:cudaError
cudaErrorMapBufferObjectFailed	/usr/local/cuda/include/driver_types.h	/^    cudaErrorMapBufferObjectFailed        =     14,$/;"	e	enum:cudaError
cudaErrorMemoryAllocation	/usr/local/cuda/include/driver_types.h	/^    cudaErrorMemoryAllocation             =      2,$/;"	e	enum:cudaError
cudaErrorMemoryValueTooLarge	/usr/local/cuda/include/driver_types.h	/^    cudaErrorMemoryValueTooLarge          =     32,$/;"	e	enum:cudaError
cudaErrorMisalignedAddress	/usr/local/cuda/include/driver_types.h	/^    cudaErrorMisalignedAddress            =     74,$/;"	e	enum:cudaError
cudaErrorMissingConfiguration	/usr/local/cuda/include/driver_types.h	/^    cudaErrorMissingConfiguration         =      1,$/;"	e	enum:cudaError
cudaErrorMixedDeviceExecution	/usr/local/cuda/include/driver_types.h	/^    cudaErrorMixedDeviceExecution         =     28,$/;"	e	enum:cudaError
cudaErrorNoDevice	/usr/local/cuda/include/driver_types.h	/^    cudaErrorNoDevice                     =     38,$/;"	e	enum:cudaError
cudaErrorNoKernelImageForDevice	/usr/local/cuda/include/driver_types.h	/^    cudaErrorNoKernelImageForDevice       =     48,$/;"	e	enum:cudaError
cudaErrorNotPermitted	/usr/local/cuda/include/driver_types.h	/^    cudaErrorNotPermitted                 =     70,$/;"	e	enum:cudaError
cudaErrorNotReady	/usr/local/cuda/include/driver_types.h	/^    cudaErrorNotReady                     =     34,$/;"	e	enum:cudaError
cudaErrorNotSupported	/usr/local/cuda/include/driver_types.h	/^    cudaErrorNotSupported                 =     71,$/;"	e	enum:cudaError
cudaErrorNotYetImplemented	/usr/local/cuda/include/driver_types.h	/^    cudaErrorNotYetImplemented            =     31,$/;"	e	enum:cudaError
cudaErrorNvlinkUncorrectable	/usr/local/cuda/include/driver_types.h	/^    cudaErrorNvlinkUncorrectable          =     80,$/;"	e	enum:cudaError
cudaErrorOperatingSystem	/usr/local/cuda/include/driver_types.h	/^    cudaErrorOperatingSystem              =     63,$/;"	e	enum:cudaError
cudaErrorPeerAccessAlreadyEnabled	/usr/local/cuda/include/driver_types.h	/^    cudaErrorPeerAccessAlreadyEnabled     =     50,$/;"	e	enum:cudaError
cudaErrorPeerAccessNotEnabled	/usr/local/cuda/include/driver_types.h	/^    cudaErrorPeerAccessNotEnabled         =     51,$/;"	e	enum:cudaError
cudaErrorPeerAccessUnsupported	/usr/local/cuda/include/driver_types.h	/^    cudaErrorPeerAccessUnsupported        =     64,$/;"	e	enum:cudaError
cudaErrorPriorLaunchFailure	/usr/local/cuda/include/driver_types.h	/^    cudaErrorPriorLaunchFailure           =      5,$/;"	e	enum:cudaError
cudaErrorProfilerAlreadyStarted	/usr/local/cuda/include/driver_types.h	/^    cudaErrorProfilerAlreadyStarted       =     57,$/;"	e	enum:cudaError
cudaErrorProfilerAlreadyStopped	/usr/local/cuda/include/driver_types.h	/^     cudaErrorProfilerAlreadyStopped       =    58,$/;"	e	enum:cudaError
cudaErrorProfilerDisabled	/usr/local/cuda/include/driver_types.h	/^    cudaErrorProfilerDisabled             =     55,$/;"	e	enum:cudaError
cudaErrorProfilerNotInitialized	/usr/local/cuda/include/driver_types.h	/^    cudaErrorProfilerNotInitialized       =     56,$/;"	e	enum:cudaError
cudaErrorSetOnActiveProcess	/usr/local/cuda/include/driver_types.h	/^    cudaErrorSetOnActiveProcess           =     36,$/;"	e	enum:cudaError
cudaErrorSharedObjectInitFailed	/usr/local/cuda/include/driver_types.h	/^    cudaErrorSharedObjectInitFailed       =     41,$/;"	e	enum:cudaError
cudaErrorSharedObjectSymbolNotFound	/usr/local/cuda/include/driver_types.h	/^    cudaErrorSharedObjectSymbolNotFound   =     40,$/;"	e	enum:cudaError
cudaErrorStartupFailure	/usr/local/cuda/include/driver_types.h	/^    cudaErrorStartupFailure               =   0x7f,$/;"	e	enum:cudaError
cudaErrorSyncDepthExceeded	/usr/local/cuda/include/driver_types.h	/^    cudaErrorSyncDepthExceeded            =     68,$/;"	e	enum:cudaError
cudaErrorSynchronizationError	/usr/local/cuda/include/driver_types.h	/^    cudaErrorSynchronizationError         =     25,$/;"	e	enum:cudaError
cudaErrorTextureFetchFailed	/usr/local/cuda/include/driver_types.h	/^    cudaErrorTextureFetchFailed           =     23,$/;"	e	enum:cudaError
cudaErrorTextureNotBound	/usr/local/cuda/include/driver_types.h	/^    cudaErrorTextureNotBound              =     24,$/;"	e	enum:cudaError
cudaErrorTooManyPeers	/usr/local/cuda/include/driver_types.h	/^    cudaErrorTooManyPeers                 =     60,$/;"	e	enum:cudaError
cudaErrorUnknown	/usr/local/cuda/include/driver_types.h	/^    cudaErrorUnknown                      =     30,$/;"	e	enum:cudaError
cudaErrorUnmapBufferObjectFailed	/usr/local/cuda/include/driver_types.h	/^    cudaErrorUnmapBufferObjectFailed      =     15,$/;"	e	enum:cudaError
cudaErrorUnsupportedLimit	/usr/local/cuda/include/driver_types.h	/^    cudaErrorUnsupportedLimit             =     42,$/;"	e	enum:cudaError
cudaError_enum	/usr/local/cuda/include/cuda.h	/^typedef enum cudaError_enum {$/;"	g
cudaError_enum	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^typedef enum cudaError_enum$/;"	g
cudaError_t	/usr/local/cuda/include/driver_types.h	/^typedef __device_builtin__ enum cudaError cudaError_t;$/;"	t	typeref:enum:cudaError
cudaEventBlockingSync	/usr/local/cuda/include/driver_types.h	112;"	d
cudaEventCreate	/usr/local/cuda/include/cuda_runtime.h	/^static __inline__ __host__ cudaError_t cudaEventCreate($/;"	f
cudaEventDefault	/usr/local/cuda/include/driver_types.h	111;"	d
cudaEventDisableTiming	/usr/local/cuda/include/driver_types.h	113;"	d
cudaEventInterprocess	/usr/local/cuda/include/driver_types.h	114;"	d
cudaEventRecord	/usr/local/cuda/include/cuda_runtime_api.h	179;"	d
cudaEventRecord	/usr/local/cuda/include/cuda_runtime_api.h	7355;"	d
cudaEvent_t	/usr/local/cuda/include/driver_types.h	/^typedef __device_builtin__ struct CUevent_st *cudaEvent_t;$/;"	t	typeref:struct:CUevent_st
cudaExtent	/usr/local/cuda/include/driver_types.h	/^struct __device_builtin__ cudaExtent$/;"	s
cudaFilterModeLinear	/usr/local/cuda/include/texture_types.h	/^    cudaFilterModeLinear = 1      \/**< Linear filter mode *\/$/;"	e	enum:cudaTextureFilterMode
cudaFilterModePoint	/usr/local/cuda/include/texture_types.h	/^    cudaFilterModePoint  = 0,     \/**< Point filter mode *\/$/;"	e	enum:cudaTextureFilterMode
cudaFormatModeAuto	/usr/local/cuda/include/surface_types.h	/^    cudaFormatModeAuto = 1        \/**< Auto format mode *\/$/;"	e	enum:cudaSurfaceFormatMode
cudaFormatModeForced	/usr/local/cuda/include/surface_types.h	/^    cudaFormatModeForced = 0,     \/**< Forced format mode *\/$/;"	e	enum:cudaSurfaceFormatMode
cudaFuncAttribute	/usr/local/cuda/include/driver_types.h	/^enum __device_builtin__ cudaFuncAttribute$/;"	g
cudaFuncAttributeMax	/usr/local/cuda/include/driver_types.h	/^    cudaFuncAttributeMax$/;"	e	enum:cudaFuncAttribute
cudaFuncAttributeMaxDynamicSharedMemorySize	/usr/local/cuda/include/driver_types.h	/^    cudaFuncAttributeMaxDynamicSharedMemorySize = 8, \/**< Maximum dynamic shared memory size *\/$/;"	e	enum:cudaFuncAttribute
cudaFuncAttributePreferredSharedMemoryCarveout	/usr/local/cuda/include/driver_types.h	/^    cudaFuncAttributePreferredSharedMemoryCarveout = 9, \/**< Preferred shared memory-L1 cache split ratio *\/$/;"	e	enum:cudaFuncAttribute
cudaFuncAttributes	/usr/local/cuda/include/driver_types.h	/^struct __device_builtin__ cudaFuncAttributes$/;"	s
cudaFuncCache	/usr/local/cuda/include/driver_types.h	/^enum __device_builtin__ cudaFuncCache$/;"	g
cudaFuncCachePreferEqual	/usr/local/cuda/include/driver_types.h	/^    cudaFuncCachePreferEqual  = 3     \/**< Prefer equal size L1 cache and shared memory *\/$/;"	e	enum:cudaFuncCache
cudaFuncCachePreferL1	/usr/local/cuda/include/driver_types.h	/^    cudaFuncCachePreferL1     = 2,    \/**< Prefer larger L1 cache and smaller shared memory *\/$/;"	e	enum:cudaFuncCache
cudaFuncCachePreferNone	/usr/local/cuda/include/driver_types.h	/^    cudaFuncCachePreferNone   = 0,    \/**< Default function cache configuration, no preference *\/$/;"	e	enum:cudaFuncCache
cudaFuncCachePreferShared	/usr/local/cuda/include/driver_types.h	/^    cudaFuncCachePreferShared = 1,    \/**< Prefer larger shared memory and smaller L1 cache  *\/$/;"	e	enum:cudaFuncCache
cudaFuncGetAttributes	/usr/local/cuda/include/cuda_device_runtime_api.h	/^__device__ __NV_WEAK__ cudaError_t CUDARTAPI cudaFuncGetAttributes(struct cudaFuncAttributes *p, const void *c) $/;"	f
cudaFuncGetAttributes	/usr/local/cuda/include/cuda_runtime.h	/^static __inline__ __host__ cudaError_t cudaFuncGetAttributes($/;"	f
cudaFuncSetAttribute	/usr/local/cuda/include/cuda_runtime.h	/^static __inline__ __host__ cudaError_t cudaFuncSetAttribute($/;"	f
cudaFuncSetCacheConfig	/usr/local/cuda/include/cuda_runtime.h	/^static __inline__ __host__ cudaError_t cudaFuncSetCacheConfig($/;"	f
cudaFuncSetSharedMemConfig	/usr/local/cuda/include/cuda_runtime.h	/^static __inline__ __host__ cudaError_t cudaFuncSetSharedMemConfig($/;"	f
cudaGLDeviceList	/usr/local/cuda/include/cuda_gl_interop.h	/^enum cudaGLDeviceList$/;"	g
cudaGLDeviceListAll	/usr/local/cuda/include/cuda_gl_interop.h	/^  cudaGLDeviceListAll           = 1, \/**< The CUDA devices for all GPUs used by the current OpenGL context *\/$/;"	e	enum:cudaGLDeviceList
cudaGLDeviceListCurrentFrame	/usr/local/cuda/include/cuda_gl_interop.h	/^  cudaGLDeviceListCurrentFrame  = 2, \/**< The CUDA devices for the GPUs used by the current OpenGL context in its currently rendering frame *\/$/;"	e	enum:cudaGLDeviceList
cudaGLDeviceListNextFrame	/usr/local/cuda/include/cuda_gl_interop.h	/^  cudaGLDeviceListNextFrame     = 3  \/**< The CUDA devices for the GPUs to be used by the current OpenGL context in the next frame  *\/$/;"	e	enum:cudaGLDeviceList
cudaGLMapFlags	/usr/local/cuda/include/cuda_gl_interop.h	/^enum cudaGLMapFlags$/;"	g
cudaGLMapFlagsNone	/usr/local/cuda/include/cuda_gl_interop.h	/^  cudaGLMapFlagsNone         = 0,  \/**< Default; Assume resource can be read\/written *\/$/;"	e	enum:cudaGLMapFlags
cudaGLMapFlagsReadOnly	/usr/local/cuda/include/cuda_gl_interop.h	/^  cudaGLMapFlagsReadOnly     = 1,  \/**< CUDA kernels will not write to this resource *\/$/;"	e	enum:cudaGLMapFlags
cudaGLMapFlagsWriteDiscard	/usr/local/cuda/include/cuda_gl_interop.h	/^  cudaGLMapFlagsWriteDiscard = 2   \/**< CUDA kernels will only write to and will not read from this resource *\/$/;"	e	enum:cudaGLMapFlags
cudaGetDevice	/usr/local/cuda/include/cuda_device_runtime_api.h	/^__device__ __NV_WEAK__ cudaError_t CUDARTAPI cudaGetDevice(int *device)$/;"	f
cudaGetSymbolAddress	/usr/local/cuda/include/cuda_runtime.h	/^static __inline__ __host__ cudaError_t cudaGetSymbolAddress($/;"	f
cudaGetSymbolSize	/usr/local/cuda/include/cuda_runtime.h	/^static __inline__ __host__ cudaError_t cudaGetSymbolSize($/;"	f
cudaGetTextureAlignmentOffset	/usr/local/cuda/include/cuda_runtime.h	/^static __inline__ __host__ cudaError_t cudaGetTextureAlignmentOffset($/;"	f
cudaGraphicsCubeFace	/usr/local/cuda/include/driver_types.h	/^enum __device_builtin__ cudaGraphicsCubeFace $/;"	g
cudaGraphicsCubeFaceNegativeX	/usr/local/cuda/include/driver_types.h	/^    cudaGraphicsCubeFaceNegativeX = 0x01, \/**< Negative X face of cubemap *\/$/;"	e	enum:cudaGraphicsCubeFace
cudaGraphicsCubeFaceNegativeY	/usr/local/cuda/include/driver_types.h	/^    cudaGraphicsCubeFaceNegativeY = 0x03, \/**< Negative Y face of cubemap *\/$/;"	e	enum:cudaGraphicsCubeFace
cudaGraphicsCubeFaceNegativeZ	/usr/local/cuda/include/driver_types.h	/^    cudaGraphicsCubeFaceNegativeZ = 0x05  \/**< Negative Z face of cubemap *\/$/;"	e	enum:cudaGraphicsCubeFace
cudaGraphicsCubeFacePositiveX	/usr/local/cuda/include/driver_types.h	/^    cudaGraphicsCubeFacePositiveX = 0x00, \/**< Positive X face of cubemap *\/$/;"	e	enum:cudaGraphicsCubeFace
cudaGraphicsCubeFacePositiveY	/usr/local/cuda/include/driver_types.h	/^    cudaGraphicsCubeFacePositiveY = 0x02, \/**< Positive Y face of cubemap *\/$/;"	e	enum:cudaGraphicsCubeFace
cudaGraphicsCubeFacePositiveZ	/usr/local/cuda/include/driver_types.h	/^    cudaGraphicsCubeFacePositiveZ = 0x04, \/**< Positive Z face of cubemap *\/$/;"	e	enum:cudaGraphicsCubeFace
cudaGraphicsMapFlags	/usr/local/cuda/include/driver_types.h	/^enum __device_builtin__ cudaGraphicsMapFlags$/;"	g
cudaGraphicsMapFlagsNone	/usr/local/cuda/include/driver_types.h	/^    cudaGraphicsMapFlagsNone         = 0,  \/**< Default; Assume resource can be read\/written *\/$/;"	e	enum:cudaGraphicsMapFlags
cudaGraphicsMapFlagsReadOnly	/usr/local/cuda/include/driver_types.h	/^    cudaGraphicsMapFlagsReadOnly     = 1,  \/**< CUDA will not write to this resource *\/$/;"	e	enum:cudaGraphicsMapFlags
cudaGraphicsMapFlagsWriteDiscard	/usr/local/cuda/include/driver_types.h	/^    cudaGraphicsMapFlagsWriteDiscard = 2   \/**< CUDA will only write to and will not read from this resource *\/$/;"	e	enum:cudaGraphicsMapFlags
cudaGraphicsRegisterFlags	/usr/local/cuda/include/driver_types.h	/^enum __device_builtin__ cudaGraphicsRegisterFlags$/;"	g
cudaGraphicsRegisterFlagsNone	/usr/local/cuda/include/driver_types.h	/^    cudaGraphicsRegisterFlagsNone             = 0,  \/**< Default *\/$/;"	e	enum:cudaGraphicsRegisterFlags
cudaGraphicsRegisterFlagsReadOnly	/usr/local/cuda/include/driver_types.h	/^    cudaGraphicsRegisterFlagsReadOnly         = 1,  \/**< CUDA will not write to this resource *\/ $/;"	e	enum:cudaGraphicsRegisterFlags
cudaGraphicsRegisterFlagsSurfaceLoadStore	/usr/local/cuda/include/driver_types.h	/^    cudaGraphicsRegisterFlagsSurfaceLoadStore = 4,  \/**< CUDA will bind this resource to a surface reference *\/$/;"	e	enum:cudaGraphicsRegisterFlags
cudaGraphicsRegisterFlagsTextureGather	/usr/local/cuda/include/driver_types.h	/^    cudaGraphicsRegisterFlagsTextureGather    = 8   \/**< CUDA will perform texture gather operations on this resource *\/$/;"	e	enum:cudaGraphicsRegisterFlags
cudaGraphicsRegisterFlagsWriteDiscard	/usr/local/cuda/include/driver_types.h	/^    cudaGraphicsRegisterFlagsWriteDiscard     = 2,  \/**< CUDA will only write to and will not read from this resource *\/$/;"	e	enum:cudaGraphicsRegisterFlags
cudaGraphicsResource_t	/usr/local/cuda/include/driver_types.h	/^typedef __device_builtin__ struct cudaGraphicsResource *cudaGraphicsResource_t;$/;"	t	typeref:struct:cudaGraphicsResource
cudaHostAlloc	/usr/local/cuda/include/cuda_runtime.h	/^static __inline__ __host__ cudaError_t cudaHostAlloc($/;"	f
cudaHostAllocDefault	/usr/local/cuda/include/driver_types.h	76;"	d
cudaHostAllocMapped	/usr/local/cuda/include/driver_types.h	78;"	d
cudaHostAllocPortable	/usr/local/cuda/include/driver_types.h	77;"	d
cudaHostAllocWriteCombined	/usr/local/cuda/include/driver_types.h	79;"	d
cudaHostGetDevicePointer	/usr/local/cuda/include/cuda_runtime.h	/^static __inline__ __host__ cudaError_t cudaHostGetDevicePointer($/;"	f
cudaHostRegisterDefault	/usr/local/cuda/include/driver_types.h	81;"	d
cudaHostRegisterIoMemory	/usr/local/cuda/include/driver_types.h	84;"	d
cudaHostRegisterMapped	/usr/local/cuda/include/driver_types.h	83;"	d
cudaHostRegisterPortable	/usr/local/cuda/include/driver_types.h	82;"	d
cudaInvalidDeviceId	/usr/local/cuda/include/driver_types.h	144;"	d
cudaIpcEventHandle_st	/usr/local/cuda/include/driver_types.h	/^typedef __device_builtin__ struct __device_builtin__ cudaIpcEventHandle_st$/;"	s
cudaIpcEventHandle_t	/usr/local/cuda/include/driver_types.h	/^}cudaIpcEventHandle_t;$/;"	t	typeref:struct:cudaIpcEventHandle_st
cudaIpcMemHandle_st	/usr/local/cuda/include/driver_types.h	/^typedef __device_builtin__ struct __device_builtin__ cudaIpcMemHandle_st $/;"	s
cudaIpcMemHandle_t	/usr/local/cuda/include/driver_types.h	/^}cudaIpcMemHandle_t;$/;"	t	typeref:struct:cudaIpcMemHandle_st
cudaIpcMemLazyEnablePeerAccess	/usr/local/cuda/include/driver_types.h	134;"	d
cudaKeyValuePair	/usr/local/cuda/include/driver_types.h	/^    cudaKeyValuePair    = 0x00, \/**< Output mode Key-Value pair format. *\/$/;"	e	enum:cudaOutputMode
cudaLaunch	/usr/local/cuda/include/cuda_runtime.h	/^static __inline__ __host__ cudaError_t cudaLaunch($/;"	f
cudaLaunch	/usr/local/cuda/include/cuda_runtime_api.h	/^    static __inline__ __host__ cudaError_t cudaLaunch(const void *func)$/;"	f
cudaLaunch	/usr/local/cuda/include/cuda_runtime_api.h	184;"	d
cudaLaunch	/usr/local/cuda/include/cuda_runtime_api.h	7360;"	d
cudaLaunch	/usr/local/cuda/include/cuda_runtime_api.h	7407;"	d
cudaLaunch	/usr/local/cuda/include/cuda_runtime_api.h	7412;"	d
cudaLaunchCooperativeKernel	/usr/local/cuda/include/cuda_runtime.h	/^static __inline__ __host__ cudaError_t cudaLaunchCooperativeKernel($/;"	f
cudaLaunchCooperativeKernel	/usr/local/cuda/include/cuda_runtime_api.h	187;"	d
cudaLaunchCooperativeKernel	/usr/local/cuda/include/cuda_runtime_api.h	7363;"	d
cudaLaunchDevice	/usr/local/cuda/include/cuda_device_runtime_api.h	/^    cudaLaunchDevice(void *func, void *parameterBuffer, dim3 gridDimension, dim3 blockDimension, unsigned int sharedMemSize, cudaStream_t stream)$/;"	f
cudaLaunchDeviceV2	/usr/local/cuda/include/cuda_device_runtime_api.h	/^    cudaLaunchDeviceV2(void *parameterBuffer, cudaStream_t stream)$/;"	f
cudaLaunchKernel	/usr/local/cuda/include/cuda_runtime.h	/^static __inline__ __host__ cudaError_t cudaLaunchKernel($/;"	f
cudaLaunchKernel	/usr/local/cuda/include/cuda_runtime_api.h	185;"	d
cudaLaunchKernel	/usr/local/cuda/include/cuda_runtime_api.h	7361;"	d
cudaLaunchParams	/usr/local/cuda/include/driver_types.h	/^struct __device_builtin__ cudaLaunchParams$/;"	s
cudaLibXtCopyType	/usr/local/cuda/include/cudalibxt.h	/^typedef enum cudaXtCopyType_t cudaLibXtCopyType;$/;"	t	typeref:enum:cudaXtCopyType_t
cudaLibXtDesc	/usr/local/cuda/include/cudalibxt.h	/^typedef struct cudaLibXtDesc_t cudaLibXtDesc;$/;"	t	typeref:struct:cudaLibXtDesc_t
cudaLibXtDesc_t	/usr/local/cuda/include/cudalibxt.h	/^struct cudaLibXtDesc_t{$/;"	s
cudaLimit	/usr/local/cuda/include/driver_types.h	/^enum __device_builtin__ cudaLimit$/;"	g
cudaLimitDevRuntimePendingLaunchCount	/usr/local/cuda/include/driver_types.h	/^    cudaLimitDevRuntimePendingLaunchCount = 0x04  \/**< GPU device runtime pending launch count *\/$/;"	e	enum:cudaLimit
cudaLimitDevRuntimeSyncDepth	/usr/local/cuda/include/driver_types.h	/^    cudaLimitDevRuntimeSyncDepth          = 0x03, \/**< GPU device runtime synchronize depth *\/$/;"	e	enum:cudaLimit
cudaLimitMallocHeapSize	/usr/local/cuda/include/driver_types.h	/^    cudaLimitMallocHeapSize               = 0x02, \/**< GPU malloc heap size *\/$/;"	e	enum:cudaLimit
cudaLimitPrintfFifoSize	/usr/local/cuda/include/driver_types.h	/^    cudaLimitPrintfFifoSize               = 0x01, \/**< GPU printf\/fprintf FIFO size *\/$/;"	e	enum:cudaLimit
cudaLimitStackSize	/usr/local/cuda/include/driver_types.h	/^    cudaLimitStackSize                    = 0x00, \/**< GPU thread stack size *\/$/;"	e	enum:cudaLimit
cudaMalloc	/usr/local/cuda/include/cuda_device_runtime_api.h	/^__device__ __NV_WEAK__ cudaError_t CUDARTAPI cudaMalloc(void **p, size_t s) $/;"	f
cudaMalloc	/usr/local/cuda/include/cuda_runtime.h	/^static __inline__ __host__ cudaError_t cudaMalloc($/;"	f
cudaMallocHost	/usr/local/cuda/include/cuda_runtime.h	/^static __inline__ __host__ cudaError_t cudaMallocHost($/;"	f
cudaMallocManaged	/usr/local/cuda/include/cuda_runtime.h	/^static __inline__ __host__ cudaError_t cudaMallocManaged($/;"	f
cudaMallocPitch	/usr/local/cuda/include/cuda_runtime.h	/^static __inline__ __host__ cudaError_t cudaMallocPitch($/;"	f
cudaMemAdviseSetAccessedBy	/usr/local/cuda/include/driver_types.h	/^    cudaMemAdviseSetAccessedBy          = 5, \/**< Data will be accessed by the specified device, so prevent page faults as much as possible *\/$/;"	e	enum:cudaMemoryAdvise
cudaMemAdviseSetPreferredLocation	/usr/local/cuda/include/driver_types.h	/^    cudaMemAdviseSetPreferredLocation   = 3, \/**< Set the preferred location for the data as the specified device *\/$/;"	e	enum:cudaMemoryAdvise
cudaMemAdviseSetReadMostly	/usr/local/cuda/include/driver_types.h	/^    cudaMemAdviseSetReadMostly          = 1, \/**< Data will mostly be read and only occassionally be written to *\/$/;"	e	enum:cudaMemoryAdvise
cudaMemAdviseUnsetAccessedBy	/usr/local/cuda/include/driver_types.h	/^    cudaMemAdviseUnsetAccessedBy        = 6  \/**< Let the Unified Memory subsystem decide on the page faulting policy for the specified device *\/$/;"	e	enum:cudaMemoryAdvise
cudaMemAdviseUnsetPreferredLocation	/usr/local/cuda/include/driver_types.h	/^    cudaMemAdviseUnsetPreferredLocation = 4, \/**< Clear the preferred location for the data *\/$/;"	e	enum:cudaMemoryAdvise
cudaMemAdviseUnsetReadMostly	/usr/local/cuda/include/driver_types.h	/^    cudaMemAdviseUnsetReadMostly        = 2, \/**< Undo the effect of ::cudaMemAdviseSetReadMostly *\/$/;"	e	enum:cudaMemoryAdvise
cudaMemAttachGlobal	/usr/local/cuda/include/driver_types.h	136;"	d
cudaMemAttachHost	/usr/local/cuda/include/driver_types.h	137;"	d
cudaMemAttachSingle	/usr/local/cuda/include/driver_types.h	138;"	d
cudaMemPrefetchAsync	/usr/local/cuda/include/cuda_runtime_api.h	186;"	d
cudaMemPrefetchAsync	/usr/local/cuda/include/cuda_runtime_api.h	7362;"	d
cudaMemRangeAttribute	/usr/local/cuda/include/driver_types.h	/^enum __device_builtin__ cudaMemRangeAttribute$/;"	g
cudaMemRangeAttributeAccessedBy	/usr/local/cuda/include/driver_types.h	/^    cudaMemRangeAttributeAccessedBy           = 3, \/**< Memory range has ::cudaMemAdviseSetAccessedBy set for specified device *\/$/;"	e	enum:cudaMemRangeAttribute
cudaMemRangeAttributeLastPrefetchLocation	/usr/local/cuda/include/driver_types.h	/^    cudaMemRangeAttributeLastPrefetchLocation = 4  \/**< The last location to which the range was prefetched *\/$/;"	e	enum:cudaMemRangeAttribute
cudaMemRangeAttributePreferredLocation	/usr/local/cuda/include/driver_types.h	/^    cudaMemRangeAttributePreferredLocation    = 2, \/**< The preferred location of the range *\/$/;"	e	enum:cudaMemRangeAttribute
cudaMemRangeAttributeReadMostly	/usr/local/cuda/include/driver_types.h	/^    cudaMemRangeAttributeReadMostly           = 1, \/**< Whether the range will mostly be read and only occassionally be written to *\/$/;"	e	enum:cudaMemRangeAttribute
cudaMemcpy	/usr/local/cuda/include/cuda_runtime_api.h	148;"	d
cudaMemcpy	/usr/local/cuda/include/cuda_runtime_api.h	7324;"	d
cudaMemcpy2D	/usr/local/cuda/include/cuda_runtime_api.h	151;"	d
cudaMemcpy2D	/usr/local/cuda/include/cuda_runtime_api.h	7327;"	d
cudaMemcpy2DArrayToArray	/usr/local/cuda/include/cuda_runtime_api.h	157;"	d
cudaMemcpy2DArrayToArray	/usr/local/cuda/include/cuda_runtime_api.h	7333;"	d
cudaMemcpy2DAsync	/usr/local/cuda/include/cuda_runtime_api.h	166;"	d
cudaMemcpy2DAsync	/usr/local/cuda/include/cuda_runtime_api.h	7342;"	d
cudaMemcpy2DFromArray	/usr/local/cuda/include/cuda_runtime_api.h	155;"	d
cudaMemcpy2DFromArray	/usr/local/cuda/include/cuda_runtime_api.h	7331;"	d
cudaMemcpy2DFromArrayAsync	/usr/local/cuda/include/cuda_runtime_api.h	170;"	d
cudaMemcpy2DFromArrayAsync	/usr/local/cuda/include/cuda_runtime_api.h	7346;"	d
cudaMemcpy2DToArray	/usr/local/cuda/include/cuda_runtime_api.h	153;"	d
cudaMemcpy2DToArray	/usr/local/cuda/include/cuda_runtime_api.h	7329;"	d
cudaMemcpy2DToArrayAsync	/usr/local/cuda/include/cuda_runtime_api.h	168;"	d
cudaMemcpy2DToArrayAsync	/usr/local/cuda/include/cuda_runtime_api.h	7344;"	d
cudaMemcpy3D	/usr/local/cuda/include/cuda_runtime_api.h	158;"	d
cudaMemcpy3D	/usr/local/cuda/include/cuda_runtime_api.h	7334;"	d
cudaMemcpy3DAsync	/usr/local/cuda/include/cuda_runtime_api.h	171;"	d
cudaMemcpy3DAsync	/usr/local/cuda/include/cuda_runtime_api.h	7347;"	d
cudaMemcpy3DParms	/usr/local/cuda/include/driver_types.h	/^struct __device_builtin__ cudaMemcpy3DParms$/;"	s
cudaMemcpy3DPeer	/usr/local/cuda/include/cuda_runtime_api.h	159;"	d
cudaMemcpy3DPeer	/usr/local/cuda/include/cuda_runtime_api.h	7335;"	d
cudaMemcpy3DPeerAsync	/usr/local/cuda/include/cuda_runtime_api.h	172;"	d
cudaMemcpy3DPeerAsync	/usr/local/cuda/include/cuda_runtime_api.h	7348;"	d
cudaMemcpy3DPeerParms	/usr/local/cuda/include/driver_types.h	/^struct __device_builtin__ cudaMemcpy3DPeerParms$/;"	s
cudaMemcpyArrayToArray	/usr/local/cuda/include/cuda_runtime_api.h	156;"	d
cudaMemcpyArrayToArray	/usr/local/cuda/include/cuda_runtime_api.h	7332;"	d
cudaMemcpyAsync	/usr/local/cuda/include/cuda_runtime_api.h	163;"	d
cudaMemcpyAsync	/usr/local/cuda/include/cuda_runtime_api.h	7339;"	d
cudaMemcpyDefault	/usr/local/cuda/include/driver_types.h	/^    cudaMemcpyDefault             =   4       \/**< Direction of the transfer is inferred from the pointer values. Requires unified virtual addressing *\/$/;"	e	enum:cudaMemcpyKind
cudaMemcpyDeviceToDevice	/usr/local/cuda/include/driver_types.h	/^    cudaMemcpyDeviceToDevice      =   3,      \/**< Device -> Device *\/$/;"	e	enum:cudaMemcpyKind
cudaMemcpyDeviceToHost	/usr/local/cuda/include/driver_types.h	/^    cudaMemcpyDeviceToHost        =   2,      \/**< Device -> Host *\/$/;"	e	enum:cudaMemcpyKind
cudaMemcpyFromArray	/usr/local/cuda/include/cuda_runtime_api.h	154;"	d
cudaMemcpyFromArray	/usr/local/cuda/include/cuda_runtime_api.h	7330;"	d
cudaMemcpyFromArrayAsync	/usr/local/cuda/include/cuda_runtime_api.h	169;"	d
cudaMemcpyFromArrayAsync	/usr/local/cuda/include/cuda_runtime_api.h	7345;"	d
cudaMemcpyFromSymbol	/usr/local/cuda/include/cuda_runtime.h	/^static __inline__ __host__ cudaError_t cudaMemcpyFromSymbol($/;"	f
cudaMemcpyFromSymbol	/usr/local/cuda/include/cuda_runtime_api.h	150;"	d
cudaMemcpyFromSymbol	/usr/local/cuda/include/cuda_runtime_api.h	7326;"	d
cudaMemcpyFromSymbolAsync	/usr/local/cuda/include/cuda_runtime.h	/^static __inline__ __host__ cudaError_t cudaMemcpyFromSymbolAsync($/;"	f
cudaMemcpyFromSymbolAsync	/usr/local/cuda/include/cuda_runtime_api.h	165;"	d
cudaMemcpyFromSymbolAsync	/usr/local/cuda/include/cuda_runtime_api.h	7341;"	d
cudaMemcpyHostToDevice	/usr/local/cuda/include/driver_types.h	/^    cudaMemcpyHostToDevice        =   1,      \/**< Host   -> Device *\/$/;"	e	enum:cudaMemcpyKind
cudaMemcpyHostToHost	/usr/local/cuda/include/driver_types.h	/^    cudaMemcpyHostToHost          =   0,      \/**< Host   -> Host *\/$/;"	e	enum:cudaMemcpyKind
cudaMemcpyKind	/usr/local/cuda/include/driver_types.h	/^enum __device_builtin__ cudaMemcpyKind$/;"	g
cudaMemcpyToArray	/usr/local/cuda/include/cuda_runtime_api.h	152;"	d
cudaMemcpyToArray	/usr/local/cuda/include/cuda_runtime_api.h	7328;"	d
cudaMemcpyToArrayAsync	/usr/local/cuda/include/cuda_runtime_api.h	167;"	d
cudaMemcpyToArrayAsync	/usr/local/cuda/include/cuda_runtime_api.h	7343;"	d
cudaMemcpyToSymbol	/usr/local/cuda/include/cuda_runtime.h	/^static __inline__ __host__ cudaError_t cudaMemcpyToSymbol($/;"	f
cudaMemcpyToSymbol	/usr/local/cuda/include/cuda_runtime_api.h	149;"	d
cudaMemcpyToSymbol	/usr/local/cuda/include/cuda_runtime_api.h	7325;"	d
cudaMemcpyToSymbolAsync	/usr/local/cuda/include/cuda_runtime.h	/^static __inline__ __host__ cudaError_t cudaMemcpyToSymbolAsync($/;"	f
cudaMemcpyToSymbolAsync	/usr/local/cuda/include/cuda_runtime_api.h	164;"	d
cudaMemcpyToSymbolAsync	/usr/local/cuda/include/cuda_runtime_api.h	7340;"	d
cudaMemoryAdvise	/usr/local/cuda/include/driver_types.h	/^enum __device_builtin__ cudaMemoryAdvise$/;"	g
cudaMemoryType	/usr/local/cuda/include/driver_types.h	/^enum __device_builtin__ cudaMemoryType$/;"	g
cudaMemoryTypeDevice	/usr/local/cuda/include/driver_types.h	/^    cudaMemoryTypeDevice = 2  \/**< Device memory *\/$/;"	e	enum:cudaMemoryType
cudaMemoryTypeHost	/usr/local/cuda/include/driver_types.h	/^    cudaMemoryTypeHost   = 1, \/**< Host memory *\/$/;"	e	enum:cudaMemoryType
cudaMemset	/usr/local/cuda/include/cuda_runtime_api.h	160;"	d
cudaMemset	/usr/local/cuda/include/cuda_runtime_api.h	7336;"	d
cudaMemset2D	/usr/local/cuda/include/cuda_runtime_api.h	161;"	d
cudaMemset2D	/usr/local/cuda/include/cuda_runtime_api.h	7337;"	d
cudaMemset2DAsync	/usr/local/cuda/include/cuda_runtime_api.h	174;"	d
cudaMemset2DAsync	/usr/local/cuda/include/cuda_runtime_api.h	7350;"	d
cudaMemset3D	/usr/local/cuda/include/cuda_runtime_api.h	162;"	d
cudaMemset3D	/usr/local/cuda/include/cuda_runtime_api.h	7338;"	d
cudaMemset3DAsync	/usr/local/cuda/include/cuda_runtime_api.h	175;"	d
cudaMemset3DAsync	/usr/local/cuda/include/cuda_runtime_api.h	7351;"	d
cudaMemsetAsync	/usr/local/cuda/include/cuda_runtime_api.h	173;"	d
cudaMemsetAsync	/usr/local/cuda/include/cuda_runtime_api.h	7349;"	d
cudaMipmappedArray_const_t	/usr/local/cuda/include/driver_types.h	/^typedef const struct cudaMipmappedArray *cudaMipmappedArray_const_t;$/;"	t	typeref:struct:cudaMipmappedArray
cudaMipmappedArray_t	/usr/local/cuda/include/driver_types.h	/^typedef struct cudaMipmappedArray *cudaMipmappedArray_t;$/;"	t	typeref:struct:cudaMipmappedArray
cudaOccAlignUpShmemSizeVolta	/usr/local/cuda/include/cuda_occupancy.h	/^static __OCC_INLINE cudaOccError cudaOccAlignUpShmemSizeVolta(size_t *shMemSize, const cudaOccDeviceProp *properties)$/;"	f
cudaOccCacheConfig	/usr/local/cuda/include/cuda_occupancy.h	/^} cudaOccCacheConfig;$/;"	t	typeref:enum:cudaOccCacheConfig_enum
cudaOccCacheConfig_enum	/usr/local/cuda/include/cuda_occupancy.h	/^typedef enum cudaOccCacheConfig_enum {$/;"	g
cudaOccCarveoutConfig	/usr/local/cuda/include/cuda_occupancy.h	/^} cudaOccCarveoutConfig;$/;"	t	typeref:enum:cudaOccCarveoutConfig_enum
cudaOccCarveoutConfig_enum	/usr/local/cuda/include/cuda_occupancy.h	/^typedef enum cudaOccCarveoutConfig_enum {$/;"	g
cudaOccDeviceProp	/usr/local/cuda/include/cuda_occupancy.h	/^    cudaOccDeviceProp()$/;"	f	struct:cudaOccDeviceProp
cudaOccDeviceProp	/usr/local/cuda/include/cuda_occupancy.h	/^    cudaOccDeviceProp(const DeviceProp &props)$/;"	f	struct:cudaOccDeviceProp
cudaOccDeviceProp	/usr/local/cuda/include/cuda_occupancy.h	/^struct cudaOccDeviceProp {$/;"	s
cudaOccDeviceProp	/usr/local/cuda/include/cuda_occupancy.h	/^typedef struct cudaOccDeviceProp     cudaOccDeviceProp;$/;"	t	typeref:struct:cudaOccDeviceProp
cudaOccDevicePropCheck	/usr/local/cuda/include/cuda_occupancy.h	/^static __OCC_INLINE cudaOccError cudaOccDevicePropCheck(const cudaOccDeviceProp *properties)$/;"	f
cudaOccDeviceState	/usr/local/cuda/include/cuda_occupancy.h	/^    cudaOccDeviceState()$/;"	f	struct:cudaOccDeviceState
cudaOccDeviceState	/usr/local/cuda/include/cuda_occupancy.h	/^struct cudaOccDeviceState$/;"	s
cudaOccDeviceState	/usr/local/cuda/include/cuda_occupancy.h	/^typedef struct cudaOccDeviceState    cudaOccDeviceState;$/;"	t	typeref:struct:cudaOccDeviceState
cudaOccDeviceStateCheck	/usr/local/cuda/include/cuda_occupancy.h	/^static __OCC_INLINE cudaOccError cudaOccDeviceStateCheck(const cudaOccDeviceState *state)$/;"	f
cudaOccError	/usr/local/cuda/include/cuda_occupancy.h	/^typedef enum cudaOccError_enum       cudaOccError;$/;"	t	typeref:enum:cudaOccError_enum
cudaOccError_enum	/usr/local/cuda/include/cuda_occupancy.h	/^enum cudaOccError_enum {$/;"	g
cudaOccFuncAttributes	/usr/local/cuda/include/cuda_occupancy.h	/^    cudaOccFuncAttributes()$/;"	f	struct:cudaOccFuncAttributes
cudaOccFuncAttributes	/usr/local/cuda/include/cuda_occupancy.h	/^    cudaOccFuncAttributes(const FuncAttributes &attr)$/;"	f	struct:cudaOccFuncAttributes
cudaOccFuncAttributes	/usr/local/cuda/include/cuda_occupancy.h	/^struct cudaOccFuncAttributes {$/;"	s
cudaOccFuncAttributes	/usr/local/cuda/include/cuda_occupancy.h	/^typedef struct cudaOccFuncAttributes cudaOccFuncAttributes;$/;"	t	typeref:struct:cudaOccFuncAttributes
cudaOccFuncAttributesCheck	/usr/local/cuda/include/cuda_occupancy.h	/^static __OCC_INLINE cudaOccError cudaOccFuncAttributesCheck(const cudaOccFuncAttributes *attributes)$/;"	f
cudaOccFuncShmemConfig	/usr/local/cuda/include/cuda_occupancy.h	/^} cudaOccFuncShmemConfig;$/;"	t	typeref:enum:cudaOccFuncShmemConfig_enum
cudaOccFuncShmemConfig_enum	/usr/local/cuda/include/cuda_occupancy.h	/^typedef enum cudaOccFuncShmemConfig_enum {$/;"	g
cudaOccInputCheck	/usr/local/cuda/include/cuda_occupancy.h	/^static __OCC_INLINE cudaOccError cudaOccInputCheck($/;"	f
cudaOccLimitingFactor	/usr/local/cuda/include/cuda_occupancy.h	/^} cudaOccLimitingFactor;$/;"	t	typeref:enum:cudaOccLimitingFactor_enum
cudaOccLimitingFactor_enum	/usr/local/cuda/include/cuda_occupancy.h	/^typedef enum cudaOccLimitingFactor_enum {$/;"	g
cudaOccMaxActiveBlocksPerMultiprocessor	/usr/local/cuda/include/cuda_occupancy.h	/^cudaOccError cudaOccMaxActiveBlocksPerMultiprocessor($/;"	f
cudaOccMaxBlocksPerMultiprocessor	/usr/local/cuda/include/cuda_occupancy.h	/^static __OCC_INLINE cudaOccError cudaOccMaxBlocksPerMultiprocessor(int* limit, const cudaOccDeviceProp *properties)$/;"	f
cudaOccMaxBlocksPerSMRegsLimit	/usr/local/cuda/include/cuda_occupancy.h	/^cudaOccError cudaOccMaxBlocksPerSMRegsLimit($/;"	f
cudaOccMaxBlocksPerSMSmemLimit	/usr/local/cuda/include/cuda_occupancy.h	/^static __OCC_INLINE cudaOccError cudaOccMaxBlocksPerSMSmemLimit($/;"	f
cudaOccMaxBlocksPerSMWarpsLimit	/usr/local/cuda/include/cuda_occupancy.h	/^static __OCC_INLINE cudaOccError cudaOccMaxBlocksPerSMWarpsLimit($/;"	f
cudaOccMaxPotentialOccupancyBlockSize	/usr/local/cuda/include/cuda_occupancy.h	/^cudaOccError cudaOccMaxPotentialOccupancyBlockSize($/;"	f
cudaOccMaxPotentialOccupancyBlockSize	/usr/local/cuda/include/cuda_occupancy.h	/^cudaOccError cudaOccMaxPotentialOccupancyBlockSize($/;"	f	namespace:__anon49
cudaOccMaxPotentialOccupancyBlockSizeVariableSMem	/usr/local/cuda/include/cuda_occupancy.h	/^cudaOccError cudaOccMaxPotentialOccupancyBlockSizeVariableSMem($/;"	f	namespace:__anon49
cudaOccPartitionedGCConfig	/usr/local/cuda/include/cuda_occupancy.h	/^} cudaOccPartitionedGCConfig;$/;"	t	typeref:enum:cudaOccPartitionedGCConfig_enum
cudaOccPartitionedGCConfig_enum	/usr/local/cuda/include/cuda_occupancy.h	/^typedef enum cudaOccPartitionedGCConfig_enum {$/;"	g
cudaOccPartitionedGCExpected	/usr/local/cuda/include/cuda_occupancy.h	/^static __OCC_INLINE cudaOccPartitionedGCConfig cudaOccPartitionedGCExpected($/;"	f
cudaOccPartitionedGCForced	/usr/local/cuda/include/cuda_occupancy.h	/^static __OCC_INLINE int cudaOccPartitionedGCForced($/;"	f
cudaOccPartitionedGCSupport	/usr/local/cuda/include/cuda_occupancy.h	/^} cudaOccPartitionedGCSupport;$/;"	t	typeref:enum:cudaOccPartitionedGCSupport_enum
cudaOccPartitionedGCSupport_enum	/usr/local/cuda/include/cuda_occupancy.h	/^typedef enum cudaOccPartitionedGCSupport_enum {$/;"	g
cudaOccPartitionedGlobalCachingModeSupport	/usr/local/cuda/include/cuda_occupancy.h	/^static __OCC_INLINE cudaOccError cudaOccPartitionedGlobalCachingModeSupport(cudaOccPartitionedGCSupport *limit, const cudaOccDeviceProp *properties)$/;"	f
cudaOccRegAllocationGranularity	/usr/local/cuda/include/cuda_occupancy.h	/^static __OCC_INLINE cudaOccError cudaOccRegAllocationGranularity(int *limit, const cudaOccDeviceProp *properties, int regsPerThread)$/;"	f
cudaOccResult	/usr/local/cuda/include/cuda_occupancy.h	/^struct cudaOccResult {$/;"	s
cudaOccResult	/usr/local/cuda/include/cuda_occupancy.h	/^typedef struct cudaOccResult         cudaOccResult;$/;"	t	typeref:struct:cudaOccResult
cudaOccSMemAllocationGranularity	/usr/local/cuda/include/cuda_occupancy.h	/^static __OCC_INLINE cudaOccError cudaOccSMemAllocationGranularity(int *limit, const cudaOccDeviceProp *properties)$/;"	f
cudaOccSMemPerBlock	/usr/local/cuda/include/cuda_occupancy.h	/^static __OCC_INLINE cudaOccError cudaOccSMemPerBlock(size_t *limit, const cudaOccDeviceProp *properties, cudaOccFuncShmemConfig shmemLimitConfig, size_t smemPerCta)$/;"	f
cudaOccSMemPerMultiprocessor	/usr/local/cuda/include/cuda_occupancy.h	/^static __OCC_INLINE cudaOccError cudaOccSMemPerMultiprocessor(size_t *limit, const cudaOccDeviceProp *properties, const cudaOccDeviceState *state)$/;"	f
cudaOccSMemPreference	/usr/local/cuda/include/cuda_occupancy.h	/^static __OCC_INLINE cudaOccError cudaOccSMemPreference(size_t *limit, const cudaOccDeviceProp *properties, const cudaOccDeviceState *state)$/;"	f
cudaOccSMemPreferenceVolta	/usr/local/cuda/include/cuda_occupancy.h	/^static __OCC_INLINE cudaOccError cudaOccSMemPreferenceVolta(size_t *limit, const cudaOccDeviceProp *properties, const cudaOccDeviceState *state)$/;"	f
cudaOccSubPartitionsPerMultiprocessor	/usr/local/cuda/include/cuda_occupancy.h	/^static __OCC_INLINE cudaOccError cudaOccSubPartitionsPerMultiprocessor(int *limit, const cudaOccDeviceProp *properties)$/;"	f
cudaOccupancyDefault	/usr/local/cuda/include/driver_types.h	140;"	d
cudaOccupancyDisableCachingOverride	/usr/local/cuda/include/driver_types.h	141;"	d
cudaOccupancyMaxActiveBlocksPerMultiprocessor	/usr/local/cuda/include/cuda_device_runtime_api.h	/^__device__ __NV_WEAK__ cudaError_t CUDARTAPI cudaOccupancyMaxActiveBlocksPerMultiprocessor(int *numBlocks, const void *func, int blockSize, size_t dynamicSmemSize)$/;"	f
cudaOccupancyMaxActiveBlocksPerMultiprocessor	/usr/local/cuda/include/cuda_runtime.h	/^static __inline__ __host__ cudaError_t cudaOccupancyMaxActiveBlocksPerMultiprocessor($/;"	f
cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags	/usr/local/cuda/include/cuda_device_runtime_api.h	/^__device__ __NV_WEAK__ cudaError_t CUDARTAPI cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(int *numBlocks, const void *func, int blockSize, size_t dynamicSmemSize, unsigned int flags)$/;"	f
cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags	/usr/local/cuda/include/cuda_runtime.h	/^static __inline__ __host__ cudaError_t cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags($/;"	f
cudaOccupancyMaxPotentialBlockSize	/usr/local/cuda/include/cuda_runtime.h	/^static __inline__ __host__ CUDART_DEVICE cudaError_t cudaOccupancyMaxPotentialBlockSize($/;"	f
cudaOccupancyMaxPotentialBlockSizeVariableSMem	/usr/local/cuda/include/cuda_runtime.h	/^static __inline__ __host__ CUDART_DEVICE cudaError_t cudaOccupancyMaxPotentialBlockSizeVariableSMem($/;"	f
cudaOccupancyMaxPotentialBlockSizeVariableSMemWithFlags	/usr/local/cuda/include/cuda_runtime.h	/^static __inline__ __host__ CUDART_DEVICE cudaError_t cudaOccupancyMaxPotentialBlockSizeVariableSMemWithFlags($/;"	f
cudaOccupancyMaxPotentialBlockSizeWithFlags	/usr/local/cuda/include/cuda_runtime.h	/^static __inline__ __host__ CUDART_DEVICE cudaError_t cudaOccupancyMaxPotentialBlockSizeWithFlags($/;"	f
cudaOutputMode	/usr/local/cuda/include/driver_types.h	/^enum __device_builtin__ cudaOutputMode$/;"	g
cudaOutputMode_t	/usr/local/cuda/include/driver_types.h	/^typedef __device_builtin__ enum cudaOutputMode cudaOutputMode_t;$/;"	t	typeref:enum:cudaOutputMode
cudaPeerAccessDefault	/usr/local/cuda/include/driver_types.h	86;"	d
cudaPitchedPtr	/usr/local/cuda/include/driver_types.h	/^struct __device_builtin__ cudaPitchedPtr$/;"	s
cudaPointerAttributes	/usr/local/cuda/include/driver_types.h	/^struct __device_builtin__ cudaPointerAttributes$/;"	s
cudaPos	/usr/local/cuda/include/driver_types.h	/^struct __device_builtin__ cudaPos$/;"	s
cudaReadModeElementType	/usr/local/cuda/include/texture_types.h	/^    cudaReadModeElementType     = 0,  \/**< Read texture as specified element type *\/$/;"	e	enum:cudaTextureReadMode
cudaReadModeNormalizedFloat	/usr/local/cuda/include/texture_types.h	/^    cudaReadModeNormalizedFloat = 1   \/**< Read texture as normalized float *\/$/;"	e	enum:cudaTextureReadMode
cudaResViewFormatFloat1	/usr/local/cuda/include/driver_types.h	/^    cudaResViewFormatFloat1                    = 0x16, \/**< 1 channel 32-bit floating point *\/$/;"	e	enum:cudaResourceViewFormat
cudaResViewFormatFloat2	/usr/local/cuda/include/driver_types.h	/^    cudaResViewFormatFloat2                    = 0x17, \/**< 2 channel 32-bit floating point *\/$/;"	e	enum:cudaResourceViewFormat
cudaResViewFormatFloat4	/usr/local/cuda/include/driver_types.h	/^    cudaResViewFormatFloat4                    = 0x18, \/**< 4 channel 32-bit floating point *\/$/;"	e	enum:cudaResourceViewFormat
cudaResViewFormatHalf1	/usr/local/cuda/include/driver_types.h	/^    cudaResViewFormatHalf1                     = 0x13, \/**< 1 channel 16-bit floating point *\/$/;"	e	enum:cudaResourceViewFormat
cudaResViewFormatHalf2	/usr/local/cuda/include/driver_types.h	/^    cudaResViewFormatHalf2                     = 0x14, \/**< 2 channel 16-bit floating point *\/$/;"	e	enum:cudaResourceViewFormat
cudaResViewFormatHalf4	/usr/local/cuda/include/driver_types.h	/^    cudaResViewFormatHalf4                     = 0x15, \/**< 4 channel 16-bit floating point *\/$/;"	e	enum:cudaResourceViewFormat
cudaResViewFormatNone	/usr/local/cuda/include/driver_types.h	/^    cudaResViewFormatNone                      = 0x00, \/**< No resource view format (use underlying resource format) *\/$/;"	e	enum:cudaResourceViewFormat
cudaResViewFormatSignedBlockCompressed4	/usr/local/cuda/include/driver_types.h	/^    cudaResViewFormatSignedBlockCompressed4    = 0x1d, \/**< Block compressed 4 signed *\/$/;"	e	enum:cudaResourceViewFormat
cudaResViewFormatSignedBlockCompressed5	/usr/local/cuda/include/driver_types.h	/^    cudaResViewFormatSignedBlockCompressed5    = 0x1f, \/**< Block compressed 5 signed *\/$/;"	e	enum:cudaResourceViewFormat
cudaResViewFormatSignedBlockCompressed6H	/usr/local/cuda/include/driver_types.h	/^    cudaResViewFormatSignedBlockCompressed6H   = 0x21, \/**< Block compressed 6 signed half-float *\/$/;"	e	enum:cudaResourceViewFormat
cudaResViewFormatSignedChar1	/usr/local/cuda/include/driver_types.h	/^    cudaResViewFormatSignedChar1               = 0x04, \/**< 1 channel signed 8-bit integers *\/$/;"	e	enum:cudaResourceViewFormat
cudaResViewFormatSignedChar2	/usr/local/cuda/include/driver_types.h	/^    cudaResViewFormatSignedChar2               = 0x05, \/**< 2 channel signed 8-bit integers *\/$/;"	e	enum:cudaResourceViewFormat
cudaResViewFormatSignedChar4	/usr/local/cuda/include/driver_types.h	/^    cudaResViewFormatSignedChar4               = 0x06, \/**< 4 channel signed 8-bit integers *\/$/;"	e	enum:cudaResourceViewFormat
cudaResViewFormatSignedInt1	/usr/local/cuda/include/driver_types.h	/^    cudaResViewFormatSignedInt1                = 0x10, \/**< 1 channel signed 32-bit integers *\/$/;"	e	enum:cudaResourceViewFormat
cudaResViewFormatSignedInt2	/usr/local/cuda/include/driver_types.h	/^    cudaResViewFormatSignedInt2                = 0x11, \/**< 2 channel signed 32-bit integers *\/$/;"	e	enum:cudaResourceViewFormat
cudaResViewFormatSignedInt4	/usr/local/cuda/include/driver_types.h	/^    cudaResViewFormatSignedInt4                = 0x12, \/**< 4 channel signed 32-bit integers *\/$/;"	e	enum:cudaResourceViewFormat
cudaResViewFormatSignedShort1	/usr/local/cuda/include/driver_types.h	/^    cudaResViewFormatSignedShort1              = 0x0a, \/**< 1 channel signed 16-bit integers *\/$/;"	e	enum:cudaResourceViewFormat
cudaResViewFormatSignedShort2	/usr/local/cuda/include/driver_types.h	/^    cudaResViewFormatSignedShort2              = 0x0b, \/**< 2 channel signed 16-bit integers *\/$/;"	e	enum:cudaResourceViewFormat
cudaResViewFormatSignedShort4	/usr/local/cuda/include/driver_types.h	/^    cudaResViewFormatSignedShort4              = 0x0c, \/**< 4 channel signed 16-bit integers *\/$/;"	e	enum:cudaResourceViewFormat
cudaResViewFormatUnsignedBlockCompressed1	/usr/local/cuda/include/driver_types.h	/^    cudaResViewFormatUnsignedBlockCompressed1  = 0x19, \/**< Block compressed 1 *\/$/;"	e	enum:cudaResourceViewFormat
cudaResViewFormatUnsignedBlockCompressed2	/usr/local/cuda/include/driver_types.h	/^    cudaResViewFormatUnsignedBlockCompressed2  = 0x1a, \/**< Block compressed 2 *\/$/;"	e	enum:cudaResourceViewFormat
cudaResViewFormatUnsignedBlockCompressed3	/usr/local/cuda/include/driver_types.h	/^    cudaResViewFormatUnsignedBlockCompressed3  = 0x1b, \/**< Block compressed 3 *\/$/;"	e	enum:cudaResourceViewFormat
cudaResViewFormatUnsignedBlockCompressed4	/usr/local/cuda/include/driver_types.h	/^    cudaResViewFormatUnsignedBlockCompressed4  = 0x1c, \/**< Block compressed 4 unsigned *\/$/;"	e	enum:cudaResourceViewFormat
cudaResViewFormatUnsignedBlockCompressed5	/usr/local/cuda/include/driver_types.h	/^    cudaResViewFormatUnsignedBlockCompressed5  = 0x1e, \/**< Block compressed 5 unsigned *\/$/;"	e	enum:cudaResourceViewFormat
cudaResViewFormatUnsignedBlockCompressed6H	/usr/local/cuda/include/driver_types.h	/^    cudaResViewFormatUnsignedBlockCompressed6H = 0x20, \/**< Block compressed 6 unsigned half-float *\/$/;"	e	enum:cudaResourceViewFormat
cudaResViewFormatUnsignedBlockCompressed7	/usr/local/cuda/include/driver_types.h	/^    cudaResViewFormatUnsignedBlockCompressed7  = 0x22  \/**< Block compressed 7 *\/$/;"	e	enum:cudaResourceViewFormat
cudaResViewFormatUnsignedChar1	/usr/local/cuda/include/driver_types.h	/^    cudaResViewFormatUnsignedChar1             = 0x01, \/**< 1 channel unsigned 8-bit integers *\/$/;"	e	enum:cudaResourceViewFormat
cudaResViewFormatUnsignedChar2	/usr/local/cuda/include/driver_types.h	/^    cudaResViewFormatUnsignedChar2             = 0x02, \/**< 2 channel unsigned 8-bit integers *\/$/;"	e	enum:cudaResourceViewFormat
cudaResViewFormatUnsignedChar4	/usr/local/cuda/include/driver_types.h	/^    cudaResViewFormatUnsignedChar4             = 0x03, \/**< 4 channel unsigned 8-bit integers *\/$/;"	e	enum:cudaResourceViewFormat
cudaResViewFormatUnsignedInt1	/usr/local/cuda/include/driver_types.h	/^    cudaResViewFormatUnsignedInt1              = 0x0d, \/**< 1 channel unsigned 32-bit integers *\/$/;"	e	enum:cudaResourceViewFormat
cudaResViewFormatUnsignedInt2	/usr/local/cuda/include/driver_types.h	/^    cudaResViewFormatUnsignedInt2              = 0x0e, \/**< 2 channel unsigned 32-bit integers *\/$/;"	e	enum:cudaResourceViewFormat
cudaResViewFormatUnsignedInt4	/usr/local/cuda/include/driver_types.h	/^    cudaResViewFormatUnsignedInt4              = 0x0f, \/**< 4 channel unsigned 32-bit integers *\/$/;"	e	enum:cudaResourceViewFormat
cudaResViewFormatUnsignedShort1	/usr/local/cuda/include/driver_types.h	/^    cudaResViewFormatUnsignedShort1            = 0x07, \/**< 1 channel unsigned 16-bit integers *\/$/;"	e	enum:cudaResourceViewFormat
cudaResViewFormatUnsignedShort2	/usr/local/cuda/include/driver_types.h	/^    cudaResViewFormatUnsignedShort2            = 0x08, \/**< 2 channel unsigned 16-bit integers *\/$/;"	e	enum:cudaResourceViewFormat
cudaResViewFormatUnsignedShort4	/usr/local/cuda/include/driver_types.h	/^    cudaResViewFormatUnsignedShort4            = 0x09, \/**< 4 channel unsigned 16-bit integers *\/$/;"	e	enum:cudaResourceViewFormat
cudaResourceDesc	/usr/local/cuda/include/driver_types.h	/^struct __device_builtin__ cudaResourceDesc {$/;"	s
cudaResourceType	/usr/local/cuda/include/driver_types.h	/^enum __device_builtin__ cudaResourceType$/;"	g
cudaResourceTypeArray	/usr/local/cuda/include/driver_types.h	/^    cudaResourceTypeArray          = 0x00, \/**< Array resource *\/$/;"	e	enum:cudaResourceType
cudaResourceTypeLinear	/usr/local/cuda/include/driver_types.h	/^    cudaResourceTypeLinear         = 0x02, \/**< Linear resource *\/$/;"	e	enum:cudaResourceType
cudaResourceTypeMipmappedArray	/usr/local/cuda/include/driver_types.h	/^    cudaResourceTypeMipmappedArray = 0x01, \/**< Mipmapped array resource *\/$/;"	e	enum:cudaResourceType
cudaResourceTypePitch2D	/usr/local/cuda/include/driver_types.h	/^    cudaResourceTypePitch2D        = 0x03  \/**< Pitch 2D resource *\/$/;"	e	enum:cudaResourceType
cudaResourceViewDesc	/usr/local/cuda/include/driver_types.h	/^struct __device_builtin__ cudaResourceViewDesc$/;"	s
cudaResourceViewFormat	/usr/local/cuda/include/driver_types.h	/^enum __device_builtin__ cudaResourceViewFormat$/;"	g
cudaRoundMinInf	/usr/local/cuda/include/device_types.h	/^    cudaRoundMinInf$/;"	e	enum:cudaRoundMode
cudaRoundMode	/usr/local/cuda/include/device_types.h	/^enum __device_builtin__ cudaRoundMode$/;"	g
cudaRoundNearest	/usr/local/cuda/include/device_types.h	/^    cudaRoundNearest,$/;"	e	enum:cudaRoundMode
cudaRoundPosInf	/usr/local/cuda/include/device_types.h	/^    cudaRoundPosInf,$/;"	e	enum:cudaRoundMode
cudaRoundZero	/usr/local/cuda/include/device_types.h	/^    cudaRoundZero,$/;"	e	enum:cudaRoundMode
cudaSetupArgument	/usr/local/cuda/include/cuda_runtime.h	/^static __inline__ __host__ cudaError_t cudaSetupArgument($/;"	f
cudaSharedCarveout	/usr/local/cuda/include/driver_types.h	/^enum __device_builtin__ cudaSharedCarveout {$/;"	g
cudaSharedMemBankSizeDefault	/usr/local/cuda/include/driver_types.h	/^    cudaSharedMemBankSizeDefault   = 0,$/;"	e	enum:cudaSharedMemConfig
cudaSharedMemBankSizeEightByte	/usr/local/cuda/include/driver_types.h	/^    cudaSharedMemBankSizeEightByte = 2$/;"	e	enum:cudaSharedMemConfig
cudaSharedMemBankSizeFourByte	/usr/local/cuda/include/driver_types.h	/^    cudaSharedMemBankSizeFourByte  = 1,$/;"	e	enum:cudaSharedMemConfig
cudaSharedMemConfig	/usr/local/cuda/include/driver_types.h	/^enum __device_builtin__ cudaSharedMemConfig$/;"	g
cudaSharedmemCarveoutDefault	/usr/local/cuda/include/driver_types.h	/^    cudaSharedmemCarveoutDefault      = -1,  \/* * < no preference for shared memory or L1 (default) *\/$/;"	e	enum:cudaSharedCarveout
cudaSharedmemCarveoutMaxL1	/usr/local/cuda/include/driver_types.h	/^    cudaSharedmemCarveoutMaxL1        = 0    \/* * < prefer maximum available L1 cache, minimum shared memory *\/$/;"	e	enum:cudaSharedCarveout
cudaSharedmemCarveoutMaxShared	/usr/local/cuda/include/driver_types.h	/^    cudaSharedmemCarveoutMaxShared    = 100, \/* * < prefer maximum available shared memory, minimum L1 cache *\/$/;"	e	enum:cudaSharedCarveout
cudaStreamAddCallback	/usr/local/cuda/include/cuda_runtime_api.h	181;"	d
cudaStreamAddCallback	/usr/local/cuda/include/cuda_runtime_api.h	7357;"	d
cudaStreamAttachMemAsync	/usr/local/cuda/include/cuda_runtime.h	/^static __inline__ __host__ cudaError_t cudaStreamAttachMemAsync($/;"	f
cudaStreamAttachMemAsync	/usr/local/cuda/include/cuda_runtime_api.h	182;"	d
cudaStreamAttachMemAsync	/usr/local/cuda/include/cuda_runtime_api.h	7358;"	d
cudaStreamCallback_t	/usr/local/cuda/include/cuda_runtime_api.h	/^typedef void (CUDART_CB *cudaStreamCallback_t)(cudaStream_t stream, cudaError_t status, void *userData);$/;"	t
cudaStreamDefault	/usr/local/cuda/include/driver_types.h	88;"	d
cudaStreamGetFlags	/usr/local/cuda/include/cuda_runtime_api.h	177;"	d
cudaStreamGetFlags	/usr/local/cuda/include/cuda_runtime_api.h	7353;"	d
cudaStreamGetPriority	/usr/local/cuda/include/cuda_runtime_api.h	178;"	d
cudaStreamGetPriority	/usr/local/cuda/include/cuda_runtime_api.h	7354;"	d
cudaStreamLegacy	/usr/local/cuda/include/driver_types.h	99;"	d
cudaStreamNonBlocking	/usr/local/cuda/include/driver_types.h	89;"	d
cudaStreamPerThread	/usr/local/cuda/include/driver_types.h	109;"	d
cudaStreamQuery	/usr/local/cuda/include/cuda_runtime_api.h	176;"	d
cudaStreamQuery	/usr/local/cuda/include/cuda_runtime_api.h	7352;"	d
cudaStreamSynchronize	/usr/local/cuda/include/cuda_runtime_api.h	183;"	d
cudaStreamSynchronize	/usr/local/cuda/include/cuda_runtime_api.h	7359;"	d
cudaStreamWaitEvent	/usr/local/cuda/include/cuda_runtime_api.h	180;"	d
cudaStreamWaitEvent	/usr/local/cuda/include/cuda_runtime_api.h	7356;"	d
cudaStream_t	/usr/local/cuda/include/driver_types.h	/^typedef __device_builtin__ struct CUstream_st *cudaStream_t;$/;"	t	typeref:struct:CUstream_st
cudaSuccess	/usr/local/cuda/include/driver_types.h	/^    cudaSuccess                           =      0,$/;"	e	enum:cudaError
cudaSurfaceBoundaryMode	/usr/local/cuda/include/surface_types.h	/^enum __device_builtin__ cudaSurfaceBoundaryMode$/;"	g
cudaSurfaceFormatMode	/usr/local/cuda/include/surface_types.h	/^enum __device_builtin__  cudaSurfaceFormatMode$/;"	g
cudaSurfaceObject_t	/usr/local/cuda/include/surface_types.h	/^typedef __device_builtin__ unsigned long long cudaSurfaceObject_t;$/;"	t
cudaSurfaceType1D	/usr/local/cuda/include/surface_types.h	73;"	d
cudaSurfaceType1DLayered	/usr/local/cuda/include/surface_types.h	77;"	d
cudaSurfaceType2D	/usr/local/cuda/include/surface_types.h	74;"	d
cudaSurfaceType2DLayered	/usr/local/cuda/include/surface_types.h	78;"	d
cudaSurfaceType3D	/usr/local/cuda/include/surface_types.h	75;"	d
cudaSurfaceTypeCubemap	/usr/local/cuda/include/surface_types.h	76;"	d
cudaSurfaceTypeCubemapLayered	/usr/local/cuda/include/surface_types.h	79;"	d
cudaTextureAddressMode	/usr/local/cuda/include/texture_types.h	/^enum __device_builtin__ cudaTextureAddressMode$/;"	g
cudaTextureDesc	/usr/local/cuda/include/texture_types.h	/^struct __device_builtin__ cudaTextureDesc$/;"	s
cudaTextureFilterMode	/usr/local/cuda/include/texture_types.h	/^enum __device_builtin__ cudaTextureFilterMode$/;"	g
cudaTextureObject_t	/usr/local/cuda/include/texture_types.h	/^typedef __device_builtin__ unsigned long long cudaTextureObject_t;$/;"	t
cudaTextureReadMode	/usr/local/cuda/include/texture_types.h	/^enum __device_builtin__ cudaTextureReadMode$/;"	g
cudaTextureType1D	/usr/local/cuda/include/texture_types.h	73;"	d
cudaTextureType1DLayered	/usr/local/cuda/include/texture_types.h	77;"	d
cudaTextureType2D	/usr/local/cuda/include/texture_types.h	74;"	d
cudaTextureType2DLayered	/usr/local/cuda/include/texture_types.h	78;"	d
cudaTextureType3D	/usr/local/cuda/include/texture_types.h	75;"	d
cudaTextureTypeCubemap	/usr/local/cuda/include/texture_types.h	76;"	d
cudaTextureTypeCubemapLayered	/usr/local/cuda/include/texture_types.h	79;"	d
cudaUUID_t	/usr/local/cuda/include/driver_types.h	/^typedef __device_builtin__ struct CUuuid_st cudaUUID_t;$/;"	t	typeref:struct:CUuuid_st
cudaUnbindTexture	/usr/local/cuda/include/cuda_runtime.h	/^static __inline__ __host__ cudaError_t cudaUnbindTexture($/;"	f
cudaVideoChromaFormat	/usr/local/cuda/include/dynlink_cuviddec.h	/^} cudaVideoChromaFormat;$/;"	t	typeref:enum:cudaVideoChromaFormat_enum
cudaVideoChromaFormat_420	/usr/local/cuda/include/dynlink_cuviddec.h	/^    cudaVideoChromaFormat_420,           \/**< 4:2:0 *\/$/;"	e	enum:cudaVideoChromaFormat_enum
cudaVideoChromaFormat_422	/usr/local/cuda/include/dynlink_cuviddec.h	/^    cudaVideoChromaFormat_422,           \/**< 4:2:2 *\/$/;"	e	enum:cudaVideoChromaFormat_enum
cudaVideoChromaFormat_444	/usr/local/cuda/include/dynlink_cuviddec.h	/^    cudaVideoChromaFormat_444            \/**< 4:4:4 *\/$/;"	e	enum:cudaVideoChromaFormat_enum
cudaVideoChromaFormat_Monochrome	/usr/local/cuda/include/dynlink_cuviddec.h	/^    cudaVideoChromaFormat_Monochrome=0,  \/**< MonoChrome *\/$/;"	e	enum:cudaVideoChromaFormat_enum
cudaVideoChromaFormat_enum	/usr/local/cuda/include/dynlink_cuviddec.h	/^typedef enum cudaVideoChromaFormat_enum {$/;"	g
cudaVideoCodec	/usr/local/cuda/include/dynlink_cuviddec.h	/^} cudaVideoCodec;$/;"	t	typeref:enum:cudaVideoCodec_enum
cudaVideoCodec_H264	/usr/local/cuda/include/dynlink_cuviddec.h	/^    cudaVideoCodec_H264,                    \/**<  H264   *\/$/;"	e	enum:cudaVideoCodec_enum
cudaVideoCodec_H264_MVC	/usr/local/cuda/include/dynlink_cuviddec.h	/^    cudaVideoCodec_H264_MVC,                \/**<  H264-MVC   *\/$/;"	e	enum:cudaVideoCodec_enum
cudaVideoCodec_H264_SVC	/usr/local/cuda/include/dynlink_cuviddec.h	/^    cudaVideoCodec_H264_SVC,                \/**<  H264-SVC   *\/$/;"	e	enum:cudaVideoCodec_enum
cudaVideoCodec_HEVC	/usr/local/cuda/include/dynlink_cuviddec.h	/^    cudaVideoCodec_HEVC,                    \/**<  HEVC   *\/$/;"	e	enum:cudaVideoCodec_enum
cudaVideoCodec_JPEG	/usr/local/cuda/include/dynlink_cuviddec.h	/^    cudaVideoCodec_JPEG,                    \/**<  JPEG   *\/$/;"	e	enum:cudaVideoCodec_enum
cudaVideoCodec_MPEG1	/usr/local/cuda/include/dynlink_cuviddec.h	/^    cudaVideoCodec_MPEG1=0,                 \/**<  MPEG1   *\/$/;"	e	enum:cudaVideoCodec_enum
cudaVideoCodec_MPEG2	/usr/local/cuda/include/dynlink_cuviddec.h	/^    cudaVideoCodec_MPEG2,                   \/**<  MPEG2  *\/$/;"	e	enum:cudaVideoCodec_enum
cudaVideoCodec_MPEG4	/usr/local/cuda/include/dynlink_cuviddec.h	/^    cudaVideoCodec_MPEG4,                   \/**<  MPEG4   *\/$/;"	e	enum:cudaVideoCodec_enum
cudaVideoCodec_NV12	/usr/local/cuda/include/dynlink_cuviddec.h	/^    cudaVideoCodec_NV12   = (('N'<<24)|('V'<<16)|('1'<<8)|('2')),   \/**< Y,UV  (4:2:0)  *\/$/;"	e	enum:cudaVideoCodec_enum
cudaVideoCodec_NumCodecs	/usr/local/cuda/include/dynlink_cuviddec.h	/^    cudaVideoCodec_NumCodecs,               \/**<  Max COdecs   *\/$/;"	e	enum:cudaVideoCodec_enum
cudaVideoCodec_UYVY	/usr/local/cuda/include/dynlink_cuviddec.h	/^    cudaVideoCodec_UYVY   = (('U'<<24)|('Y'<<16)|('V'<<8)|('Y'))    \/**< UYVY (4:2:2)  *\/$/;"	e	enum:cudaVideoCodec_enum
cudaVideoCodec_VC1	/usr/local/cuda/include/dynlink_cuviddec.h	/^    cudaVideoCodec_VC1,                     \/**<  VC1   *\/$/;"	e	enum:cudaVideoCodec_enum
cudaVideoCodec_VP8	/usr/local/cuda/include/dynlink_cuviddec.h	/^    cudaVideoCodec_VP8,                     \/**<  VP8   *\/$/;"	e	enum:cudaVideoCodec_enum
cudaVideoCodec_VP9	/usr/local/cuda/include/dynlink_cuviddec.h	/^    cudaVideoCodec_VP9,                     \/**<  VP9   *\/$/;"	e	enum:cudaVideoCodec_enum
cudaVideoCodec_YUV420	/usr/local/cuda/include/dynlink_cuviddec.h	/^    cudaVideoCodec_YUV420 = (('I'<<24)|('Y'<<16)|('U'<<8)|('V')),   \/**< Y,U,V (4:2:0)  *\/$/;"	e	enum:cudaVideoCodec_enum
cudaVideoCodec_YUYV	/usr/local/cuda/include/dynlink_cuviddec.h	/^    cudaVideoCodec_YUYV   = (('Y'<<24)|('U'<<16)|('Y'<<8)|('V')),   \/**< YUYV\/YUY2 (4:2:2)  *\/$/;"	e	enum:cudaVideoCodec_enum
cudaVideoCodec_YV12	/usr/local/cuda/include/dynlink_cuviddec.h	/^    cudaVideoCodec_YV12   = (('Y'<<24)|('V'<<16)|('1'<<8)|('2')),   \/**< Y,V,U (4:2:0)  *\/$/;"	e	enum:cudaVideoCodec_enum
cudaVideoCodec_enum	/usr/local/cuda/include/dynlink_cuviddec.h	/^typedef enum cudaVideoCodec_enum {$/;"	g
cudaVideoCreateFlags	/usr/local/cuda/include/dynlink_cuviddec.h	/^} cudaVideoCreateFlags;$/;"	t	typeref:enum:cudaVideoCreateFlags_enum
cudaVideoCreateFlags_enum	/usr/local/cuda/include/dynlink_cuviddec.h	/^typedef enum cudaVideoCreateFlags_enum {$/;"	g
cudaVideoCreate_Default	/usr/local/cuda/include/dynlink_cuviddec.h	/^    cudaVideoCreate_Default = 0x00,     \/**< Default operation mode: use dedicated video engines *\/$/;"	e	enum:cudaVideoCreateFlags_enum
cudaVideoCreate_PreferCUDA	/usr/local/cuda/include/dynlink_cuviddec.h	/^    cudaVideoCreate_PreferCUDA = 0x01,  \/**< Use a CUDA-based decoder if faster than dedicated engines (requires a valid vidLock object for multi-threading) *\/$/;"	e	enum:cudaVideoCreateFlags_enum
cudaVideoCreate_PreferCUVID	/usr/local/cuda/include/dynlink_cuviddec.h	/^    cudaVideoCreate_PreferCUVID = 0x04  \/**< Use dedicated video engines directly *\/$/;"	e	enum:cudaVideoCreateFlags_enum
cudaVideoCreate_PreferDXVA	/usr/local/cuda/include/dynlink_cuviddec.h	/^    cudaVideoCreate_PreferDXVA = 0x02,  \/**< Go through DXVA internally if possible (requires D3D9 interop) *\/$/;"	e	enum:cudaVideoCreateFlags_enum
cudaVideoDeinterlaceMode	/usr/local/cuda/include/dynlink_cuviddec.h	/^} cudaVideoDeinterlaceMode;$/;"	t	typeref:enum:cudaVideoDeinterlaceMode_enum
cudaVideoDeinterlaceMode_Adaptive	/usr/local/cuda/include/dynlink_cuviddec.h	/^    cudaVideoDeinterlaceMode_Adaptive   \/**< Adaptive deinterlacing  *\/$/;"	e	enum:cudaVideoDeinterlaceMode_enum
cudaVideoDeinterlaceMode_Bob	/usr/local/cuda/include/dynlink_cuviddec.h	/^    cudaVideoDeinterlaceMode_Bob,       \/**< Drop one field  *\/$/;"	e	enum:cudaVideoDeinterlaceMode_enum
cudaVideoDeinterlaceMode_Weave	/usr/local/cuda/include/dynlink_cuviddec.h	/^    cudaVideoDeinterlaceMode_Weave=0,   \/**< Weave both fields (no deinterlacing) *\/$/;"	e	enum:cudaVideoDeinterlaceMode_enum
cudaVideoDeinterlaceMode_enum	/usr/local/cuda/include/dynlink_cuviddec.h	/^typedef enum cudaVideoDeinterlaceMode_enum {$/;"	g
cudaVideoState	/usr/local/cuda/include/dynlink_nvcuvid.h	/^} cudaVideoState;$/;"	t	typeref:enum:__anon121
cudaVideoState_Error	/usr/local/cuda/include/dynlink_nvcuvid.h	/^    cudaVideoState_Error   = -1,    \/**< Error state (invalid source)  *\/$/;"	e	enum:__anon121
cudaVideoState_Started	/usr/local/cuda/include/dynlink_nvcuvid.h	/^    cudaVideoState_Started = 1      \/**< Source is running and delivering data  *\/$/;"	e	enum:__anon121
cudaVideoState_Stopped	/usr/local/cuda/include/dynlink_nvcuvid.h	/^    cudaVideoState_Stopped = 0,     \/**< Source is stopped (or reached end-of-stream)  *\/$/;"	e	enum:__anon121
cudaVideoSurfaceFormat	/usr/local/cuda/include/dynlink_cuviddec.h	/^} cudaVideoSurfaceFormat;$/;"	t	typeref:enum:cudaVideoSurfaceFormat_enum
cudaVideoSurfaceFormat_NV12	/usr/local/cuda/include/dynlink_cuviddec.h	/^    cudaVideoSurfaceFormat_NV12=0       \/**< NV12 (currently the only supported output format)  *\/$/;"	e	enum:cudaVideoSurfaceFormat_enum
cudaVideoSurfaceFormat_enum	/usr/local/cuda/include/dynlink_cuviddec.h	/^typedef enum cudaVideoSurfaceFormat_enum {$/;"	g
cudaXtCopyType_t	/usr/local/cuda/include/cudalibxt.h	/^enum cudaXtCopyType_t {$/;"	g
cudaXtDesc	/usr/local/cuda/include/cudalibxt.h	/^typedef struct cudaXtDesc_t cudaXtDesc;$/;"	t	typeref:struct:cudaXtDesc_t
cudaXtDesc_t	/usr/local/cuda/include/cudalibxt.h	/^struct cudaXtDesc_t{$/;"	s
cudaXtState	/usr/local/cuda/include/cudalibxt.h	/^    void *cudaXtState;                       \/\/opaque CUDA utility structure$/;"	m	struct:cudaXtDesc_t
cuda_compare	src/cuda.c	/^float cuda_compare(float *x_gpu, float *x, size_t n, char *s)$/;"	f
cuda_free	src/cuda.c	/^void cuda_free(float *x_gpu)$/;"	f
cuda_get_device	src/cuda.c	/^int cuda_get_device()$/;"	f
cuda_gridsize	src/cuda.c	/^dim3 cuda_gridsize(size_t n){$/;"	f
cuda_mag_array	src/cuda.c	/^float cuda_mag_array(float *x_gpu, size_t n)$/;"	f
cuda_make_array	src/cuda.c	/^float *cuda_make_array(float *x, size_t n)$/;"	f
cuda_make_int_array	src/cuda.c	/^int *cuda_make_int_array(int *x, size_t n)$/;"	f
cuda_profiler_H	/usr/local/cuda/include/cudaProfiler.h	51;"	d
cuda_pull_array	src/cuda.c	/^void cuda_pull_array(float *x_gpu, float *x, size_t n)$/;"	f
cuda_push_array	src/cuda.c	/^void cuda_push_array(float *x_gpu, float *x, size_t n)$/;"	f
cuda_random	src/cuda.c	/^void cuda_random(float *x_gpu, size_t n)$/;"	f
cuda_set_device	src/cuda.c	/^void cuda_set_device(int n)$/;"	f
cudnnActivationDescriptor_t	/usr/local/cuda/include/cudnn.h	/^typedef struct cudnnActivationStruct*      cudnnActivationDescriptor_t;$/;"	t	typeref:struct:cudnnActivationStruct
cudnnActivationMode_t	/usr/local/cuda/include/cudnn.h	/^} cudnnActivationMode_t;$/;"	t	typeref:enum:__anon74
cudnnBatchNormMode_t	/usr/local/cuda/include/cudnn.h	/^} cudnnBatchNormMode_t;$/;"	t	typeref:enum:__anon77
cudnnCTCLossAlgo_t	/usr/local/cuda/include/cudnn.h	/^}cudnnCTCLossAlgo_t;$/;"	t	typeref:enum:__anon83
cudnnCTCLossDescriptor_t	/usr/local/cuda/include/cudnn.h	/^typedef struct cudnnCTCLossStruct*         cudnnCTCLossDescriptor_t;$/;"	t	typeref:struct:cudnnCTCLossStruct
cudnnConvolutionBwdDataAlgoPerf_t	/usr/local/cuda/include/cudnn.h	/^} cudnnConvolutionBwdDataAlgoPerf_t;$/;"	t	typeref:struct:__anon70
cudnnConvolutionBwdDataAlgo_t	/usr/local/cuda/include/cudnn.h	/^} cudnnConvolutionBwdDataAlgo_t;$/;"	t	typeref:enum:__anon69
cudnnConvolutionBwdDataPreference_t	/usr/local/cuda/include/cudnn.h	/^} cudnnConvolutionBwdDataPreference_t;$/;"	t	typeref:enum:__anon68
cudnnConvolutionBwdFilterAlgoPerf_t	/usr/local/cuda/include/cudnn.h	/^} cudnnConvolutionBwdFilterAlgoPerf_t;$/;"	t	typeref:struct:__anon67
cudnnConvolutionBwdFilterAlgo_t	/usr/local/cuda/include/cudnn.h	/^} cudnnConvolutionBwdFilterAlgo_t;$/;"	t	typeref:enum:__anon66
cudnnConvolutionBwdFilterPreference_t	/usr/local/cuda/include/cudnn.h	/^} cudnnConvolutionBwdFilterPreference_t;$/;"	t	typeref:enum:__anon65
cudnnConvolutionDescriptor_t	/usr/local/cuda/include/cudnn.h	/^typedef struct cudnnConvolutionStruct*     cudnnConvolutionDescriptor_t;$/;"	t	typeref:struct:cudnnConvolutionStruct
cudnnConvolutionFwdAlgoPerf_t	/usr/local/cuda/include/cudnn.h	/^} cudnnConvolutionFwdAlgoPerf_t;$/;"	t	typeref:struct:__anon64
cudnnConvolutionFwdAlgo_t	/usr/local/cuda/include/cudnn.h	/^} cudnnConvolutionFwdAlgo_t;$/;"	t	typeref:enum:__anon63
cudnnConvolutionFwdPreference_t	/usr/local/cuda/include/cudnn.h	/^} cudnnConvolutionFwdPreference_t;$/;"	t	typeref:enum:__anon62
cudnnConvolutionMode_t	/usr/local/cuda/include/cudnn.h	/^} cudnnConvolutionMode_t;$/;"	t	typeref:enum:__anon61
cudnnDataType_t	/usr/local/cuda/include/cudnn.h	/^} cudnnDataType_t;$/;"	t	typeref:enum:__anon52
cudnnDeterminism_t	/usr/local/cuda/include/cudnn.h	/^} cudnnDeterminism_t;$/;"	t	typeref:enum:__anon55
cudnnDirectionMode_t	/usr/local/cuda/include/cudnn.h	/^  } cudnnDirectionMode_t;$/;"	t	typeref:enum:__anon80
cudnnDivNormMode_t	/usr/local/cuda/include/cudnn.h	/^} cudnnDivNormMode_t;$/;"	t	typeref:enum:__anon76
cudnnDropoutDescriptor_t	/usr/local/cuda/include/cudnn.h	/^typedef struct cudnnDropoutStruct * cudnnDropoutDescriptor_t;$/;"	t	typeref:struct:cudnnDropoutStruct
cudnnErrQueryMode_t	/usr/local/cuda/include/cudnn.h	/^} cudnnErrQueryMode_t;$/;"	t	typeref:enum:__anon51
cudnnFilterDescriptor_t	/usr/local/cuda/include/cudnn.h	/^typedef struct cudnnFilterStruct*          cudnnFilterDescriptor_t;$/;"	t	typeref:struct:cudnnFilterStruct
cudnnHandle_t	/usr/local/cuda/include/cudnn.h	/^typedef struct cudnnContext *cudnnHandle_t;$/;"	t	typeref:struct:cudnnContext
cudnnIndicesType_t	/usr/local/cuda/include/cudnn.h	/^} cudnnIndicesType_t;$/;"	t	typeref:enum:__anon60
cudnnLRNDescriptor_t	/usr/local/cuda/include/cudnn.h	/^typedef struct cudnnLRNStruct*             cudnnLRNDescriptor_t;$/;"	t	typeref:struct:cudnnLRNStruct
cudnnLRNMode_t	/usr/local/cuda/include/cudnn.h	/^} cudnnLRNMode_t;$/;"	t	typeref:enum:__anon75
cudnnMathType_t	/usr/local/cuda/include/cudnn.h	/^} cudnnMathType_t; $/;"	t	typeref:enum:__anon53
cudnnNanPropagation_t	/usr/local/cuda/include/cudnn.h	/^} cudnnNanPropagation_t;$/;"	t	typeref:enum:__anon54
cudnnOpTensorDescriptor_t	/usr/local/cuda/include/cudnn.h	/^typedef struct cudnnOpTensorStruct*        cudnnOpTensorDescriptor_t;$/;"	t	typeref:struct:cudnnOpTensorStruct
cudnnOpTensorOp_t	/usr/local/cuda/include/cudnn.h	/^} cudnnOpTensorOp_t;$/;"	t	typeref:enum:__anon57
cudnnPersistentRNNPlan_t	/usr/local/cuda/include/cudnn.h	/^typedef struct cudnnPersistentRNNPlan *cudnnPersistentRNNPlan_t;$/;"	t	typeref:struct:cudnnPersistentRNNPlan
cudnnPoolingDescriptor_t	/usr/local/cuda/include/cudnn.h	/^typedef struct cudnnPoolingStruct*         cudnnPoolingDescriptor_t;$/;"	t	typeref:struct:cudnnPoolingStruct
cudnnPoolingMode_t	/usr/local/cuda/include/cudnn.h	/^} cudnnPoolingMode_t;$/;"	t	typeref:enum:__anon73
cudnnRNNAlgo_t	/usr/local/cuda/include/cudnn.h	/^  } cudnnRNNAlgo_t;  $/;"	t	typeref:enum:__anon82
cudnnRNNDescriptor_t	/usr/local/cuda/include/cudnn.h	/^typedef struct cudnnRNNStruct*        cudnnRNNDescriptor_t;$/;"	t	typeref:struct:cudnnRNNStruct
cudnnRNNInputMode_t	/usr/local/cuda/include/cudnn.h	/^  } cudnnRNNInputMode_t;  $/;"	t	typeref:enum:__anon81
cudnnRNNMode_t	/usr/local/cuda/include/cudnn.h	/^  } cudnnRNNMode_t;$/;"	t	typeref:enum:__anon79
cudnnReduceTensorDescriptor_t	/usr/local/cuda/include/cudnn.h	/^typedef struct cudnnReduceTensorStruct*    cudnnReduceTensorDescriptor_t;$/;"	t	typeref:struct:cudnnReduceTensorStruct
cudnnReduceTensorIndices_t	/usr/local/cuda/include/cudnn.h	/^} cudnnReduceTensorIndices_t;$/;"	t	typeref:enum:__anon59
cudnnReduceTensorOp_t	/usr/local/cuda/include/cudnn.h	/^} cudnnReduceTensorOp_t;$/;"	t	typeref:enum:__anon58
cudnnRuntimeTag_t	/usr/local/cuda/include/cudnn.h	/^typedef struct cudnnRuntimeTag_t cudnnRuntimeTag_t;$/;"	t	typeref:struct:cudnnRuntimeTag_t
cudnnSamplerType_t	/usr/local/cuda/include/cudnn.h	/^} cudnnSamplerType_t;$/;"	t	typeref:enum:__anon78
cudnnSoftmaxAlgorithm_t	/usr/local/cuda/include/cudnn.h	/^} cudnnSoftmaxAlgorithm_t;$/;"	t	typeref:enum:__anon71
cudnnSoftmaxMode_t	/usr/local/cuda/include/cudnn.h	/^} cudnnSoftmaxMode_t;$/;"	t	typeref:enum:__anon72
cudnnSpatialTransformerDescriptor_t	/usr/local/cuda/include/cudnn.h	/^typedef struct cudnnSpatialTransformerStruct* cudnnSpatialTransformerDescriptor_t;$/;"	t	typeref:struct:cudnnSpatialTransformerStruct
cudnnStatus_t	/usr/local/cuda/include/cudnn.h	/^} cudnnStatus_t;$/;"	t	typeref:enum:__anon50
cudnnTensorDescriptor_t	/usr/local/cuda/include/cudnn.h	/^typedef struct cudnnTensorStruct*          cudnnTensorDescriptor_t;$/;"	t	typeref:struct:cudnnTensorStruct
cudnnTensorFormat_t	/usr/local/cuda/include/cudnn.h	/^} cudnnTensorFormat_t;$/;"	t	typeref:enum:__anon56
cudnn_convolutional_setup	src/convolutional_layer.c	/^void cudnn_convolutional_setup(layer *l)$/;"	f
cudnn_handle	src/cuda.c	/^cudnnHandle_t cudnn_handle()$/;"	f
cufftCallbackLoadC	/usr/local/cuda/include/cufftXt.h	/^typedef cufftComplex (*cufftCallbackLoadC)(void *dataIn, size_t offset, void *callerInfo, void *sharedPointer);$/;"	t
cufftCallbackLoadD	/usr/local/cuda/include/cufftXt.h	/^typedef cufftDoubleReal(*cufftCallbackLoadD)(void *dataIn, size_t offset, void *callerInfo, void *sharedPointer);$/;"	t
cufftCallbackLoadR	/usr/local/cuda/include/cufftXt.h	/^typedef cufftReal (*cufftCallbackLoadR)(void *dataIn, size_t offset, void *callerInfo, void *sharedPointer);$/;"	t
cufftCallbackLoadZ	/usr/local/cuda/include/cufftXt.h	/^typedef cufftDoubleComplex (*cufftCallbackLoadZ)(void *dataIn, size_t offset, void *callerInfo, void *sharedPointer);$/;"	t
cufftCallbackStoreC	/usr/local/cuda/include/cufftXt.h	/^typedef void (*cufftCallbackStoreC)(void *dataOut, size_t offset, cufftComplex element, void *callerInfo, void *sharedPointer);$/;"	t
cufftCallbackStoreD	/usr/local/cuda/include/cufftXt.h	/^typedef void (*cufftCallbackStoreD)(void *dataOut, size_t offset, cufftDoubleReal element, void *callerInfo, void *sharedPointer);$/;"	t
cufftCallbackStoreR	/usr/local/cuda/include/cufftXt.h	/^typedef void (*cufftCallbackStoreR)(void *dataOut, size_t offset, cufftReal element, void *callerInfo, void *sharedPointer);$/;"	t
cufftCallbackStoreZ	/usr/local/cuda/include/cufftXt.h	/^typedef void (*cufftCallbackStoreZ)(void *dataOut, size_t offset, cufftDoubleComplex element, void *callerInfo, void *sharedPointer);$/;"	t
cufftCompatibility	/usr/local/cuda/include/cufft.h	/^} cufftCompatibility;$/;"	t	typeref:enum:cufftCompatibility_t
cufftCompatibility_t	/usr/local/cuda/include/cufft.h	/^typedef enum cufftCompatibility_t {$/;"	g
cufftComplex	/usr/local/cuda/include/cufft.h	/^typedef cuComplex cufftComplex;$/;"	t
cufftDoubleComplex	/usr/local/cuda/include/cufft.h	/^typedef cuDoubleComplex cufftDoubleComplex;$/;"	t
cufftDoubleReal	/usr/local/cuda/include/cufft.h	/^typedef double cufftDoubleReal;$/;"	t
cufftHandle	/usr/local/cuda/include/cufft.h	/^typedef int cufftHandle;$/;"	t
cufftReal	/usr/local/cuda/include/cufft.h	/^typedef float cufftReal;$/;"	t
cufftResult	/usr/local/cuda/include/cufft.h	/^} cufftResult;$/;"	t	typeref:enum:cufftResult_t
cufftResult_t	/usr/local/cuda/include/cufft.h	/^typedef enum cufftResult_t {$/;"	g
cufftType	/usr/local/cuda/include/cufft.h	/^} cufftType;$/;"	t	typeref:enum:cufftType_t
cufftType_t	/usr/local/cuda/include/cufft.h	/^typedef enum cufftType_t {$/;"	g
cufftXt1dFactors	/usr/local/cuda/include/cufftXt.h	/^} cufftXt1dFactors;$/;"	t	typeref:struct:cufftXt1dFactors_t
cufftXt1dFactors_t	/usr/local/cuda/include/cufftXt.h	/^typedef struct cufftXt1dFactors_t {$/;"	s
cufftXtCallbackType	/usr/local/cuda/include/cufftXt.h	/^} cufftXtCallbackType;$/;"	t	typeref:enum:cufftXtCallbackType_t
cufftXtCallbackType_t	/usr/local/cuda/include/cufftXt.h	/^typedef enum cufftXtCallbackType_t {$/;"	g
cufftXtCopyType	/usr/local/cuda/include/cufftXt.h	/^} cufftXtCopyType;$/;"	t	typeref:enum:cufftXtCopyType_t
cufftXtCopyType_t	/usr/local/cuda/include/cufftXt.h	/^typedef enum cufftXtCopyType_t {$/;"	g
cufftXtQueryType	/usr/local/cuda/include/cufftXt.h	/^} cufftXtQueryType;$/;"	t	typeref:enum:cufftXtQueryType_t
cufftXtQueryType_t	/usr/local/cuda/include/cufftXt.h	/^typedef enum cufftXtQueryType_t {$/;"	g
cufftXtSubFormat	/usr/local/cuda/include/cufftXt.h	/^} cufftXtSubFormat;$/;"	t	typeref:enum:cufftXtSubFormat_t
cufftXtSubFormat_t	/usr/local/cuda/include/cufftXt.h	/^typedef enum cufftXtSubFormat_t {$/;"	g
cur_x	src/stb_image.h	/^   int cur_x, cur_y;$/;"	m	struct:__anon26
cur_y	src/stb_image.h	/^   int cur_x, cur_y;$/;"	m	struct:__anon26
curand	/usr/local/cuda/include/curand_kernel.h	/^QUALIFIERS unsigned int curand(curandStateMRG32k3a_t *state)$/;"	f
curand	/usr/local/cuda/include/curand_kernel.h	/^QUALIFIERS unsigned int curand(curandStatePhilox4_32_10_t *state)$/;"	f
curand	/usr/local/cuda/include/curand_kernel.h	/^QUALIFIERS unsigned int curand(curandStateScrambledSobol32_t * state)$/;"	f
curand	/usr/local/cuda/include/curand_kernel.h	/^QUALIFIERS unsigned int curand(curandStateSobol32_t * state)$/;"	f
curand	/usr/local/cuda/include/curand_kernel.h	/^QUALIFIERS unsigned int curand(curandStateTest_t *state)$/;"	f
curand	/usr/local/cuda/include/curand_kernel.h	/^QUALIFIERS unsigned int curand(curandStateXORWOW_t *state)$/;"	f
curand	/usr/local/cuda/include/curand_kernel.h	/^QUALIFIERS unsigned long long curand(curandStateScrambledSobol64_t * state)$/;"	f
curand	/usr/local/cuda/include/curand_kernel.h	/^QUALIFIERS unsigned long long curand(curandStateSobol64_t * state)$/;"	f
curand	/usr/local/cuda/include/curand_mtgp32_kernel.h	/^QUALIFIERS_MTGP32 unsigned int curand(curandStateMtgp32_t *state)$/;"	f
curand4	/usr/local/cuda/include/curand_kernel.h	/^QUALIFIERS uint4 curand4(curandStatePhilox4_32_10_t *state)$/;"	f
curandDirectionVectorSet	/usr/local/cuda/include/curand.h	/^enum curandDirectionVectorSet {$/;"	g
curandDirectionVectorSet_t	/usr/local/cuda/include/curand.h	/^typedef enum curandDirectionVectorSet curandDirectionVectorSet_t;$/;"	t	typeref:enum:curandDirectionVectorSet
curandDirectionVectors32_t	/usr/local/cuda/include/curand.h	/^typedef unsigned int curandDirectionVectors32_t[32];$/;"	t
curandDirectionVectors64_t	/usr/local/cuda/include/curand.h	/^typedef unsigned long long curandDirectionVectors64_t[64];$/;"	t
curandDiscreteDistribution_st	/usr/local/cuda/include/curand_discrete.h	/^struct curandDiscreteDistribution_st {$/;"	s
curandDiscreteDistribution_t	/usr/local/cuda/include/curand.h	/^typedef struct curandDiscreteDistribution_st *curandDiscreteDistribution_t;$/;"	t	typeref:struct:curandDiscreteDistribution_st
curandDistributionM2Shift_st	/usr/local/cuda/include/curand_discrete.h	/^struct curandDistributionM2Shift_st {$/;"	s
curandDistributionM2Shift_t	/usr/local/cuda/include/curand.h	/^typedef struct curandDistributionM2Shift_st *curandDistributionM2Shift_t;$/;"	t	typeref:struct:curandDistributionM2Shift_st
curandDistributionShift_st	/usr/local/cuda/include/curand_discrete.h	/^struct curandDistributionShift_st {$/;"	s
curandDistributionShift_t	/usr/local/cuda/include/curand.h	/^typedef struct curandDistributionShift_st *curandDistributionShift_t;$/;"	t	typeref:struct:curandDistributionShift_st
curandDistribution_st	/usr/local/cuda/include/curand.h	/^typedef double curandDistribution_st;$/;"	t
curandDistribution_t	/usr/local/cuda/include/curand.h	/^typedef curandDistribution_st *curandDistribution_t;$/;"	t
curandGenerator_t	/usr/local/cuda/include/curand.h	/^typedef struct curandGenerator_st *curandGenerator_t;$/;"	t	typeref:struct:curandGenerator_st
curandHistogramM2K_st	/usr/local/cuda/include/curand.h	/^typedef unsigned int curandHistogramM2K_st;$/;"	t
curandHistogramM2K_t	/usr/local/cuda/include/curand.h	/^typedef curandHistogramM2K_st *curandHistogramM2K_t;$/;"	t
curandHistogramM2V_st	/usr/local/cuda/include/curand.h	/^typedef curandDistribution_st curandHistogramM2V_st;$/;"	t
curandHistogramM2V_t	/usr/local/cuda/include/curand.h	/^typedef curandHistogramM2V_st *curandHistogramM2V_t;$/;"	t
curandHistogramM2_st	/usr/local/cuda/include/curand_discrete.h	/^struct curandHistogramM2_st {$/;"	s
curandHistogramM2_t	/usr/local/cuda/include/curand.h	/^typedef struct curandHistogramM2_st *curandHistogramM2_t;$/;"	t	typeref:struct:curandHistogramM2_st
curandMakeMTGP32Constants	/usr/local/cuda/include/curand_mtgp32_host.h	/^__host__ curandStatus_t curandMakeMTGP32Constants(const mtgp32_params_fast_t params[],mtgp32_kernel_params_t * p) {$/;"	f
curandMakeMTGP32KernelState	/usr/local/cuda/include/curand_mtgp32_host.h	/^__host__ curandStatus_t CURANDAPI curandMakeMTGP32KernelState(curandStateMtgp32_t *s,$/;"	f
curandMethod	/usr/local/cuda/include/curand.h	/^enum curandMethod {$/;"	g
curandMethod_t	/usr/local/cuda/include/curand.h	/^typedef enum curandMethod curandMethod_t;$/;"	t	typeref:enum:curandMethod
curandOrdering	/usr/local/cuda/include/curand.h	/^enum curandOrdering {$/;"	g
curandOrdering_t	/usr/local/cuda/include/curand.h	/^typedef enum curandOrdering curandOrdering_t;$/;"	t	typeref:enum:curandOrdering
curandRngType	/usr/local/cuda/include/curand.h	/^enum curandRngType {$/;"	g
curandRngType_t	/usr/local/cuda/include/curand.h	/^typedef enum curandRngType curandRngType_t;$/;"	t	typeref:enum:curandRngType
curandState	/usr/local/cuda/include/curand_kernel.h	/^typedef struct curandStateXORWOW curandState;$/;"	t	typeref:struct:curandStateXORWOW
curandStateMRG32k3a	/usr/local/cuda/include/curand_kernel.h	/^struct curandStateMRG32k3a {$/;"	s
curandStateMRG32k3a_t	/usr/local/cuda/include/curand_kernel.h	/^typedef struct curandStateMRG32k3a curandStateMRG32k3a_t;$/;"	t	typeref:struct:curandStateMRG32k3a
curandStateMtgp32	/usr/local/cuda/include/curand_mtgp32.h	/^struct curandStateMtgp32 {$/;"	s
curandStateMtgp32_t	/usr/local/cuda/include/curand_mtgp32.h	/^typedef struct curandStateMtgp32 curandStateMtgp32_t;$/;"	t	typeref:struct:curandStateMtgp32
curandStatePhilox4_32_10	/usr/local/cuda/include/curand_philox4x32_x.h	/^struct curandStatePhilox4_32_10 {$/;"	s
curandStatePhilox4_32_10_t	/usr/local/cuda/include/curand_philox4x32_x.h	/^typedef struct curandStatePhilox4_32_10 curandStatePhilox4_32_10_t;$/;"	t	typeref:struct:curandStatePhilox4_32_10
curandStateScrambledSobol32	/usr/local/cuda/include/curand_kernel.h	/^struct curandStateScrambledSobol32 {$/;"	s
curandStateScrambledSobol32_t	/usr/local/cuda/include/curand_kernel.h	/^typedef struct curandStateScrambledSobol32 curandStateScrambledSobol32_t;$/;"	t	typeref:struct:curandStateScrambledSobol32
curandStateScrambledSobol64	/usr/local/cuda/include/curand_kernel.h	/^struct curandStateScrambledSobol64 {$/;"	s
curandStateScrambledSobol64_t	/usr/local/cuda/include/curand_kernel.h	/^typedef struct curandStateScrambledSobol64 curandStateScrambledSobol64_t;$/;"	t	typeref:struct:curandStateScrambledSobol64
curandStateSobol32	/usr/local/cuda/include/curand_kernel.h	/^struct curandStateSobol32 {$/;"	s
curandStateSobol32_t	/usr/local/cuda/include/curand_kernel.h	/^typedef struct curandStateSobol32 curandStateSobol32_t;$/;"	t	typeref:struct:curandStateSobol32
curandStateSobol64	/usr/local/cuda/include/curand_kernel.h	/^struct curandStateSobol64 {$/;"	s
curandStateSobol64_t	/usr/local/cuda/include/curand_kernel.h	/^typedef struct curandStateSobol64 curandStateSobol64_t;$/;"	t	typeref:struct:curandStateSobol64
curandStateTest	/usr/local/cuda/include/curand_kernel.h	/^struct curandStateTest {$/;"	s
curandStateTest_t	/usr/local/cuda/include/curand_kernel.h	/^typedef struct curandStateTest curandStateTest_t;$/;"	t	typeref:struct:curandStateTest
curandStateXORWOW	/usr/local/cuda/include/curand_kernel.h	/^struct curandStateXORWOW {$/;"	s
curandStateXORWOW_t	/usr/local/cuda/include/curand_kernel.h	/^typedef struct curandStateXORWOW curandStateXORWOW_t;$/;"	t	typeref:struct:curandStateXORWOW
curandState_t	/usr/local/cuda/include/curand_kernel.h	/^typedef struct curandStateXORWOW curandState_t;$/;"	t	typeref:struct:curandStateXORWOW
curandStatus	/usr/local/cuda/include/curand.h	/^enum curandStatus {$/;"	g
curandStatus_t	/usr/local/cuda/include/curand.h	/^typedef enum curandStatus curandStatus_t;$/;"	t	typeref:enum:curandStatus
curand_M2_double	/usr/local/cuda/include/curand_poisson.h	/^QUALIFIERS unsigned int curand_M2_double(STATE *state, curandDistributionM2Shift_t distributionM2)$/;"	f
curand_M2_double4	/usr/local/cuda/include/curand_poisson.h	/^QUALIFIERS uint4 curand_M2_double4(STATE *state, curandDistributionM2Shift_t distributionM2)$/;"	f
curand_MRG32k3a	/usr/local/cuda/include/curand_kernel.h	/^QUALIFIERS double curand_MRG32k3a (curandStateMRG32k3a_t *state)$/;"	f
curand_MRG32k3a	/usr/local/cuda/include/curand_kernel.h	/^QUALIFIERS double curand_MRG32k3a(curandStateMRG32k3a_t *state)$/;"	f
curand_MRGmatMul3x3	/usr/local/cuda/include/curand_kernel.h	/^QUALIFIERS void curand_MRGmatMul3x3(double i1[][3],double i2[][3],double o[][3],double m)$/;"	f
curand_MRGmatPow3x3	/usr/local/cuda/include/curand_kernel.h	/^QUALIFIERS void curand_MRGmatPow3x3( double in[][3][3], double o[][3], double m, unsigned long long pow )$/;"	f
curand_MRGmatVecMul3x3	/usr/local/cuda/include/curand_kernel.h	/^QUALIFIERS void curand_MRGmatVecMul3x3( double i[][3], double v[], double m)$/;"	f
curand_MRGmod	/usr/local/cuda/include/curand_kernel.h	/^QUALIFIERS double curand_MRGmod(double i, double m)$/;"	f
curand_MRGmodMul	/usr/local/cuda/include/curand_kernel.h	/^QUALIFIERS double curand_MRGmodMul(double i, double j, double m)$/;"	f
curand_Philox4x32_10	/usr/local/cuda/include/curand_philox4x32_x.h	/^QUALIFIERS uint4 curand_Philox4x32_10( uint4 c, uint2 k)$/;"	f
curand__discrete	/usr/local/cuda/include/curand_discrete2.h	/^QUALIFIERS unsigned int curand__discrete(STATE state, curandDiscreteDistribution_t discrete_distribution){$/;"	f
curand__discrete4	/usr/local/cuda/include/curand_discrete2.h	/^QUALIFIERS uint4 curand__discrete4(STATE state, curandDiscreteDistribution_t discrete_distribution){$/;"	f
curand_binary_search_double	/usr/local/cuda/include/curand_poisson.h	/^QUALIFIERS unsigned int curand_binary_search_double(STATE *state, curandDistributionShift_t distribution)$/;"	f
curand_box_muller	/usr/local/cuda/include/curand_normal.h	/^QUALIFIERS float2 curand_box_muller(R *state)$/;"	f
curand_box_muller2_double	/usr/local/cuda/include/curand_normal.h	/^QUALIFIERS double2 curand_box_muller2_double(R *state)$/;"	f
curand_box_muller4	/usr/local/cuda/include/curand_normal.h	/^QUALIFIERS float4 curand_box_muller4(R *state)$/;"	f
curand_box_muller4_double	/usr/local/cuda/include/curand_normal.h	/^QUALIFIERS double4 curand_box_muller4_double(R *state)$/;"	f
curand_box_muller_double	/usr/local/cuda/include/curand_normal.h	/^QUALIFIERS double2 curand_box_muller_double(R *state)$/;"	f
curand_box_muller_mrg	/usr/local/cuda/include/curand_normal.h	/^QUALIFIERS float2 curand_box_muller_mrg(curandStateMRG32k3a_t * state)$/;"	f
curand_box_muller_mrg_double	/usr/local/cuda/include/curand_normal.h	/^curand_box_muller_mrg_double(curandStateMRG32k3a_t * state) $/;"	f
curand_discrete	/usr/local/cuda/include/curand_discrete2.h	/^QUALIFIERS unsigned int curand_discrete(curandStateMRG32k3a_t *state, curandDiscreteDistribution_t discrete_distribution)$/;"	f
curand_discrete	/usr/local/cuda/include/curand_discrete2.h	/^QUALIFIERS unsigned int curand_discrete(curandStateMtgp32_t *state, curandDiscreteDistribution_t discrete_distribution)$/;"	f
curand_discrete	/usr/local/cuda/include/curand_discrete2.h	/^QUALIFIERS unsigned int curand_discrete(curandStatePhilox4_32_10_t *state, curandDiscreteDistribution_t discrete_distribution)$/;"	f
curand_discrete	/usr/local/cuda/include/curand_discrete2.h	/^QUALIFIERS unsigned int curand_discrete(curandStateScrambledSobol32_t *state, curandDiscreteDistribution_t discrete_distribution)$/;"	f
curand_discrete	/usr/local/cuda/include/curand_discrete2.h	/^QUALIFIERS unsigned int curand_discrete(curandStateScrambledSobol64_t *state, curandDiscreteDistribution_t discrete_distribution)$/;"	f
curand_discrete	/usr/local/cuda/include/curand_discrete2.h	/^QUALIFIERS unsigned int curand_discrete(curandStateSobol32_t *state, curandDiscreteDistribution_t discrete_distribution)$/;"	f
curand_discrete	/usr/local/cuda/include/curand_discrete2.h	/^QUALIFIERS unsigned int curand_discrete(curandStateSobol64_t *state, curandDiscreteDistribution_t discrete_distribution)$/;"	f
curand_discrete	/usr/local/cuda/include/curand_discrete2.h	/^QUALIFIERS unsigned int curand_discrete(curandStateXORWOW_t *state, curandDiscreteDistribution_t discrete_distribution)$/;"	f
curand_discrete4	/usr/local/cuda/include/curand_discrete2.h	/^QUALIFIERS uint4 curand_discrete4(curandStatePhilox4_32_10_t *state, curandDiscreteDistribution_t discrete_distribution)$/;"	f
curand_init	/usr/local/cuda/include/curand_kernel.h	/^QUALIFIERS void curand_init(curandDirectionVectors32_t direction_vectors,                                            $/;"	f
curand_init	/usr/local/cuda/include/curand_kernel.h	/^QUALIFIERS void curand_init(curandDirectionVectors32_t direction_vectors,$/;"	f
curand_init	/usr/local/cuda/include/curand_kernel.h	/^QUALIFIERS void curand_init(curandDirectionVectors64_t direction_vectors,$/;"	f
curand_init	/usr/local/cuda/include/curand_kernel.h	/^QUALIFIERS void curand_init(unsigned long long seed, $/;"	f
curand_log_normal	/usr/local/cuda/include/curand_lognormal.h	/^QUALIFIERS float curand_log_normal(curandStateMRG32k3a_t *state, float mean, float stddev)$/;"	f
curand_log_normal	/usr/local/cuda/include/curand_lognormal.h	/^QUALIFIERS float curand_log_normal(curandStateMtgp32_t *state, float mean, float stddev)$/;"	f
curand_log_normal	/usr/local/cuda/include/curand_lognormal.h	/^QUALIFIERS float curand_log_normal(curandStatePhilox4_32_10_t *state, float mean, float stddev)$/;"	f
curand_log_normal	/usr/local/cuda/include/curand_lognormal.h	/^QUALIFIERS float curand_log_normal(curandStateScrambledSobol32_t *state, float mean, float stddev)$/;"	f
curand_log_normal	/usr/local/cuda/include/curand_lognormal.h	/^QUALIFIERS float curand_log_normal(curandStateScrambledSobol64_t *state, float mean, float stddev)$/;"	f
curand_log_normal	/usr/local/cuda/include/curand_lognormal.h	/^QUALIFIERS float curand_log_normal(curandStateSobol32_t *state, float mean, float stddev)$/;"	f
curand_log_normal	/usr/local/cuda/include/curand_lognormal.h	/^QUALIFIERS float curand_log_normal(curandStateSobol64_t *state, float mean, float stddev)$/;"	f
curand_log_normal	/usr/local/cuda/include/curand_lognormal.h	/^QUALIFIERS float curand_log_normal(curandStateXORWOW_t *state, float mean, float stddev)$/;"	f
curand_log_normal2	/usr/local/cuda/include/curand_lognormal.h	/^QUALIFIERS float2 curand_log_normal2(curandStateMRG32k3a_t *state, float mean, float stddev)$/;"	f
curand_log_normal2	/usr/local/cuda/include/curand_lognormal.h	/^QUALIFIERS float2 curand_log_normal2(curandStatePhilox4_32_10_t *state, float mean, float stddev)$/;"	f
curand_log_normal2	/usr/local/cuda/include/curand_lognormal.h	/^QUALIFIERS float2 curand_log_normal2(curandStateXORWOW_t *state, float mean, float stddev)$/;"	f
curand_log_normal2_double	/usr/local/cuda/include/curand_lognormal.h	/^QUALIFIERS double2 curand_log_normal2_double(curandStateMRG32k3a_t *state, double mean, double stddev)$/;"	f
curand_log_normal2_double	/usr/local/cuda/include/curand_lognormal.h	/^QUALIFIERS double2 curand_log_normal2_double(curandStatePhilox4_32_10_t *state, double mean, double stddev)$/;"	f
curand_log_normal2_double	/usr/local/cuda/include/curand_lognormal.h	/^QUALIFIERS double2 curand_log_normal2_double(curandStateXORWOW_t *state, double mean, double stddev)$/;"	f
curand_log_normal4	/usr/local/cuda/include/curand_lognormal.h	/^QUALIFIERS float4 curand_log_normal4(curandStatePhilox4_32_10_t *state, float mean, float stddev)$/;"	f
curand_log_normal4_double	/usr/local/cuda/include/curand_lognormal.h	/^QUALIFIERS double4 curand_log_normal4_double(curandStatePhilox4_32_10_t *state, double mean, double stddev)$/;"	f
curand_log_normal_double	/usr/local/cuda/include/curand_lognormal.h	/^QUALIFIERS double curand_log_normal_double(curandStateMRG32k3a_t *state, double mean, double stddev)$/;"	f
curand_log_normal_double	/usr/local/cuda/include/curand_lognormal.h	/^QUALIFIERS double curand_log_normal_double(curandStateMtgp32_t *state, double mean, double stddev)$/;"	f
curand_log_normal_double	/usr/local/cuda/include/curand_lognormal.h	/^QUALIFIERS double curand_log_normal_double(curandStatePhilox4_32_10_t *state, double mean, double stddev)$/;"	f
curand_log_normal_double	/usr/local/cuda/include/curand_lognormal.h	/^QUALIFIERS double curand_log_normal_double(curandStateScrambledSobol32_t *state, double mean, double stddev)$/;"	f
curand_log_normal_double	/usr/local/cuda/include/curand_lognormal.h	/^QUALIFIERS double curand_log_normal_double(curandStateScrambledSobol64_t *state, double mean, double stddev)$/;"	f
curand_log_normal_double	/usr/local/cuda/include/curand_lognormal.h	/^QUALIFIERS double curand_log_normal_double(curandStateSobol32_t *state, double mean, double stddev)$/;"	f
curand_log_normal_double	/usr/local/cuda/include/curand_lognormal.h	/^QUALIFIERS double curand_log_normal_double(curandStateSobol64_t *state, double mean, double stddev)$/;"	f
curand_log_normal_double	/usr/local/cuda/include/curand_lognormal.h	/^QUALIFIERS double curand_log_normal_double(curandStateXORWOW_t *state, double mean, double stddev)$/;"	f
curand_mtgp32_single	/usr/local/cuda/include/curand_mtgp32_kernel.h	/^QUALIFIERS_MTGP32 float curand_mtgp32_single(curandStateMtgp32_t *state)$/;"	f
curand_mtgp32_single_specific	/usr/local/cuda/include/curand_mtgp32_kernel.h	/^QUALIFIERS_MTGP32 float curand_mtgp32_single_specific(curandStateMtgp32_t *state, unsigned char index, unsigned char n)$/;"	f
curand_mtgp32_specific	/usr/local/cuda/include/curand_mtgp32_kernel.h	/^QUALIFIERS_MTGP32 unsigned int curand_mtgp32_specific(curandStateMtgp32_t *state, unsigned char index, unsigned char n)$/;"	f
curand_normal	/usr/local/cuda/include/curand_normal.h	/^QUALIFIERS float curand_normal(curandStateMRG32k3a_t *state)$/;"	f
curand_normal	/usr/local/cuda/include/curand_normal.h	/^QUALIFIERS float curand_normal(curandStateMtgp32_t *state)$/;"	f
curand_normal	/usr/local/cuda/include/curand_normal.h	/^QUALIFIERS float curand_normal(curandStatePhilox4_32_10_t *state)$/;"	f
curand_normal	/usr/local/cuda/include/curand_normal.h	/^QUALIFIERS float curand_normal(curandStateScrambledSobol32_t *state)$/;"	f
curand_normal	/usr/local/cuda/include/curand_normal.h	/^QUALIFIERS float curand_normal(curandStateScrambledSobol64_t *state)$/;"	f
curand_normal	/usr/local/cuda/include/curand_normal.h	/^QUALIFIERS float curand_normal(curandStateSobol32_t *state)$/;"	f
curand_normal	/usr/local/cuda/include/curand_normal.h	/^QUALIFIERS float curand_normal(curandStateSobol64_t *state)$/;"	f
curand_normal	/usr/local/cuda/include/curand_normal.h	/^QUALIFIERS float curand_normal(curandStateXORWOW_t *state)$/;"	f
curand_normal2	/usr/local/cuda/include/curand_normal.h	/^QUALIFIERS float2 curand_normal2(curandStateMRG32k3a_t *state)$/;"	f
curand_normal2	/usr/local/cuda/include/curand_normal.h	/^QUALIFIERS float2 curand_normal2(curandStatePhilox4_32_10_t *state)$/;"	f
curand_normal2	/usr/local/cuda/include/curand_normal.h	/^QUALIFIERS float2 curand_normal2(curandStateXORWOW_t *state)$/;"	f
curand_normal2_double	/usr/local/cuda/include/curand_normal.h	/^QUALIFIERS double2 curand_normal2_double(curandStateMRG32k3a_t *state)$/;"	f
curand_normal2_double	/usr/local/cuda/include/curand_normal.h	/^QUALIFIERS double2 curand_normal2_double(curandStatePhilox4_32_10_t *state)$/;"	f
curand_normal2_double	/usr/local/cuda/include/curand_normal.h	/^QUALIFIERS double2 curand_normal2_double(curandStateXORWOW_t *state)$/;"	f
curand_normal4	/usr/local/cuda/include/curand_normal.h	/^QUALIFIERS float4 curand_normal4(curandStatePhilox4_32_10_t *state)$/;"	f
curand_normal4_double	/usr/local/cuda/include/curand_normal.h	/^QUALIFIERS double4 curand_normal4_double(curandStatePhilox4_32_10_t *state)$/;"	f
curand_normal_double	/usr/local/cuda/include/curand_normal.h	/^QUALIFIERS double curand_normal_double(curandStateMRG32k3a_t *state)$/;"	f
curand_normal_double	/usr/local/cuda/include/curand_normal.h	/^QUALIFIERS double curand_normal_double(curandStateMtgp32_t *state)$/;"	f
curand_normal_double	/usr/local/cuda/include/curand_normal.h	/^QUALIFIERS double curand_normal_double(curandStatePhilox4_32_10_t *state)$/;"	f
curand_normal_double	/usr/local/cuda/include/curand_normal.h	/^QUALIFIERS double curand_normal_double(curandStateScrambledSobol32_t *state)$/;"	f
curand_normal_double	/usr/local/cuda/include/curand_normal.h	/^QUALIFIERS double curand_normal_double(curandStateScrambledSobol64_t *state)$/;"	f
curand_normal_double	/usr/local/cuda/include/curand_normal.h	/^QUALIFIERS double curand_normal_double(curandStateSobol32_t *state)$/;"	f
curand_normal_double	/usr/local/cuda/include/curand_normal.h	/^QUALIFIERS double curand_normal_double(curandStateSobol64_t *state)$/;"	f
curand_normal_double	/usr/local/cuda/include/curand_normal.h	/^QUALIFIERS double curand_normal_double(curandStateXORWOW_t *state)$/;"	f
curand_poisson	/usr/local/cuda/include/curand_poisson.h	/^QUALIFIERS unsigned int curand_poisson(curandStateMRG32k3a_t *state, double lambda)$/;"	f
curand_poisson	/usr/local/cuda/include/curand_poisson.h	/^QUALIFIERS unsigned int curand_poisson(curandStateMtgp32_t *state, double lambda)$/;"	f
curand_poisson	/usr/local/cuda/include/curand_poisson.h	/^QUALIFIERS unsigned int curand_poisson(curandStatePhilox4_32_10_t *state, double lambda)$/;"	f
curand_poisson	/usr/local/cuda/include/curand_poisson.h	/^QUALIFIERS unsigned int curand_poisson(curandStateScrambledSobol32_t *state, double lambda)$/;"	f
curand_poisson	/usr/local/cuda/include/curand_poisson.h	/^QUALIFIERS unsigned int curand_poisson(curandStateScrambledSobol64_t *state, double lambda)$/;"	f
curand_poisson	/usr/local/cuda/include/curand_poisson.h	/^QUALIFIERS unsigned int curand_poisson(curandStateSobol32_t *state, double lambda)$/;"	f
curand_poisson	/usr/local/cuda/include/curand_poisson.h	/^QUALIFIERS unsigned int curand_poisson(curandStateSobol64_t *state, double lambda)$/;"	f
curand_poisson	/usr/local/cuda/include/curand_poisson.h	/^QUALIFIERS unsigned int curand_poisson(curandStateXORWOW_t *state, double lambda)$/;"	f
curand_poisson4	/usr/local/cuda/include/curand_poisson.h	/^QUALIFIERS uint4 curand_poisson4(curandStatePhilox4_32_10_t *state, double lambda)$/;"	f
curand_poisson_from_normal	/usr/local/cuda/include/curand_poisson.h	/^QUALIFIERS unsigned int curand_poisson_from_normal(STATE state, double lambda)$/;"	f
curand_poisson_from_normal4	/usr/local/cuda/include/curand_poisson.h	/^QUALIFIERS uint4 curand_poisson_from_normal4(STATE state, double lambda)$/;"	f
curand_poisson_gammainc	/usr/local/cuda/include/curand_poisson.h	/^QUALIFIERS unsigned int curand_poisson_gammainc(T state, float lambda){$/;"	f
curand_poisson_gammainc4	/usr/local/cuda/include/curand_poisson.h	/^QUALIFIERS uint4 curand_poisson_gammainc4(T state, float lambda){$/;"	f
curand_poisson_knuth	/usr/local/cuda/include/curand_poisson.h	/^QUALIFIERS unsigned int curand_poisson_knuth(T *state, float lambda)$/;"	f
curand_poisson_knuth4	/usr/local/cuda/include/curand_poisson.h	/^QUALIFIERS uint4 curand_poisson_knuth4(T *state, float lambda)$/;"	f
curand_uniform	/usr/local/cuda/include/curand_uniform.h	/^QUALIFIERS float curand_uniform(curandStateMRG32k3a_t *state)$/;"	f
curand_uniform	/usr/local/cuda/include/curand_uniform.h	/^QUALIFIERS float curand_uniform(curandStateMtgp32_t *state)$/;"	f
curand_uniform	/usr/local/cuda/include/curand_uniform.h	/^QUALIFIERS float curand_uniform(curandStatePhilox4_32_10_t *state)$/;"	f
curand_uniform	/usr/local/cuda/include/curand_uniform.h	/^QUALIFIERS float curand_uniform(curandStateScrambledSobol32_t *state)$/;"	f
curand_uniform	/usr/local/cuda/include/curand_uniform.h	/^QUALIFIERS float curand_uniform(curandStateScrambledSobol64_t *state)$/;"	f
curand_uniform	/usr/local/cuda/include/curand_uniform.h	/^QUALIFIERS float curand_uniform(curandStateSobol32_t *state)$/;"	f
curand_uniform	/usr/local/cuda/include/curand_uniform.h	/^QUALIFIERS float curand_uniform(curandStateSobol64_t *state)$/;"	f
curand_uniform	/usr/local/cuda/include/curand_uniform.h	/^QUALIFIERS float curand_uniform(curandStateTest_t *state)$/;"	f
curand_uniform	/usr/local/cuda/include/curand_uniform.h	/^QUALIFIERS float curand_uniform(curandStateXORWOW_t *state)$/;"	f
curand_uniform2_double	/usr/local/cuda/include/curand_uniform.h	/^QUALIFIERS double2 curand_uniform2_double(curandStatePhilox4_32_10_t *state)$/;"	f
curand_uniform4	/usr/local/cuda/include/curand_uniform.h	/^QUALIFIERS float4 curand_uniform4(curandStatePhilox4_32_10_t *state)$/;"	f
curand_uniform4_double	/usr/local/cuda/include/curand_uniform.h	/^QUALIFIERS double4 curand_uniform4_double(curandStatePhilox4_32_10_t *state)$/;"	f
curand_uniform_double	/usr/local/cuda/include/curand_uniform.h	/^QUALIFIERS double curand_uniform_double(curandStateMRG32k3a_t *state)$/;"	f
curand_uniform_double	/usr/local/cuda/include/curand_uniform.h	/^QUALIFIERS double curand_uniform_double(curandStateMtgp32_t *state)$/;"	f
curand_uniform_double	/usr/local/cuda/include/curand_uniform.h	/^QUALIFIERS double curand_uniform_double(curandStatePhilox4_32_10_t *state)$/;"	f
curand_uniform_double	/usr/local/cuda/include/curand_uniform.h	/^QUALIFIERS double curand_uniform_double(curandStateScrambledSobol32_t *state)$/;"	f
curand_uniform_double	/usr/local/cuda/include/curand_uniform.h	/^QUALIFIERS double curand_uniform_double(curandStateScrambledSobol64_t *state)$/;"	f
curand_uniform_double	/usr/local/cuda/include/curand_uniform.h	/^QUALIFIERS double curand_uniform_double(curandStateSobol32_t *state)$/;"	f
curand_uniform_double	/usr/local/cuda/include/curand_uniform.h	/^QUALIFIERS double curand_uniform_double(curandStateSobol64_t *state)$/;"	f
curand_uniform_double	/usr/local/cuda/include/curand_uniform.h	/^QUALIFIERS double curand_uniform_double(curandStateTest_t *state)$/;"	f
curand_uniform_double	/usr/local/cuda/include/curand_uniform.h	/^QUALIFIERS double curand_uniform_double(curandStateXORWOW_t *state)$/;"	f
curnand_MRGmatPow2Pow3x3	/usr/local/cuda/include/curand_kernel.h	/^QUALIFIERS void curnand_MRGmatPow2Pow3x3( double in[][3], double o[][3], double m, unsigned long pow )$/;"	f
current	/usr/local/cuda/include/nvml.h	/^    unsigned int current;            \/\/!< PSU current (A)$/;"	m	struct:nvmlPSUInfo_st
current_class	src/compare.c	/^int current_class = 0;$/;"	v
cusolverDnHandle_t	/usr/local/cuda/include/cusolverDn.h	/^typedef struct cusolverDnContext *cusolverDnHandle_t;$/;"	t	typeref:struct:cusolverDnContext
cusolverEigMode_t	/usr/local/cuda/include/cusolver_common.h	/^} cusolverEigMode_t ;$/;"	t	typeref:enum:__anon94
cusolverEigType_t	/usr/local/cuda/include/cusolver_common.h	/^} cusolverEigType_t ;$/;"	t	typeref:enum:__anon93
cusolverRfFactorization_t	/usr/local/cuda/include/cusolverRf.h	/^} cusolverRfFactorization_t;$/;"	t	typeref:enum:__anon89
cusolverRfHandle_t	/usr/local/cuda/include/cusolverRf.h	/^typedef struct cusolverRfCommon *cusolverRfHandle_t;$/;"	t	typeref:struct:cusolverRfCommon
cusolverRfMatrixFormat_t	/usr/local/cuda/include/cusolverRf.h	/^} cusolverRfMatrixFormat_t;$/;"	t	typeref:enum:__anon87
cusolverRfNumericBoostReport_t	/usr/local/cuda/include/cusolverRf.h	/^} cusolverRfNumericBoostReport_t;$/;"	t	typeref:enum:__anon91
cusolverRfResetValuesFastMode_t	/usr/local/cuda/include/cusolverRf.h	/^} cusolverRfResetValuesFastMode_t;$/;"	t	typeref:enum:__anon86
cusolverRfTriangularSolve_t	/usr/local/cuda/include/cusolverRf.h	/^} cusolverRfTriangularSolve_t;$/;"	t	typeref:enum:__anon90
cusolverRfUnitDiagonal_t	/usr/local/cuda/include/cusolverRf.h	/^} cusolverRfUnitDiagonal_t;$/;"	t	typeref:enum:__anon88
cusolverSpHandle_t	/usr/local/cuda/include/cusolverSp.h	/^typedef struct cusolverSpContext *cusolverSpHandle_t;$/;"	t	typeref:struct:cusolverSpContext
cusolverStatus_t	/usr/local/cuda/include/cusolver_common.h	/^} cusolverStatus_t;$/;"	t	typeref:enum:__anon92
cusparseAction_t	/usr/local/cuda/include/cusparse.h	/^} cusparseAction_t;$/;"	t	typeref:enum:__anon97
cusparseAlgMode_t	/usr/local/cuda/include/cusparse.h	/^} cusparseAlgMode_t;$/;"	t	typeref:enum:__anon108
cusparseColorAlg_t	/usr/local/cuda/include/cusparse.h	/^} cusparseColorAlg_t;$/;"	t	typeref:enum:__anon107
cusparseColorInfo_t	/usr/local/cuda/include/cusparse.h	/^typedef struct cusparseColorInfo *cusparseColorInfo_t;$/;"	t	typeref:struct:cusparseColorInfo
cusparseDiagType_t	/usr/local/cuda/include/cusparse.h	/^} cusparseDiagType_t; $/;"	t	typeref:enum:__anon100
cusparseDirection_t	/usr/local/cuda/include/cusparse.h	/^} cusparseDirection_t;$/;"	t	typeref:enum:__anon103
cusparseFillMode_t	/usr/local/cuda/include/cusparse.h	/^} cusparseFillMode_t;$/;"	t	typeref:enum:__anon99
cusparseHandle_t	/usr/local/cuda/include/cusparse.h	/^typedef struct cusparseContext *cusparseHandle_t;$/;"	t	typeref:struct:cusparseContext
cusparseHybMat_t	/usr/local/cuda/include/cusparse.h	/^typedef struct cusparseHybMat *cusparseHybMat_t;$/;"	t	typeref:struct:cusparseHybMat
cusparseHybPartition_t	/usr/local/cuda/include/cusparse.h	/^} cusparseHybPartition_t;$/;"	t	typeref:enum:__anon104
cusparseIndexBase_t	/usr/local/cuda/include/cusparse.h	/^} cusparseIndexBase_t;$/;"	t	typeref:enum:__anon101
cusparseMatDescr_t	/usr/local/cuda/include/cusparse.h	/^typedef struct cusparseMatDescr *cusparseMatDescr_t;$/;"	t	typeref:struct:cusparseMatDescr
cusparseMatrixType_t	/usr/local/cuda/include/cusparse.h	/^} cusparseMatrixType_t;$/;"	t	typeref:enum:__anon98
cusparseOperation_t	/usr/local/cuda/include/cusparse.h	/^} cusparseOperation_t;$/;"	t	typeref:enum:__anon102
cusparsePointerMode_t	/usr/local/cuda/include/cusparse.h	/^} cusparsePointerMode_t;$/;"	t	typeref:enum:__anon96
cusparseSideMode_t	/usr/local/cuda/include/cusparse.h	/^} cusparseSideMode_t;$/;"	t	typeref:enum:__anon106
cusparseSolveAnalysisInfo_t	/usr/local/cuda/include/cusparse.h	/^typedef struct cusparseSolveAnalysisInfo *cusparseSolveAnalysisInfo_t;$/;"	t	typeref:struct:cusparseSolveAnalysisInfo
cusparseSolvePolicy_t	/usr/local/cuda/include/cusparse.h	/^} cusparseSolvePolicy_t;$/;"	t	typeref:enum:__anon105
cusparseStatus_t	/usr/local/cuda/include/cusparse.h	/^} cusparseStatus_t;$/;"	t	typeref:enum:__anon95
cuuint32_t	/usr/local/cuda/include/cuda.h	/^typedef uint32_t cuuint32_t;$/;"	t
cuuint32_t	/usr/local/cuda/include/cuda.h	/^typedef unsigned __int32 cuuint32_t;$/;"	t
cuuint64_t	/usr/local/cuda/include/cuda.h	/^typedef uint64_t cuuint64_t;$/;"	t
cuuint64_t	/usr/local/cuda/include/cuda.h	/^typedef unsigned __int64 cuuint64_t;$/;"	t
cvQF_src	src/image.c	/^IplImage* cvQF_src=NULL;$/;"	v
cyl_bessel_i0	/usr/local/cuda/include/math_functions.hpp	/^__MATH_FUNCTIONS_DECL__ float cyl_bessel_i0(float a)$/;"	f
cyl_bessel_i1	/usr/local/cuda/include/math_functions.hpp	/^__MATH_FUNCTIONS_DECL__ float cyl_bessel_i1(float a)$/;"	f
d	/usr/local/cuda/include/curand_kernel.h	/^    unsigned int d, v[5];$/;"	m	struct:curandStateXORWOW
dVal	/usr/local/cuda/include/nvml.h	/^    double dVal;                    \/\/!< If the value is double$/;"	m	union:nvmlValue_st
dValue	/usr/local/cuda/include/nvToolsExt.h	/^        double dValue;$/;"	m	union:nvtxEventAttributes_v2::payload_t
dadd	/usr/local/cuda/include/device_double_functions.hpp	/^__DEVICE_DOUBLE_FUNCTIONS_DECL__ double dadd(double a, double b, enum cudaRoundMode mode)$/;"	f
data	/usr/local/cuda/include/cudalibxt.h	/^    void *data[MAX_CUDA_DESCRIPTOR_GPUS];    \/\/array of pointers to data, one per GPU$/;"	m	struct:cudaXtDesc_t
data	/usr/local/cuda/include/fatBinaryCtl.h	/^  const unsigned long long* data;$/;"	m	struct:__anon134
data	src/stb_image.h	/^      stbi_uc *data;$/;"	m	struct:__anon16::__anon17
dbox	src/box.h	/^} dbox;$/;"	t	typeref:struct:__anon3
dc_pred	src/stb_image.h	/^      int dc_pred;$/;"	m	struct:__anon16::__anon17
dct_bfly32o	src/stb_image.h	2044;"	d
dct_bfly32o	src/stb_image.h	2178;"	d
dct_bfly32o	src/stb_image.h	2230;"	d
dct_bfly32o	src/stb_image.h	2388;"	d
dct_const	src/stb_image.h	2016;"	d
dct_const	src/stb_image.h	2173;"	d
dct_interleave16	src/stb_image.h	2061;"	d
dct_interleave16	src/stb_image.h	2180;"	d
dct_interleave8	src/stb_image.h	2055;"	d
dct_interleave8	src/stb_image.h	2179;"	d
dct_long_mac	src/stb_image.h	2211;"	d
dct_long_mac	src/stb_image.h	2384;"	d
dct_long_mul	src/stb_image.h	2207;"	d
dct_long_mul	src/stb_image.h	2383;"	d
dct_pass	src/stb_image.h	2066;"	d
dct_pass	src/stb_image.h	2181;"	d
dct_pass	src/stb_image.h	2238;"	d
dct_pass	src/stb_image.h	2389;"	d
dct_rot	src/stb_image.h	2020;"	d
dct_rot	src/stb_image.h	2174;"	d
dct_trn16	src/stb_image.h	2298;"	d
dct_trn16	src/stb_image.h	2320;"	d
dct_trn32	src/stb_image.h	2299;"	d
dct_trn32	src/stb_image.h	2321;"	d
dct_trn64	src/stb_image.h	2300;"	d
dct_trn64	src/stb_image.h	2322;"	d
dct_trn8_16	src/stb_image.h	2344;"	d
dct_trn8_16	src/stb_image.h	2379;"	d
dct_trn8_32	src/stb_image.h	2345;"	d
dct_trn8_32	src/stb_image.h	2380;"	d
dct_trn8_8	src/stb_image.h	2343;"	d
dct_trn8_8	src/stb_image.h	2378;"	d
dct_wadd	src/stb_image.h	2034;"	d
dct_wadd	src/stb_image.h	2176;"	d
dct_wadd	src/stb_image.h	2220;"	d
dct_wadd	src/stb_image.h	2386;"	d
dct_widen	src/stb_image.h	2029;"	d
dct_widen	src/stb_image.h	2175;"	d
dct_widen	src/stb_image.h	2215;"	d
dct_widen	src/stb_image.h	2385;"	d
dct_wsub	src/stb_image.h	2039;"	d
dct_wsub	src/stb_image.h	2177;"	d
dct_wsub	src/stb_image.h	2225;"	d
dct_wsub	src/stb_image.h	2387;"	d
deblocking_filter_control_present_flag	/usr/local/cuda/include/dynlink_cuviddec.h	/^    int deblocking_filter_control_present_flag;$/;"	m	struct:_CUVIDH264PICPARAMS
deblocking_filter_override_enabled_flag	/usr/local/cuda/include/dynlink_cuviddec.h	/^    unsigned char deblocking_filter_override_enabled_flag;$/;"	m	struct:_CUVIDHEVCPICPARAMS
decUtil	/usr/local/cuda/include/nvml.h	/^    nvmlValue_t decUtil;                \/\/!< Decoder Util Value$/;"	m	struct:nvmlVgpuInstanceUtilizationSample_st
decUtil	/usr/local/cuda/include/nvml.h	/^    unsigned int decUtil;                           \/\/!< Decoder Util Value$/;"	m	struct:nvmlVgpuProcessUtilizationSample_st
decUtil	/usr/local/cuda/include/nvml.h	/^    unsigned int decUtil;               \/\/!< Decoder Util Value$/;"	m	struct:nvmlProcessUtilizationSample_st
decode_box	src/box.c	/^box decode_box(box b, box anchor)$/;"	f
deinter_cpu	src/blas.c	/^void deinter_cpu(int NX, float *X, int NY, float *Y, int B, float *OUT)$/;"	f
del_arg	src/utils.c	/^void del_arg(int argc, char **argv, int index)$/;"	f
delta	src/stb_image.h	/^   int    delta[17];   \/\/ old 'firstsymbol' - old 'firstcode'$/;"	m	struct:__anon15
delta_pic_order_always_zero_flag	/usr/local/cuda/include/dynlink_cuviddec.h	/^    int delta_pic_order_always_zero_flag;$/;"	m	struct:_CUVIDH264PICPARAMS
delta_region_box	src/region_layer.c	/^float delta_region_box(box truth, float *x, float *biases, int n, int index, int i, int j, int w, int h, float *delta, float scale, int stride)$/;"	f
delta_region_class	src/region_layer.c	/^void delta_region_class(float *output, float *delta, int index, int class, int classes, tree *hier, float scale, int stride, float *avg_cat)$/;"	f
delta_region_mask	src/region_layer.c	/^void delta_region_mask(float *truth, float *x, int n, int index, float *delta, int stride, int scale)$/;"	f
demo	src/demo.c	/^void demo(char *cfgfile, char *weightfile, float thresh, int cam_index, const char *filename, char **names, int classes, int delay, char *prefix, int avg, float hier, int w, int h, int frames, int fullscreen)$/;"	f
demo	src/demo.c	/^void demo(char *cfgfile, char *weightfile, float thresh, int cam_index, const char *filename, char **names, int classes, int delay, char *prefix, int avg_frames, float hier, int w, int h, int frames, int fullscreen)$/;"	f
demo_alphabet	src/demo.c	/^static image **demo_alphabet;$/;"	v	file:
demo_classes	src/demo.c	/^static int demo_classes;$/;"	v	file:
demo_compare	src/demo.c	/^void demo_compare(char *cfg1, char *weight1, char *cfg2, char *weight2, float thresh, int cam_index, const char *filename, char **names, int classes, int delay, char *prefix, int avg_frames, float hier, int w, int h, int frames, int fullscreen)$/;"	f
demo_detections	src/demo.c	/^static int demo_detections = 0;$/;"	v	file:
demo_done	src/demo.c	/^static int demo_done = 0;$/;"	v	file:
demo_frame	src/demo.c	/^static int demo_frame = 3;$/;"	v	file:
demo_hier	src/demo.c	/^static float demo_hier = .5;$/;"	v	file:
demo_index	src/demo.c	/^static int demo_index = 0;$/;"	v	file:
demo_names	src/demo.c	/^static char **demo_names;$/;"	v	file:
demo_thresh	src/demo.c	/^static float demo_thresh = 0;$/;"	v	file:
demo_time	src/demo.c	/^double demo_time;$/;"	v
denominator	/usr/local/cuda/include/dynlink_nvcuvid.h	/^        unsigned int denominator;           \/**< frame rate denominator (0 = unspecified or variable frame rate) *\/$/;"	m	struct:__anon123::__anon124
denormalize_connected_layer	src/connected_layer.c	/^void denormalize_connected_layer(layer l)$/;"	f
denormalize_convolutional_layer	src/convolutional_layer.c	/^void denormalize_convolutional_layer(convolutional_layer l)$/;"	f
denormalize_deconvolutional_layer	src/deconvolutional_layer.c	/^void denormalize_deconvolutional_layer(layer l)$/;"	f
dependent_slice_segments_enabled_flag	/usr/local/cuda/include/dynlink_cuviddec.h	/^    unsigned char dependent_slice_segments_enabled_flag;$/;"	m	struct:_CUVIDHEVCPICPARAMS
depth	/usr/local/cuda/include/cuda.h	/^    size_t depth;                  \/**< Depth of the resource view *\/$/;"	m	struct:CUDA_RESOURCE_VIEW_DESC_st
depth	/usr/local/cuda/include/cudaEGL.h	/^    unsigned int depth;                 \/**< Depth of first plane *\/$/;"	m	struct:CUeglFrame_st
depth	/usr/local/cuda/include/driver_types.h	/^    size_t                      depth;            \/**< Depth of the resource view *\/$/;"	m	struct:cudaResourceViewDesc
depth	/usr/local/cuda/include/driver_types.h	/^    size_t depth;     \/**< Depth in elements *\/$/;"	m	struct:cudaExtent
dequant	src/stb_image.h	/^   stbi_uc dequant[4][64];$/;"	m	struct:__anon16
derivative	src/box.c	/^dbox derivative(box a, box b)$/;"	f
desc	/usr/local/cuda/include/driver_types.h	/^			struct cudaChannelFormatDesc desc; \/**< Channel descriptor *\/$/;"	m	struct:cudaResourceDesc::__anon109::__anon112	typeref:struct:cudaResourceDesc::__anon109::__anon112::cudaChannelFormatDesc
desc	/usr/local/cuda/include/driver_types.h	/^			struct cudaChannelFormatDesc desc; \/**< Channel descriptor *\/$/;"	m	struct:cudaResourceDesc::__anon109::__anon113	typeref:struct:cudaResourceDesc::__anon109::__anon113::cudaChannelFormatDesc
descriptor	/usr/local/cuda/include/cudalibxt.h	/^    cudaXtDesc *descriptor;     \/\/multi-GPU memory descriptor$/;"	m	struct:cudaLibXtDesc_t
destination_indices	/usr/local/cuda/include/nvgraph.h	/^  int *destination_indices; \/\/ colInd$/;"	m	struct:nvgraphCOOTopology32I_st
destination_indices	/usr/local/cuda/include/nvgraph.h	/^  int *destination_indices; \/\/ colInd$/;"	m	struct:nvgraphCSRTopology32I_st
destination_offsets	/usr/local/cuda/include/nvgraph.h	/^  int *destination_offsets; \/\/ colPtr$/;"	m	struct:nvgraphCSCTopology32I_st
detect_in_thread	src/demo.c	/^void *detect_in_thread(void *ptr)$/;"	f
detect_loop	src/demo.c	/^void *detect_loop(void *ptr)$/;"	f
detectionWindowSize	/usr/local/cuda/include/nppdefs.h	/^    NppiSize detectionWindowSize;  \/**<  detection window size (pixels). *\/$/;"	m	struct:__anon157
detection_layer	src/detection_layer.h	/^typedef layer detection_layer;$/;"	t
determinism	/usr/local/cuda/include/cudnn.h	/^    cudnnDeterminism_t              determinism;$/;"	m	struct:__anon67
determinism	/usr/local/cuda/include/cudnn.h	/^    cudnnDeterminism_t              determinism;$/;"	m	struct:__anon70
determinism	/usr/local/cuda/include/cudnn.h	/^    cudnnDeterminism_t          determinism;$/;"	m	struct:__anon64
devPtr	/usr/local/cuda/include/cuda.h	/^            CUdeviceptr devPtr;               \/**< Device pointer *\/$/;"	m	struct:CUDA_RESOURCE_DESC_st::__anon41::__anon44
devPtr	/usr/local/cuda/include/cuda.h	/^            CUdeviceptr devPtr;               \/**< Device pointer *\/$/;"	m	struct:CUDA_RESOURCE_DESC_st::__anon41::__anon45
devPtr	/usr/local/cuda/include/driver_types.h	/^			void *devPtr;                      \/**< Device pointer *\/$/;"	m	struct:cudaResourceDesc::__anon109::__anon112
devPtr	/usr/local/cuda/include/driver_types.h	/^			void *devPtr;                      \/**< Device pointer *\/$/;"	m	struct:cudaResourceDesc::__anon109::__anon113
device	/usr/local/cuda/include/driver_types.h	/^    int device;$/;"	m	struct:cudaPointerAttributes
device	/usr/local/cuda/include/nvml.h	/^    nvmlDevice_t        device;         \/\/!< Specific device where the event occurred$/;"	m	struct:nvmlEventData_st
device	/usr/local/cuda/include/nvml.h	/^    unsigned int device;             \/\/!< The device's id on the bus, 0 to 31$/;"	m	struct:nvmlPciInfo_st
deviceMemory	/usr/local/cuda/include/nvml.h	/^    unsigned long long deviceMemory; \/\/!< Device memory errors$/;"	m	struct:nvmlEccErrorCounts_st
deviceOverlap	/usr/local/cuda/include/driver_types.h	/^    int    deviceOverlap;              \/**< Device can concurrently copy memory and execute a kernel. Deprecated. Use instead asyncEngineCount. *\/$/;"	m	struct:cudaDeviceProp
devicePointer	/usr/local/cuda/include/driver_types.h	/^    void *devicePointer;$/;"	m	struct:cudaPointerAttributes
device_id	src/gemm_fpga.c	/^static cl_device_id device_id = NULL;$/;"	v	file:
dh	src/box.h	/^    float dx, dy, dw, dh;$/;"	m	struct:__anon3
die	/usr/local/cuda/include/cooperative_groups_helpers.h	111;"	d
die	/usr/local/cuda/include/cooperative_groups_helpers.h	114;"	d
diff_cu_qp_delta_depth	/usr/local/cuda/include/dynlink_cuviddec.h	/^    unsigned char diff_cu_qp_delta_depth;$/;"	m	struct:_CUVIDHEVCPICPARAMS
dim3	/usr/local/cuda/include/vector_types.h	/^    __host__ __device__ dim3(uint3 v) : x(v.x), y(v.y), z(v.z) {}$/;"	f	struct:dim3
dim3	/usr/local/cuda/include/vector_types.h	/^    __host__ __device__ dim3(unsigned int vx = 1, unsigned int vy = 1, unsigned int vz = 1) : x(vx), y(vy), z(vz) {}$/;"	f	struct:dim3
dim3	/usr/local/cuda/include/vector_types.h	/^struct __device_builtin__ dim3$/;"	s
dim3	/usr/local/cuda/include/vector_types.h	/^typedef __device_builtin__ struct dim3 dim3;$/;"	t	typeref:struct:dim3
dim3	src/common.h	/^} dim3;$/;"	t	typeref:struct:__anon5
dintersect	src/box.c	/^dbox dintersect(box a, box b)$/;"	f
diou	src/box.c	/^dbox diou(box a, box b)$/;"	f
direct_8x8_inference_flag	/usr/local/cuda/include/dynlink_cuviddec.h	/^    int direct_8x8_inference_flag;$/;"	m	struct:_CUVIDH264PICPARAMS
direction_vectors	/usr/local/cuda/include/curand_kernel.h	/^    unsigned int direction_vectors[32];$/;"	m	struct:curandStateScrambledSobol32
direction_vectors	/usr/local/cuda/include/curand_kernel.h	/^    unsigned int direction_vectors[32];$/;"	m	struct:curandStateSobol32
direction_vectors	/usr/local/cuda/include/curand_kernel.h	/^    unsigned long long direction_vectors[64];$/;"	m	struct:curandStateScrambledSobol64
direction_vectors	/usr/local/cuda/include/curand_kernel.h	/^    unsigned long long direction_vectors[64];$/;"	m	struct:curandStateSobol64
disable_inter_layer_deblocking_filter_idc	/usr/local/cuda/include/dynlink_cuviddec.h	/^    unsigned char disable_inter_layer_deblocking_filter_idc;$/;"	m	struct:_CUVIDH264SVCEXT
display_area	/usr/local/cuda/include/dynlink_cuviddec.h	/^    } display_area;$/;"	m	struct:_CUVIDDECODECREATEINFO	typeref:struct:_CUVIDDECODECREATEINFO::__anon114
display_area	/usr/local/cuda/include/dynlink_nvcuvid.h	/^    } display_area;$/;"	m	struct:__anon123	typeref:struct:__anon123::__anon125
display_aspect_ratio	/usr/local/cuda/include/dynlink_nvcuvid.h	/^    } display_aspect_ratio;$/;"	m	struct:__anon123	typeref:struct:__anon123::__anon126
display_in_thread	src/demo.c	/^void *display_in_thread(void *ptr)$/;"	f
display_loop	src/demo.c	/^void *display_loop(void *ptr)$/;"	f
dist_array	src/utils.c	/^float dist_array(float *a, float *b, int n, int sub)$/;"	f
distance_from_edge	src/data.h	/^static inline float distance_from_edge(int x, int max)$/;"	f
distort_image	src/image.c	/^void distort_image(image im, float hue, float sat, float val)$/;"	f
divx_flags	/usr/local/cuda/include/dynlink_cuviddec.h	/^    int divx_flags;$/;"	m	struct:_CUVIDMPEG4PICPARAMS
dmul	/usr/local/cuda/include/device_double_functions.hpp	/^__DEVICE_DOUBLE_FUNCTIONS_DECL__ double dmul(double a, double b, enum cudaRoundMode mode)$/;"	f
do_nms	src/box.c	/^void do_nms(box *boxes, float **probs, int total, int classes, float thresh)$/;"	f
do_nms_obj	src/box.c	/^void do_nms_obj(box *boxes, float **probs, int total, int classes, float thresh)$/;"	f
do_nms_sort	src/box.c	/^void do_nms_sort(box *boxes, float **probs, int total, int classes, float thresh)$/;"	f
domain	/usr/local/cuda/include/nvToolsExtMeta.h	/^typedef struct NvtxDomainDestroy  { nvtxDomainHandle_t domain; } NvtxDomainDestroy;$/;"	m	struct:NvtxDomainDestroy
domain	/usr/local/cuda/include/nvToolsExtMeta.h	/^typedef struct NvtxDomainRangePop   { nvtxDomainHandle_t domain; } NvtxDomainRangePop;$/;"	m	struct:NvtxDomainRangePop
domain	/usr/local/cuda/include/nvToolsExtMeta.h	/^typedef struct NvtxDomainRegisterString  { nvtxDomainHandle_t domain; const void* str; } NvtxDomainRegisterString;$/;"	m	struct:NvtxDomainRegisterString
domain	/usr/local/cuda/include/nvToolsExtMeta.h	/^typedef struct NvtxDomainResourceCreate  { nvtxDomainHandle_t domain; const nvtxResourceAttributes_t* attribs; } NvtxDomainResourceCreate;$/;"	m	struct:NvtxDomainResourceCreate
domain	/usr/local/cuda/include/nvToolsExtMeta.h	/^typedef struct NvtxSyncUserCreate  { nvtxDomainHandle_t domain; const nvtxSyncUserAttributes_t* attribs; } NvtxSyncUserCreate;$/;"	m	struct:NvtxSyncUserCreate
domain	/usr/local/cuda/include/nvml.h	/^    unsigned int domain;             \/\/!< The PCI domain on which the device's bus resides, 0 to 0xffffffff$/;"	m	struct:nvmlPciInfo_st
dot_cpu	src/blas.c	/^float dot_cpu(int N, float *X, int INCX, float *Y, int INCY)$/;"	f
double1	/usr/local/cuda/include/vector_types.h	/^struct __device_builtin__ double1$/;"	s
double1	/usr/local/cuda/include/vector_types.h	/^typedef __device_builtin__ struct double1 double1;$/;"	t	typeref:struct:double1
double2	/usr/local/cuda/include/vector_types.h	/^typedef __device_builtin__ struct double2 double2;$/;"	t	typeref:struct:double2
double2int	/usr/local/cuda/include/device_double_functions.hpp	/^__DEVICE_DOUBLE_FUNCTIONS_DECL__ int double2int(double a, enum cudaRoundMode mode)$/;"	f
double2ll	/usr/local/cuda/include/device_double_functions.hpp	/^__DEVICE_DOUBLE_FUNCTIONS_DECL__ long long int double2ll(double a, enum cudaRoundMode mode)$/;"	f
double2uint	/usr/local/cuda/include/device_double_functions.hpp	/^__DEVICE_DOUBLE_FUNCTIONS_DECL__ unsigned int double2uint(double a, enum cudaRoundMode mode)$/;"	f
double2ull	/usr/local/cuda/include/device_double_functions.hpp	/^__DEVICE_DOUBLE_FUNCTIONS_DECL__ unsigned long long int double2ull(double a, enum cudaRoundMode mode)$/;"	f
double3	/usr/local/cuda/include/vector_types.h	/^struct __device_builtin__ double3$/;"	s
double3	/usr/local/cuda/include/vector_types.h	/^typedef __device_builtin__ struct double3 double3;$/;"	t	typeref:struct:double3
double4	/usr/local/cuda/include/vector_types.h	/^typedef __device_builtin__ struct double4 double4;$/;"	t	typeref:struct:double4
dpb	/usr/local/cuda/include/dynlink_cuviddec.h	/^    CUVIDH264DPBENTRY dpb[16];          \/\/ List of reference frames within the DPB$/;"	m	struct:_CUVIDH264PICPARAMS
dquant	/usr/local/cuda/include/dynlink_cuviddec.h	/^    int dquant;$/;"	m	struct:_CUVIDVC1PICPARAMS
draw_bbox	src/image.c	/^void draw_bbox(image a, box bbox, int w, float r, float g, float b)$/;"	f
draw_box	src/image.c	/^void draw_box(image a, int x1, int y1, int x2, int y2, float r, float g, float b)$/;"	f
draw_box_width	src/image.c	/^void draw_box_width(image a, int x1, int y1, int x2, int y2, int w, float r, float g, float b)$/;"	f
draw_detections	src/image.c	/^void draw_detections(image im, int num, float thresh, box *boxes, float **probs, float **masks, char **names, image **alphabet, int classes)$/;"	f
draw_label	src/image.c	/^void draw_label(image a, int r, int c, image label, const float *rgb)$/;"	f
dropout_layer	src/dropout_layer.h	/^typedef layer dropout_layer;$/;"	t
dstArray	/usr/local/cuda/include/cuda.h	/^    CUarray dstArray;           \/**< Destination array reference *\/$/;"	m	struct:CUDA_MEMCPY2D_st
dstArray	/usr/local/cuda/include/cuda.h	/^    CUarray dstArray;           \/**< Destination array reference *\/$/;"	m	struct:CUDA_MEMCPY3D_PEER_st
dstArray	/usr/local/cuda/include/cuda.h	/^    CUarray dstArray;           \/**< Destination array reference *\/$/;"	m	struct:CUDA_MEMCPY3D_st
dstArray	/usr/local/cuda/include/driver_types.h	/^    cudaArray_t            dstArray;  \/**< Destination memory address *\/$/;"	m	struct:cudaMemcpy3DParms
dstArray	/usr/local/cuda/include/driver_types.h	/^    cudaArray_t            dstArray;  \/**< Destination memory address *\/$/;"	m	struct:cudaMemcpy3DPeerParms
dstArray	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    CUarray dstArray;           \/**< Destination array reference *\/$/;"	m	struct:CUDA_MEMCPY2D_st
dstArray	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    CUarray dstArray;           \/**< Destination array reference *\/$/;"	m	struct:CUDA_MEMCPY3D_PEER_st
dstArray	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    CUarray dstArray;           \/**< Destination array reference *\/$/;"	m	struct:CUDA_MEMCPY3D_st
dstContext	/usr/local/cuda/include/cuda.h	/^    CUcontext dstContext;       \/**< Destination context (ignored with dstMemoryType is ::CU_MEMORYTYPE_ARRAY) *\/$/;"	m	struct:CUDA_MEMCPY3D_PEER_st
dstContext	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    CUcontext dstContext;       \/**< Destination context (ignored with dstMemoryType is ::CU_MEMORYTYPE_ARRAY) *\/$/;"	m	struct:CUDA_MEMCPY3D_PEER_st
dstDevice	/usr/local/cuda/include/cuda.h	/^    CUdeviceptr dstDevice;      \/**< Destination device pointer *\/$/;"	m	struct:CUDA_MEMCPY2D_st
dstDevice	/usr/local/cuda/include/cuda.h	/^    CUdeviceptr dstDevice;      \/**< Destination device pointer *\/$/;"	m	struct:CUDA_MEMCPY3D_PEER_st
dstDevice	/usr/local/cuda/include/cuda.h	/^    CUdeviceptr dstDevice;      \/**< Destination device pointer *\/$/;"	m	struct:CUDA_MEMCPY3D_st
dstDevice	/usr/local/cuda/include/driver_types.h	/^    int                    dstDevice; \/**< Destination device *\/$/;"	m	struct:cudaMemcpy3DPeerParms
dstDevice	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    CUdeviceptr dstDevice;      \/**< Destination device pointer *\/$/;"	m	struct:CUDA_MEMCPY2D_st
dstDevice	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    CUdeviceptr dstDevice;      \/**< Destination device pointer *\/$/;"	m	struct:CUDA_MEMCPY3D_PEER_st
dstDevice	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    CUdeviceptr dstDevice;      \/**< Destination device pointer *\/$/;"	m	struct:CUDA_MEMCPY3D_st
dstHeight	/usr/local/cuda/include/cuda.h	/^    size_t dstHeight;           \/**< Destination height (ignored when dst is array; may be 0 if Depth==1) *\/$/;"	m	struct:CUDA_MEMCPY3D_PEER_st
dstHeight	/usr/local/cuda/include/cuda.h	/^    size_t dstHeight;           \/**< Destination height (ignored when dst is array; may be 0 if Depth==1) *\/$/;"	m	struct:CUDA_MEMCPY3D_st
dstHeight	/usr/local/cuda/include/cuda.h	/^    unsigned int dstHeight;     \/**< Destination height (ignored when dst is array; may be 0 if Depth==1) *\/$/;"	m	struct:CUDA_MEMCPY3D_st
dstHeight	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    size_t dstHeight;           \/**< Destination height (ignored when dst is array; may be 0 if Depth==1) *\/$/;"	m	struct:CUDA_MEMCPY3D_PEER_st
dstHeight	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    size_t dstHeight;           \/**< Destination height (ignored when dst is array; may be 0 if Depth==1) *\/$/;"	m	struct:CUDA_MEMCPY3D_st
dstHeight	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    unsigned int dstHeight;     \/**< Destination height (ignored when dst is array; may be 0 if Depth==1) *\/$/;"	m	struct:CUDA_MEMCPY3D_st
dstHost	/usr/local/cuda/include/cuda.h	/^    void *dstHost;              \/**< Destination host pointer *\/$/;"	m	struct:CUDA_MEMCPY2D_st
dstHost	/usr/local/cuda/include/cuda.h	/^    void *dstHost;              \/**< Destination host pointer *\/$/;"	m	struct:CUDA_MEMCPY3D_PEER_st
dstHost	/usr/local/cuda/include/cuda.h	/^    void *dstHost;              \/**< Destination host pointer *\/$/;"	m	struct:CUDA_MEMCPY3D_st
dstHost	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    void *dstHost;              \/**< Destination host pointer *\/$/;"	m	struct:CUDA_MEMCPY2D_st
dstHost	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    void *dstHost;              \/**< Destination host pointer *\/$/;"	m	struct:CUDA_MEMCPY3D_PEER_st
dstHost	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    void *dstHost;              \/**< Destination host pointer *\/$/;"	m	struct:CUDA_MEMCPY3D_st
dstLOD	/usr/local/cuda/include/cuda.h	/^    size_t dstLOD;              \/**< Destination LOD *\/$/;"	m	struct:CUDA_MEMCPY3D_PEER_st
dstLOD	/usr/local/cuda/include/cuda.h	/^    size_t dstLOD;              \/**< Destination LOD *\/$/;"	m	struct:CUDA_MEMCPY3D_st
dstLOD	/usr/local/cuda/include/cuda.h	/^    unsigned int dstLOD;        \/**< Destination LOD *\/$/;"	m	struct:CUDA_MEMCPY3D_st
dstLOD	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    size_t dstLOD;              \/**< Destination LOD *\/$/;"	m	struct:CUDA_MEMCPY3D_PEER_st
dstLOD	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    size_t dstLOD;              \/**< Destination LOD *\/$/;"	m	struct:CUDA_MEMCPY3D_st
dstLOD	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    unsigned int dstLOD;        \/**< Destination LOD *\/$/;"	m	struct:CUDA_MEMCPY3D_st
dstMemoryType	/usr/local/cuda/include/cuda.h	/^    CUmemorytype dstMemoryType; \/**< Destination memory type (host, device, array) *\/$/;"	m	struct:CUDA_MEMCPY2D_st
dstMemoryType	/usr/local/cuda/include/cuda.h	/^    CUmemorytype dstMemoryType; \/**< Destination memory type (host, device, array) *\/$/;"	m	struct:CUDA_MEMCPY3D_PEER_st
dstMemoryType	/usr/local/cuda/include/cuda.h	/^    CUmemorytype dstMemoryType; \/**< Destination memory type (host, device, array) *\/$/;"	m	struct:CUDA_MEMCPY3D_st
dstMemoryType	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    CUmemorytype dstMemoryType; \/**< Destination memory type (host, device, array) *\/$/;"	m	struct:CUDA_MEMCPY2D_st
dstMemoryType	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    CUmemorytype dstMemoryType; \/**< Destination memory type (host, device, array) *\/$/;"	m	struct:CUDA_MEMCPY3D_PEER_st
dstMemoryType	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    CUmemorytype dstMemoryType; \/**< Destination memory type (host, device, array) *\/$/;"	m	struct:CUDA_MEMCPY3D_st
dstPitch	/usr/local/cuda/include/cuda.h	/^    size_t dstPitch;            \/**< Destination pitch (ignored when dst is array) *\/$/;"	m	struct:CUDA_MEMCPY2D_st
dstPitch	/usr/local/cuda/include/cuda.h	/^    size_t dstPitch;            \/**< Destination pitch (ignored when dst is array) *\/$/;"	m	struct:CUDA_MEMCPY3D_PEER_st
dstPitch	/usr/local/cuda/include/cuda.h	/^    size_t dstPitch;            \/**< Destination pitch (ignored when dst is array) *\/$/;"	m	struct:CUDA_MEMCPY3D_st
dstPitch	/usr/local/cuda/include/cuda.h	/^    unsigned int dstPitch;      \/**< Destination pitch (ignored when dst is array) *\/$/;"	m	struct:CUDA_MEMCPY2D_st
dstPitch	/usr/local/cuda/include/cuda.h	/^    unsigned int dstPitch;      \/**< Destination pitch (ignored when dst is array) *\/$/;"	m	struct:CUDA_MEMCPY3D_st
dstPitch	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    size_t dstPitch;            \/**< Destination pitch (ignored when dst is array) *\/$/;"	m	struct:CUDA_MEMCPY2D_st
dstPitch	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    size_t dstPitch;            \/**< Destination pitch (ignored when dst is array) *\/$/;"	m	struct:CUDA_MEMCPY3D_PEER_st
dstPitch	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    size_t dstPitch;            \/**< Destination pitch (ignored when dst is array) *\/$/;"	m	struct:CUDA_MEMCPY3D_st
dstPitch	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    unsigned int dstPitch;      \/**< Destination pitch (ignored when dst is array) *\/$/;"	m	struct:CUDA_MEMCPY2D_st
dstPitch	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    unsigned int dstPitch;      \/**< Destination pitch (ignored when dst is array) *\/$/;"	m	struct:CUDA_MEMCPY3D_st
dstPos	/usr/local/cuda/include/driver_types.h	/^    struct cudaPos         dstPos;    \/**< Destination position offset *\/$/;"	m	struct:cudaMemcpy3DParms	typeref:struct:cudaMemcpy3DParms::cudaPos
dstPos	/usr/local/cuda/include/driver_types.h	/^    struct cudaPos         dstPos;    \/**< Destination position offset *\/$/;"	m	struct:cudaMemcpy3DPeerParms	typeref:struct:cudaMemcpy3DPeerParms::cudaPos
dstPtr	/usr/local/cuda/include/driver_types.h	/^    struct cudaPitchedPtr  dstPtr;    \/**< Pitched destination memory address *\/$/;"	m	struct:cudaMemcpy3DParms	typeref:struct:cudaMemcpy3DParms::cudaPitchedPtr
dstPtr	/usr/local/cuda/include/driver_types.h	/^    struct cudaPitchedPtr  dstPtr;    \/**< Pitched destination memory address *\/$/;"	m	struct:cudaMemcpy3DPeerParms	typeref:struct:cudaMemcpy3DPeerParms::cudaPitchedPtr
dstXInBytes	/usr/local/cuda/include/cuda.h	/^    size_t dstXInBytes;         \/**< Destination X in bytes *\/$/;"	m	struct:CUDA_MEMCPY2D_st
dstXInBytes	/usr/local/cuda/include/cuda.h	/^    size_t dstXInBytes;         \/**< Destination X in bytes *\/$/;"	m	struct:CUDA_MEMCPY3D_PEER_st
dstXInBytes	/usr/local/cuda/include/cuda.h	/^    size_t dstXInBytes;         \/**< Destination X in bytes *\/$/;"	m	struct:CUDA_MEMCPY3D_st
dstXInBytes	/usr/local/cuda/include/cuda.h	/^    unsigned int dstXInBytes;   \/**< Destination X in bytes *\/$/;"	m	struct:CUDA_MEMCPY2D_st
dstXInBytes	/usr/local/cuda/include/cuda.h	/^    unsigned int dstXInBytes;   \/**< Destination X in bytes *\/$/;"	m	struct:CUDA_MEMCPY3D_st
dstXInBytes	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    size_t dstXInBytes;         \/**< Destination X in bytes *\/$/;"	m	struct:CUDA_MEMCPY2D_st
dstXInBytes	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    size_t dstXInBytes;         \/**< Destination X in bytes *\/$/;"	m	struct:CUDA_MEMCPY3D_PEER_st
dstXInBytes	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    size_t dstXInBytes;         \/**< Destination X in bytes *\/$/;"	m	struct:CUDA_MEMCPY3D_st
dstXInBytes	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    unsigned int dstXInBytes;   \/**< Destination X in bytes *\/$/;"	m	struct:CUDA_MEMCPY2D_st
dstXInBytes	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    unsigned int dstXInBytes;   \/**< Destination X in bytes *\/$/;"	m	struct:CUDA_MEMCPY3D_st
dstY	/usr/local/cuda/include/cuda.h	/^    size_t dstY;                \/**< Destination Y *\/$/;"	m	struct:CUDA_MEMCPY2D_st
dstY	/usr/local/cuda/include/cuda.h	/^    size_t dstY;                \/**< Destination Y *\/$/;"	m	struct:CUDA_MEMCPY3D_PEER_st
dstY	/usr/local/cuda/include/cuda.h	/^    size_t dstY;                \/**< Destination Y *\/$/;"	m	struct:CUDA_MEMCPY3D_st
dstY	/usr/local/cuda/include/cuda.h	/^    unsigned int dstY;          \/**< Destination Y *\/$/;"	m	struct:CUDA_MEMCPY2D_st
dstY	/usr/local/cuda/include/cuda.h	/^    unsigned int dstY;          \/**< Destination Y *\/$/;"	m	struct:CUDA_MEMCPY3D_st
dstY	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    size_t dstY;                \/**< Destination Y *\/$/;"	m	struct:CUDA_MEMCPY2D_st
dstY	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    size_t dstY;                \/**< Destination Y *\/$/;"	m	struct:CUDA_MEMCPY3D_PEER_st
dstY	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    size_t dstY;                \/**< Destination Y *\/$/;"	m	struct:CUDA_MEMCPY3D_st
dstY	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    unsigned int dstY;          \/**< Destination Y *\/$/;"	m	struct:CUDA_MEMCPY2D_st
dstY	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    unsigned int dstY;          \/**< Destination Y *\/$/;"	m	struct:CUDA_MEMCPY3D_st
dstZ	/usr/local/cuda/include/cuda.h	/^    size_t dstZ;                \/**< Destination Z *\/$/;"	m	struct:CUDA_MEMCPY3D_PEER_st
dstZ	/usr/local/cuda/include/cuda.h	/^    size_t dstZ;                \/**< Destination Z *\/$/;"	m	struct:CUDA_MEMCPY3D_st
dstZ	/usr/local/cuda/include/cuda.h	/^    unsigned int dstZ;          \/**< Destination Z *\/$/;"	m	struct:CUDA_MEMCPY3D_st
dstZ	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    size_t dstZ;                \/**< Destination Z *\/$/;"	m	struct:CUDA_MEMCPY3D_PEER_st
dstZ	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    size_t dstZ;                \/**< Destination Z *\/$/;"	m	struct:CUDA_MEMCPY3D_st
dstZ	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    unsigned int dstZ;          \/**< Destination Z *\/$/;"	m	struct:CUDA_MEMCPY3D_st
dsub	/usr/local/cuda/include/device_double_functions.hpp	/^__DEVICE_DOUBLE_FUNCTIONS_DECL__ double dsub(double a, double b, enum cudaRoundMode mode)$/;"	f
dunion	src/box.c	/^dbox dunion(box a, box b)$/;"	f
dw	src/box.h	/^    float dx, dy, dw, dh;$/;"	m	struct:__anon3
dx	src/box.h	/^    float dx, dy, dw, dh;$/;"	m	struct:__anon3
dy	src/box.h	/^    float dx, dy, dw, dh;$/;"	m	struct:__anon3
eKind	/usr/local/cuda/include/nppi_compression_functions.h	/^    enum NppiJpegDecodeJobKind eKind;$/;"	m	struct:__anon166	typeref:enum:__anon166::NppiJpegDecodeJobKind
eflags	src/stb_image.h	/^   int flags, bgindex, ratio, transparent, eflags;$/;"	m	struct:__anon26
eglColorFormat	/usr/local/cuda/include/cudaEGL.h	/^    CUeglColorFormat eglColorFormat;    \/**< CUDA EGL Color Format*\/$/;"	m	struct:CUeglFrame_st
elo	src/compare.c	/^    float elo;$/;"	m	struct:__anon7	file:
elo_comparator	src/compare.c	/^int elo_comparator(const void*a, const void *b)$/;"	f
elos	src/compare.c	/^    float *elos;$/;"	m	struct:__anon7	file:
elu_activate	src/activations.h	/^static inline float elu_activate(float x){return (x >= 0)*x + (x < 0)*(exp(x)-1);}$/;"	f
elu_gradient	src/activations.h	/^static inline float elu_gradient(float x){return (x >= 0) + (x < 0)*(x + 1);}$/;"	f
embed_image	src/image.c	/^void embed_image(image source, image dest, int dx, int dy)$/;"	f
encUtil	/usr/local/cuda/include/nvml.h	/^    nvmlValue_t encUtil;                \/\/!< Encoder Util Value$/;"	m	struct:nvmlVgpuInstanceUtilizationSample_st
encUtil	/usr/local/cuda/include/nvml.h	/^    unsigned int encUtil;                           \/\/!< Encoder Util Value$/;"	m	struct:nvmlVgpuProcessUtilizationSample_st
encUtil	/usr/local/cuda/include/nvml.h	/^    unsigned int encUtil;               \/\/!< Encoder Util Value$/;"	m	struct:nvmlProcessUtilizationSample_st
encode_box	src/box.c	/^box encode_box(box b, box anchor)$/;"	f
entropy_coding_mode_flag	/usr/local/cuda/include/dynlink_cuviddec.h	/^    int entropy_coding_mode_flag;$/;"	m	struct:_CUVIDH264PICPARAMS
entropy_coding_sync_enabled_flag	/usr/local/cuda/include/dynlink_cuviddec.h	/^    unsigned char entropy_coding_sync_enabled_flag;$/;"	m	struct:_CUVIDHEVCPICPARAMS
entry_index	src/region_layer.c	/^int entry_index(layer l, int batch, int location, int entry)$/;"	f
eob_run	src/stb_image.h	/^   int            eob_run;$/;"	m	struct:__anon16
eof	src/stb_image.h	/^   int      (*eof)   (void *user);                       \/\/ returns nonzero if we are at end of file\/data$/;"	m	struct:__anon12
erf	/usr/local/cuda/include/math_functions.hpp	/^__MATH_FUNCTIONS_DECL__ float erf(float a)$/;"	f
erfc	/usr/local/cuda/include/math_functions.hpp	/^__MATH_FUNCTIONS_DECL__ float erfc(float a)$/;"	f
erfcinv	/usr/local/cuda/include/math_functions.hpp	/^__MATH_FUNCTIONS_DECL__ float erfcinv(float a)$/;"	f
erfcinv	/usr/local/cuda/include/math_functions_dbl_ptx3.hpp	/^__MATH_FUNCTIONS_DBL_PTX3_DECL__ double erfcinv(double a)$/;"	f
erfcinvf	/usr/local/cuda/include/math_functions.hpp	/^__MATH_FUNCTIONS_DECL__ float erfcinvf(float a) \/* __THROW *\/$/;"	f
erfcx	/usr/local/cuda/include/math_functions.hpp	/^__MATH_FUNCTIONS_DECL__ float erfcx(float a)$/;"	f
erfcx	/usr/local/cuda/include/math_functions_dbl_ptx3.hpp	/^__MATH_FUNCTIONS_DBL_PTX3_DECL__ double erfcx(double a)  $/;"	f
erfcxf	/usr/local/cuda/include/math_functions.hpp	/^__MATH_FUNCTIONS_DECL__ float erfcxf(float a) \/* __THROW *\/$/;"	f
erfinv	/usr/local/cuda/include/math_functions.hpp	/^__MATH_FUNCTIONS_DECL__ float erfinv(float a)$/;"	f
erfinv	/usr/local/cuda/include/math_functions_dbl_ptx3.hpp	/^__MATH_FUNCTIONS_DBL_PTX3_DECL__ double erfinv(double a)$/;"	f
erfinvf	/usr/local/cuda/include/math_functions.hpp	/^__MATH_FUNCTIONS_DECL__ float erfinvf(float a) \/* __THROW *\/$/;"	f
error	src/utils.c	/^void error(const char *s)$/;"	f
errorResilient	/usr/local/cuda/include/dynlink_cuviddec.h	/^    unsigned short errorResilient : 1;$/;"	m	struct:_CUVIDVP9PICPARAMS
errors	src/sdl_image.c	/^static errors(const char* s){perror(s);assert(0);exit(-1);}$/;"	f	file:
eventAttrib	/usr/local/cuda/include/nvToolsExtMeta.h	/^typedef struct NvtxMarkEx{ const nvtxEventAttributes_t* eventAttrib; } NvtxMarkEx;$/;"	m	struct:NvtxMarkEx
eventAttrib	/usr/local/cuda/include/nvToolsExtMeta.h	/^typedef struct NvtxRangePushEx  { const nvtxEventAttributes_t* eventAttrib; } NvtxRangePushEx;$/;"	m	struct:NvtxRangePushEx
eventAttrib	/usr/local/cuda/include/nvToolsExtMeta.h	/^typedef struct NvtxRangeStartEx { const nvtxEventAttributes_t* eventAttrib; } NvtxRangeStartEx;$/;"	m	struct:NvtxRangeStartEx
eventData	/usr/local/cuda/include/nvml.h	/^    unsigned long long  eventData;      \/\/!< Stores last XID error for the device in the event of nvmlEventTypeXidCriticalError, $/;"	m	struct:nvmlEventData_st
eventType	/usr/local/cuda/include/nvml.h	/^    unsigned long long  eventType;      \/\/!< Information about what specific event occurred$/;"	m	struct:nvmlEventData_st
evs_max_iter	/usr/local/cuda/include/nvgraph.h	/^       int evs_max_iter; \/\/ maximum number of iterations of the eigensolver$/;"	m	struct:SpectralClusteringParameter
evs_tolerance	/usr/local/cuda/include/nvgraph.h	/^       float evs_tolerance; \/\/ tolerance of the eigensolver$/;"	m	struct:SpectralClusteringParameter
exclusive_image	src/data.c	/^void exclusive_image(image src)$/;"	f
exp	/usr/local/cuda/include/math_functions.hpp	/^__host__ __device__ __cudart_builtin__ float     exp(float in)           { return expf(in); }$/;"	f
exp10	/usr/local/cuda/include/math_functions.hpp	/^__MATH_FUNCTIONS_DECL__ float exp10(float a)$/;"	f
exp2	/usr/local/cuda/include/math_functions.hpp	/^__MATH_FUNCTIONS_DECL__ float exp2(float a)$/;"	f
expanded	src/stb_image.h	/^   stbi_uc *idata, *expanded, *out;$/;"	m	struct:__anon22
expm1	/usr/local/cuda/include/math_functions.hpp	/^__MATH_FUNCTIONS_DECL__ float expm1(float a)$/;"	f
exposure_image	src/image.c	/^void exposure_image(image im, float sat)$/;"	f
extended_dmv	/usr/local/cuda/include/dynlink_cuviddec.h	/^    int extended_dmv;$/;"	m	struct:_CUVIDVC1PICPARAMS
extended_mv	/usr/local/cuda/include/dynlink_cuviddec.h	/^    int extended_mv;$/;"	m	struct:_CUVIDVC1PICPARAMS
extended_spatial_scalability_idc	/usr/local/cuda/include/dynlink_cuviddec.h	/^    unsigned char extended_spatial_scalability_idc;$/;"	m	struct:_CUVIDH264SVCEXT
extent	/usr/local/cuda/include/driver_types.h	/^    struct cudaExtent      extent;    \/**< Requested memory copy size *\/$/;"	m	struct:cudaMemcpy3DParms	typeref:struct:cudaMemcpy3DParms::cudaExtent
extent	/usr/local/cuda/include/driver_types.h	/^    struct cudaExtent      extent;    \/**< Requested memory copy size *\/$/;"	m	struct:cudaMemcpy3DPeerParms	typeref:struct:cudaMemcpy3DPeerParms::cudaExtent
f	/usr/local/cuda/include/driver_types.h	/^    enum cudaChannelFormatKind f; \/**< Channel format kind *\/$/;"	m	struct:cudaChannelFormatDesc	typeref:enum:cudaChannelFormatDesc::cudaChannelFormatKind
fValue	/usr/local/cuda/include/nvToolsExt.h	/^        float fValue;$/;"	m	union:nvtxEventAttributes_v2::payload_t
f_code	/usr/local/cuda/include/dynlink_cuviddec.h	/^    int f_code[2][2];$/;"	m	struct:_CUVIDMPEG2PICPARAMS
fabs	/usr/local/cuda/include/math_functions.hpp	/^__host__ __device__ __cudart_builtin__ float     fabs(float in)          { return fabsf(in); }$/;"	f
factor1	/usr/local/cuda/include/cufftXt.h	/^    long long int factor1;$/;"	m	struct:cufftXt1dFactors_t
factor1Mask	/usr/local/cuda/include/cufftXt.h	/^    long long int factor1Mask;$/;"	m	struct:cufftXt1dFactors_t
factor1Shift	/usr/local/cuda/include/cufftXt.h	/^    int factor1Shift;$/;"	m	struct:cufftXt1dFactors_t
factor2	/usr/local/cuda/include/cufftXt.h	/^    long long int factor2;$/;"	m	struct:cufftXt1dFactors_t
factor2Mask	/usr/local/cuda/include/cufftXt.h	/^    long long int factor2Mask;$/;"	m	struct:cufftXt1dFactors_t
factor2Shift	/usr/local/cuda/include/cufftXt.h	/^    int factor2Shift;$/;"	m	struct:cufftXt1dFactors_t
fans	/usr/local/cuda/include/nvml.h	/^    nvmlUnitFanInfo_t fans[24];      \/\/!< Fan speed data for each fan$/;"	m	struct:nvmlUnitFanSpeeds_st
fast	src/stb_image.h	/^   stbi__uint16 fast[1 << STBI__ZFAST_BITS];$/;"	m	struct:__anon19
fast	src/stb_image.h	/^   stbi_uc  fast[1 << FAST_BITS];$/;"	m	struct:__anon15
fast_ac	src/stb_image.h	/^   stbi__int16 fast_ac[4][1 << FAST_BITS];$/;"	m	struct:__anon16
fastuvmc	/usr/local/cuda/include/dynlink_cuviddec.h	/^    int fastuvmc;$/;"	m	struct:_CUVIDVC1PICPARAMS
fatBinaryCodeKind	/usr/local/cuda/include/fatbinary.h	/^} fatBinaryCodeKind;$/;"	t	typeref:enum:__anon135
fatBinaryCtlError_t	/usr/local/cuda/include/fatBinaryCtl.h	/^} fatBinaryCtlError_t;$/;"	t	typeref:enum:__anon132
fatBinary_AvoidPTX	/usr/local/cuda/include/fatBinaryCtl.h	/^  fatBinary_AvoidPTX,        \/* use sass if possible for compile-time savings *\/$/;"	e	enum:__anon133
fatBinary_CompilationPolicy	/usr/local/cuda/include/fatBinaryCtl.h	/^} fatBinary_CompilationPolicy;$/;"	t	typeref:enum:__anon133
fatBinary_ForcePTX	/usr/local/cuda/include/fatBinaryCtl.h	/^  fatBinary_ForcePTX,        \/* use ptx (mainly for testing) *\/$/;"	e	enum:__anon133
fatBinary_JITIfNotMatch	/usr/local/cuda/include/fatBinaryCtl.h	/^  fatBinary_JITIfNotMatch,   \/* use ptx if arch doesn't match *\/$/;"	e	enum:__anon133
fatBinary_LinkCompatible	/usr/local/cuda/include/fatBinaryCtl.h	/^  fatBinary_LinkCompatible,  \/* use sass if link-compatible *\/$/;"	e	enum:__anon133
fatBinary_PreferBestCode	/usr/local/cuda/include/fatBinaryCtl.h	/^  fatBinary_PreferBestCode,  \/* default *\/$/;"	e	enum:__anon133
fatBinary_PreferIr	/usr/local/cuda/include/fatBinaryCtl.h	/^  fatBinary_PreferIr,        \/* choose IR when available *\/$/;"	e	enum:__anon133
fatbinary_INCLUDED	/usr/local/cuda/include/fatbinary.h	16;"	d
fatbinaryctl_INCLUDED	/usr/local/cuda/include/fatBinaryCtl.h	16;"	d
fdim	/usr/local/cuda/include/math_functions.hpp	/^__MATH_FUNCTIONS_DECL__ float fdim(float a, float b)$/;"	f
fdivide	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ double fdivide(double a, double b)$/;"	f
fdividef	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ float fdividef(float a, float b)$/;"	f
featureCode	/usr/local/cuda/include/nvml.h	/^    nvmlGridLicenseFeatureCode_t    featureCode;         \/\/<! Licensed feature code$/;"	m	struct:nvmlGridLicensableFeature_st
featureState	/usr/local/cuda/include/nvml.h	/^    unsigned int                    featureState;        \/\/<! Non-zero if feature is currently licensed, otherwise zero$/;"	m	struct:nvmlGridLicensableFeature_st
fetch_in_thread	src/demo.c	/^void *fetch_in_thread(void *ptr)$/;"	f
fftw_complex	/usr/local/cuda/include/cufftw.h	/^  typedef double _Complex fftw_complex;$/;"	t
fftw_complex	/usr/local/cuda/include/cufftw.h	/^  typedef double fftw_complex[2];$/;"	t
fftw_iodim	/usr/local/cuda/include/cufftw.h	/^} fftw_iodim;$/;"	t	typeref:struct:__anon84
fftw_iodim64	/usr/local/cuda/include/cufftw.h	/^} fftw_iodim64;$/;"	t	typeref:struct:__anon85
fftw_plan	/usr/local/cuda/include/cufftw.h	/^typedef void *fftw_plan;$/;"	t
fftwf_complex	/usr/local/cuda/include/cufftw.h	/^  typedef float _Complex fftwf_complex;$/;"	t
fftwf_complex	/usr/local/cuda/include/cufftw.h	/^  typedef float fftwf_complex[2];$/;"	t
fftwf_iodim	/usr/local/cuda/include/cufftw.h	/^typedef fftw_iodim fftwf_iodim;$/;"	t
fftwf_iodim64	/usr/local/cuda/include/cufftw.h	/^typedef fftw_iodim64 fftwf_iodim64;$/;"	t
fftwf_plan	/usr/local/cuda/include/cufftw.h	/^typedef void *fftwf_plan;$/;"	t
fgetl	src/utils.c	/^char *fgetl(FILE *fp)$/;"	f
fieldId	/usr/local/cuda/include/nvml.h	/^    unsigned int fieldId;       \/\/!< ID of the NVML field to retrieve. This must be set before any call that uses this struct. See the constants starting with NVML_FI_ above.$/;"	m	struct:nvmlFieldValue_st
field_pic_flag	/usr/local/cuda/include/dynlink_cuviddec.h	/^    int field_pic_flag;                   \/**< 0=frame picture, 1=field picture *\/$/;"	m	struct:_CUVIDPICPARAMS
file_error	src/utils.c	/^void file_error(char *s)$/;"	f
filename	src/compare.c	/^    char *filename;$/;"	m	struct:__anon7	file:
filename_or_fatbins	/usr/local/cuda/include/fatBinaryCtl.h	/^  void *filename_or_fatbins;  \/* version 1: offline filename,$/;"	m	struct:__anon134
fill_cpu	src/blas.c	/^void fill_cpu(int N, float ALPHA, float *X, int INCX)$/;"	f
fill_hierarchy	src/data.c	/^void fill_hierarchy(float *truth, int k, tree *hierarchy)$/;"	f
fill_image	src/image.c	/^void fill_image(image m, float s)$/;"	f
fill_image_from_stream	src/image.c	/^int fill_image_from_stream(CvCapture *cap, image im)$/;"	f
fill_truth	src/data.c	/^void fill_truth(char *path, char **labels, int k, float *truth)$/;"	f
fill_truth_captcha	src/data.c	/^void fill_truth_captcha(char *path, int n, float *truth)$/;"	f
fill_truth_detection	src/data.c	/^void fill_truth_detection(char *path, int num_boxes, float *truth, int classes, int flip, float dx, float dy, float sx, float sy)$/;"	f
fill_truth_detection_remapping	src/data.c	/^void fill_truth_detection_remapping(char *path, int num_boxes, float *truth, int classes, int flip, float dx, float dy, float sx, float sy, int *id_remap)$/;"	f
fill_truth_iseg	src/data.c	/^void fill_truth_iseg(char *path, int num_boxes, float *truth, int classes, int w, int h, augment_args aug, int flip, int mw, int mh)$/;"	f
fill_truth_region	src/data.c	/^void fill_truth_region(char *path, float *truth, int classes, int num_boxes, int flip, float dx, float dy, float sx, float sy)$/;"	f
fill_truth_swag	src/data.c	/^void fill_truth_swag(char *path, float *truth, int classes, int flip, float dx, float dy, float sx, float sy)$/;"	f
filterMode	/usr/local/cuda/include/cuda.h	/^    CUfilter_mode filterMode;       \/**< Filter mode *\/$/;"	m	struct:CUDA_TEXTURE_DESC_st
filterMode	/usr/local/cuda/include/texture_types.h	/^    enum cudaTextureFilterMode   filterMode;$/;"	m	struct:textureReference	typeref:enum:textureReference::cudaTextureFilterMode
filterMode	/usr/local/cuda/include/texture_types.h	/^    enum cudaTextureFilterMode  filterMode;$/;"	m	struct:cudaTextureDesc	typeref:enum:cudaTextureDesc::cudaTextureFilterMode
find_arg	src/utils.c	/^int find_arg(int argc, char* argv[], char *arg)$/;"	f
find_char_arg	src/utils.c	/^char *find_char_arg(int argc, char **argv, char *arg, char *def)$/;"	f
find_float_arg	src/utils.c	/^float find_float_arg(int argc, char **argv, char *arg, float def)$/;"	f
find_int_arg	src/utils.c	/^int find_int_arg(int argc, char **argv, char *arg, int def)$/;"	f
find_replace	src/utils.c	/^void find_replace(char *str, char *orig, char *rep, char *output)$/;"	f
find_replace_paths	src/data.c	/^char **find_replace_paths(char **paths, int n, char *find, char *replace)$/;"	f
finterpflag	/usr/local/cuda/include/dynlink_cuviddec.h	/^    int finterpflag;$/;"	m	struct:_CUVIDVC1PICPARAMS
firmwareVersion	/usr/local/cuda/include/nvml.h	/^    char firmwareVersion[32];$/;"	m	struct:nvmlHwbcEntry_st
firmwareVersion	/usr/local/cuda/include/nvml.h	/^    char firmwareVersion[96];           \/\/!< Firmware version$/;"	m	struct:nvmlUnitInfo_st
first	src/stb_image.h	/^   stbi_uc first;$/;"	m	struct:__anon25
firstLayer	/usr/local/cuda/include/cuda.h	/^    unsigned int firstLayer;       \/**< First layer index *\/$/;"	m	struct:CUDA_RESOURCE_VIEW_DESC_st
firstLayer	/usr/local/cuda/include/driver_types.h	/^    unsigned int                firstLayer;       \/**< First layer index *\/$/;"	m	struct:cudaResourceViewDesc
firstMipmapLevel	/usr/local/cuda/include/cuda.h	/^    unsigned int firstMipmapLevel; \/**< First defined mipmap level *\/$/;"	m	struct:CUDA_RESOURCE_VIEW_DESC_st
firstMipmapLevel	/usr/local/cuda/include/driver_types.h	/^    unsigned int                firstMipmapLevel; \/**< First defined mipmap level *\/$/;"	m	struct:cudaResourceViewDesc
first_partition_size	/usr/local/cuda/include/dynlink_cuviddec.h	/^    unsigned int first_partition_size;$/;"	m	struct:_CUVIDVP8PICPARAMS
first_row_filter	src/stb_image.h	/^static stbi_uc first_row_filter[5] =$/;"	v
firstcode	src/stb_image.h	/^   stbi__uint16 firstcode[16];$/;"	m	struct:__anon19
firstsymbol	src/stb_image.h	/^   stbi__uint16 firstsymbol[16];$/;"	m	struct:__anon19
flags	/usr/local/cuda/include/cuda.h	/^        unsigned int flags;$/;"	m	struct:CUstreamBatchMemOpParams_union::CUstreamMemOpFlushRemoteWritesParams_st
flags	/usr/local/cuda/include/cuda.h	/^        unsigned int flags;$/;"	m	struct:CUstreamBatchMemOpParams_union::CUstreamMemOpWaitValueParams_st
flags	/usr/local/cuda/include/cuda.h	/^        unsigned int flags;$/;"	m	struct:CUstreamBatchMemOpParams_union::CUstreamMemOpWriteValueParams_st
flags	/usr/local/cuda/include/cuda.h	/^    unsigned int flags;                       \/**< Flags (must be zero) *\/$/;"	m	struct:CUDA_RESOURCE_DESC_st
flags	/usr/local/cuda/include/cuda.h	/^    unsigned int flags;             \/**< Flags *\/$/;"	m	struct:CUDA_TEXTURE_DESC_st
flags	/usr/local/cuda/include/dynlink_nvcuvid.h	/^    unsigned long flags;            \/**< Combination of CUVID_PKT_XXX flags *\/$/;"	m	struct:_CUVIDSOURCEDATAPACKET
flags	src/stb_image.h	/^   int flags, bgindex, ratio, transparent, eflags;$/;"	m	struct:__anon26
flatten	src/blas.c	/^void flatten(float *x, int size, int layers, int batch, int forward)$/;"	f
flip_image	src/image.c	/^void flip_image(image a)$/;"	f
float1	/usr/local/cuda/include/vector_types.h	/^struct __device_builtin__ float1$/;"	s
float1	/usr/local/cuda/include/vector_types.h	/^typedef __device_builtin__ struct float1 float1;$/;"	t	typeref:struct:float1
float2	/usr/local/cuda/include/vector_types.h	/^struct __device_builtin__ __attribute__((aligned(8))) float2$/;"	s
float2	/usr/local/cuda/include/vector_types.h	/^typedef __device_builtin__ struct float2 float2;$/;"	t	typeref:struct:float2
float2double	/usr/local/cuda/include/device_double_functions.hpp	/^__DEVICE_DOUBLE_FUNCTIONS_DECL__ double float2double(float a, enum cudaRoundMode mode)$/;"	f
float2fixed	src/stb_image.h	3043;"	d
float2fixed	src/stb_image.h	3071;"	d
float2int	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ int float2int(float a, enum cudaRoundMode mode)$/;"	f
float2uint	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ unsigned int float2uint(float a, enum cudaRoundMode mode)$/;"	f
float3	/usr/local/cuda/include/vector_types.h	/^struct __device_builtin__ float3$/;"	s
float3	/usr/local/cuda/include/vector_types.h	/^typedef __device_builtin__ struct float3 float3;$/;"	t	typeref:struct:float3
float4	/usr/local/cuda/include/vector_types.h	/^typedef __device_builtin__ struct float4 float4;$/;"	t	typeref:struct:float4
float_abs_compare	src/cost_layer.c	/^int float_abs_compare (const void * a, const void * b)$/;"	f
float_as_int	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ int float_as_int(float a)$/;"	f
float_as_uint	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ unsigned int float_as_uint(float a)$/;"	f
float_to_box	src/box.c	/^box float_to_box(float *f, int stride)$/;"	f
float_to_image	src/image.c	/^image float_to_image(int w, int h, int c, float *data)$/;"	f
floor	/usr/local/cuda/include/math_functions.hpp	/^__host__ __device__ __cudart_builtin__ float     floor(float in)         { return floorf(in); }$/;"	f
flt_tmp_tbl	/usr/local/cuda/include/curand_mtgp32.h	/^    unsigned int flt_tmp_tbl[16];	\/*< a small matrix for tempering and$/;"	m	struct:mtgp32_params_fast
flushRemoteWrites	/usr/local/cuda/include/cuda.h	/^    } flushRemoteWrites;$/;"	m	union:CUstreamBatchMemOpParams_union	typeref:struct:CUstreamBatchMemOpParams_union::CUstreamMemOpFlushRemoteWritesParams_st
flush_stream_buffer	src/image.c	/^void flush_stream_buffer(CvCapture *cap, int n)$/;"	f
fma	/usr/local/cuda/include/device_double_functions.hpp	/^__DEVICE_DOUBLE_FUNCTIONS_DECL__ double fma(double a, double b, double c, enum cudaRoundMode mode)$/;"	f
fma	/usr/local/cuda/include/math_functions.hpp	/^__MATH_FUNCTIONS_DECL__ float fma(float a, float b, float c)$/;"	f
fmax	/usr/local/cuda/include/math_functions.hpp	/^__MATH_FUNCTIONS_DECL__ float fmax(float a, float b)$/;"	f
fmin	/usr/local/cuda/include/math_functions.hpp	/^__MATH_FUNCTIONS_DECL__ float fmin(float a, float b)$/;"	f
fmo	/usr/local/cuda/include/dynlink_cuviddec.h	/^    } fmo;$/;"	m	struct:_CUVIDH264PICPARAMS	typeref:union:_CUVIDH264PICPARAMS::__anon116
fmo_aso_enable	/usr/local/cuda/include/dynlink_cuviddec.h	/^    unsigned char fmo_aso_enable;$/;"	m	struct:_CUVIDH264PICPARAMS
fmod	/usr/local/cuda/include/math_functions.hpp	/^__host__ __device__ __cudart_builtin__ float     fmod(float a, float b)  { return fmodf(a, b); }$/;"	f
fnptr	/usr/local/cuda/include/nvToolsExt.h	/^    void(*fnptr)(void);$/;"	m	struct:nvtxInitializationAttributes_v2
format	/usr/local/cuda/include/cuda.h	/^            CUarray_format format;            \/**< Array format *\/$/;"	m	struct:CUDA_RESOURCE_DESC_st::__anon41::__anon44
format	/usr/local/cuda/include/cuda.h	/^            CUarray_format format;            \/**< Array format *\/$/;"	m	struct:CUDA_RESOURCE_DESC_st::__anon41::__anon45
format	/usr/local/cuda/include/cuda.h	/^    CUresourceViewFormat format;   \/**< Resource view format *\/$/;"	m	struct:CUDA_RESOURCE_VIEW_DESC_st
format	/usr/local/cuda/include/driver_types.h	/^    enum cudaResourceViewFormat format;           \/**< Resource view format *\/$/;"	m	struct:cudaResourceViewDesc	typeref:enum:cudaResourceViewDesc::cudaResourceViewFormat
format	/usr/local/cuda/include/dynlink_nvcuvid.h	/^    CUVIDEOFORMAT format;$/;"	m	struct:__anon128
forward_activation_layer	src/activation_layer.c	/^void forward_activation_layer(layer l, network net)$/;"	f
forward_activation_layer_gpu	src/activation_layer.c	/^void forward_activation_layer_gpu(layer l, network net)$/;"	f
forward_avgpool_layer	src/avgpool_layer.c	/^void forward_avgpool_layer(const avgpool_layer l, network net)$/;"	f
forward_batchnorm_layer	src/batchnorm_layer.c	/^void forward_batchnorm_layer(layer l, network net)$/;"	f
forward_batchnorm_layer_gpu	src/batchnorm_layer.c	/^void forward_batchnorm_layer_gpu(layer l, network net)$/;"	f
forward_connected_layer	src/connected_layer.c	/^void forward_connected_layer(layer l, network net)$/;"	f
forward_connected_layer_gpu	src/connected_layer.c	/^void forward_connected_layer_gpu(layer l, network net)$/;"	f
forward_convolutional_layer	src/convolutional_layer.c	/^void forward_convolutional_layer(convolutional_layer l, network net)$/;"	f
forward_cost_layer	src/cost_layer.c	/^void forward_cost_layer(cost_layer l, network net)$/;"	f
forward_cost_layer_gpu	src/cost_layer.c	/^void forward_cost_layer_gpu(cost_layer l, network net)$/;"	f
forward_crnn_layer	src/crnn_layer.c	/^void forward_crnn_layer(layer l, network net)$/;"	f
forward_crnn_layer_gpu	src/crnn_layer.c	/^void forward_crnn_layer_gpu(layer l, network net)$/;"	f
forward_crop_layer	src/crop_layer.c	/^void forward_crop_layer(const crop_layer l, network net)$/;"	f
forward_deconvolutional_layer	src/deconvolutional_layer.c	/^void forward_deconvolutional_layer(const layer l, network net)$/;"	f
forward_detection_layer	src/detection_layer.c	/^void forward_detection_layer(const detection_layer l, network net)$/;"	f
forward_detection_layer_gpu	src/detection_layer.c	/^void forward_detection_layer_gpu(const detection_layer l, network net)$/;"	f
forward_dropout_layer	src/dropout_layer.c	/^void forward_dropout_layer(dropout_layer l, network net)$/;"	f
forward_gru_layer	src/gru_layer.c	/^void forward_gru_layer(layer l, network net)$/;"	f
forward_gru_layer_gpu	src/gru_layer.c	/^void forward_gru_layer_gpu(layer l, network net)$/;"	f
forward_local_layer	src/local_layer.c	/^void forward_local_layer(const local_layer l, network net)$/;"	f
forward_local_layer_gpu	src/local_layer.c	/^void forward_local_layer_gpu(const local_layer l, network net)$/;"	f
forward_lstm_layer	src/lstm_layer.c	/^void forward_lstm_layer(layer l, network state)$/;"	f
forward_lstm_layer_gpu	src/lstm_layer.c	/^void forward_lstm_layer_gpu(layer l, network state)$/;"	f
forward_maxpool_layer	src/maxpool_layer.c	/^void forward_maxpool_layer(const maxpool_layer l, network net)$/;"	f
forward_network	src/network.c	/^void forward_network(network net)$/;"	f
forward_normalization_layer	src/normalization_layer.c	/^void forward_normalization_layer(const layer layer, network net)$/;"	f
forward_normalization_layer_gpu	src/normalization_layer.c	/^void forward_normalization_layer_gpu(const layer layer, network net)$/;"	f
forward_region_layer	src/region_layer.c	/^void forward_region_layer(const layer l, network net)$/;"	f
forward_region_layer_gpu	src/region_layer.c	/^void forward_region_layer_gpu(const layer l, network net)$/;"	f
forward_reorg_layer	src/reorg_layer.c	/^void forward_reorg_layer(const layer l, network net)$/;"	f
forward_reorg_layer_gpu	src/reorg_layer.c	/^void forward_reorg_layer_gpu(layer l, network net)$/;"	f
forward_rnn_layer	src/rnn_layer.c	/^void forward_rnn_layer(layer l, network net)$/;"	f
forward_rnn_layer_gpu	src/rnn_layer.c	/^void forward_rnn_layer_gpu(layer l, network net)$/;"	f
forward_route_layer	src/route_layer.c	/^void forward_route_layer(const route_layer l, network net)$/;"	f
forward_route_layer_gpu	src/route_layer.c	/^void forward_route_layer_gpu(const route_layer l, network net)$/;"	f
forward_shortcut_layer	src/shortcut_layer.c	/^void forward_shortcut_layer(const layer l, network net)$/;"	f
forward_shortcut_layer_gpu	src/shortcut_layer.c	/^void forward_shortcut_layer_gpu(const layer l, network net)$/;"	f
forward_softmax_layer	src/softmax_layer.c	/^void forward_softmax_layer(const softmax_layer l, network net)$/;"	f
forward_softmax_layer_gpu	src/softmax_layer.c	/^void forward_softmax_layer_gpu(const softmax_layer l, network net)$/;"	f
forward_xnor_layer	src/xnor_layer.c	/^void forward_xnor_layer(const layer l, network state)$/;"	f
fps	src/demo.c	/^static float fps = 0;$/;"	v	file:
frame	/usr/local/cuda/include/cudaEGL.h	/^    } frame;$/;"	m	struct:CUeglFrame_st	typeref:union:CUeglFrame_st::__anon47
frameContextIdx	/usr/local/cuda/include/dynlink_cuviddec.h	/^    unsigned short frameContextIdx : 2;$/;"	m	struct:_CUVIDVP9PICPARAMS
frameParallelDecoding	/usr/local/cuda/include/dynlink_cuviddec.h	/^    unsigned short frameParallelDecoding : 1;$/;"	m	struct:_CUVIDVP9PICPARAMS
frameTagSize	/usr/local/cuda/include/dynlink_cuviddec.h	/^    unsigned int frameTagSize;$/;"	m	struct:_CUVIDVP9PICPARAMS
frameType	/usr/local/cuda/include/cudaEGL.h	/^    CUeglFrameType frameType;           \/**< Array or Pitch *\/$/;"	m	struct:CUeglFrame_st
frameType	/usr/local/cuda/include/dynlink_cuviddec.h	/^    unsigned short frameType : 1;$/;"	m	struct:_CUVIDVP9PICPARAMS
frame_mbs_only_flag	/usr/local/cuda/include/dynlink_cuviddec.h	/^    int frame_mbs_only_flag;$/;"	m	struct:_CUVIDH264PICPARAMS
frame_num	/usr/local/cuda/include/dynlink_cuviddec.h	/^    int frame_num;$/;"	m	struct:_CUVIDH264PICPARAMS
frame_pred_frame_dct	/usr/local/cuda/include/dynlink_cuviddec.h	/^    int frame_pred_frame_dct;$/;"	m	struct:_CUVIDMPEG2PICPARAMS
frame_rate	/usr/local/cuda/include/dynlink_nvcuvid.h	/^    } frame_rate;$/;"	m	struct:__anon123	typeref:struct:__anon123::__anon124
frame_type	/usr/local/cuda/include/dynlink_cuviddec.h	/^            unsigned char frame_type : 1;    \/**< 0 = KEYFRAME, 1 = INTERFRAME  *\/$/;"	m	struct:_CUVIDVP8PICPARAMS::__anon118::__anon119
free	/usr/local/cuda/include/nvml.h	/^    unsigned long long free;         \/\/!< Unallocated FB memory (in bytes)$/;"	m	struct:nvmlMemory_st
free_data	src/data.c	/^void free_data(data d)$/;"	f
free_image	src/image.c	/^void free_image(image m)$/;"	f
free_layer	src/layer.c	/^void free_layer(layer l)$/;"	f
free_list	src/list.c	/^void free_list(list *l)$/;"	f
free_list_contents	src/list.c	/^void free_list_contents(list *l)$/;"	f
free_matrix	src/matrix.c	/^void free_matrix(matrix m)$/;"	f
free_network	src/network.c	/^void free_network(network net)$/;"	f
free_node	src/list.c	/^void free_node(node *n)$/;"	f
free_ptrs	src/utils.c	/^void free_ptrs(void **ptrs, int n)$/;"	f
free_section	src/parser.c	/^void free_section(section *s)$/;"	f
frexp	/usr/local/cuda/include/math_functions.hpp	/^__host__ __device__ __cudart_builtin__ float     frexp(float a, int*b)   { return frexpf(a, b); }$/;"	f
full_pel_backward_vector	/usr/local/cuda/include/dynlink_cuviddec.h	/^    int full_pel_backward_vector;$/;"	m	struct:_CUVIDMPEG2PICPARAMS
full_pel_forward_vector	/usr/local/cuda/include/dynlink_cuviddec.h	/^    int full_pel_forward_vector;$/;"	m	struct:_CUVIDMPEG2PICPARAMS
func	/usr/local/cuda/include/driver_types.h	/^    void *func;          \/**< Device function symbol *\/$/;"	m	struct:cudaLaunchParams
function	/usr/local/cuda/include/cuda.h	/^    CUfunction function;         \/**< Kernel to launch *\/$/;"	m	struct:CUDA_LAUNCH_PARAMS_st
fwVersion	/usr/local/cuda/include/nvml.h	/^    unsigned int fwVersion;                     \/\/!< Firmware Version. 0=Version is unavailable$/;"	m	struct:nvmlBridgeChipInfo_st
gamma_plane	src/common.h	/^    dim3 gamma_plane;$/;"	m	struct:__anon6
gemm	src/gemm.c	/^void gemm(int TA, int TB, int M, int N, int K, float ALPHA, $/;"	f
gemm_bin	src/gemm.c	/^void gemm_bin(int M, int N, int K, float ALPHA, $/;"	f
gemm_cpu	src/gemm.c	/^void gemm_cpu(int TA, int TB, int M, int N, int K, float ALPHA, $/;"	f
gemm_fpga_finalize	src/gemm_fpga.c	/^void gemm_fpga_finalize(){$/;"	f
gemm_fpga_init	src/gemm_fpga.c	/^int gemm_fpga_init () {$/;"	f
gemm_gpu	src/gemm.c	/^void gemm_gpu(int TA, int TB, int M, int N, int K, float ALPHA, $/;"	f
gemm_nn	src/gemm.c	/^void gemm_nn(int M, int N, int K, float ALPHA, $/;"	f
gemm_nn_fpga	src/gemm_fpga.c	/^void gemm_nn_fpga(int M, int N, int K, float ALPHA, $/;"	f
gemm_nt	src/gemm.c	/^void gemm_nt(int M, int N, int K, float ALPHA, $/;"	f
gemm_tn	src/gemm.c	/^void gemm_tn(int M, int N, int K, float ALPHA, $/;"	f
gemm_tt	src/gemm.c	/^void gemm_tt(int M, int N, int K, float ALPHA, $/;"	f
gesvdjInfo_t	/usr/local/cuda/include/cusolverDn.h	/^typedef struct gesvdjInfo *gesvdjInfo_t;$/;"	t	typeref:struct:gesvdjInfo
getElapsedTime	src/common.c	/^double getElapsedTime(Timer *timer) {$/;"	f
getSizeBytesBinaryArray	src/common.c	/^double getSizeBytesBinaryArray(dim3 conv_args) {$/;"	f
get_activation	src/activations.c	/^ACTIVATION get_activation(char *s)$/;"	f
get_activation_string	src/activations.c	/^char *get_activation_string(ACTIVATION a)$/;"	f
get_base_args	src/network.c	/^load_args get_base_args(network net)$/;"	f
get_color	src/image.c	/^float get_color(int c, int x, int max)$/;"	f
get_convolutional_delta	src/convolutional_layer.c	/^image get_convolutional_delta(convolutional_layer l)$/;"	f
get_convolutional_image	src/convolutional_layer.c	/^image get_convolutional_image(convolutional_layer l)$/;"	f
get_convolutional_weight	src/convolutional_layer.c	/^image get_convolutional_weight(convolutional_layer l, int i)$/;"	f
get_cost_string	src/cost_layer.c	/^char *get_cost_string(COST_TYPE a)$/;"	f
get_cost_type	src/cost_layer.c	/^COST_TYPE get_cost_type(char *s)$/;"	f
get_crop_image	src/crop_layer.c	/^image get_crop_image(crop_layer l)$/;"	f
get_current_batch	src/network.c	/^size_t get_current_batch(network net)$/;"	f
get_current_rate	src/network.c	/^float get_current_rate(network net)$/;"	f
get_data_part	src/data.c	/^data get_data_part(data d, int part, int total)$/;"	f
get_detection_boxes	src/detection_layer.c	/^void get_detection_boxes(layer l, int w, int h, float thresh, float **probs, box *boxes, int only_objectness)$/;"	f
get_hierarchy_probability	src/tree.c	/^float get_hierarchy_probability(float *x, tree *hier, int c, int stride)$/;"	f
get_image_from_stream	src/image.c	/^image get_image_from_stream(CvCapture *cap)$/;"	f
get_image_layer	src/image.c	/^image get_image_layer(image m, int l)$/;"	f
get_intrinsic_handle	/usr/local/cuda/include/cooperative_groups_helpers.h	/^        _CG_STATIC_QUALIFIER unsigned long long get_intrinsic_handle()$/;"	f	namespace:__internal::grid
get_intrinsic_handle	/usr/local/cuda/include/cooperative_groups_helpers.h	/^        _CG_STATIC_QUALIFIER unsigned long long get_intrinsic_handle()$/;"	f	namespace:__internal::multi_grid
get_label	src/image.c	/^image get_label(image **characters, char *string, int size)$/;"	f
get_labels	src/data.c	/^char **get_labels(char *filename)$/;"	f
get_layer_string	src/network.c	/^char *get_layer_string(LAYER_TYPE a)$/;"	f
get_maxpool_delta	src/maxpool_layer.c	/^image get_maxpool_delta(maxpool_layer l)$/;"	f
get_maxpool_image	src/maxpool_layer.c	/^image get_maxpool_image(maxpool_layer l)$/;"	f
get_metadata	src/option_list.c	/^metadata get_metadata(char *file)$/;"	f
get_network_detection_layer	src/network.c	/^detection_layer get_network_detection_layer(network net)$/;"	f
get_network_image	src/network.c	/^image get_network_image(network net)$/;"	f
get_network_image_layer	src/network.c	/^image get_network_image_layer(network net, int i)$/;"	f
get_network_output_layer	src/network.c	/^layer get_network_output_layer(network net)$/;"	f
get_next_batch	src/data.c	/^void get_next_batch(data d, int n, int offset, float *X, float *y)$/;"	f
get_paths	src/data.c	/^list *get_paths(char *filename)$/;"	f
get_pixel	src/image.c	/^float get_pixel(image m, int x, int y, int c)$/;"	f
get_pixel_extend	src/image.c	/^float get_pixel_extend(image m, int x, int y, int c)$/;"	f
get_policy	src/parser.c	/^learning_rate_policy get_policy(char *s)$/;"	f
get_predicted_class_network	src/network.c	/^int get_predicted_class_network(network net)$/;"	f
get_random_batch	src/data.c	/^void get_random_batch(data d, int n, float *X, float *y)$/;"	f
get_random_data	src/data.c	/^data get_random_data(data d, int num)$/;"	f
get_random_paths	src/data.c	/^char **get_random_paths(char **paths, int n, int m)$/;"	f
get_region_box	src/region_layer.c	/^box get_region_box(float *x, float *biases, int n, int index, int i, int j, int w, int h, int stride)$/;"	f
get_region_boxes	src/region_layer.c	/^void get_region_boxes(layer l, int w, int h, int netw, int neth, float thresh, float **probs, box *boxes, float **masks, int only_objectness, int *map, float tree_thresh, int relative)$/;"	f
get_segmentation_image	src/data.c	/^image get_segmentation_image(char *path, int w, int h, int classes)$/;"	f
get_segmentation_image2	src/data.c	/^image get_segmentation_image2(char *path, int w, int h, int classes)$/;"	f
get_wall_time	src/demo.c	/^double get_wall_time()$/;"	f
get_weights	src/convolutional_layer.c	/^image *get_weights(convolutional_layer l)$/;"	f
get_workspace_size	src/convolutional_layer.c	/^static size_t get_workspace_size(layer l){$/;"	f	file:
get_workspace_size	src/deconvolutional_layer.c	/^static size_t get_workspace_size(layer l){$/;"	f	file:
ghost_image	src/image.c	/^void ghost_image(image source, image dest, int dx, int dy)$/;"	f
globalL1CacheSupported	/usr/local/cuda/include/driver_types.h	/^    int    globalL1CacheSupported;     \/**< Device supports caching globals in L1 *\/$/;"	m	struct:cudaDeviceProp
gmc_enabled	/usr/local/cuda/include/dynlink_cuviddec.h	/^    int gmc_enabled;$/;"	m	struct:_CUVIDMPEG4PICPARAMS
gpu	/usr/local/cuda/include/nvml.h	/^    unsigned int gpu;                \/\/!< Percent of time over the past sample period during which one or more kernels was executing on the GPU$/;"	m	struct:nvmlUtilization_st
gpuUtilization	/usr/local/cuda/include/nvml.h	/^    unsigned int gpuUtilization;                \/\/!< Percent of time over the process's lifetime during which one or more kernels was executing on the GPU.$/;"	m	struct:nvmlAccountingStats_st
gpu_index	src/cuda.c	/^int gpu_index = 0;$/;"	v
gradient	src/activations.c	/^float gradient(float x, ACTIVATION a)$/;"	f
gradient_array	src/activations.c	/^void gradient_array(const float *x, const int n, const ACTIVATION a, float *delta)$/;"	f
grayscale_image	src/image.c	/^image grayscale_image(image im)$/;"	f
grayscale_image_3c	src/image.c	/^void grayscale_image_3c(image im)$/;"	f
grid	/usr/local/cuda/include/cooperative_groups_helpers.h	/^    namespace grid {$/;"	n	namespace:__internal
gridDim	/usr/local/cuda/include/device_launch_parameters.h	/^dim3 __device_builtin__ __STORAGE__ gridDim;$/;"	v
gridDim	/usr/local/cuda/include/driver_types.h	/^    dim3 gridDim;        \/**< Grid dimentions *\/$/;"	m	struct:cudaLaunchParams
gridDimX	/usr/local/cuda/include/cuda.h	/^    unsigned int gridDimX;       \/**< Width of grid in blocks *\/$/;"	m	struct:CUDA_LAUNCH_PARAMS_st
gridDimY	/usr/local/cuda/include/cuda.h	/^    unsigned int gridDimY;       \/**< Height of grid in blocks *\/$/;"	m	struct:CUDA_LAUNCH_PARAMS_st
gridDimZ	/usr/local/cuda/include/cuda.h	/^    unsigned int gridDimZ;       \/**< Depth of grid in blocks *\/$/;"	m	struct:CUDA_LAUNCH_PARAMS_st
gridLicensableFeatures	/usr/local/cuda/include/nvml.h	/^    nvmlGridLicensableFeature_t gridLicensableFeatures[NVML_GRID_LICENSE_FEATURE_MAX_COUNT];$/;"	m	struct:nvmlGridLicensableFeatures_st
grid_group	/usr/local/cuda/include/cooperative_groups.h	/^    _CG_QUALIFIER grid_group() {$/;"	f	class:grid_group
grid_group	/usr/local/cuda/include/cooperative_groups.h	/^class grid_group$/;"	c
grid_rank	/usr/local/cuda/include/cooperative_groups.h	/^    _CG_QUALIFIER unsigned int grid_rank() const {$/;"	f	class:multi_grid_group
grid_rank	/usr/local/cuda/include/cooperative_groups_helpers.h	/^        _CG_STATIC_QUALIFIER unsigned int grid_rank(const unsigned long long handle)$/;"	f	namespace:__internal::multi_grid
groupType	/usr/local/cuda/include/cooperative_groups_helpers.h	/^    enum groupType {$/;"	g	namespace:__internal
group_index	/usr/local/cuda/include/cooperative_groups.h	/^    _CG_QUALIFIER dim3 group_index() const {$/;"	f	class:thread_block
group_index	/usr/local/cuda/include/cooperative_groups_helpers.h	/^        _CG_STATIC_QUALIFIER dim3 group_index()$/;"	f	namespace:__internal::cta
group_size	/usr/local/cuda/include/cooperative_groups.h	/^template <class GroupT> _CG_QUALIFIER unsigned int group_size(GroupT const &g)$/;"	f
h	src/binary_convolution.h	/^    int h;       \/\/ height, y$/;"	m	struct:__anon1
h	src/parser.c	/^    int h;$/;"	m	struct:size_params	file:
h	src/stb_image.h	/^      int h,v;$/;"	m	struct:__anon16::__anon17
h	src/stb_image.h	/^   int w,h;$/;"	m	struct:__anon26
h2	src/stb_image.h	/^      int x,y,w2,h2;$/;"	m	struct:__anon16::__anon17
h264	/usr/local/cuda/include/dynlink_cuviddec.h	/^        CUVIDH264PICPARAMS h264;$/;"	m	union:_CUVIDPICPARAMS::__anon120
h2ceil	/usr/local/cuda/include/cuda_fp16.hpp	/^__CUDA_FP16_DECL__ __half2 h2ceil(const __half2 h)$/;"	f
h2cos	/usr/local/cuda/include/cuda_fp16.hpp	/^__CUDA_FP16_DECL__ __half2 h2cos(const __half2 a) {$/;"	f
h2exp	/usr/local/cuda/include/cuda_fp16.hpp	/^__CUDA_FP16_DECL__ __half2 h2exp(const __half2 a) {$/;"	f
h2exp10	/usr/local/cuda/include/cuda_fp16.hpp	/^__CUDA_FP16_DECL__ __half2 h2exp10(const __half2 a) {$/;"	f
h2exp2	/usr/local/cuda/include/cuda_fp16.hpp	/^__CUDA_FP16_DECL__ __half2 h2exp2(const __half2 a) {$/;"	f
h2floor	/usr/local/cuda/include/cuda_fp16.hpp	/^__CUDA_FP16_DECL__ __half2 h2floor(const __half2 h)$/;"	f
h2log	/usr/local/cuda/include/cuda_fp16.hpp	/^__CUDA_FP16_DECL__ __half2 h2log(const __half2 a) {$/;"	f
h2log10	/usr/local/cuda/include/cuda_fp16.hpp	/^__CUDA_FP16_DECL__ __half2 h2log10(const __half2 a) {$/;"	f
h2log2	/usr/local/cuda/include/cuda_fp16.hpp	/^__CUDA_FP16_DECL__ __half2 h2log2(const __half2 a) {$/;"	f
h2rcp	/usr/local/cuda/include/cuda_fp16.hpp	/^__CUDA_FP16_DECL__ __half2 h2rcp(const __half2 a) {$/;"	f
h2rint	/usr/local/cuda/include/cuda_fp16.hpp	/^__CUDA_FP16_DECL__ __half2 h2rint(const __half2 h)$/;"	f
h2rsqrt	/usr/local/cuda/include/cuda_fp16.hpp	/^__CUDA_FP16_DECL__ __half2 h2rsqrt(const __half2 a) {$/;"	f
h2sin	/usr/local/cuda/include/cuda_fp16.hpp	/^__CUDA_FP16_DECL__ __half2 h2sin(const __half2 a) {$/;"	f
h2sqrt	/usr/local/cuda/include/cuda_fp16.hpp	/^__CUDA_FP16_DECL__ __half2 h2sqrt(const __half2 a) {$/;"	f
h2trunc	/usr/local/cuda/include/cuda_fp16.hpp	/^__CUDA_FP16_DECL__ __half2 h2trunc(const __half2 h)$/;"	f
hArray	/usr/local/cuda/include/cuda.h	/^            CUarray hArray;                   \/**< CUDA array *\/$/;"	m	struct:CUDA_RESOURCE_DESC_st::__anon41::__anon42
hMipmappedArray	/usr/local/cuda/include/cuda.h	/^            CUmipmappedArray hMipmappedArray; \/**< CUDA mipmapped array *\/$/;"	m	struct:CUDA_RESOURCE_DESC_st::__anon41::__anon43
hResolution	/usr/local/cuda/include/nvml.h	/^    unsigned int       hResolution;     \/\/!< Current encode horizontal resolution$/;"	m	struct:nvmlEncoderSessionInfo_st
hStream	/usr/local/cuda/include/cuda.h	/^    CUstream hStream;            \/**< Stream identifier *\/$/;"	m	struct:CUDA_LAUNCH_PARAMS_st
ha	src/stb_image.h	/^      int hd,ha;$/;"	m	struct:__anon16::__anon17
haarBuffer	/usr/local/cuda/include/nppdefs.h	/^    Npp32s * haarBuffer;        \/**<  buffer *\/$/;"	m	struct:__anon159
haarBufferSize	/usr/local/cuda/include/nppdefs.h	/^    int      haarBufferSize;    \/**<  size of the buffer *\/$/;"	m	struct:__anon159
half	/usr/local/cuda/include/cuda_fp16.hpp	/^typedef __half half;$/;"	t
half2	/usr/local/cuda/include/cuda_fp16.hpp	/^typedef __half2 half2;$/;"	t
handle	/usr/local/cuda/include/nvToolsExtMeta.h	/^typedef struct NvtxDomainResourceDestroy  { nvtxResourceHandle_t handle; } NvtxDomainResourceDestroy;$/;"	m	struct:NvtxDomainResourceDestroy
handle	/usr/local/cuda/include/nvToolsExtMeta.h	/^typedef struct NvtxSyncUserCommon  { nvtxSyncUser_t handle; } NvtxSyncUserCommon;$/;"	m	struct:NvtxSyncUserCommon
hardtan_activate	src/activations.h	/^static inline float hardtan_activate(float x)$/;"	f
hardtan_gradient	src/activations.h	/^static inline float hardtan_gradient(float x)$/;"	f
hceil	/usr/local/cuda/include/cuda_fp16.hpp	/^__CUDA_FP16_DECL__ __half hceil(const __half h)$/;"	f
hcos	/usr/local/cuda/include/cuda_fp16.hpp	/^__CUDA_FP16_DECL__ __half hcos(const __half a) {$/;"	f
hd	src/stb_image.h	/^      int hd,ha;$/;"	m	struct:__anon16::__anon17
height	/usr/local/cuda/include/cuda.h	/^            size_t height;                    \/**< Height of the array in elements *\/$/;"	m	struct:CUDA_RESOURCE_DESC_st::__anon41::__anon45
height	/usr/local/cuda/include/cuda.h	/^    size_t height;                 \/**< Height of the resource view *\/$/;"	m	struct:CUDA_RESOURCE_VIEW_DESC_st
height	/usr/local/cuda/include/cudaEGL.h	/^    unsigned int height;                \/**< Height of first plane *\/$/;"	m	struct:CUeglFrame_st
height	/usr/local/cuda/include/driver_types.h	/^			size_t height;                     \/**< Height of the array in elements *\/$/;"	m	struct:cudaResourceDesc::__anon109::__anon113
height	/usr/local/cuda/include/driver_types.h	/^    size_t                      height;           \/**< Height of the resource view *\/$/;"	m	struct:cudaResourceViewDesc
height	/usr/local/cuda/include/driver_types.h	/^    size_t height;    \/**< Height in elements *\/$/;"	m	struct:cudaExtent
height	/usr/local/cuda/include/dynlink_cuviddec.h	/^    int height;$/;"	m	struct:_CUVIDVP8PICPARAMS
height	/usr/local/cuda/include/dynlink_cuviddec.h	/^    unsigned int height;$/;"	m	struct:_CUVIDVP9PICPARAMS
height	/usr/local/cuda/include/nppdefs.h	/^    int height;     \/**<  Rectangle height. *\/$/;"	m	struct:__anon150
height	/usr/local/cuda/include/nppdefs.h	/^    int height; \/**<  Rectangle height. *\/$/;"	m	struct:__anon149
hevc	/usr/local/cuda/include/dynlink_cuviddec.h	/^        CUVIDHEVCPICPARAMS hevc;$/;"	m	union:_CUVIDPICPARAMS::__anon120
hexp	/usr/local/cuda/include/cuda_fp16.hpp	/^__CUDA_FP16_DECL__ __half hexp(const __half a) {$/;"	f
hexp10	/usr/local/cuda/include/cuda_fp16.hpp	/^__CUDA_FP16_DECL__ __half hexp10(const __half a) {$/;"	f
hexp2	/usr/local/cuda/include/cuda_fp16.hpp	/^__CUDA_FP16_DECL__ __half hexp2(const __half a) {$/;"	f
hfloor	/usr/local/cuda/include/cuda_fp16.hpp	/^__CUDA_FP16_DECL__ __half hfloor(const __half h)$/;"	f
hierarchy_predictions	src/tree.c	/^void hierarchy_predictions(float *predictions, int n, tree *hier, int only_leaves, int stride)$/;"	f
hierarchy_top_prediction	src/tree.c	/^int hierarchy_top_prediction(float *predictions, tree *hier, float thresh, int stride)$/;"	f
histogram	/usr/local/cuda/include/curand_discrete.h	/^    curandHistogramM2_t histogram;$/;"	m	struct:curandDistributionM2Shift_st
histogramBlockSize	/usr/local/cuda/include/nppdefs.h	/^    int      histogramBlockSize;   \/**<  square histogram block size (pixels). *\/$/;"	m	struct:__anon157
hlog	/usr/local/cuda/include/cuda_fp16.hpp	/^__CUDA_FP16_DECL__ __half hlog(const __half a) {$/;"	f
hlog10	/usr/local/cuda/include/cuda_fp16.hpp	/^__CUDA_FP16_DECL__ __half hlog10(const __half a) {$/;"	f
hlog2	/usr/local/cuda/include/cuda_fp16.hpp	/^__CUDA_FP16_DECL__ __half hlog2(const __half a) {$/;"	f
hold_out_matrix	src/matrix.c	/^matrix hold_out_matrix(matrix *m, int n)$/;"	f
hostNativeAtomicSupported	/usr/local/cuda/include/driver_types.h	/^    int    hostNativeAtomicSupported;  \/**< Link between the device and the host supports native atomic operations *\/$/;"	m	struct:cudaDeviceProp
hostPointer	/usr/local/cuda/include/driver_types.h	/^    void *hostPointer;$/;"	m	struct:cudaPointerAttributes
host_K	/usr/local/cuda/include/curand_discrete.h	/^    curandHistogramM2K_t host_K; $/;"	m	struct:curandHistogramM2_st
host_M2	/usr/local/cuda/include/curand_discrete.h	/^    curandDistributionM2Shift_t host_M2;$/;"	m	struct:curandDiscreteDistribution_st
host_V	/usr/local/cuda/include/curand_discrete.h	/^    curandHistogramM2V_t host_V; $/;"	m	struct:curandHistogramM2_st
host_gen	/usr/local/cuda/include/curand_discrete.h	/^    unsigned int host_gen; $/;"	m	struct:curandDiscreteDistribution_st
host_gen	/usr/local/cuda/include/curand_discrete.h	/^    unsigned int host_gen;$/;"	m	struct:curandDistributionM2Shift_st
host_gen	/usr/local/cuda/include/curand_discrete.h	/^    unsigned int host_gen;$/;"	m	struct:curandDistributionShift_st
host_gen	/usr/local/cuda/include/curand_discrete.h	/^    unsigned int host_gen;$/;"	m	struct:curandHistogramM2_st
host_histogram	/usr/local/cuda/include/curand_discrete.h	/^    curandHistogramM2_t host_histogram;$/;"	m	struct:curandDistributionM2Shift_st
host_probability	/usr/local/cuda/include/curand_discrete.h	/^    curandDistribution_t host_probability;$/;"	m	struct:curandDistributionShift_st
hrcp	/usr/local/cuda/include/cuda_fp16.hpp	/^__CUDA_FP16_DECL__ __half hrcp(const __half a) {$/;"	f
hrint	/usr/local/cuda/include/cuda_fp16.hpp	/^__CUDA_FP16_DECL__ __half hrint(const __half h)$/;"	f
hrsqrt	/usr/local/cuda/include/cuda_fp16.hpp	/^__CUDA_FP16_DECL__ __half hrsqrt(const __half a) {$/;"	f
hs	src/stb_image.h	/^   int hs,vs;   \/\/ expansion factor in each axis$/;"	m	struct:__anon18
hsin	/usr/local/cuda/include/cuda_fp16.hpp	/^__CUDA_FP16_DECL__ __half hsin(const __half a) {$/;"	f
hsqrt	/usr/local/cuda/include/cuda_fp16.hpp	/^__CUDA_FP16_DECL__ __half hsqrt(const __half a) {$/;"	f
hsv_to_rgb	src/image.c	/^void hsv_to_rgb(image im)$/;"	f
htrunc	/usr/local/cuda/include/cuda_fp16.hpp	/^__CUDA_FP16_DECL__ __half htrunc(const __half h)$/;"	f
hue_image	src/image.c	/^void hue_image(image im, float hue)$/;"	f
huff_ac	src/stb_image.h	/^   stbi__huffman huff_ac[4];$/;"	m	struct:__anon16
huff_dc	src/stb_image.h	/^   stbi__huffman huff_dc[4];$/;"	m	struct:__anon16
hwbcId	/usr/local/cuda/include/nvml.h	/^    unsigned int hwbcId;$/;"	m	struct:nvmlHwbcEntry_st
hypot	/usr/local/cuda/include/math_functions.hpp	/^__MATH_FUNCTIONS_DECL__ float hypot(float a, float b)$/;"	f
i	/usr/local/cuda/include/curand_kernel.h	/^    unsigned int i, x, c;$/;"	m	struct:curandStateScrambledSobol32
i	/usr/local/cuda/include/curand_kernel.h	/^    unsigned int i, x, c;$/;"	m	struct:curandStateSobol32
i	/usr/local/cuda/include/curand_kernel.h	/^    unsigned long long i, x, c;$/;"	m	struct:curandStateScrambledSobol64
i	/usr/local/cuda/include/curand_kernel.h	/^    unsigned long long i, x, c;$/;"	m	struct:curandStateSobol64
iValue	/usr/local/cuda/include/nvToolsExt.h	/^        int32_t iValue;$/;"	m	union:nvtxEventAttributes_v2::payload_t
id	/usr/local/cuda/include/nvToolsExtMeta.h	/^typedef struct NvtxRangeEnd     { nvtxRangeId_t id; } NvtxRangeEnd;$/;"	m	struct:NvtxRangeEnd
id	/usr/local/cuda/include/nvml.h	/^    char id[96];                        \/\/!< Product identifier$/;"	m	struct:nvmlUnitInfo_st
id	src/stb_image.h	/^      int id;$/;"	m	struct:__anon16::__anon17
idata	src/stb_image.h	/^   stbi_uc *idata, *expanded, *out;$/;"	m	struct:__anon22
idct_block_kernel	src/stb_image.h	/^   void (*idct_block_kernel)(stbi_uc *out, int out_stride, short data[64]);$/;"	m	struct:__anon16
identifier	/usr/local/cuda/include/nvToolsExt.h	/^    } identifier;$/;"	m	struct:nvtxResourceAttributes_v0	typeref:union:nvtxResourceAttributes_v0::identifier_t
identifierType	/usr/local/cuda/include/nvToolsExt.h	/^    int32_t identifierType;            \/* values from enums following the pattern nvtxResource[name]Type_t *\/$/;"	m	struct:nvtxResourceAttributes_v0
identifier_t	/usr/local/cuda/include/nvToolsExt.h	/^    union identifier_t$/;"	u	struct:nvtxResourceAttributes_v0
ilogb	/usr/local/cuda/include/math_functions.hpp	/^__MATH_FUNCTIONS_DECL__ int ilogb(float a)$/;"	f
im	/usr/local/cuda/include/nppdefs.h	/^    Npp32f  im;     \/**<  Imaginary part *\/$/;"	m	struct:NPP_ALIGN_8
im	/usr/local/cuda/include/nppdefs.h	/^    Npp32s  im;     \/**<  Imaginary part *\/$/;"	m	struct:NPP_ALIGN_8
im	/usr/local/cuda/include/nppdefs.h	/^    Npp32u  im;     \/**<  Imaginary part *\/$/;"	m	struct:NPP_ALIGN_8
im	/usr/local/cuda/include/nppdefs.h	/^    Npp64f  im;     \/**<  Imaginary part *\/$/;"	m	struct:NPP_ALIGN_16
im	/usr/local/cuda/include/nppdefs.h	/^    Npp64s  im;     \/**<  Imaginary part *\/$/;"	m	struct:NPP_ALIGN_16
im2col_cpu	src/im2col.c	/^void im2col_cpu(float* data_im,$/;"	f
im2col_get_pixel	src/im2col.c	/^float im2col_get_pixel(float *im, int height, int width, int channels,$/;"	f
image_distance	src/image.c	/^image image_distance(image a, image b)$/;"	f
img_buffer	src/stb_image.h	/^   stbi_uc *img_buffer, *img_buffer_end;$/;"	m	struct:__anon13
img_buffer_end	src/stb_image.h	/^   stbi_uc *img_buffer, *img_buffer_end;$/;"	m	struct:__anon13
img_buffer_original	src/stb_image.h	/^   stbi_uc *img_buffer_original;$/;"	m	struct:__anon13
img_comp	src/stb_image.h	/^   } img_comp[4];$/;"	m	struct:__anon16	typeref:struct:__anon16::__anon17
img_h_max	src/stb_image.h	/^   int img_h_max, img_v_max;$/;"	m	struct:__anon16
img_mcu_h	src/stb_image.h	/^   int img_mcu_w, img_mcu_h;$/;"	m	struct:__anon16
img_mcu_w	src/stb_image.h	/^   int img_mcu_w, img_mcu_h;$/;"	m	struct:__anon16
img_mcu_x	src/stb_image.h	/^   int img_mcu_x, img_mcu_y;$/;"	m	struct:__anon16
img_mcu_y	src/stb_image.h	/^   int img_mcu_x, img_mcu_y;$/;"	m	struct:__anon16
img_n	src/stb_image.h	/^   int img_n, img_out_n;$/;"	m	struct:__anon13
img_out_n	src/stb_image.h	/^   int img_n, img_out_n;$/;"	m	struct:__anon13
img_v_max	src/stb_image.h	/^   int img_h_max, img_v_max;$/;"	m	struct:__anon16
img_x	src/stb_image.h	/^   stbi__uint32 img_x, img_y;$/;"	m	struct:__anon13
img_y	src/stb_image.h	/^   stbi__uint32 img_x, img_y;$/;"	m	struct:__anon13
increment_layer	src/crnn_layer.c	/^static void increment_layer(layer *l, int steps)$/;"	f	file:
increment_layer	src/gru_layer.c	/^static void increment_layer(layer *l, int steps)$/;"	f	file:
increment_layer	src/lstm_layer.c	/^static void increment_layer(layer *l, int steps)$/;"	f	file:
increment_layer	src/rnn_layer.c	/^static void increment_layer(layer *l, int steps)$/;"	f	file:
index	src/box.c	/^    int index;$/;"	m	struct:__anon2	file:
index	src/parser.c	/^    int index;$/;"	m	struct:size_params	file:
ini_func1	/usr/local/cuda/include/curand_mtgp32_host.h	/^static unsigned int ini_func1(unsigned int x) {$/;"	f
ini_func2	/usr/local/cuda/include/curand_mtgp32_host.h	/^static unsigned int ini_func2(unsigned int x) {$/;"	f
initArgs	src/common.c	/^ConvolutionArgs initArgs(size_t ix, size_t iy, size_t iz, size_t wx, size_t wy, size_t wz) {$/;"	f
init_qp_minus26	/usr/local/cuda/include/dynlink_cuviddec.h	/^    signed char init_qp_minus26;$/;"	m	struct:_CUVIDHEVCPICPARAMS
input	src/binary_convolution.h	/^    float *input;       \/\/ input values$/;"	m	struct:__anon1
input	src/common.h	/^	dim3 input;$/;"	m	struct:__anon6
inputs	src/parser.c	/^    int inputs;$/;"	m	struct:size_params	file:
int1	/usr/local/cuda/include/vector_types.h	/^struct __device_builtin__ int1$/;"	s
int1	/usr/local/cuda/include/vector_types.h	/^typedef __device_builtin__ struct int1 int1;$/;"	t	typeref:struct:int1
int2	/usr/local/cuda/include/vector_types.h	/^typedef __device_builtin__ struct int2 int2;$/;"	t	typeref:struct:int2
int2double	/usr/local/cuda/include/device_double_functions.hpp	/^__DEVICE_DOUBLE_FUNCTIONS_DECL__ double int2double(int a, enum cudaRoundMode mode)$/;"	f
int2float	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ float int2float(int a, enum cudaRoundMode mode)$/;"	f
int3	/usr/local/cuda/include/vector_types.h	/^struct __device_builtin__ int3$/;"	s
int3	/usr/local/cuda/include/vector_types.h	/^typedef __device_builtin__ struct int3 int3;$/;"	t	typeref:struct:int3
int4	/usr/local/cuda/include/vector_types.h	/^typedef __device_builtin__ struct int4 int4;$/;"	t	typeref:struct:int4
int_as_float	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ float int_as_float(int a)$/;"	f
int_to_alphanum	src/utils.c	/^char int_to_alphanum(int i)$/;"	f
integrated	/usr/local/cuda/include/driver_types.h	/^    int    integrated;                 \/**< Device is integrated as opposed to discrete *\/$/;"	m	struct:cudaDeviceProp
inter_cpu	src/blas.c	/^void inter_cpu(int NX, float *X, int NY, float *Y, int B, float *OUT)$/;"	f
inter_layer_deblocking_filter_control_present_flag	/usr/local/cuda/include/dynlink_cuviddec.h	/^    unsigned char inter_layer_deblocking_filter_control_present_flag;$/;"	m	struct:_CUVIDH264SVCEXT
inter_layer_slice_alpha_c0_offset_div2	/usr/local/cuda/include/dynlink_cuviddec.h	/^    signed char   inter_layer_slice_alpha_c0_offset_div2;$/;"	m	struct:_CUVIDH264SVCEXT
inter_layer_slice_beta_offset_div2	/usr/local/cuda/include/dynlink_cuviddec.h	/^    signed char   inter_layer_slice_beta_offset_div2;$/;"	m	struct:_CUVIDH264SVCEXT
inter_view_flag	/usr/local/cuda/include/dynlink_cuviddec.h	/^    unsigned char inter_view_flag;$/;"	m	struct:_CUVIDH264MVCEXT
interlace	/usr/local/cuda/include/dynlink_cuviddec.h	/^    int interlace;$/;"	m	struct:_CUVIDVC1PICPARAMS
interlaced	/usr/local/cuda/include/dynlink_cuviddec.h	/^    int interlaced;$/;"	m	struct:_CUVIDMPEG4PICPARAMS
internal	/usr/local/cuda/include/nccl.h	/^typedef struct { char internal[NCCL_UNIQUE_ID_BYTES]; } ncclUniqueId;$/;"	m	struct:__anon136
intmQF_src	src/sdl_image.c	/^static IplImage *intmQF_src=NULL;$/;"	v	file:
intraOnly	/usr/local/cuda/include/dynlink_cuviddec.h	/^    unsigned short intraOnly : 1;$/;"	m	struct:_CUVIDVP9PICPARAMS
intra_dc_precision	/usr/local/cuda/include/dynlink_cuviddec.h	/^    int intra_dc_precision;$/;"	m	struct:_CUVIDMPEG2PICPARAMS
intra_pic_flag	/usr/local/cuda/include/dynlink_cuviddec.h	/^    int intra_pic_flag;                    \/**< This picture is entirely intra coded *\/$/;"	m	struct:_CUVIDPICPARAMS
intra_pic_flag	/usr/local/cuda/include/dynlink_cuviddec.h	/^    int intra_pic_flag;     \/**< Set to 1 for I,BI frames *\/$/;"	m	struct:_CUVIDVC1PICPARAMS
intra_vlc_format	/usr/local/cuda/include/dynlink_cuviddec.h	/^    int intra_vlc_format;$/;"	m	struct:_CUVIDMPEG2PICPARAMS
io	src/stb_image.h	/^   stbi_io_callbacks io;$/;"	m	struct:__anon13
io_user_data	src/stb_image.h	/^   void *io_user_data;$/;"	m	struct:__anon13
ipl	src/demo.c	/^static IplImage  * ipl;$/;"	v	file:
ipl_into_image	src/image.c	/^void ipl_into_image(IplImage* src, image im)$/;"	f
ipl_to_image	src/image.c	/^image ipl_to_image(IplImage* src)$/;"	f
is	/usr/local/cuda/include/cufftw.h	/^    int is;$/;"	m	struct:__anon84
is	/usr/local/cuda/include/cufftw.h	/^    size_t is;$/;"	m	struct:__anon85
isGridLicenseSupported	/usr/local/cuda/include/nvml.h	/^    int                         isGridLicenseSupported;     \/\/<! Non-zero if GRID Software Licensing is supported on the system, otherwise zero$/;"	m	struct:nvmlGridLicensableFeatures_st
isManaged	/usr/local/cuda/include/driver_types.h	/^    int isManaged;$/;"	m	struct:cudaPointerAttributes
isMultiGpuBoard	/usr/local/cuda/include/driver_types.h	/^    int    isMultiGpuBoard;            \/**< Device is on a multi-GPU board *\/$/;"	m	struct:cudaDeviceProp
isRunning	/usr/local/cuda/include/nvml.h	/^    unsigned int isRunning;                     \/\/!< Flag to represent if the process is running (1 for running, 0 for terminated)$/;"	m	struct:nvmlAccountingStats_st
is_long_term	/usr/local/cuda/include/dynlink_cuviddec.h	/^    int is_long_term;           \/**< 0=short term reference, 1=long term reference *\/$/;"	m	struct:_CUVIDH264DPBENTRY
is_network	src/parser.c	/^int is_network(section *s)$/;"	f
is_valid	/usr/local/cuda/include/cooperative_groups.h	/^    _CG_QUALIFIER bool is_valid() const {$/;"	f	class:grid_group
is_valid	/usr/local/cuda/include/cooperative_groups.h	/^    _CG_QUALIFIER bool is_valid() const {$/;"	f	class:multi_grid_group
isfinite	/usr/local/cuda/include/math_functions.hpp	/^__forceinline__ __host__ __device__ __cudart_builtin__ int isfinite(double x) throw() { return __finite(x); }$/;"	f
isfinite	/usr/local/cuda/include/math_functions.hpp	/^__forceinline__ __host__ __device__ __cudart_builtin__ int isfinite(double x) { return __finite(x); }$/;"	f
isfinite	/usr/local/cuda/include/math_functions.hpp	/^__forceinline__ __host__ __device__ __cudart_builtin__ int isfinite(double x) { return __isfinited(x); }$/;"	f
isfinite	/usr/local/cuda/include/math_functions.hpp	/^__forceinline__ __host__ __device__ __cudart_builtin__ int isfinite(double x)$/;"	f
isfinite	/usr/local/cuda/include/math_functions.hpp	/^__forceinline__ __host__ __device__ __cudart_builtin__ int isfinite(float x) { return __finitef(x); }$/;"	f
isfinite	/usr/local/cuda/include/math_functions.hpp	/^__forceinline__ __host__ __device__ __cudart_builtin__ int isfinite(float x) { return __isfinitef(x); } $/;"	f
isfinite	/usr/local/cuda/include/math_functions.hpp	/^__forceinline__ __host__ __device__ __cudart_builtin__ int isfinite(float x) {$/;"	f
isfinite	/usr/local/cuda/include/math_functions.hpp	/^__forceinline__ __host__ __device__ __cudart_builtin__ int isfinite(long double x) $/;"	f
isfinite	/usr/local/cuda/include/math_functions.hpp	/^__forceinline__ __host__ __device__ __cudart_builtin__ int isfinite(long double x) { return __finitel(x); }$/;"	f
isfinite	/usr/local/cuda/include/math_functions.hpp	/^__forceinline__ __host__ __device__ __cudart_builtin__ int isfinite(long double x) { return __isfinite(x); }$/;"	f
isfinite	/usr/local/cuda/include/math_functions.hpp	/^__host__ __device__ __cudart_builtin__ int isfinite(double x) { return __finite(x); }$/;"	f
isfinite	/usr/local/cuda/include/math_functions.hpp	/^__host__ __device__ __cudart_builtin__ int isfinite(float x) { return __finitef(x); } $/;"	f
isfinite	/usr/local/cuda/include/math_functions.hpp	/^__host__ __device__ __cudart_builtin__ int isfinite(long double x) { return __finitel((double)x); }$/;"	f
isfinite	/usr/local/cuda/include/math_functions.hpp	/^static __inline__ __host__ __device__ bool isfinite(double a)$/;"	f
isfinite	/usr/local/cuda/include/math_functions.hpp	/^static __inline__ __host__ __device__ bool isfinite(float a)$/;"	f
isfinite	/usr/local/cuda/include/math_functions.hpp	/^static __inline__ __host__ __device__ bool isfinite(long double a)$/;"	f
isfinite	/usr/local/cuda/include/math_functions.hpp	/^static __inline__ __host__ __device__ int isfinite(double a)$/;"	f
isfinite	/usr/local/cuda/include/math_functions.hpp	/^static __inline__ __host__ __device__ int isfinite(float a)$/;"	f
isfinite	/usr/local/cuda/include/math_functions.hpp	/^static __inline__ __host__ __device__ int isfinite(long double a)$/;"	f
isfinite	/usr/local/cuda/include/math_functions.hpp	129;"	d
isinf	/usr/local/cuda/include/math_functions.hpp	/^__NV_BUILTIN_FUNC_DECL__ int  isinf(double x) throw() { return __isinf(x); }$/;"	f
isinf	/usr/local/cuda/include/math_functions.hpp	/^__forceinline__ __host__ __device__ __cudart_builtin__ int isinf(double x) throw()  { return __isinf(x); }$/;"	f
isinf	/usr/local/cuda/include/math_functions.hpp	/^__forceinline__ __host__ __device__ __cudart_builtin__ int isinf(double x) throw()  { return __isinfd(x); }$/;"	f
isinf	/usr/local/cuda/include/math_functions.hpp	/^__forceinline__ __host__ __device__ __cudart_builtin__ int isinf(double x) { return __isinf(x); }$/;"	f
isinf	/usr/local/cuda/include/math_functions.hpp	/^__forceinline__ __host__ __device__ __cudart_builtin__ int isinf(float x) { return __isinff(x); }$/;"	f
isinf	/usr/local/cuda/include/math_functions.hpp	/^__forceinline__ __host__ __device__ __cudart_builtin__ int isinf(long double x) { return __isinf(x); }$/;"	f
isinf	/usr/local/cuda/include/math_functions.hpp	/^__forceinline__ __host__ __device__ __cudart_builtin__ int isinf(long double x) { return __isinfl(x); }$/;"	f
isinf	/usr/local/cuda/include/math_functions.hpp	/^__host__ __device__ __cudart_builtin__ int isinf(double x) { return __isinf(x); }$/;"	f
isinf	/usr/local/cuda/include/math_functions.hpp	/^__host__ __device__ __cudart_builtin__ int isinf(float x) { return __isinff(x); }$/;"	f
isinf	/usr/local/cuda/include/math_functions.hpp	/^__host__ __device__ __cudart_builtin__ int isinf(long double x) { return __isinfl((double)x); }$/;"	f
isinf	/usr/local/cuda/include/math_functions.hpp	/^static __inline__ __host__ __device__ bool isinf(double a)$/;"	f
isinf	/usr/local/cuda/include/math_functions.hpp	/^static __inline__ __host__ __device__ bool isinf(float a)$/;"	f
isinf	/usr/local/cuda/include/math_functions.hpp	/^static __inline__ __host__ __device__ bool isinf(long double a)$/;"	f
isinf	/usr/local/cuda/include/math_functions.hpp	/^static __inline__ __host__ __device__ int isinf(double a)$/;"	f
isinf	/usr/local/cuda/include/math_functions.hpp	/^static __inline__ __host__ __device__ int isinf(float a)$/;"	f
isinf	/usr/local/cuda/include/math_functions.hpp	/^static __inline__ __host__ __device__ int isinf(long double a)$/;"	f
isinf	/usr/local/cuda/include/math_functions.hpp	131;"	d
isnan	/usr/local/cuda/include/math_functions.hpp	/^__NV_BUILTIN_FUNC_DECL__ int  isnan(double a) throw() { return __isnan(a); }$/;"	f
isnan	/usr/local/cuda/include/math_functions.hpp	/^__forceinline__ __host__ __device__ __cudart_builtin__ int isnan(double x) throw()  { return __isnan(x); }$/;"	f
isnan	/usr/local/cuda/include/math_functions.hpp	/^__forceinline__ __host__ __device__ __cudart_builtin__ int isnan(double x) throw()  { return __isnand(x); }$/;"	f
isnan	/usr/local/cuda/include/math_functions.hpp	/^__forceinline__ __host__ __device__ __cudart_builtin__ int isnan(double x) { return __isnan(x); }$/;"	f
isnan	/usr/local/cuda/include/math_functions.hpp	/^__forceinline__ __host__ __device__ __cudart_builtin__ int isnan(float x) { return __isnanf(x); }$/;"	f
isnan	/usr/local/cuda/include/math_functions.hpp	/^__forceinline__ __host__ __device__ __cudart_builtin__ int isnan(long double x) { return __isnan(x); }$/;"	f
isnan	/usr/local/cuda/include/math_functions.hpp	/^__forceinline__ __host__ __device__ __cudart_builtin__ int isnan(long double x) { return __isnanl(x); }$/;"	f
isnan	/usr/local/cuda/include/math_functions.hpp	/^__host__ __device__ __cudart_builtin__ int isnan(double x) { return __isnan(x); }$/;"	f
isnan	/usr/local/cuda/include/math_functions.hpp	/^__host__ __device__ __cudart_builtin__ int isnan(float x) { return __isnanf(x); }$/;"	f
isnan	/usr/local/cuda/include/math_functions.hpp	/^__host__ __device__ __cudart_builtin__ int isnan(long double x) { return __isnanl((double)x); }$/;"	f
isnan	/usr/local/cuda/include/math_functions.hpp	/^static __inline__ __host__ __device__ bool isnan(double a)$/;"	f
isnan	/usr/local/cuda/include/math_functions.hpp	/^static __inline__ __host__ __device__ bool isnan(float a)$/;"	f
isnan	/usr/local/cuda/include/math_functions.hpp	/^static __inline__ __host__ __device__ bool isnan(long double a)$/;"	f
isnan	/usr/local/cuda/include/math_functions.hpp	/^static __inline__ __host__ __device__ int isnan(double a)$/;"	f
isnan	/usr/local/cuda/include/math_functions.hpp	/^static __inline__ __host__ __device__ int isnan(float a)$/;"	f
isnan	/usr/local/cuda/include/math_functions.hpp	/^static __inline__ __host__ __device__ int isnan(long double a)$/;"	f
isnan	/usr/local/cuda/include/math_functions.hpp	130;"	d
j0	/usr/local/cuda/include/math_functions.hpp	/^__MATH_FUNCTIONS_DECL__ float j0(float a)$/;"	f
j1	/usr/local/cuda/include/math_functions.hpp	/^__MATH_FUNCTIONS_DECL__ float j1(float a)$/;"	f
jn	/usr/local/cuda/include/math_functions.hpp	/^__MATH_FUNCTIONS_DECL__ float jn(int n, float a)$/;"	f
jpeg	/usr/local/cuda/include/dynlink_cuviddec.h	/^        CUVIDJPEGPICPARAMS jpeg;$/;"	m	union:_CUVIDPICPARAMS::__anon120
k	/usr/local/cuda/include/curand_mtgp32.h	/^    mtgp32_kernel_params_t * k;$/;"	m	struct:curandStateMtgp32
kernel	src/gemm_fpga.c	/^static cl_kernel kernel = NULL;$/;"	v	file:
kernelExecTimeoutEnabled	/usr/local/cuda/include/driver_types.h	/^    int    kernelExecTimeoutEnabled;   \/**< Specified whether there is a run time limit on kernels *\/$/;"	m	struct:cudaDeviceProp
kernelParams	/usr/local/cuda/include/cuda.h	/^    void **kernelParams;         \/**< Array of pointers to kernel parameters *\/$/;"	m	struct:CUDA_LAUNCH_PARAMS_st
key	/usr/local/cuda/include/curand_philox4x32_x.h	/^   uint2 key;$/;"	m	struct:curandStatePhilox4_32_10
key	src/option_list.h	/^    char *key;$/;"	m	struct:__anon8
kind	/usr/local/cuda/include/driver_types.h	/^    enum cudaMemcpyKind    kind;      \/**< Type of transfer *\/$/;"	m	struct:cudaMemcpy3DParms	typeref:enum:cudaMemcpy3DParms::cudaMemcpyKind
kmean_max_iter	/usr/local/cuda/include/nvgraph.h	/^       int kmean_max_iter; \/\/ maximum number of iterations of kemeans $/;"	m	struct:SpectralClusteringParameter
kmean_tolerance	/usr/local/cuda/include/nvgraph.h	/^       float kmean_tolerance; \/\/ tolerance of kmeans$/;"	m	struct:SpectralClusteringParameter
kvp	src/option_list.h	/^} kvp;$/;"	t	typeref:struct:__anon8
l1Cache	/usr/local/cuda/include/nvml.h	/^    unsigned long long l1Cache;      \/\/!< L1 cache errors$/;"	m	struct:nvmlEccErrorCounts_st
l1_cpu	src/blas.c	/^void l1_cpu(int n, float *pred, float *truth, float *delta, float *error)$/;"	f
l2Cache	/usr/local/cuda/include/nvml.h	/^    unsigned long long l2Cache;      \/\/!< L2 cache errors$/;"	m	struct:nvmlEccErrorCounts_st
l2CacheSize	/usr/local/cuda/include/driver_types.h	/^    int    l2CacheSize;                \/**< Size of L2 cache in bytes *\/$/;"	m	struct:cudaDeviceProp
l2_cpu	src/blas.c	/^void l2_cpu(int n, float *pred, float *truth, float *delta, float *error)$/;"	f
laneid	/usr/local/cuda/include/cooperative_groups_helpers.h	/^    _CG_STATIC_QUALIFIER unsigned int laneid()$/;"	f	namespace:__internal
lanemask32_eq	/usr/local/cuda/include/cooperative_groups_helpers.h	/^    _CG_STATIC_QUALIFIER unsigned int lanemask32_eq()$/;"	f	namespace:__internal
lanemask32_lt	/usr/local/cuda/include/cooperative_groups_helpers.h	/^    _CG_STATIC_QUALIFIER unsigned int lanemask32_lt()$/;"	f	namespace:__internal
lastLayer	/usr/local/cuda/include/cuda.h	/^    unsigned int lastLayer;        \/**< Last layer index *\/$/;"	m	struct:CUDA_RESOURCE_VIEW_DESC_st
lastLayer	/usr/local/cuda/include/driver_types.h	/^    unsigned int                lastLayer;        \/**< Last layer index *\/$/;"	m	struct:cudaResourceViewDesc
lastMipmapLevel	/usr/local/cuda/include/cuda.h	/^    unsigned int lastMipmapLevel;  \/**< Last defined mipmap level *\/$/;"	m	struct:CUDA_RESOURCE_VIEW_DESC_st
lastMipmapLevel	/usr/local/cuda/include/driver_types.h	/^    unsigned int                lastMipmapLevel;  \/**< Last defined mipmap level *\/$/;"	m	struct:cudaResourceViewDesc
latencyUsec	/usr/local/cuda/include/nvml.h	/^    long long latencyUsec;      \/\/!< How long this field value took to update (in usec) within NVML. This may be averaged across several fields that are serviced by the same driver call.$/;"	m	struct:nvmlFieldValue_st
ldexp	/usr/local/cuda/include/math_functions.hpp	/^__host__ __device__ __cudart_builtin__ float     ldexp(float a, int b)   { return ldexpf(a, b); }$/;"	f
leaky_activate	src/activations.h	/^static inline float leaky_activate(float x){return (x>0) ? x : .1*x;}$/;"	f
leaky_gradient	src/activations.h	/^static inline float leaky_gradient(float x){return (x>0) ? 1 : .1;}$/;"	f
left	/usr/local/cuda/include/dynlink_cuviddec.h	/^        short left;$/;"	m	struct:_CUVIDDECODECREATEINFO::__anon114
left	/usr/local/cuda/include/dynlink_cuviddec.h	/^        short left;$/;"	m	struct:_CUVIDDECODECREATEINFO::__anon115
left	/usr/local/cuda/include/dynlink_nvcuvid.h	/^        int left;                           \/**< left position of display rect  *\/$/;"	m	struct:__anon123::__anon125
length	/usr/local/cuda/include/curand_discrete.h	/^    unsigned int length;$/;"	m	struct:curandDistributionM2Shift_st
length	/usr/local/cuda/include/curand_discrete.h	/^    unsigned int length;$/;"	m	struct:curandDistributionShift_st
length	/usr/local/cuda/include/nppi_compression_functions.h	/^    Npp32s length; \/**< Length of compressed (encoded) scan data *\/$/;"	m	struct:__anon165
length	src/stb_image.h	/^   stbi__uint32 length;$/;"	m	struct:__anon21
letterbox_image	src/image.c	/^image letterbox_image(image im, int w, int h)$/;"	f
letterbox_image_into	src/image.c	/^void letterbox_image_into(image im, int w, int h, image boxed)$/;"	f
level_idc	/usr/local/cuda/include/dynlink_cuviddec.h	/^    unsigned char level_idc;$/;"	m	struct:_CUVIDH264SVCEXT
lflags	src/stb_image.h	/^   int lflags;$/;"	m	struct:__anon26
lgamma	/usr/local/cuda/include/math_functions.hpp	/^__MATH_FUNCTIONS_DECL__ float lgamma(float a)$/;"	f
lhtan_activate	src/activations.h	/^static inline float lhtan_activate(float x)$/;"	f
lhtan_gradient	src/activations.h	/^static inline float lhtan_gradient(float x)$/;"	f
libDescriptor	/usr/local/cuda/include/cudalibxt.h	/^    void *libDescriptor;        \/\/library specific descriptor e.g. FFT transform plan object$/;"	m	struct:cudaLibXtDesc_t
libFormat	/usr/local/cuda/include/cudalibxt.h	/^typedef enum libFormat_t libFormat;$/;"	t	typeref:enum:libFormat_t
libFormat_t	/usr/local/cuda/include/cudalibxt.h	/^enum libFormat_t {$/;"	g
library	/usr/local/cuda/include/cudalibxt.h	/^    libFormat library;          \/\/which library recognizes the format$/;"	m	struct:cudaLibXtDesc_t
libraryPropertyType	/usr/local/cuda/include/cudnn.h	/^} libraryPropertyType;$/;"	t	typeref:enum:libraryPropertyType_t
libraryPropertyType	/usr/local/cuda/include/library_types.h	/^} libraryPropertyType;$/;"	t	typeref:enum:libraryPropertyType_t
libraryPropertyType_t	/usr/local/cuda/include/cudnn.h	/^typedef enum libraryPropertyType_t$/;"	g
libraryPropertyType_t	/usr/local/cuda/include/library_types.h	/^typedef enum libraryPropertyType_t$/;"	g
licensableFeaturesCount	/usr/local/cuda/include/nvml.h	/^    unsigned int                licensableFeaturesCount;    \/\/<! Entries returned in \\a gridLicensableFeatures array$/;"	m	struct:nvmlGridLicensableFeatures_st
licenseInfo	/usr/local/cuda/include/nvml.h	/^    char                            licenseInfo[NVML_GRID_LICENSE_INFO_MAX_LENGTH];$/;"	m	struct:nvmlGridLicensableFeature_st
limitingFactors	/usr/local/cuda/include/cuda_occupancy.h	/^    unsigned int limitingFactors;      \/\/ Factors that limited occupancy. A bit$/;"	m	struct:cudaOccResult
line0	src/stb_image.h	/^   stbi_uc *line0,*line1;$/;"	m	struct:__anon18
line1	src/stb_image.h	/^   stbi_uc *line0,*line1;$/;"	m	struct:__anon18
line_size	src/stb_image.h	/^   int line_size;$/;"	m	struct:__anon26
linear	/usr/local/cuda/include/cuda.h	/^        } linear;$/;"	m	union:CUDA_RESOURCE_DESC_st::__anon41	typeref:struct:CUDA_RESOURCE_DESC_st::__anon41::__anon44
linear	/usr/local/cuda/include/driver_types.h	/^		} linear;$/;"	m	union:cudaResourceDesc::__anon109	typeref:struct:cudaResourceDesc::__anon109::__anon112
linear_activate	src/activations.h	/^static inline float linear_activate(float x){return x;}$/;"	f
linear_gradient	src/activations.h	/^static inline float linear_gradient(float x){return 1;}$/;"	f
linebuf	src/stb_image.h	/^      stbi_uc *linebuf;$/;"	m	struct:__anon16::__anon17
list_insert	src/list.c	/^void list_insert(list *l, void *val)$/;"	f
list_pop	src/list.c	/^void *list_pop(list *l){$/;"	f
list_to_array	src/list.c	/^void **list_to_array(list *l)$/;"	f
lists_modification_present_flag	/usr/local/cuda/include/dynlink_cuviddec.h	/^    unsigned char lists_modification_present_flag;$/;"	m	struct:_CUVIDHEVCPICPARAMS
ll2double	/usr/local/cuda/include/device_double_functions.hpp	/^__DEVICE_DOUBLE_FUNCTIONS_DECL__ double ll2double(long long int a, enum cudaRoundMode mode)$/;"	f
llValue	/usr/local/cuda/include/nvToolsExt.h	/^        int64_t llValue;$/;"	m	union:nvtxEventAttributes_v2::payload_t
llmax	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ long long llmax(long long x, long long y)$/;"	f
llmax	/usr/local/cuda/include/math_functions.hpp	/^__HELPER_FUNC_LINKAGE long long int llmax(long long int a, long long int b)$/;"	f
llmin	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ long long llmin(long long x, long long y)$/;"	f
llmin	/usr/local/cuda/include/math_functions.hpp	/^__HELPER_FUNC_LINKAGE long long int llmin(long long int a, long long int b)$/;"	f
llrint	/usr/local/cuda/include/math_functions.hpp	/^__MATH_FUNCTIONS_DECL__ long long int llrint(float a)$/;"	f
llround	/usr/local/cuda/include/math_functions.hpp	/^__MATH_FUNCTIONS_DECL__ long long int llround(float a)$/;"	f
load_all_cifar10	src/data.c	/^data load_all_cifar10()$/;"	f
load_alphabet	src/image.c	/^image **load_alphabet()$/;"	f
load_batchnorm_weights	src/parser.c	/^void load_batchnorm_weights(layer l, FILE *fp)$/;"	f
load_categorical_data_csv	src/data.c	/^data load_categorical_data_csv(char *filename, int target, int k)$/;"	f
load_cifar10_data	src/data.c	/^data load_cifar10_data(char *filename)$/;"	f
load_connected_weights	src/parser.c	/^void load_connected_weights(layer l, FILE *fp, int transpose)$/;"	f
load_convolutional_weights	src/parser.c	/^void load_convolutional_weights(layer l, FILE *fp)$/;"	f
load_convolutional_weights_binary	src/parser.c	/^void load_convolutional_weights_binary(layer l, FILE *fp)$/;"	f
load_data	src/data.c	/^pthread_t load_data(load_args args)$/;"	f
load_data_augment	src/data.c	/^data load_data_augment(char **paths, int n, int m, char **labels, int k, tree *hierarchy, int min, int max, int size, float angle, float aspect, float hue, float saturation, float exposure, int center)$/;"	f
load_data_blocking	src/data.c	/^void load_data_blocking(load_args args)$/;"	f
load_data_captcha	src/data.c	/^data load_data_captcha(char **paths, int n, int m, int k, int w, int h)$/;"	f
load_data_captcha_encode	src/data.c	/^data load_data_captcha_encode(char **paths, int n, int m, int w, int h)$/;"	f
load_data_compare	src/data.c	/^data load_data_compare(int n, char **paths, int m, int classes, int w, int h)$/;"	f
load_data_detection	src/data.c	/^data load_data_detection(int n, char **paths, int m, int w, int h, int boxes, int classes, float jitter, float hue, float saturation, float exposure, int *id_remap)$/;"	f
load_data_in_thread	src/data.c	/^pthread_t load_data_in_thread(load_args args)$/;"	f
load_data_iseg	src/data.c	/^data load_data_iseg(int n, char **paths, int m, int w, int h, int classes, int boxes, int coords, int min, int max, float angle, float aspect, float hue, float saturation, float exposure)$/;"	f
load_data_old	src/data.c	/^data load_data_old(char **paths, int n, int m, char **labels, int k, int w, int h)$/;"	f
load_data_region	src/data.c	/^data load_data_region(int n, char **paths, int m, int w, int h, int size, int classes, float jitter, float hue, float saturation, float exposure)$/;"	f
load_data_regression	src/data.c	/^data load_data_regression(char **paths, int n, int m, int min, int max, int size, float angle, float aspect, float hue, float saturation, float exposure)$/;"	f
load_data_seg	src/data.c	/^data load_data_seg(int n, char **paths, int m, int w, int h, int classes, int min, int max, float angle, float aspect, float hue, float saturation, float exposure, int div)$/;"	f
load_data_super	src/data.c	/^data load_data_super(char **paths, int n, int m, int w, int h, int scale)$/;"	f
load_data_swag	src/data.c	/^data load_data_swag(char **paths, int n, int classes, float jitter)$/;"	f
load_data_tag	src/data.c	/^data load_data_tag(char **paths, int n, int m, int k, int min, int max, int size, float angle, float aspect, float hue, float saturation, float exposure)$/;"	f
load_data_writing	src/data.c	/^data load_data_writing(char **paths, int n, int m, int w, int h, int out_w, int out_h)$/;"	f
load_go	src/data.c	/^data load_go(char *filename)$/;"	f
load_id_remap	src/utils.c	/^int *load_id_remap(char *id_remap_file, int classes){$/;"	f
load_image	src/image.c	/^image load_image(char *filename, int w, int h, int c)$/;"	f
load_image_augment_paths	src/data.c	/^matrix load_image_augment_paths(char **paths, int n, int min, int max, int size, float angle, float aspect, float hue, float saturation, float exposure, int center)$/;"	f
load_image_color	src/image.c	/^image load_image_color(char *filename, int w, int h)$/;"	f
load_image_cv	src/image.c	/^image load_image_cv(char *filename, int channels)$/;"	f
load_image_paths	src/data.c	/^matrix load_image_paths(char **paths, int n, int w, int h)$/;"	f
load_image_paths_gray	src/data.c	/^matrix load_image_paths_gray(char **paths, int n, int w, int h)$/;"	f
load_image_stb	src/image.c	/^image load_image_stb(char *filename, int channels)$/;"	f
load_jpeg_image	src/stb_image.h	/^static stbi_uc *load_jpeg_image(stbi__jpeg *z, int *out_x, int *out_y, int *comp, int req_comp)$/;"	f
load_labels_paths	src/data.c	/^matrix load_labels_paths(char **paths, int n, char **labels, int k, tree *hierarchy)$/;"	f
load_network	src/network.c	/^network load_network(char *cfg, char *weights, int clear)$/;"	f
load_network_p	src/network.c	/^network *load_network_p(char *cfg, char *weights, int clear)$/;"	f
load_regression_labels_paths	src/data.c	/^matrix load_regression_labels_paths(char **paths, int n)$/;"	f
load_rle	src/data.c	/^void load_rle(image im, int *rle, int n)$/;"	f
load_tags_paths	src/data.c	/^matrix load_tags_paths(char **paths, int n, int k)$/;"	f
load_thread	src/data.c	/^void *load_thread(void *ptr)$/;"	f
load_threads	src/data.c	/^void *load_threads(void *ptr)$/;"	f
load_weights	src/parser.c	/^void load_weights(network *net, char *filename)$/;"	f
load_weights_upto	src/parser.c	/^void load_weights_upto(network *net, char *filename, int start, int cutoff)$/;"	f
localL1CacheSupported	/usr/local/cuda/include/driver_types.h	/^    int    localL1CacheSupported;      \/**< Device supports caching locals in L1 *\/$/;"	m	struct:cudaDeviceProp
localSizeBytes	/usr/local/cuda/include/driver_types.h	/^   size_t localSizeBytes;$/;"	m	struct:cudaFuncAttributes
local_layer	src/local_layer.h	/^typedef layer local_layer;$/;"	t
local_out_height	src/local_layer.c	/^int local_out_height(local_layer l)$/;"	f
local_out_width	src/local_layer.c	/^int local_out_width(local_layer l)$/;"	f
log	/usr/local/cuda/include/math_functions.hpp	/^__host__ __device__ __cudart_builtin__ float     log(float in)           { return logf(in); }$/;"	f
log10	/usr/local/cuda/include/math_functions.hpp	/^__host__ __device__ __cudart_builtin__ float     log10(float in)         { return log10f(in); }$/;"	f
log1p	/usr/local/cuda/include/math_functions.hpp	/^__MATH_FUNCTIONS_DECL__ float log1p(float a)$/;"	f
log2	/usr/local/cuda/include/math_functions.hpp	/^__MATH_FUNCTIONS_DECL__ float log2(float a)$/;"	f
log2_diff_max_min_luma_coding_block_size	/usr/local/cuda/include/dynlink_cuviddec.h	/^    unsigned char log2_diff_max_min_luma_coding_block_size;$/;"	m	struct:_CUVIDHEVCPICPARAMS
log2_diff_max_min_pcm_luma_coding_block_size	/usr/local/cuda/include/dynlink_cuviddec.h	/^    unsigned char log2_diff_max_min_pcm_luma_coding_block_size;$/;"	m	struct:_CUVIDHEVCPICPARAMS
log2_diff_max_min_transform_block_size	/usr/local/cuda/include/dynlink_cuviddec.h	/^    unsigned char log2_diff_max_min_transform_block_size;$/;"	m	struct:_CUVIDHEVCPICPARAMS
log2_max_frame_num_minus4	/usr/local/cuda/include/dynlink_cuviddec.h	/^    int log2_max_frame_num_minus4;$/;"	m	struct:_CUVIDH264PICPARAMS
log2_max_pic_order_cnt_lsb_minus4	/usr/local/cuda/include/dynlink_cuviddec.h	/^    int log2_max_pic_order_cnt_lsb_minus4;$/;"	m	struct:_CUVIDH264PICPARAMS
log2_max_pic_order_cnt_lsb_minus4	/usr/local/cuda/include/dynlink_cuviddec.h	/^    unsigned char log2_max_pic_order_cnt_lsb_minus4;$/;"	m	struct:_CUVIDHEVCPICPARAMS
log2_min_luma_coding_block_size_minus3	/usr/local/cuda/include/dynlink_cuviddec.h	/^    unsigned char log2_min_luma_coding_block_size_minus3;$/;"	m	struct:_CUVIDHEVCPICPARAMS
log2_min_pcm_luma_coding_block_size_minus3	/usr/local/cuda/include/dynlink_cuviddec.h	/^    unsigned char log2_min_pcm_luma_coding_block_size_minus3;$/;"	m	struct:_CUVIDHEVCPICPARAMS
log2_min_transform_block_size_minus2	/usr/local/cuda/include/dynlink_cuviddec.h	/^    unsigned char log2_min_transform_block_size_minus2;$/;"	m	struct:_CUVIDHEVCPICPARAMS
log2_parallel_merge_level_minus2	/usr/local/cuda/include/dynlink_cuviddec.h	/^    unsigned char log2_parallel_merge_level_minus2;$/;"	m	struct:_CUVIDHEVCPICPARAMS
log2_tile_columns	/usr/local/cuda/include/dynlink_cuviddec.h	/^    unsigned char log2_tile_columns;$/;"	m	struct:_CUVIDVP9PICPARAMS
log2_tile_rows	/usr/local/cuda/include/dynlink_cuviddec.h	/^    unsigned char log2_tile_rows;$/;"	m	struct:_CUVIDVP9PICPARAMS
logb	/usr/local/cuda/include/math_functions.hpp	/^__MATH_FUNCTIONS_DECL__ float logb(float a)$/;"	f
loggy_activate	src/activations.h	/^static inline float loggy_activate(float x){return 2.\/(1. + exp(-x)) - 1;}$/;"	f
loggy_gradient	src/activations.h	/^static inline float loggy_gradient(float x)$/;"	f
logistic_activate	src/activations.h	/^static inline float logistic_activate(float x){return 1.\/(1. + exp(-x));}$/;"	f
logistic_gradient	src/activations.h	/^static inline float logistic_gradient(float x){return (1-x)*x;}$/;"	f
logit	src/region_layer.c	/^float logit(float x)$/;"	f
long1	/usr/local/cuda/include/vector_types.h	/^struct __device_builtin__ long1$/;"	s
long1	/usr/local/cuda/include/vector_types.h	/^typedef __device_builtin__ struct long1 long1;$/;"	t	typeref:struct:long1
long2	/usr/local/cuda/include/vector_types.h	/^typedef __device_builtin__ struct long2 long2;$/;"	t	typeref:struct:long2
long3	/usr/local/cuda/include/vector_types.h	/^struct __device_builtin__ long3$/;"	s
long3	/usr/local/cuda/include/vector_types.h	/^typedef __device_builtin__ struct long3 long3;$/;"	t	typeref:struct:long3
long4	/usr/local/cuda/include/vector_types.h	/^typedef __device_builtin__ struct long4 long4;$/;"	t	typeref:struct:long4
long_term_ref_pics_present_flag	/usr/local/cuda/include/dynlink_cuviddec.h	/^    unsigned char long_term_ref_pics_present_flag;$/;"	m	struct:_CUVIDHEVCPICPARAMS
longlong1	/usr/local/cuda/include/vector_types.h	/^struct __device_builtin__ longlong1$/;"	s
longlong1	/usr/local/cuda/include/vector_types.h	/^typedef __device_builtin__ struct longlong1 longlong1;$/;"	t	typeref:struct:longlong1
longlong2	/usr/local/cuda/include/vector_types.h	/^typedef __device_builtin__ struct longlong2 longlong2;$/;"	t	typeref:struct:longlong2
longlong3	/usr/local/cuda/include/vector_types.h	/^struct __device_builtin__ longlong3$/;"	s
longlong3	/usr/local/cuda/include/vector_types.h	/^typedef __device_builtin__ struct longlong3 longlong3;$/;"	t	typeref:struct:longlong3
longlong4	/usr/local/cuda/include/vector_types.h	/^typedef __device_builtin__ struct longlong4 longlong4;$/;"	t	typeref:struct:longlong4
loopFilterLevel	/usr/local/cuda/include/dynlink_cuviddec.h	/^    unsigned char loopFilterLevel;$/;"	m	struct:_CUVIDVP9PICPARAMS
loopFilterSharpness	/usr/local/cuda/include/dynlink_cuviddec.h	/^    unsigned char loopFilterSharpness;$/;"	m	struct:_CUVIDVP9PICPARAMS
loop_filter_across_slices_enabled_flag	/usr/local/cuda/include/dynlink_cuviddec.h	/^    unsigned char loop_filter_across_slices_enabled_flag;$/;"	m	struct:_CUVIDHEVCPICPARAMS
loop_filter_across_tiles_enabled_flag	/usr/local/cuda/include/dynlink_cuviddec.h	/^    unsigned char loop_filter_across_tiles_enabled_flag;$/;"	m	struct:_CUVIDHEVCPICPARAMS
loopfilter	/usr/local/cuda/include/dynlink_cuviddec.h	/^    int loopfilter;$/;"	m	struct:_CUVIDVC1PICPARAMS
lpal	src/stb_image.h	/^   stbi_uc lpal[256][4];$/;"	m	struct:__anon26
lrint	/usr/local/cuda/include/math_functions.hpp	/^__MATH_FUNCTIONS_DECL__ long int lrint(float a)$/;"	f
lround	/usr/local/cuda/include/math_functions.hpp	/^__MATH_FUNCTIONS_DECL__ long int lround(float a)$/;"	f
m_ctx	/usr/local/cuda/include/dynlink_cuviddec.h	/^    CUvideoctxlock m_ctx;$/;"	m	class:CCtxAutoLock
mag_array	src/utils.c	/^float mag_array(float *a, int n)$/;"	f
magic	/usr/local/cuda/include/fatBinaryCtl.h	/^  int magic;$/;"	m	struct:__anon134
major	/usr/local/cuda/include/driver_types.h	/^    int    major;                      \/**< Major compute capability *\/$/;"	m	struct:cudaDeviceProp
major	/usr/local/cuda/include/nppdefs.h	/^    int    major;   \/**<  Major version number *\/$/;"	m	struct:__anon146
make_activation_layer	src/activation_layer.c	/^layer make_activation_layer(int batch, int inputs, ACTIVATION activation)$/;"	f
make_avgpool_layer	src/avgpool_layer.c	/^avgpool_layer make_avgpool_layer(int batch, int w, int h, int c)$/;"	f
make_batchnorm_layer	src/batchnorm_layer.c	/^layer make_batchnorm_layer(int batch, int w, int h, int c)$/;"	f
make_boxes	src/network.c	/^box *make_boxes(network *net)$/;"	f
make_char1	/usr/local/cuda/include/vector_functions.hpp	/^__VECTOR_FUNCTIONS_DECL__ char1 make_char1(signed char x)$/;"	f
make_char2	/usr/local/cuda/include/vector_functions.hpp	/^__VECTOR_FUNCTIONS_DECL__ char2 make_char2(signed char x, signed char y)$/;"	f
make_char3	/usr/local/cuda/include/vector_functions.hpp	/^__VECTOR_FUNCTIONS_DECL__ char3 make_char3(signed char x, signed char y, signed char z)$/;"	f
make_char4	/usr/local/cuda/include/vector_functions.hpp	/^__VECTOR_FUNCTIONS_DECL__ char4 make_char4(signed char x, signed char y, signed char z, signed char w)$/;"	f
make_connected_layer	src/connected_layer.c	/^layer make_connected_layer(int batch, int inputs, int outputs, ACTIVATION activation, int batch_normalize, int adam)$/;"	f
make_convolutional_layer	src/convolutional_layer.c	/^convolutional_layer make_convolutional_layer(int batch, int h, int w, int c, int n, int size, int stride, int padding, ACTIVATION activation, int batch_normalize, int binary, int xnor, int adam)$/;"	f
make_cost_layer	src/cost_layer.c	/^cost_layer make_cost_layer(int batch, int inputs, COST_TYPE cost_type, float scale)$/;"	f
make_crnn_layer	src/crnn_layer.c	/^layer make_crnn_layer(int batch, int h, int w, int c, int hidden_filters, int output_filters, int steps, ACTIVATION activation, int batch_normalize)$/;"	f
make_crop_layer	src/crop_layer.c	/^crop_layer make_crop_layer(int batch, int h, int w, int c, int crop_height, int crop_width, int flip, float angle, float saturation, float exposure)$/;"	f
make_cuComplex	/usr/local/cuda/include/cuComplex.h	/^__host__ __device__ static __inline__ cuComplex make_cuComplex (float x, $/;"	f
make_cuDoubleComplex	/usr/local/cuda/include/cuComplex.h	/^__host__ __device__ static __inline__ cuDoubleComplex make_cuDoubleComplex $/;"	f
make_cuFloatComplex	/usr/local/cuda/include/cuComplex.h	/^__host__ __device__ static __inline__ cuFloatComplex make_cuFloatComplex $/;"	f
make_cudaExtent	/usr/local/cuda/include/driver_functions.h	/^static __inline__ __host__ struct cudaExtent make_cudaExtent(size_t w, size_t h, size_t d) $/;"	f
make_cudaPitchedPtr	/usr/local/cuda/include/driver_functions.h	/^static __inline__ __host__ struct cudaPitchedPtr make_cudaPitchedPtr(void *d, size_t p, size_t xsz, size_t ysz) $/;"	f
make_cudaPos	/usr/local/cuda/include/driver_functions.h	/^static __inline__ __host__ struct cudaPos make_cudaPos(size_t x, size_t y, size_t z) $/;"	f
make_deconvolutional_layer	src/deconvolutional_layer.c	/^layer make_deconvolutional_layer(int batch, int h, int w, int c, int n, int size, int stride, int padding, ACTIVATION activation, int batch_normalize, int adam)$/;"	f
make_detection_layer	src/detection_layer.c	/^detection_layer make_detection_layer(int batch, int inputs, int n, int side, int classes, int coords, int rescore)$/;"	f
make_double1	/usr/local/cuda/include/vector_functions.hpp	/^__VECTOR_FUNCTIONS_DECL__ double1 make_double1(double x)$/;"	f
make_double2	/usr/local/cuda/include/vector_functions.hpp	/^__VECTOR_FUNCTIONS_DECL__ double2 make_double2(double x, double y)$/;"	f
make_double3	/usr/local/cuda/include/vector_functions.hpp	/^__VECTOR_FUNCTIONS_DECL__ double3 make_double3(double x, double y, double z)$/;"	f
make_double4	/usr/local/cuda/include/vector_functions.hpp	/^__VECTOR_FUNCTIONS_DECL__ double4 make_double4(double x, double y, double z, double w)$/;"	f
make_dropout_layer	src/dropout_layer.c	/^dropout_layer make_dropout_layer(int batch, int inputs, float probability)$/;"	f
make_empty_image	src/image.c	/^image make_empty_image(int w, int h, int c)$/;"	f
make_float1	/usr/local/cuda/include/vector_functions.hpp	/^__VECTOR_FUNCTIONS_DECL__ float1 make_float1(float x)$/;"	f
make_float2	/usr/local/cuda/include/vector_functions.hpp	/^__VECTOR_FUNCTIONS_DECL__ float2 make_float2(float x, float y)$/;"	f
make_float3	/usr/local/cuda/include/vector_functions.hpp	/^__VECTOR_FUNCTIONS_DECL__ float3 make_float3(float x, float y, float z)$/;"	f
make_float4	/usr/local/cuda/include/vector_functions.hpp	/^__VECTOR_FUNCTIONS_DECL__ float4 make_float4(float x, float y, float z, float w)$/;"	f
make_gru_layer	src/gru_layer.c	/^layer make_gru_layer(int batch, int inputs, int outputs, int steps, int batch_normalize, int adam)$/;"	f
make_half2	/usr/local/cuda/include/cuda_fp16.hpp	/^__VECTOR_FUNCTIONS_DECL__ __half2 make_half2(__half x, __half y)$/;"	f
make_image	src/image.c	/^image make_image(int w, int h, int c)$/;"	f
make_int1	/usr/local/cuda/include/vector_functions.hpp	/^__VECTOR_FUNCTIONS_DECL__ int1 make_int1(int x)$/;"	f
make_int2	/usr/local/cuda/include/vector_functions.hpp	/^__VECTOR_FUNCTIONS_DECL__ int2 make_int2(int x, int y)$/;"	f
make_int3	/usr/local/cuda/include/vector_functions.hpp	/^__VECTOR_FUNCTIONS_DECL__ int3 make_int3(int x, int y, int z)$/;"	f
make_int4	/usr/local/cuda/include/vector_functions.hpp	/^__VECTOR_FUNCTIONS_DECL__ int4 make_int4(int x, int y, int z, int w)$/;"	f
make_list	src/list.c	/^list *make_list()$/;"	f
make_local_layer	src/local_layer.c	/^local_layer make_local_layer(int batch, int h, int w, int c, int n, int size, int stride, int pad, ACTIVATION activation)$/;"	f
make_long1	/usr/local/cuda/include/vector_functions.hpp	/^__VECTOR_FUNCTIONS_DECL__ long1 make_long1(long int x)$/;"	f
make_long2	/usr/local/cuda/include/vector_functions.hpp	/^__VECTOR_FUNCTIONS_DECL__ long2 make_long2(long int x, long int y)$/;"	f
make_long3	/usr/local/cuda/include/vector_functions.hpp	/^__VECTOR_FUNCTIONS_DECL__ long3 make_long3(long int x, long int y, long int z)$/;"	f
make_long4	/usr/local/cuda/include/vector_functions.hpp	/^__VECTOR_FUNCTIONS_DECL__ long4 make_long4(long int x, long int y, long int z, long int w)$/;"	f
make_longlong1	/usr/local/cuda/include/vector_functions.hpp	/^__VECTOR_FUNCTIONS_DECL__ longlong1 make_longlong1(long long int x)$/;"	f
make_longlong2	/usr/local/cuda/include/vector_functions.hpp	/^__VECTOR_FUNCTIONS_DECL__ longlong2 make_longlong2(long long int x, long long int y)$/;"	f
make_longlong3	/usr/local/cuda/include/vector_functions.hpp	/^__VECTOR_FUNCTIONS_DECL__ longlong3 make_longlong3(long long int x, long long int y, long long int z)$/;"	f
make_longlong4	/usr/local/cuda/include/vector_functions.hpp	/^__VECTOR_FUNCTIONS_DECL__ longlong4 make_longlong4(long long int x, long long int y, long long int z, long long int w)$/;"	f
make_lstm_layer	src/lstm_layer.c	/^layer make_lstm_layer(int batch, int inputs, int outputs, int steps, int batch_normalize, int adam)$/;"	f
make_matrix	src/matrix.c	/^matrix make_matrix(int rows, int cols)$/;"	f
make_maxpool_layer	src/maxpool_layer.c	/^maxpool_layer make_maxpool_layer(int batch, int h, int w, int c, int size, int stride, int padding)$/;"	f
make_network	src/network.c	/^network make_network(int n)$/;"	f
make_normalization_layer	src/normalization_layer.c	/^layer make_normalization_layer(int batch, int w, int h, int c, int size, float alpha, float beta, float kappa)$/;"	f
make_probs	src/network.c	/^float **make_probs(network *net)$/;"	f
make_random_image	src/image.c	/^image make_random_image(int w, int h, int c)$/;"	f
make_region_layer	src/region_layer.c	/^layer make_region_layer(int batch, int w, int h, int n, int classes, int coords)$/;"	f
make_reorg_layer	src/reorg_layer.c	/^layer make_reorg_layer(int batch, int w, int h, int c, int stride, int reverse, int flatten, int extra)$/;"	f
make_rnn_layer	src/rnn_layer.c	/^layer make_rnn_layer(int batch, int inputs, int outputs, int steps, ACTIVATION activation, int batch_normalize, int adam)$/;"	f
make_route_layer	src/route_layer.c	/^route_layer make_route_layer(int batch, int n, int *input_layers, int *input_sizes)$/;"	f
make_short1	/usr/local/cuda/include/vector_functions.hpp	/^__VECTOR_FUNCTIONS_DECL__ short1 make_short1(short x)$/;"	f
make_short2	/usr/local/cuda/include/vector_functions.hpp	/^__VECTOR_FUNCTIONS_DECL__ short2 make_short2(short x, short y)$/;"	f
make_short3	/usr/local/cuda/include/vector_functions.hpp	/^__VECTOR_FUNCTIONS_DECL__ short3 make_short3(short x,short y, short z)$/;"	f
make_short4	/usr/local/cuda/include/vector_functions.hpp	/^__VECTOR_FUNCTIONS_DECL__ short4 make_short4(short x, short y, short z, short w)$/;"	f
make_shortcut_layer	src/shortcut_layer.c	/^layer make_shortcut_layer(int batch, int index, int w, int h, int c, int w2, int h2, int c2)$/;"	f
make_softmax_layer	src/softmax_layer.c	/^softmax_layer make_softmax_layer(int batch, int inputs, int groups)$/;"	f
make_uchar1	/usr/local/cuda/include/vector_functions.hpp	/^__VECTOR_FUNCTIONS_DECL__ uchar1 make_uchar1(unsigned char x)$/;"	f
make_uchar2	/usr/local/cuda/include/vector_functions.hpp	/^__VECTOR_FUNCTIONS_DECL__ uchar2 make_uchar2(unsigned char x, unsigned char y)$/;"	f
make_uchar3	/usr/local/cuda/include/vector_functions.hpp	/^__VECTOR_FUNCTIONS_DECL__ uchar3 make_uchar3(unsigned char x, unsigned char y, unsigned char z)$/;"	f
make_uchar4	/usr/local/cuda/include/vector_functions.hpp	/^__VECTOR_FUNCTIONS_DECL__ uchar4 make_uchar4(unsigned char x, unsigned char y, unsigned char z, unsigned char w)$/;"	f
make_uint1	/usr/local/cuda/include/vector_functions.hpp	/^__VECTOR_FUNCTIONS_DECL__ uint1 make_uint1(unsigned int x)$/;"	f
make_uint2	/usr/local/cuda/include/vector_functions.hpp	/^__VECTOR_FUNCTIONS_DECL__ uint2 make_uint2(unsigned int x, unsigned int y)$/;"	f
make_uint3	/usr/local/cuda/include/vector_functions.hpp	/^__VECTOR_FUNCTIONS_DECL__ uint3 make_uint3(unsigned int x, unsigned int y, unsigned int z)$/;"	f
make_uint4	/usr/local/cuda/include/vector_functions.hpp	/^__VECTOR_FUNCTIONS_DECL__ uint4 make_uint4(unsigned int x, unsigned int y, unsigned int z, unsigned int w)$/;"	f
make_ulong1	/usr/local/cuda/include/vector_functions.hpp	/^__VECTOR_FUNCTIONS_DECL__ ulong1 make_ulong1(unsigned long int x)$/;"	f
make_ulong2	/usr/local/cuda/include/vector_functions.hpp	/^__VECTOR_FUNCTIONS_DECL__ ulong2 make_ulong2(unsigned long int x, unsigned long int y)$/;"	f
make_ulong3	/usr/local/cuda/include/vector_functions.hpp	/^__VECTOR_FUNCTIONS_DECL__ ulong3 make_ulong3(unsigned long int x, unsigned long int y, unsigned long int z)$/;"	f
make_ulong4	/usr/local/cuda/include/vector_functions.hpp	/^__VECTOR_FUNCTIONS_DECL__ ulong4 make_ulong4(unsigned long int x, unsigned long int y, unsigned long int z, unsigned long int w)$/;"	f
make_ulonglong1	/usr/local/cuda/include/vector_functions.hpp	/^__VECTOR_FUNCTIONS_DECL__ ulonglong1 make_ulonglong1(unsigned long long int x)$/;"	f
make_ulonglong2	/usr/local/cuda/include/vector_functions.hpp	/^__VECTOR_FUNCTIONS_DECL__ ulonglong2 make_ulonglong2(unsigned long long int x, unsigned long long int y)$/;"	f
make_ulonglong3	/usr/local/cuda/include/vector_functions.hpp	/^__VECTOR_FUNCTIONS_DECL__ ulonglong3 make_ulonglong3(unsigned long long int x, unsigned long long int y, unsigned long long int z)$/;"	f
make_ulonglong4	/usr/local/cuda/include/vector_functions.hpp	/^__VECTOR_FUNCTIONS_DECL__ ulonglong4 make_ulonglong4(unsigned long long int x, unsigned long long int y, unsigned long long int z, unsigned long long int w)$/;"	f
make_ushort1	/usr/local/cuda/include/vector_functions.hpp	/^__VECTOR_FUNCTIONS_DECL__ ushort1 make_ushort1(unsigned short x)$/;"	f
make_ushort2	/usr/local/cuda/include/vector_functions.hpp	/^__VECTOR_FUNCTIONS_DECL__ ushort2 make_ushort2(unsigned short x, unsigned short y)$/;"	f
make_ushort3	/usr/local/cuda/include/vector_functions.hpp	/^__VECTOR_FUNCTIONS_DECL__ ushort3 make_ushort3(unsigned short x, unsigned short y, unsigned short z)$/;"	f
make_ushort4	/usr/local/cuda/include/vector_functions.hpp	/^__VECTOR_FUNCTIONS_DECL__ ushort4 make_ushort4(unsigned short x, unsigned short y, unsigned short z, unsigned short w)$/;"	f
make_xnor_layer	src/xnor_layer.c	/^layer make_xnor_layer(int batch, int h, int w, int c, int n, int size, int stride, int pad, ACTIVATION activation, int batch_normalize)$/;"	f
mallocBinaryVolume	src/common.c	/^BINARY_WORD * mallocBinaryVolume(dim3 vol) {$/;"	f
mallocFloatVolume	src/common.c	/^float * mallocFloatVolume(dim3 vol) {$/;"	f
malloc_error	src/utils.c	/^void malloc_error()$/;"	f
managedMemory	/usr/local/cuda/include/driver_types.h	/^    int    managedMemory;              \/**< Device supports allocating managed memory on this system *\/$/;"	m	struct:cudaDeviceProp
marker	src/stb_image.h	/^   unsigned char  marker;      \/\/ marker seen while filling entropy buffer$/;"	m	struct:__anon16
mask	/usr/local/cuda/include/curand_mtgp32.h	/^    unsigned int mask;		\/*< This is a mask for state space *\/$/;"	m	struct:mtgp32_params_fast
mask	/usr/local/cuda/include/curand_mtgp32.h	/^    unsigned int mask[1];$/;"	m	struct:mtgp32_kernel_params
mask_to_rgb	src/image.c	/^image mask_to_rgb(image mask)$/;"	f
match_all	/usr/local/cuda/include/cooperative_groups.h	/^    _CG_QUALIFIER unsigned int match_all(double val, int &pred) const {$/;"	f	class:__thread_block_tile_base
match_all	/usr/local/cuda/include/cooperative_groups.h	/^    _CG_QUALIFIER unsigned int match_all(float val, int &pred) const {$/;"	f	class:__thread_block_tile_base
match_all	/usr/local/cuda/include/cooperative_groups.h	/^    _CG_QUALIFIER unsigned int match_all(int val, int &pred) const {$/;"	f	class:__thread_block_tile_base
match_all	/usr/local/cuda/include/cooperative_groups.h	/^    _CG_QUALIFIER unsigned int match_all(long long val, int &pred) const {$/;"	f	class:__thread_block_tile_base
match_all	/usr/local/cuda/include/cooperative_groups.h	/^    _CG_QUALIFIER unsigned int match_all(long val, int &pred) const {$/;"	f	class:__thread_block_tile_base
match_all	/usr/local/cuda/include/cooperative_groups.h	/^    _CG_QUALIFIER unsigned int match_all(unsigned int val, int &pred) const {$/;"	f	class:__thread_block_tile_base
match_all	/usr/local/cuda/include/cooperative_groups.h	/^    _CG_QUALIFIER unsigned int match_all(unsigned long long val, int &pred) const {$/;"	f	class:__thread_block_tile_base
match_all	/usr/local/cuda/include/cooperative_groups.h	/^    _CG_QUALIFIER unsigned int match_all(unsigned long val, int &pred) const {$/;"	f	class:__thread_block_tile_base
match_any	/usr/local/cuda/include/cooperative_groups.h	/^    _CG_QUALIFIER unsigned int match_any(double val) const {$/;"	f	class:__thread_block_tile_base
match_any	/usr/local/cuda/include/cooperative_groups.h	/^    _CG_QUALIFIER unsigned int match_any(float val) const {$/;"	f	class:__thread_block_tile_base
match_any	/usr/local/cuda/include/cooperative_groups.h	/^    _CG_QUALIFIER unsigned int match_any(int val) const {$/;"	f	class:__thread_block_tile_base
match_any	/usr/local/cuda/include/cooperative_groups.h	/^    _CG_QUALIFIER unsigned int match_any(long long val) const {$/;"	f	class:__thread_block_tile_base
match_any	/usr/local/cuda/include/cooperative_groups.h	/^    _CG_QUALIFIER unsigned int match_any(long val) const {$/;"	f	class:__thread_block_tile_base
match_any	/usr/local/cuda/include/cooperative_groups.h	/^    _CG_QUALIFIER unsigned int match_any(unsigned int val) const {$/;"	f	class:__thread_block_tile_base
match_any	/usr/local/cuda/include/cooperative_groups.h	/^    _CG_QUALIFIER unsigned int match_any(unsigned long long val) const {$/;"	f	class:__thread_block_tile_base
match_any	/usr/local/cuda/include/cooperative_groups.h	/^    _CG_QUALIFIER unsigned int match_any(unsigned long val) const {$/;"	f	class:__thread_block_tile_base
mathType	/usr/local/cuda/include/cudnn.h	/^    cudnnMathType_t                 mathType;$/;"	m	struct:__anon67
mathType	/usr/local/cuda/include/cudnn.h	/^    cudnnMathType_t                 mathType;$/;"	m	struct:__anon70
mathType	/usr/local/cuda/include/cudnn.h	/^    cudnnMathType_t             mathType;$/;"	m	struct:__anon64
matrix_add_matrix	src/matrix.c	/^void matrix_add_matrix(matrix from, matrix to)$/;"	f
matrix_coefficients	/usr/local/cuda/include/dynlink_nvcuvid.h	/^        unsigned char matrix_coefficients;$/;"	m	struct:__anon123::__anon127
matrix_to_csv	src/matrix.c	/^void matrix_to_csv(matrix m)$/;"	f
matrix_topk_accuracy	src/matrix.c	/^float matrix_topk_accuracy(matrix truth, matrix guess, int k)$/;"	f
max	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ int max(int x, int y)$/;"	f
max	/usr/local/cuda/include/math_functions.hpp	/^__HELPER_FUNC_LINKAGE int max(int a, int b)$/;"	f
max	/usr/local/cuda/include/math_functions.hpp	/^__MATH_FUNCTIONS_DECL__ double max(double a, double b)$/;"	f
max	/usr/local/cuda/include/math_functions.hpp	/^__MATH_FUNCTIONS_DECL__ double max(double a, float b)$/;"	f
max	/usr/local/cuda/include/math_functions.hpp	/^__MATH_FUNCTIONS_DECL__ double max(float a, double b)$/;"	f
max	/usr/local/cuda/include/math_functions.hpp	/^__MATH_FUNCTIONS_DECL__ float max(float a, float b)$/;"	f
max	/usr/local/cuda/include/math_functions.hpp	/^__MATH_FUNCTIONS_DECL__ long int max(long int a, long int b)$/;"	f
max	/usr/local/cuda/include/math_functions.hpp	/^__MATH_FUNCTIONS_DECL__ long long int max(long long int a, long long int b)$/;"	f
max	/usr/local/cuda/include/math_functions.hpp	/^__MATH_FUNCTIONS_DECL__ unsigned int max(int a, unsigned int b)$/;"	f
max	/usr/local/cuda/include/math_functions.hpp	/^__MATH_FUNCTIONS_DECL__ unsigned int max(unsigned int a, int b)$/;"	f
max	/usr/local/cuda/include/math_functions.hpp	/^__MATH_FUNCTIONS_DECL__ unsigned int max(unsigned int a, unsigned int b)$/;"	f
max	/usr/local/cuda/include/math_functions.hpp	/^__MATH_FUNCTIONS_DECL__ unsigned long int max(long int a, unsigned long int b)$/;"	f
max	/usr/local/cuda/include/math_functions.hpp	/^__MATH_FUNCTIONS_DECL__ unsigned long int max(unsigned long int a, long int b)$/;"	f
max	/usr/local/cuda/include/math_functions.hpp	/^__MATH_FUNCTIONS_DECL__ unsigned long int max(unsigned long int a, unsigned long int b)$/;"	f
max	/usr/local/cuda/include/math_functions.hpp	/^__MATH_FUNCTIONS_DECL__ unsigned long long int max(long long int a, unsigned long long int b)$/;"	f
max	/usr/local/cuda/include/math_functions.hpp	/^__MATH_FUNCTIONS_DECL__ unsigned long long int max(unsigned long long int a, long long int b)$/;"	f
max	/usr/local/cuda/include/math_functions.hpp	/^__MATH_FUNCTIONS_DECL__ unsigned long long int max(unsigned long long int a, unsigned long long int b)$/;"	f
maxAnisotropy	/usr/local/cuda/include/cuda.h	/^    unsigned int maxAnisotropy;     \/**< Maximum anisotropy ratio *\/$/;"	m	struct:CUDA_TEXTURE_DESC_st
maxAnisotropy	/usr/local/cuda/include/texture_types.h	/^    unsigned int                 maxAnisotropy;$/;"	m	struct:textureReference
maxAnisotropy	/usr/local/cuda/include/texture_types.h	/^    unsigned int                maxAnisotropy;$/;"	m	struct:cudaTextureDesc
maxDynamicSharedSizeBytes	/usr/local/cuda/include/cuda_occupancy.h	/^    size_t maxDynamicSharedSizeBytes;$/;"	m	struct:cudaOccFuncAttributes
maxDynamicSharedSizeBytes	/usr/local/cuda/include/driver_types.h	/^   int maxDynamicSharedSizeBytes;$/;"	m	struct:cudaFuncAttributes
maxGridSize	/usr/local/cuda/include/cuda.h	/^    int maxGridSize[3];         \/**< Maximum size of each dimension of a grid *\/$/;"	m	struct:CUdevprop_st
maxGridSize	/usr/local/cuda/include/driver_types.h	/^    int    maxGridSize[3];             \/**< Maximum size of each dimension of a grid *\/$/;"	m	struct:cudaDeviceProp
maxGridSize	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    int maxGridSize[3];         \/**< Maximum size of each dimension of a grid *\/$/;"	m	struct:CUdevprop_st
maxMemoryUsage	/usr/local/cuda/include/nvml.h	/^    unsigned long long maxMemoryUsage;          \/\/!< Maximum total memory in bytes that was ever allocated by the process.$/;"	m	struct:nvmlAccountingStats_st
maxMipmapLevelClamp	/usr/local/cuda/include/cuda.h	/^    float maxMipmapLevelClamp;      \/**< Mipmap maximum level clamp *\/ $/;"	m	struct:CUDA_TEXTURE_DESC_st
maxMipmapLevelClamp	/usr/local/cuda/include/texture_types.h	/^    float                        maxMipmapLevelClamp;$/;"	m	struct:textureReference
maxMipmapLevelClamp	/usr/local/cuda/include/texture_types.h	/^    float                       maxMipmapLevelClamp;$/;"	m	struct:cudaTextureDesc
maxSurface1D	/usr/local/cuda/include/driver_types.h	/^    int    maxSurface1D;               \/**< Maximum 1D surface size *\/$/;"	m	struct:cudaDeviceProp
maxSurface1DLayered	/usr/local/cuda/include/driver_types.h	/^    int    maxSurface1DLayered[2];     \/**< Maximum 1D layered surface dimensions *\/$/;"	m	struct:cudaDeviceProp
maxSurface2D	/usr/local/cuda/include/driver_types.h	/^    int    maxSurface2D[2];            \/**< Maximum 2D surface dimensions *\/$/;"	m	struct:cudaDeviceProp
maxSurface2DLayered	/usr/local/cuda/include/driver_types.h	/^    int    maxSurface2DLayered[3];     \/**< Maximum 2D layered surface dimensions *\/$/;"	m	struct:cudaDeviceProp
maxSurface3D	/usr/local/cuda/include/driver_types.h	/^    int    maxSurface3D[3];            \/**< Maximum 3D surface dimensions *\/$/;"	m	struct:cudaDeviceProp
maxSurfaceCubemap	/usr/local/cuda/include/driver_types.h	/^    int    maxSurfaceCubemap;          \/**< Maximum Cubemap surface dimensions *\/$/;"	m	struct:cudaDeviceProp
maxSurfaceCubemapLayered	/usr/local/cuda/include/driver_types.h	/^    int    maxSurfaceCubemapLayered[2];\/**< Maximum Cubemap layered surface dimensions *\/$/;"	m	struct:cudaDeviceProp
maxTexture1D	/usr/local/cuda/include/driver_types.h	/^    int    maxTexture1D;               \/**< Maximum 1D texture size *\/$/;"	m	struct:cudaDeviceProp
maxTexture1DLayered	/usr/local/cuda/include/driver_types.h	/^    int    maxTexture1DLayered[2];     \/**< Maximum 1D layered texture dimensions *\/$/;"	m	struct:cudaDeviceProp
maxTexture1DLinear	/usr/local/cuda/include/driver_types.h	/^    int    maxTexture1DLinear;         \/**< Maximum size for 1D textures bound to linear memory *\/$/;"	m	struct:cudaDeviceProp
maxTexture1DMipmap	/usr/local/cuda/include/driver_types.h	/^    int    maxTexture1DMipmap;         \/**< Maximum 1D mipmapped texture size *\/$/;"	m	struct:cudaDeviceProp
maxTexture2D	/usr/local/cuda/include/driver_types.h	/^    int    maxTexture2D[2];            \/**< Maximum 2D texture dimensions *\/$/;"	m	struct:cudaDeviceProp
maxTexture2DGather	/usr/local/cuda/include/driver_types.h	/^    int    maxTexture2DGather[2];      \/**< Maximum 2D texture dimensions if texture gather operations have to be performed *\/$/;"	m	struct:cudaDeviceProp
maxTexture2DLayered	/usr/local/cuda/include/driver_types.h	/^    int    maxTexture2DLayered[3];     \/**< Maximum 2D layered texture dimensions *\/$/;"	m	struct:cudaDeviceProp
maxTexture2DLinear	/usr/local/cuda/include/driver_types.h	/^    int    maxTexture2DLinear[3];      \/**< Maximum dimensions (width, height, pitch) for 2D textures bound to pitched memory *\/$/;"	m	struct:cudaDeviceProp
maxTexture2DMipmap	/usr/local/cuda/include/driver_types.h	/^    int    maxTexture2DMipmap[2];      \/**< Maximum 2D mipmapped texture dimensions *\/$/;"	m	struct:cudaDeviceProp
maxTexture3D	/usr/local/cuda/include/driver_types.h	/^    int    maxTexture3D[3];            \/**< Maximum 3D texture dimensions *\/$/;"	m	struct:cudaDeviceProp
maxTexture3DAlt	/usr/local/cuda/include/driver_types.h	/^    int    maxTexture3DAlt[3];         \/**< Maximum alternate 3D texture dimensions *\/$/;"	m	struct:cudaDeviceProp
maxTextureCubemap	/usr/local/cuda/include/driver_types.h	/^    int    maxTextureCubemap;          \/**< Maximum Cubemap texture dimensions *\/$/;"	m	struct:cudaDeviceProp
maxTextureCubemapLayered	/usr/local/cuda/include/driver_types.h	/^    int    maxTextureCubemapLayered[2];\/**< Maximum Cubemap layered texture dimensions *\/$/;"	m	struct:cudaDeviceProp
maxThreadsDim	/usr/local/cuda/include/cuda.h	/^    int maxThreadsDim[3];       \/**< Maximum size of each dimension of a block *\/$/;"	m	struct:CUdevprop_st
maxThreadsDim	/usr/local/cuda/include/driver_types.h	/^    int    maxThreadsDim[3];           \/**< Maximum size of each dimension of a block *\/$/;"	m	struct:cudaDeviceProp
maxThreadsDim	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    int maxThreadsDim[3];       \/**< Maximum size of each dimension of a block *\/$/;"	m	struct:CUdevprop_st
maxThreadsPerBlock	/usr/local/cuda/include/cuda.h	/^    int maxThreadsPerBlock;     \/**< Maximum number of threads per block *\/$/;"	m	struct:CUdevprop_st
maxThreadsPerBlock	/usr/local/cuda/include/cuda_occupancy.h	/^    int    maxThreadsPerBlock;          \/\/ Maximum number of threads per block$/;"	m	struct:cudaOccDeviceProp
maxThreadsPerBlock	/usr/local/cuda/include/cuda_occupancy.h	/^    int maxThreadsPerBlock; \/\/ Maximum block size the function can work with. If$/;"	m	struct:cudaOccFuncAttributes
maxThreadsPerBlock	/usr/local/cuda/include/driver_types.h	/^    int    maxThreadsPerBlock;         \/**< Maximum number of threads per block *\/$/;"	m	struct:cudaDeviceProp
maxThreadsPerBlock	/usr/local/cuda/include/driver_types.h	/^   int maxThreadsPerBlock;$/;"	m	struct:cudaFuncAttributes
maxThreadsPerBlock	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    int maxThreadsPerBlock;     \/**< Maximum number of threads per block *\/$/;"	m	struct:CUdevprop_st
maxThreadsPerMultiProcessor	/usr/local/cuda/include/driver_types.h	/^    int    maxThreadsPerMultiProcessor;\/**< Maximum resident threads per multiprocessor *\/$/;"	m	struct:cudaDeviceProp
maxThreadsPerMultiprocessor	/usr/local/cuda/include/cuda_occupancy.h	/^    int    maxThreadsPerMultiprocessor; \/\/ Maximum number of threads per SM$/;"	m	struct:cudaOccDeviceProp
max_index	src/utils.c	/^int max_index(float *a, int n)$/;"	f
max_transform_hierarchy_depth_inter	/usr/local/cuda/include/dynlink_cuviddec.h	/^    unsigned char max_transform_hierarchy_depth_inter;$/;"	m	struct:_CUVIDHEVCPICPARAMS
max_transform_hierarchy_depth_intra	/usr/local/cuda/include/dynlink_cuviddec.h	/^    unsigned char max_transform_hierarchy_depth_intra;$/;"	m	struct:_CUVIDHEVCPICPARAMS
max_x	src/stb_image.h	/^   int max_x, max_y;$/;"	m	struct:__anon26
max_y	src/stb_image.h	/^   int max_x, max_y;$/;"	m	struct:__anon26
maxbframes	/usr/local/cuda/include/dynlink_cuviddec.h	/^    int maxbframes;$/;"	m	struct:_CUVIDVC1PICPARAMS
maxcode	src/stb_image.h	/^   int maxcode[17];$/;"	m	struct:__anon19
maxcode	src/stb_image.h	/^   unsigned int maxcode[18];$/;"	m	struct:__anon15
maxpool_layer	src/maxpool_layer.h	/^typedef layer maxpool_layer;$/;"	t
mbModeLfDelta	/usr/local/cuda/include/dynlink_cuviddec.h	/^    unsigned int mbModeLfDelta[2];$/;"	m	struct:_CUVIDVP9PICPARAMS
mbRefLfDelta	/usr/local/cuda/include/dynlink_cuviddec.h	/^    unsigned int mbRefLfDelta[4];$/;"	m	struct:_CUVIDVP9PICPARAMS
mb_segment_tree_probs	/usr/local/cuda/include/dynlink_cuviddec.h	/^    unsigned char mb_segment_tree_probs[7];$/;"	m	struct:_CUVIDVP9PICPARAMS
mcomp_filter_type	/usr/local/cuda/include/dynlink_cuviddec.h	/^    unsigned int mcomp_filter_type;$/;"	m	struct:_CUVIDVP9PICPARAMS
mean	/usr/local/cuda/include/curand_discrete.h	/^    double mean;$/;"	m	struct:curandDiscreteDistribution_st
mean	/usr/local/cuda/include/curand_globals.h	/^    double mean;$/;"	m	struct:normal_args_double_st
mean	/usr/local/cuda/include/curand_globals.h	/^    float mean;$/;"	m	struct:normal_args_st
mean_array	src/utils.c	/^float mean_array(float *a, int n)$/;"	f
mean_arrays	src/utils.c	/^void mean_arrays(float **a, int n, int els, float *avg)$/;"	f
mean_cpu	src/blas.c	/^void mean_cpu(float *x, int batch, int filters, int spatial, float *mean)$/;"	f
mean_delta_cpu	src/batchnorm_layer.c	/^void mean_delta_cpu(float *delta, float *variance, int batch, int filters, int spatial, float *mean_delta)$/;"	f
memPitch	/usr/local/cuda/include/cuda.h	/^    int memPitch;               \/**< Maximum pitch in bytes allowed by memory copies *\/$/;"	m	struct:CUdevprop_st
memPitch	/usr/local/cuda/include/driver_types.h	/^    size_t memPitch;                   \/**< Maximum pitch in bytes allowed by memory copies *\/$/;"	m	struct:cudaDeviceProp
memPitch	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    int memPitch;               \/**< Maximum pitch in bytes allowed by memory copies *\/$/;"	m	struct:CUdevprop_st
memUtil	/usr/local/cuda/include/nvml.h	/^    nvmlValue_t memUtil;                \/\/!< Frame Buffer Memory Util Value$/;"	m	struct:nvmlVgpuInstanceUtilizationSample_st
memUtil	/usr/local/cuda/include/nvml.h	/^    unsigned int memUtil;                           \/\/!< Frame Buffer Memory Util Value$/;"	m	struct:nvmlVgpuProcessUtilizationSample_st
memUtil	/usr/local/cuda/include/nvml.h	/^    unsigned int memUtil;               \/\/!< Frame Buffer Memory Util Value$/;"	m	struct:nvmlProcessUtilizationSample_st
memobjA	src/gemm_fpga.c	/^static cl_mem memobjA = NULL;$/;"	v	file:
memobjB	src/gemm_fpga.c	/^static cl_mem memobjB = NULL;$/;"	v	file:
memobjC	src/gemm_fpga.c	/^static cl_mem memobjC = NULL;$/;"	v	file:
memory	/usr/local/cuda/include/cudnn.h	/^    size_t                          memory;$/;"	m	struct:__anon67
memory	/usr/local/cuda/include/cudnn.h	/^    size_t                          memory;$/;"	m	struct:__anon70
memory	/usr/local/cuda/include/cudnn.h	/^    size_t                      memory;$/;"	m	struct:__anon64
memory	/usr/local/cuda/include/nvml.h	/^    unsigned int memory;             \/\/!< Percent of time over the past sample period during which global (device) memory was being read or written$/;"	m	struct:nvmlUtilization_st
memoryBusWidth	/usr/local/cuda/include/driver_types.h	/^    int    memoryBusWidth;             \/**< Global memory bus width in bits *\/$/;"	m	struct:cudaDeviceProp
memoryClockRate	/usr/local/cuda/include/driver_types.h	/^    int    memoryClockRate;            \/**< Peak memory clock frequency in kilohertz *\/$/;"	m	struct:cudaDeviceProp
memoryType	/usr/local/cuda/include/driver_types.h	/^    enum cudaMemoryType memoryType;$/;"	m	struct:cudaPointerAttributes	typeref:enum:cudaPointerAttributes::cudaMemoryType
memoryUtilization	/usr/local/cuda/include/nvml.h	/^    unsigned int memoryUtilization;             \/\/!< Percent of time over the process's lifetime during which global (device) memory was being read or written.$/;"	m	struct:nvmlAccountingStats_st
message	/usr/local/cuda/include/nvToolsExt.h	/^    nvtxMessageValue_t message;$/;"	m	struct:nvtxEventAttributes_v2
message	/usr/local/cuda/include/nvToolsExt.h	/^    nvtxMessageValue_t message;$/;"	m	struct:nvtxResourceAttributes_v0
message	/usr/local/cuda/include/nvToolsExtMeta.h	/^typedef struct NvtxMarkA        { const char* message; } NvtxMarkA;$/;"	m	struct:NvtxMarkA
message	/usr/local/cuda/include/nvToolsExtMeta.h	/^typedef struct NvtxMarkW        { const wchar_t* message; } NvtxMarkW;$/;"	m	struct:NvtxMarkW
message	/usr/local/cuda/include/nvToolsExtMeta.h	/^typedef struct NvtxRangePushA   { const char* message; } NvtxRangePushA;$/;"	m	struct:NvtxRangePushA
message	/usr/local/cuda/include/nvToolsExtMeta.h	/^typedef struct NvtxRangePushW   { const wchar_t* message; } NvtxRangePushW;$/;"	m	struct:NvtxRangePushW
message	/usr/local/cuda/include/nvToolsExtMeta.h	/^typedef struct NvtxRangeStartA  { const char* message; } NvtxRangeStartA;$/;"	m	struct:NvtxRangeStartA
message	/usr/local/cuda/include/nvToolsExtMeta.h	/^typedef struct NvtxRangeStartW  { const wchar_t* message; } NvtxRangeStartW;$/;"	m	struct:NvtxRangeStartW
message	/usr/local/cuda/include/nvToolsExtSync.h	/^    nvtxMessageValue_t message;$/;"	m	struct:nvtxSyncUserAttributes_v0
messageType	/usr/local/cuda/include/nvToolsExt.h	/^    int32_t messageType;            \/* nvtxMessageType_t *\/$/;"	m	struct:nvtxEventAttributes_v2
messageType	/usr/local/cuda/include/nvToolsExt.h	/^    int32_t messageType;            \/* nvtxMessageType_t *\/$/;"	m	struct:nvtxResourceAttributes_v0
messageType	/usr/local/cuda/include/nvToolsExtSync.h	/^    int32_t messageType;            \/* nvtxMessageType_t *\/$/;"	m	struct:nvtxSyncUserAttributes_v0
method	/usr/local/cuda/include/curand_discrete.h	/^    curandMethod_t method;$/;"	m	struct:curandDiscreteDistribution_st
mexp	/usr/local/cuda/include/curand_mtgp32.h	/^    int mexp;			\/*< Mersenne exponent. This is redundant. *\/$/;"	m	struct:mtgp32_params_fast
min	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ int min(int x, int y)$/;"	f
min	/usr/local/cuda/include/math_functions.hpp	/^__HELPER_FUNC_LINKAGE int min(int a, int b)$/;"	f
min	/usr/local/cuda/include/math_functions.hpp	/^__MATH_FUNCTIONS_DECL__ double min(double a, double b)$/;"	f
min	/usr/local/cuda/include/math_functions.hpp	/^__MATH_FUNCTIONS_DECL__ double min(double a, float b)$/;"	f
min	/usr/local/cuda/include/math_functions.hpp	/^__MATH_FUNCTIONS_DECL__ double min(float a, double b)$/;"	f
min	/usr/local/cuda/include/math_functions.hpp	/^__MATH_FUNCTIONS_DECL__ float min(float a, float b)$/;"	f
min	/usr/local/cuda/include/math_functions.hpp	/^__MATH_FUNCTIONS_DECL__ long int min(long int a, long int b)$/;"	f
min	/usr/local/cuda/include/math_functions.hpp	/^__MATH_FUNCTIONS_DECL__ long long int min(long long int a, long long int b)$/;"	f
min	/usr/local/cuda/include/math_functions.hpp	/^__MATH_FUNCTIONS_DECL__ unsigned int min(int a, unsigned int b)$/;"	f
min	/usr/local/cuda/include/math_functions.hpp	/^__MATH_FUNCTIONS_DECL__ unsigned int min(unsigned int a, int b)$/;"	f
min	/usr/local/cuda/include/math_functions.hpp	/^__MATH_FUNCTIONS_DECL__ unsigned int min(unsigned int a, unsigned int b)$/;"	f
min	/usr/local/cuda/include/math_functions.hpp	/^__MATH_FUNCTIONS_DECL__ unsigned long int min(long int a, unsigned long int b)$/;"	f
min	/usr/local/cuda/include/math_functions.hpp	/^__MATH_FUNCTIONS_DECL__ unsigned long int min(unsigned long int a, long int b)$/;"	f
min	/usr/local/cuda/include/math_functions.hpp	/^__MATH_FUNCTIONS_DECL__ unsigned long int min(unsigned long int a, unsigned long int b)$/;"	f
min	/usr/local/cuda/include/math_functions.hpp	/^__MATH_FUNCTIONS_DECL__ unsigned long long int min(long long int a, unsigned long long int b)$/;"	f
min	/usr/local/cuda/include/math_functions.hpp	/^__MATH_FUNCTIONS_DECL__ unsigned long long int min(unsigned long long int a, long long int b)$/;"	f
min	/usr/local/cuda/include/math_functions.hpp	/^__MATH_FUNCTIONS_DECL__ unsigned long long int min(unsigned long long int a, unsigned long long int b)$/;"	f
minMipmapLevelClamp	/usr/local/cuda/include/cuda.h	/^    float minMipmapLevelClamp;      \/**< Mipmap minimum level clamp *\/$/;"	m	struct:CUDA_TEXTURE_DESC_st
minMipmapLevelClamp	/usr/local/cuda/include/texture_types.h	/^    float                        minMipmapLevelClamp;$/;"	m	struct:textureReference
minMipmapLevelClamp	/usr/local/cuda/include/texture_types.h	/^    float                       minMipmapLevelClamp;$/;"	m	struct:cudaTextureDesc
minor	/usr/local/cuda/include/driver_types.h	/^    int    minor;                      \/**< Minor compute capability *\/$/;"	m	struct:cudaDeviceProp
minor	/usr/local/cuda/include/nppdefs.h	/^    int    minor;   \/**<  Minor version number *\/$/;"	m	struct:__anon146
mipmap	/usr/local/cuda/include/cuda.h	/^        } mipmap;$/;"	m	union:CUDA_RESOURCE_DESC_st::__anon41	typeref:struct:CUDA_RESOURCE_DESC_st::__anon41::__anon43
mipmap	/usr/local/cuda/include/driver_types.h	/^            cudaMipmappedArray_t mipmap;       \/**< CUDA mipmapped array *\/$/;"	m	struct:cudaResourceDesc::__anon109::__anon111
mipmap	/usr/local/cuda/include/driver_types.h	/^        } mipmap;$/;"	m	union:cudaResourceDesc::__anon109	typeref:struct:cudaResourceDesc::__anon109::__anon111
mipmapFilterMode	/usr/local/cuda/include/cuda.h	/^    CUfilter_mode mipmapFilterMode; \/**< Mipmap filter mode *\/$/;"	m	struct:CUDA_TEXTURE_DESC_st
mipmapFilterMode	/usr/local/cuda/include/texture_types.h	/^    enum cudaTextureFilterMode   mipmapFilterMode;$/;"	m	struct:textureReference	typeref:enum:textureReference::cudaTextureFilterMode
mipmapFilterMode	/usr/local/cuda/include/texture_types.h	/^    enum cudaTextureFilterMode  mipmapFilterMode;$/;"	m	struct:cudaTextureDesc	typeref:enum:cudaTextureDesc::cudaTextureFilterMode
mipmapLevelBias	/usr/local/cuda/include/cuda.h	/^    float mipmapLevelBias;          \/**< Mipmap level bias *\/$/;"	m	struct:CUDA_TEXTURE_DESC_st
mipmapLevelBias	/usr/local/cuda/include/texture_types.h	/^    float                        mipmapLevelBias;$/;"	m	struct:textureReference
mipmapLevelBias	/usr/local/cuda/include/texture_types.h	/^    float                       mipmapLevelBias;$/;"	m	struct:cudaTextureDesc
mode	/usr/local/cuda/include/nvToolsExt.h	/^    uint32_t mode;$/;"	m	struct:nvtxInitializationAttributes_v2
modeRefLfEnabled	/usr/local/cuda/include/dynlink_cuviddec.h	/^    unsigned char modeRefLfEnabled;$/;"	m	struct:_CUVIDVP9PICPARAMS
modf	/usr/local/cuda/include/math_functions.hpp	/^__host__ __device__ __cudart_builtin__ float     modf(float a, float*b)  { return modff(a, b); }$/;"	f
mpeg2	/usr/local/cuda/include/dynlink_cuviddec.h	/^        CUVIDMPEG2PICPARAMS mpeg2;         \/**< Also used for MPEG-1 *\/$/;"	m	union:_CUVIDPICPARAMS::__anon120
mpeg4	/usr/local/cuda/include/dynlink_cuviddec.h	/^        CUVIDMPEG4PICPARAMS mpeg4;$/;"	m	union:_CUVIDPICPARAMS::__anon120
mrg32k3aM1	/usr/local/cuda/include/curand_mrg32k3a.h	/^static __device__ double mrg32k3aM1[64][3][3] = {$/;"	v
mrg32k3aM1Host	/usr/local/cuda/include/curand_mrg32k3a.h	/^static double mrg32k3aM1Host[64][3][3] = {$/;"	v
mrg32k3aM1Seq	/usr/local/cuda/include/curand_mrg32k3a.h	/^static __device__ double mrg32k3aM1Seq[64][3][3] = {$/;"	v
mrg32k3aM1SeqHost	/usr/local/cuda/include/curand_mrg32k3a.h	/^static double mrg32k3aM1SeqHost[64][3][3] = {$/;"	v
mrg32k3aM1SubSeq	/usr/local/cuda/include/curand_mrg32k3a.h	/^static __device__ double mrg32k3aM1SubSeq[56][3][3] = {$/;"	v
mrg32k3aM1SubSeqHost	/usr/local/cuda/include/curand_mrg32k3a.h	/^static double mrg32k3aM1SubSeqHost[56][3][3] = {$/;"	v
mrg32k3aM2	/usr/local/cuda/include/curand_mrg32k3a.h	/^static __device__ double mrg32k3aM2[64][3][3] = {$/;"	v
mrg32k3aM2Host	/usr/local/cuda/include/curand_mrg32k3a.h	/^static double mrg32k3aM2Host[64][3][3] = {$/;"	v
mrg32k3aM2Seq	/usr/local/cuda/include/curand_mrg32k3a.h	/^static __device__ double mrg32k3aM2Seq[64][3][3] = {$/;"	v
mrg32k3aM2SeqHost	/usr/local/cuda/include/curand_mrg32k3a.h	/^static double mrg32k3aM2SeqHost[64][3][3] = {$/;"	v
mrg32k3aM2SubSeq	/usr/local/cuda/include/curand_mrg32k3a.h	/^static __device__ double mrg32k3aM2SubSeq[56][3][3] = {$/;"	v
mrg32k3aM2SubSeqHost	/usr/local/cuda/include/curand_mrg32k3a.h	/^static double mrg32k3aM2SubSeqHost[56][3][3] = {$/;"	v
mse_array	src/utils.c	/^float mse_array(float *a, int n)$/;"	f
mtgp32_init_by_array	/usr/local/cuda/include/curand_mtgp32_host.h	/^int mtgp32_init_by_array(unsigned int state[],$/;"	f
mtgp32_init_by_str	/usr/local/cuda/include/curand_mtgp32_host.h	/^int mtgp32_init_by_str(unsigned int state[],$/;"	f
mtgp32_init_state	/usr/local/cuda/include/curand_mtgp32_host.h	/^void mtgp32_init_state(unsigned int state[],$/;"	f
mtgp32_kernel_params	/usr/local/cuda/include/curand_mtgp32.h	/^struct mtgp32_kernel_params {$/;"	s
mtgp32_kernel_params_t	/usr/local/cuda/include/curand_mtgp32.h	/^typedef struct mtgp32_kernel_params mtgp32_kernel_params_t;$/;"	t	typeref:struct:mtgp32_kernel_params
mtgp32_params_fast	/usr/local/cuda/include/curand_mtgp32.h	/^struct mtgp32_params_fast {$/;"	s
mtgp32_params_fast_t	/usr/local/cuda/include/curand_mtgp32.h	/^typedef struct mtgp32_params_fast mtgp32_params_fast_t;$/;"	t	typeref:struct:mtgp32_params_fast
mtgp32dc_params_fast_11213	/usr/local/cuda/include/curand_mtgp32dc_p_11213.h	/^mtgp32_params_fast_t mtgp32dc_params_fast_11213[]$/;"	v
mtgpdc_params_11213_num	/usr/local/cuda/include/curand_mtgp32dc_p_11213.h	/^const int mtgpdc_params_11213_num  = 200;$/;"	v
mul24	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ int mul24(int a, int b)$/;"	f
mul64hi	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ long long int mul64hi(long long int a, long long int b)$/;"	f
mul64hi	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ unsigned long long int mul64hi(long long int a, unsigned long long int b)$/;"	f
mul64hi	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ unsigned long long int mul64hi(unsigned long long int a, long long int b)$/;"	f
mul64hi	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ unsigned long long int mul64hi(unsigned long long int a, unsigned long long int b)$/;"	f
mul_cpu	src/blas.c	/^void mul_cpu(int N, float *X, int INCX, float *Y, int INCY)$/;"	f
mulhi	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ int mulhi(int a, int b)$/;"	f
mulhi	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ unsigned int mulhi(int a, unsigned int b)$/;"	f
mulhi	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ unsigned int mulhi(unsigned int a, int b)$/;"	f
mulhi	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ unsigned int mulhi(unsigned int a, unsigned int b)$/;"	f
mulhilo32	/usr/local/cuda/include/curand_philox4x32_x.h	/^QUALIFIERS unsigned int mulhilo32(unsigned int a, unsigned int b, unsigned int* hip)$/;"	f
mult_add_into_cpu	src/blas.c	/^void mult_add_into_cpu(int N, float *X, float *Y, float *Z)$/;"	f
multiGpuBoardGroupID	/usr/local/cuda/include/driver_types.h	/^    int    multiGpuBoardGroupID;       \/**< Unique identifier for a group of devices on the same multi-GPU board *\/$/;"	m	struct:cudaDeviceProp
multiProcessorCount	/usr/local/cuda/include/driver_types.h	/^    int    multiProcessorCount;        \/**< Number of multiprocessors on device *\/$/;"	m	struct:cudaDeviceProp
multi_grid	/usr/local/cuda/include/cooperative_groups_helpers.h	/^    namespace multi_grid {$/;"	n	namespace:__internal
multi_grid_group	/usr/local/cuda/include/cooperative_groups.h	/^    _CG_QUALIFIER multi_grid_group() {$/;"	f	class:multi_grid_group
multi_grid_group	/usr/local/cuda/include/cooperative_groups.h	/^class multi_grid_group$/;"	c
multires	/usr/local/cuda/include/dynlink_cuviddec.h	/^    int multires;$/;"	m	struct:_CUVIDVC1PICPARAMS
mutex	src/data.c	/^pthread_mutex_t mutex = PTHREAD_MUTEX_INITIALIZER;$/;"	v
mvcext	/usr/local/cuda/include/dynlink_cuviddec.h	/^        CUVIDH264MVCEXT mvcext;$/;"	m	union:_CUVIDH264PICPARAMS::__anon117
n	/usr/local/cuda/include/cuda_runtime.h	/^  size_t n;$/;"	m	class:__cudaOccupancyB2DHelper
n	/usr/local/cuda/include/cufftw.h	/^    int n;$/;"	m	struct:__anon84
n	/usr/local/cuda/include/cufftw.h	/^    int n;$/;"	m	struct:__anon85
n	/usr/local/cuda/include/cufftw.h	/^_CUFFTAPI(void *) fftw_malloc(size_t n);$/;"	v
n	/usr/local/cuda/include/cufftw.h	/^_CUFFTAPI(void *) fftwf_malloc(size_t n);$/;"	v
nAh	/usr/local/cuda/include/nppi_compression_functions.h	/^    Npp8u nAh; \/**< Successive approximation bit position high *\/$/;"	m	struct:__anon165
nAl	/usr/local/cuda/include/nppi_compression_functions.h	/^    Npp8u nAl; \/**< Successive approximation bit position low *\/$/;"	m	struct:__anon165
nBitstreamDataLen	/usr/local/cuda/include/dynlink_cuviddec.h	/^    unsigned int nBitstreamDataLen;        \/**< Number of bytes in bitstream data buffer *\/$/;"	m	struct:_CUVIDPICPARAMS
nComponents	/usr/local/cuda/include/nppi_compression_functions.h	/^    Npp8u nComponents; \/**< Number of components in frame *\/$/;"	m	struct:__anon164
nComponents	/usr/local/cuda/include/nppi_compression_functions.h	/^    Npp8u nComponents; \/**< Number of components present in scan *\/$/;"	m	struct:__anon165
nDstStep	/usr/local/cuda/include/nppi_color_conversion.h	/^    int nDstStep;$/;"	m	struct:__anon163
nDstStep	/usr/local/cuda/include/nppi_geometry_transforms.h	/^    int nDstStep;$/;"	m	struct:__anon168
nDstStep	/usr/local/cuda/include/nppi_geometry_transforms.h	/^    int nDstStep;$/;"	m	struct:__anon169
nDstStep	/usr/local/cuda/include/nppi_geometry_transforms.h	/^    int nDstStep;$/;"	m	struct:__anon170
nGPUs	/usr/local/cuda/include/cudalibxt.h	/^    int nGPUs;                               \/\/number of GPUs $/;"	m	struct:cudaXtDesc_t
nHistogramBins	/usr/local/cuda/include/nppdefs.h	/^    int      nHistogramBins;       \/**<  required number of histogram bins. *\/$/;"	m	struct:__anon157
nNumSlices	/usr/local/cuda/include/dynlink_cuviddec.h	/^    unsigned int nNumSlices;               \/**< Number of slices in this picture *\/$/;"	m	struct:_CUVIDPICPARAMS
nSe	/usr/local/cuda/include/nppi_compression_functions.h	/^    Npp8u nSe; \/**< End of spectral selection (index of first coefficient), 0-63 *\/$/;"	m	struct:__anon165
nSrcStep	/usr/local/cuda/include/nppi_color_conversion.h	/^    int nSrcStep;$/;"	m	struct:__anon163
nSrcStep	/usr/local/cuda/include/nppi_geometry_transforms.h	/^    int nSrcStep;$/;"	m	struct:__anon168
nSrcStep	/usr/local/cuda/include/nppi_geometry_transforms.h	/^    int nSrcStep;$/;"	m	struct:__anon169
nSrcStep	/usr/local/cuda/include/nppi_geometry_transforms.h	/^    int nSrcStep;$/;"	m	struct:__anon170
nSs	/usr/local/cuda/include/nppi_compression_functions.h	/^    Npp8u nSs; \/**< Start of spectral selection (index of first coefficient), 0-63 *\/$/;"	m	struct:__anon165
n_clusters	/usr/local/cuda/include/nvgraph.h	/^       int n_clusters; \/\/number of clusters$/;"	m	struct:SpectralClusteringParameter
n_eig_vects	/usr/local/cuda/include/nvgraph.h	/^       int n_eig_vects; \/\/ \/\/number of eigenvectors$/;"	m	struct:SpectralClusteringParameter
name	/usr/local/cuda/include/driver_types.h	/^    char   name[256];                  \/**< ASCII string identifying device *\/$/;"	m	struct:cudaDeviceProp
name	/usr/local/cuda/include/nvToolsExtMeta.h	/^    const char* name;$/;"	m	struct:NvtxNameResourceA
name	/usr/local/cuda/include/nvToolsExtMeta.h	/^    const wchar_t* name;$/;"	m	struct:NvtxNameResourceW
name	/usr/local/cuda/include/nvToolsExtMeta.h	/^typedef struct NvtxDomainCreate  { const void* name; } NvtxDomainCreate;$/;"	m	struct:NvtxDomainCreate
name	/usr/local/cuda/include/nvml.h	/^    char name[96];                      \/\/!< Product name$/;"	m	struct:nvmlUnitInfo_st
ncclChar	/usr/local/cuda/include/nccl.h	/^typedef enum { ncclInt8       = 0, ncclChar       = 0,$/;"	e	enum:__anon139
ncclComm_t	/usr/local/cuda/include/nccl.h	/^typedef struct ncclComm* ncclComm_t;$/;"	t	typeref:struct:ncclComm
ncclDataType_t	/usr/local/cuda/include/nccl.h	/^               ncclNumTypes   = 9 } ncclDataType_t;$/;"	t	typeref:enum:__anon139
ncclDouble	/usr/local/cuda/include/nccl.h	/^               ncclFloat64    = 8, ncclDouble     = 8,$/;"	e	enum:__anon139
ncclFloat	/usr/local/cuda/include/nccl.h	/^               ncclFloat32    = 7, ncclFloat      = 7,$/;"	e	enum:__anon139
ncclFloat16	/usr/local/cuda/include/nccl.h	/^               ncclFloat16    = 6, ncclHalf       = 6,$/;"	e	enum:__anon139
ncclFloat32	/usr/local/cuda/include/nccl.h	/^               ncclFloat32    = 7, ncclFloat      = 7,$/;"	e	enum:__anon139
ncclFloat64	/usr/local/cuda/include/nccl.h	/^               ncclFloat64    = 8, ncclDouble     = 8,$/;"	e	enum:__anon139
ncclHalf	/usr/local/cuda/include/nccl.h	/^               ncclFloat16    = 6, ncclHalf       = 6,$/;"	e	enum:__anon139
ncclInt	/usr/local/cuda/include/nccl.h	/^               ncclInt32      = 2, ncclInt        = 2,$/;"	e	enum:__anon139
ncclInt32	/usr/local/cuda/include/nccl.h	/^               ncclInt32      = 2, ncclInt        = 2,$/;"	e	enum:__anon139
ncclInt64	/usr/local/cuda/include/nccl.h	/^               ncclInt64      = 4,$/;"	e	enum:__anon139
ncclInt8	/usr/local/cuda/include/nccl.h	/^typedef enum { ncclInt8       = 0, ncclChar       = 0,$/;"	e	enum:__anon139
ncclInternalError	/usr/local/cuda/include/nccl.h	/^               ncclInternalError           =  3,$/;"	e	enum:__anon137
ncclInvalidArgument	/usr/local/cuda/include/nccl.h	/^               ncclInvalidArgument         =  4,$/;"	e	enum:__anon137
ncclInvalidUsage	/usr/local/cuda/include/nccl.h	/^               ncclInvalidUsage            =  5,$/;"	e	enum:__anon137
ncclMax	/usr/local/cuda/include/nccl.h	/^               ncclMax        = 2,$/;"	e	enum:__anon138
ncclMin	/usr/local/cuda/include/nccl.h	/^               ncclMin        = 3,$/;"	e	enum:__anon138
ncclNumOps	/usr/local/cuda/include/nccl.h	/^               ncclNumOps     = 4 } ncclRedOp_t;$/;"	e	enum:__anon138
ncclNumResults	/usr/local/cuda/include/nccl.h	/^               ncclNumResults              =  6 } ncclResult_t;$/;"	e	enum:__anon137
ncclNumTypes	/usr/local/cuda/include/nccl.h	/^               ncclNumTypes   = 9 } ncclDataType_t;$/;"	e	enum:__anon139
ncclProd	/usr/local/cuda/include/nccl.h	/^               ncclProd       = 1,$/;"	e	enum:__anon138
ncclRedOp_t	/usr/local/cuda/include/nccl.h	/^               ncclNumOps     = 4 } ncclRedOp_t;$/;"	t	typeref:enum:__anon138
ncclResult_t	/usr/local/cuda/include/nccl.h	/^               ncclNumResults              =  6 } ncclResult_t;$/;"	t	typeref:enum:__anon137
ncclSuccess	/usr/local/cuda/include/nccl.h	/^typedef enum { ncclSuccess                 =  0,$/;"	e	enum:__anon137
ncclSum	/usr/local/cuda/include/nccl.h	/^typedef enum { ncclSum        = 0,$/;"	e	enum:__anon138
ncclSystemError	/usr/local/cuda/include/nccl.h	/^               ncclSystemError             =  2,$/;"	e	enum:__anon137
ncclUint32	/usr/local/cuda/include/nccl.h	/^               ncclUint32     = 3,$/;"	e	enum:__anon139
ncclUint64	/usr/local/cuda/include/nccl.h	/^               ncclUint64     = 5,$/;"	e	enum:__anon139
ncclUint8	/usr/local/cuda/include/nccl.h	/^               ncclUint8      = 1,$/;"	e	enum:__anon139
ncclUnhandledCudaError	/usr/local/cuda/include/nccl.h	/^               ncclUnhandledCudaError      =  1,$/;"	e	enum:__anon137
ncclUniqueId	/usr/local/cuda/include/nccl.h	/^typedef struct { char internal[NCCL_UNIQUE_ID_BYTES]; } ncclUniqueId;$/;"	t	typeref:struct:__anon136
nearbyint	/usr/local/cuda/include/math_functions.hpp	/^__MATH_FUNCTIONS_DECL__ float nearbyint(float a)$/;"	f
nedges	/usr/local/cuda/include/nvgraph.h	/^  int nedges; \/\/ nnz$/;"	m	struct:nvgraphCOOTopology32I_st
nedges	/usr/local/cuda/include/nvgraph.h	/^  int nedges; \/\/ nnz$/;"	m	struct:nvgraphCSCTopology32I_st
nedges	/usr/local/cuda/include/nvgraph.h	/^  int nedges; \/\/ nnz$/;"	m	struct:nvgraphCSRTopology32I_st
net	src/compare.c	/^    network net;$/;"	m	struct:__anon7	file:
net	src/demo.c	/^static network net;$/;"	v	file:
net	src/parser.c	/^    network net;$/;"	m	struct:size_params	file:
net2	src/demo.c	/^static network net2;$/;"	v	file:
network_accuracies	src/network.c	/^float *network_accuracies(network net, data d, int n)$/;"	f
network_accuracy	src/network.c	/^float network_accuracy(network net, data d)$/;"	f
network_accuracy_multi	src/network.c	/^float network_accuracy_multi(network net, data d, int n)$/;"	f
network_detect	src/network.c	/^void network_detect(network *net, image im, float thresh, float hier_thresh, float nms, box *boxes, float **probs)$/;"	f
network_height	src/network.c	/^int network_height(network *net){return net->h;}$/;"	f
network_inputs	src/network.c	/^int network_inputs(network net)$/;"	f
network_output	src/network.c	/^float *network_output(network net)$/;"	f
network_output_layer	src/network.c	/^layer network_output_layer(network net)$/;"	f
network_outputs	src/network.c	/^int network_outputs(network net)$/;"	f
network_predict	src/network.c	/^float *network_predict(network net, float *input)$/;"	f
network_predict_data	src/network.c	/^matrix network_predict_data(network net, data test)$/;"	f
network_predict_data_multi	src/network.c	/^matrix network_predict_data_multi(network net, data test, int n)$/;"	f
network_predict_image	src/network.c	/^float *network_predict_image(network *net, image im)$/;"	f
network_predict_p	src/network.c	/^float *network_predict_p(network *net, float *input)$/;"	f
network_width	src/network.c	/^int network_width(network *net){return net->w;}$/;"	f
new_beta	src/binary_convolution.h	/^    float *new_beta;    \/\/ we calculate the new beta for the next layer$/;"	m	struct:__anon1
next	src/binary_convolution.h	/^    struct ai2_bin_conv_layer *next;$/;"	m	struct:__anon1	typeref:struct:__anon1::ai2_bin_conv_layer
nextafter	/usr/local/cuda/include/math_functions.hpp	/^__MATH_FUNCTIONS_DECL__ float nextafter(float a, float b)$/;"	f
nms_comparator	src/box.c	/^int nms_comparator(const void *pa, const void *pb)$/;"	f
nomore	src/stb_image.h	/^   int            nomore;      \/\/ flag if we saw a marker so must stop$/;"	m	struct:__anon16
non_zero	/usr/local/cuda/include/curand_mtgp32_host.h	/^static const unsigned int non_zero = 0x4d544750;$/;"	v
norm3d	/usr/local/cuda/include/math_functions.hpp	/^__MATH_FUNCTIONS_DECL__ float norm3d(float a, float b, float c)$/;"	f
norm4d	/usr/local/cuda/include/math_functions.hpp	/^__MATH_FUNCTIONS_DECL__ float norm4d(float a, float b, float c, float d)$/;"	f
normal_args_double_st	/usr/local/cuda/include/curand_globals.h	/^struct normal_args_double_st {$/;"	s
normal_args_double_t	/usr/local/cuda/include/curand_globals.h	/^typedef struct normal_args_double_st normal_args_double_t;$/;"	t	typeref:struct:normal_args_double_st
normal_args_st	/usr/local/cuda/include/curand_globals.h	/^struct normal_args_st {$/;"	s
normal_args_t	/usr/local/cuda/include/curand_globals.h	/^typedef struct normal_args_st normal_args_t;$/;"	t	typeref:struct:normal_args_st
normalize_array	src/utils.c	/^void normalize_array(float *a, int n)$/;"	f
normalize_cpu	src/blas.c	/^void normalize_cpu(float *x, float *mean, float *variance, int batch, int filters, int spatial)$/;"	f
normalize_data_rows	src/data.c	/^void normalize_data_rows(data d)$/;"	f
normalize_delta_cpu	src/batchnorm_layer.c	/^void normalize_delta_cpu(float *x, float *mean, float *variance, float *mean_delta, float *variance_delta, int batch, int filters, int spatial, float *delta)$/;"	f
normalize_image	src/image.c	/^void normalize_image(image p)$/;"	f
normalize_image2	src/image.c	/^void normalize_image2(image p)$/;"	f
normalized	/usr/local/cuda/include/texture_types.h	/^    int                          normalized;$/;"	m	struct:textureReference
normalizedCoords	/usr/local/cuda/include/texture_types.h	/^    int                         normalizedCoords;$/;"	m	struct:cudaTextureDesc
normcdf	/usr/local/cuda/include/math_functions.hpp	/^__MATH_FUNCTIONS_DECL__ float normcdf(float a)$/;"	f
normcdf	/usr/local/cuda/include/math_functions_dbl_ptx3.hpp	/^__MATH_FUNCTIONS_DBL_PTX3_DECL__ double normcdf(double a)$/;"	f
normcdff	/usr/local/cuda/include/math_functions.hpp	/^__MATH_FUNCTIONS_DECL__ float normcdff(float a) \/* __THROW *\/$/;"	f
normcdfinv	/usr/local/cuda/include/math_functions.hpp	/^__MATH_FUNCTIONS_DECL__ float normcdfinv(float a)$/;"	f
normcdfinv	/usr/local/cuda/include/math_functions_dbl_ptx3.hpp	/^__MATH_FUNCTIONS_DBL_PTX3_DECL__ double normcdfinv(double a)$/;"	f
normcdfinvf	/usr/local/cuda/include/math_functions.hpp	/^__MATH_FUNCTIONS_DECL__ float normcdfinvf(float a) \/* __THROW *\/$/;"	f
not_existing	/usr/local/cuda/include/dynlink_cuviddec.h	/^    int not_existing;           \/**< non-existing reference frame (corresponding PicIdx should be set to -1) *\/$/;"	m	struct:_CUVIDH264DPBENTRY
nppZCC	/usr/local/cuda/include/nppdefs.h	/^    nppZCC     \/**<  sign change count_0 *\/$/;"	e	enum:__anon160
nppZCR	/usr/local/cuda/include/nppdefs.h	/^    nppZCR,    \/**<  sign change *\/$/;"	e	enum:__anon160
nppZCXor	/usr/local/cuda/include/nppdefs.h	/^    nppZCXor,  \/**<  sign change XOR *\/$/;"	e	enum:__anon160
nppiACTable	/usr/local/cuda/include/nppdefs.h	/^    nppiACTable,    \/**<  AC Table *\/$/;"	e	enum:__anon161
nppiDCTable	/usr/local/cuda/include/nppdefs.h	/^    nppiDCTable,    \/**<  DC Table *\/$/;"	e	enum:__anon161
nppiNormInf	/usr/local/cuda/include/nppdefs.h	/^    nppiNormInf = 0, \/**<  maximum *\/$/;"	e	enum:__anon162
nppiNormL1	/usr/local/cuda/include/nppdefs.h	/^    nppiNormL1 = 1,  \/**<  sum *\/$/;"	e	enum:__anon162
nppiNormL2	/usr/local/cuda/include/nppdefs.h	/^    nppiNormL2 = 2   \/**<  square root of sum of squares *\/$/;"	e	enum:__anon162
numChannels	/usr/local/cuda/include/cuda.h	/^            unsigned int numChannels;         \/**< Channels per array element *\/$/;"	m	struct:CUDA_RESOURCE_DESC_st::__anon41::__anon44
numChannels	/usr/local/cuda/include/cuda.h	/^            unsigned int numChannels;         \/**< Channels per array element *\/$/;"	m	struct:CUDA_RESOURCE_DESC_st::__anon41::__anon45
numChannels	/usr/local/cuda/include/cudaEGL.h	/^    unsigned int numChannels;           \/**< Number of channels for the plane *\/$/;"	m	struct:CUeglFrame_st
numClassifiers	/usr/local/cuda/include/nppdefs.h	/^    int      numClassifiers;    \/**<  number of classifiers *\/$/;"	m	struct:__anon158
numRegs	/usr/local/cuda/include/cuda_occupancy.h	/^    int numRegs;            \/\/ Number of registers used. When the function is$/;"	m	struct:cudaOccFuncAttributes
numRegs	/usr/local/cuda/include/driver_types.h	/^   int numRegs;$/;"	m	struct:cudaFuncAttributes
numSms	/usr/local/cuda/include/cuda_occupancy.h	/^    int    numSms;                      \/\/ Number of SMs available$/;"	m	struct:cudaOccDeviceProp
numThreads	/usr/local/cuda/include/cooperative_groups.h	/^    static const unsigned int numThreads = Size;$/;"	m	class:__thread_block_tile_base
num_bits	src/stb_image.h	/^   int num_bits;$/;"	m	struct:__anon20
num_boxes	src/network.c	/^int num_boxes(network *net)$/;"	f
num_extra_slice_header_bits	/usr/local/cuda/include/dynlink_cuviddec.h	/^    unsigned char num_extra_slice_header_bits;$/;"	m	struct:_CUVIDHEVCPICPARAMS
num_grids	/usr/local/cuda/include/cooperative_groups.h	/^    _CG_QUALIFIER unsigned int num_grids() const {$/;"	f	class:multi_grid_group
num_grids	/usr/local/cuda/include/cooperative_groups_helpers.h	/^        _CG_STATIC_QUALIFIER unsigned int num_grids(const unsigned long long handle)$/;"	f	namespace:__internal::multi_grid
num_inter_view_refs_l0	/usr/local/cuda/include/dynlink_cuviddec.h	/^    unsigned char num_inter_view_refs_l0;$/;"	m	struct:_CUVIDH264MVCEXT
num_inter_view_refs_l1	/usr/local/cuda/include/dynlink_cuviddec.h	/^    unsigned char num_inter_view_refs_l1;$/;"	m	struct:_CUVIDH264MVCEXT
num_long_term_ref_pics_sps	/usr/local/cuda/include/dynlink_cuviddec.h	/^    unsigned char num_long_term_ref_pics_sps;$/;"	m	struct:_CUVIDHEVCPICPARAMS
num_ref_frames	/usr/local/cuda/include/dynlink_cuviddec.h	/^    int num_ref_frames;             \/\/ NOTE: shall meet level 4.1 restrictions$/;"	m	struct:_CUVIDH264PICPARAMS
num_ref_idx_l0_active_minus1	/usr/local/cuda/include/dynlink_cuviddec.h	/^    int num_ref_idx_l0_active_minus1;$/;"	m	struct:_CUVIDH264PICPARAMS
num_ref_idx_l0_default_active_minus1	/usr/local/cuda/include/dynlink_cuviddec.h	/^    unsigned char num_ref_idx_l0_default_active_minus1;$/;"	m	struct:_CUVIDHEVCPICPARAMS
num_ref_idx_l1_active_minus1	/usr/local/cuda/include/dynlink_cuviddec.h	/^    int num_ref_idx_l1_active_minus1;$/;"	m	struct:_CUVIDH264PICPARAMS
num_ref_idx_l1_default_active_minus1	/usr/local/cuda/include/dynlink_cuviddec.h	/^    unsigned char num_ref_idx_l1_default_active_minus1;$/;"	m	struct:_CUVIDHEVCPICPARAMS
num_short_term_ref_pic_sets	/usr/local/cuda/include/dynlink_cuviddec.h	/^    unsigned char num_short_term_ref_pic_sets;$/;"	m	struct:_CUVIDHEVCPICPARAMS
num_slice_groups_minus1	/usr/local/cuda/include/dynlink_cuviddec.h	/^    unsigned char num_slice_groups_minus1;$/;"	m	struct:_CUVIDH264PICPARAMS
num_tile_columns_minus1	/usr/local/cuda/include/dynlink_cuviddec.h	/^    unsigned char num_tile_columns_minus1;$/;"	m	struct:_CUVIDHEVCPICPARAMS
num_tile_rows_minus1	/usr/local/cuda/include/dynlink_cuviddec.h	/^    unsigned char num_tile_rows_minus1;$/;"	m	struct:_CUVIDHEVCPICPARAMS
num_views_minus1	/usr/local/cuda/include/dynlink_cuviddec.h	/^    int num_views_minus1;$/;"	m	struct:_CUVIDH264MVCEXT
numerator	/usr/local/cuda/include/dynlink_nvcuvid.h	/^        unsigned int numerator;             \/**< frame rate numerator   (0 = unspecified or variable frame rate) *\/$/;"	m	struct:__anon123::__anon124
nvertices	/usr/local/cuda/include/nvgraph.h	/^  int nvertices; \/\/ n+1$/;"	m	struct:nvgraphCOOTopology32I_st
nvertices	/usr/local/cuda/include/nvgraph.h	/^  int nvertices; \/\/ n+1$/;"	m	struct:nvgraphCSCTopology32I_st
nvertices	/usr/local/cuda/include/nvgraph.h	/^  int nvertices; \/\/ n+1$/;"	m	struct:nvgraphCSRTopology32I_st
nvgraphCOOTopology32I_st	/usr/local/cuda/include/nvgraph.h	/^struct nvgraphCOOTopology32I_st {$/;"	s
nvgraphCOOTopology32I_t	/usr/local/cuda/include/nvgraph.h	/^typedef struct nvgraphCOOTopology32I_st *nvgraphCOOTopology32I_t;$/;"	t	typeref:struct:nvgraphCOOTopology32I_st
nvgraphCSCTopology32I_st	/usr/local/cuda/include/nvgraph.h	/^struct nvgraphCSCTopology32I_st {$/;"	s
nvgraphCSCTopology32I_t	/usr/local/cuda/include/nvgraph.h	/^typedef struct nvgraphCSCTopology32I_st *nvgraphCSCTopology32I_t;$/;"	t	typeref:struct:nvgraphCSCTopology32I_st
nvgraphCSRTopology32I_st	/usr/local/cuda/include/nvgraph.h	/^struct nvgraphCSRTopology32I_st {$/;"	s
nvgraphCSRTopology32I_t	/usr/local/cuda/include/nvgraph.h	/^typedef struct nvgraphCSRTopology32I_st *nvgraphCSRTopology32I_t;$/;"	t	typeref:struct:nvgraphCSRTopology32I_st
nvgraphClusteringMetric_t	/usr/local/cuda/include/nvgraph.h	/^} nvgraphClusteringMetric_t;$/;"	t	typeref:enum:__anon177
nvgraphGraphDescr_t	/usr/local/cuda/include/nvgraph.h	/^typedef struct nvgraphGraphDescr *nvgraphGraphDescr_t;$/;"	t	typeref:struct:nvgraphGraphDescr
nvgraphHandle_t	/usr/local/cuda/include/nvgraph.h	/^typedef struct nvgraphContext *nvgraphHandle_t;$/;"	t	typeref:struct:nvgraphContext
nvgraphSemiringOps_t	/usr/local/cuda/include/nvgraph.h	/^} nvgraphSemiringOps_t;$/;"	t	typeref:enum:__anon175
nvgraphSemiring_t	/usr/local/cuda/include/nvgraph.h	/^} nvgraphSemiring_t;$/;"	t	typeref:enum:__anon172
nvgraphSpectralClusteringType_t	/usr/local/cuda/include/nvgraph.h	/^} nvgraphSpectralClusteringType_t;$/;"	t	typeref:enum:__anon176
nvgraphStatus_t	/usr/local/cuda/include/nvgraph.h	/^} nvgraphStatus_t;$/;"	t	typeref:enum:__anon171
nvgraphTag_t	/usr/local/cuda/include/nvgraph.h	/^} nvgraphTag_t;$/;"	t	typeref:enum:__anon174
nvgraphTopologyType_t	/usr/local/cuda/include/nvgraph.h	/^} nvgraphTopologyType_t;$/;"	t	typeref:enum:__anon173
nvgraphTraversalParameter_t	/usr/local/cuda/include/nvgraph.h	/^} nvgraphTraversalParameter_t; $/;"	t	typeref:struct:__anon178
nvgraphTraversal_t	/usr/local/cuda/include/nvgraph.h	/^} nvgraphTraversal_t;$/;"	t	typeref:enum:__anon179
nvmlAccountingStats_st	/usr/local/cuda/include/nvml.h	/^typedef struct nvmlAccountingStats_st {$/;"	s
nvmlAccountingStats_t	/usr/local/cuda/include/nvml.h	/^} nvmlAccountingStats_t;$/;"	t	typeref:struct:nvmlAccountingStats_st
nvmlBAR1Memory_st	/usr/local/cuda/include/nvml.h	/^typedef struct nvmlBAR1Memory_st$/;"	s
nvmlBAR1Memory_t	/usr/local/cuda/include/nvml.h	/^}nvmlBAR1Memory_t;$/;"	t	typeref:struct:nvmlBAR1Memory_st
nvmlBrandType_enum	/usr/local/cuda/include/nvml.h	/^typedef enum nvmlBrandType_enum$/;"	g
nvmlBrandType_t	/usr/local/cuda/include/nvml.h	/^} nvmlBrandType_t;$/;"	t	typeref:enum:nvmlBrandType_enum
nvmlBridgeChipHierarchy_st	/usr/local/cuda/include/nvml.h	/^typedef struct nvmlBridgeChipHierarchy_st$/;"	s
nvmlBridgeChipHierarchy_t	/usr/local/cuda/include/nvml.h	/^}nvmlBridgeChipHierarchy_t;$/;"	t	typeref:struct:nvmlBridgeChipHierarchy_st
nvmlBridgeChipInfo_st	/usr/local/cuda/include/nvml.h	/^typedef struct nvmlBridgeChipInfo_st$/;"	s
nvmlBridgeChipInfo_t	/usr/local/cuda/include/nvml.h	/^}nvmlBridgeChipInfo_t;$/;"	t	typeref:struct:nvmlBridgeChipInfo_st
nvmlBridgeChipType_enum	/usr/local/cuda/include/nvml.h	/^typedef enum nvmlBridgeChipType_enum$/;"	g
nvmlBridgeChipType_t	/usr/local/cuda/include/nvml.h	/^}nvmlBridgeChipType_t;$/;"	t	typeref:enum:nvmlBridgeChipType_enum
nvmlClockId_enum	/usr/local/cuda/include/nvml.h	/^typedef enum nvmlClockId_enum$/;"	g
nvmlClockId_t	/usr/local/cuda/include/nvml.h	/^} nvmlClockId_t;$/;"	t	typeref:enum:nvmlClockId_enum
nvmlClockType_enum	/usr/local/cuda/include/nvml.h	/^typedef enum nvmlClockType_enum $/;"	g
nvmlClockType_t	/usr/local/cuda/include/nvml.h	/^} nvmlClockType_t;$/;"	t	typeref:enum:nvmlClockType_enum
nvmlClocksThrottleReasonAll	/usr/local/cuda/include/nvml.h	1172;"	d
nvmlClocksThrottleReasonApplicationsClocksSetting	/usr/local/cuda/include/nvml.h	1112;"	d
nvmlClocksThrottleReasonGpuIdle	/usr/local/cuda/include/nvml.h	1105;"	d
nvmlClocksThrottleReasonHwSlowdown	/usr/local/cuda/include/nvml.h	1141;"	d
nvmlClocksThrottleReasonNone	/usr/local/cuda/include/nvml.h	1167;"	d
nvmlClocksThrottleReasonSwPowerCap	/usr/local/cuda/include/nvml.h	1126;"	d
nvmlClocksThrottleReasonSwThermalSlowdown	/usr/local/cuda/include/nvml.h	1161;"	d
nvmlClocksThrottleReasonSyncBoost	/usr/local/cuda/include/nvml.h	1152;"	d
nvmlClocksThrottleReasonUserDefinedClocks	/usr/local/cuda/include/nvml.h	1118;"	d
nvmlComputeMode_enum	/usr/local/cuda/include/nvml.h	/^typedef enum nvmlComputeMode_enum $/;"	g
nvmlComputeMode_t	/usr/local/cuda/include/nvml.h	/^} nvmlComputeMode_t;$/;"	t	typeref:enum:nvmlComputeMode_enum
nvmlDeviceGetCount	/usr/local/cuda/include/nvml.h	102;"	d
nvmlDeviceGetCount	/usr/local/cuda/include/nvml.h	5618;"	d
nvmlDeviceGetHandleByIndex	/usr/local/cuda/include/nvml.h	103;"	d
nvmlDeviceGetHandleByIndex	/usr/local/cuda/include/nvml.h	5619;"	d
nvmlDeviceGetHandleByPciBusId	/usr/local/cuda/include/nvml.h	104;"	d
nvmlDeviceGetHandleByPciBusId	/usr/local/cuda/include/nvml.h	5620;"	d
nvmlDeviceGetNvLinkRemotePciInfo	/usr/local/cuda/include/nvml.h	105;"	d
nvmlDeviceGetNvLinkRemotePciInfo	/usr/local/cuda/include/nvml.h	5616;"	d
nvmlDeviceGetPciInfo	/usr/local/cuda/include/nvml.h	101;"	d
nvmlDeviceGetPciInfo	/usr/local/cuda/include/nvml.h	5617;"	d
nvmlDevice_t	/usr/local/cuda/include/nvml.h	/^typedef struct nvmlDevice_st* nvmlDevice_t;$/;"	t	typeref:struct:nvmlDevice_st
nvmlDriverModel_enum	/usr/local/cuda/include/nvml.h	/^typedef enum nvmlDriverModel_enum $/;"	g
nvmlDriverModel_t	/usr/local/cuda/include/nvml.h	/^} nvmlDriverModel_t;$/;"	t	typeref:enum:nvmlDriverModel_enum
nvmlEccBitType_t	/usr/local/cuda/include/nvml.h	534;"	d
nvmlEccCounterType_enum	/usr/local/cuda/include/nvml.h	/^typedef enum nvmlEccCounterType_enum $/;"	g
nvmlEccCounterType_t	/usr/local/cuda/include/nvml.h	/^} nvmlEccCounterType_t;$/;"	t	typeref:enum:nvmlEccCounterType_enum
nvmlEccErrorCounts_st	/usr/local/cuda/include/nvml.h	/^typedef struct nvmlEccErrorCounts_st $/;"	s
nvmlEccErrorCounts_t	/usr/local/cuda/include/nvml.h	/^} nvmlEccErrorCounts_t;$/;"	t	typeref:struct:nvmlEccErrorCounts_st
nvmlEnableState_enum	/usr/local/cuda/include/nvml.h	/^typedef enum nvmlEnableState_enum $/;"	g
nvmlEnableState_t	/usr/local/cuda/include/nvml.h	/^} nvmlEnableState_t;$/;"	t	typeref:enum:nvmlEnableState_enum
nvmlEncoderQueryType_enum	/usr/local/cuda/include/nvml.h	/^typedef enum nvmlEncoderQueryType_enum$/;"	g
nvmlEncoderSessionInfo_st	/usr/local/cuda/include/nvml.h	/^typedef struct nvmlEncoderSessionInfo_st$/;"	s
nvmlEncoderSessionInfo_t	/usr/local/cuda/include/nvml.h	/^}nvmlEncoderSessionInfo_t;$/;"	t	typeref:struct:nvmlEncoderSessionInfo_st
nvmlEncoderType_t	/usr/local/cuda/include/nvml.h	/^}nvmlEncoderType_t;$/;"	t	typeref:enum:nvmlEncoderQueryType_enum
nvmlEventData_st	/usr/local/cuda/include/nvml.h	/^typedef struct nvmlEventData_st$/;"	s
nvmlEventData_t	/usr/local/cuda/include/nvml.h	/^} nvmlEventData_t;$/;"	t	typeref:struct:nvmlEventData_st
nvmlEventSet_t	/usr/local/cuda/include/nvml.h	/^typedef struct nvmlEventSet_st* nvmlEventSet_t;$/;"	t	typeref:struct:nvmlEventSet_st
nvmlEventTypeAll	/usr/local/cuda/include/nvml.h	1074;"	d
nvmlEventTypeClock	/usr/local/cuda/include/nvml.h	1069;"	d
nvmlEventTypeDoubleBitEccError	/usr/local/cuda/include/nvml.h	1052;"	d
nvmlEventTypeNone	/usr/local/cuda/include/nvml.h	1072;"	d
nvmlEventTypePState	/usr/local/cuda/include/nvml.h	1060;"	d
nvmlEventTypeSingleBitEccError	/usr/local/cuda/include/nvml.h	1046;"	d
nvmlEventTypeXidCriticalError	/usr/local/cuda/include/nvml.h	1063;"	d
nvmlFanState_enum	/usr/local/cuda/include/nvml.h	/^typedef enum nvmlFanState_enum $/;"	g
nvmlFanState_t	/usr/local/cuda/include/nvml.h	/^} nvmlFanState_t;$/;"	t	typeref:enum:nvmlFanState_enum
nvmlFieldValue_st	/usr/local/cuda/include/nvml.h	/^typedef struct nvmlFieldValue_st$/;"	s
nvmlFieldValue_t	/usr/local/cuda/include/nvml.h	/^} nvmlFieldValue_t;$/;"	t	typeref:struct:nvmlFieldValue_st
nvmlFlagDefault	/usr/local/cuda/include/nvml.h	466;"	d
nvmlFlagForce	/usr/local/cuda/include/nvml.h	468;"	d
nvmlGom_enum	/usr/local/cuda/include/nvml.h	/^typedef enum nvmlGom_enum$/;"	g
nvmlGpuLevel_enum	/usr/local/cuda/include/nvml.h	/^typedef enum nvmlGpuLevel_enum$/;"	g
nvmlGpuOperationMode_t	/usr/local/cuda/include/nvml.h	/^} nvmlGpuOperationMode_t;$/;"	t	typeref:enum:nvmlGom_enum
nvmlGpuP2PCapsIndex_enum	/usr/local/cuda/include/nvml.h	/^typedef enum nvmlGpuP2PCapsIndex_enum$/;"	g
nvmlGpuP2PCapsIndex_t	/usr/local/cuda/include/nvml.h	/^}nvmlGpuP2PCapsIndex_t;$/;"	t	typeref:enum:nvmlGpuP2PCapsIndex_enum
nvmlGpuP2PStatus_enum	/usr/local/cuda/include/nvml.h	/^typedef enum nvmlGpuP2PStatus_enum$/;"	g
nvmlGpuP2PStatus_t	/usr/local/cuda/include/nvml.h	/^} nvmlGpuP2PStatus_t;$/;"	t	typeref:enum:nvmlGpuP2PStatus_enum
nvmlGpuTopologyLevel_t	/usr/local/cuda/include/nvml.h	/^} nvmlGpuTopologyLevel_t;$/;"	t	typeref:enum:nvmlGpuLevel_enum
nvmlGpuVirtualizationMode	/usr/local/cuda/include/nvml.h	/^typedef enum nvmlGpuVirtualizationMode {$/;"	g
nvmlGpuVirtualizationMode_t	/usr/local/cuda/include/nvml.h	/^} nvmlGpuVirtualizationMode_t;$/;"	t	typeref:enum:nvmlGpuVirtualizationMode
nvmlGridLicensableFeature_st	/usr/local/cuda/include/nvml.h	/^typedef struct nvmlGridLicensableFeature_st$/;"	s
nvmlGridLicensableFeature_t	/usr/local/cuda/include/nvml.h	/^} nvmlGridLicensableFeature_t;$/;"	t	typeref:struct:nvmlGridLicensableFeature_st
nvmlGridLicensableFeatures_st	/usr/local/cuda/include/nvml.h	/^typedef struct nvmlGridLicensableFeatures_st$/;"	s
nvmlGridLicensableFeatures_t	/usr/local/cuda/include/nvml.h	/^} nvmlGridLicensableFeatures_t;$/;"	t	typeref:struct:nvmlGridLicensableFeatures_st
nvmlGridLicenseFeatureCode_t	/usr/local/cuda/include/nvml.h	/^} nvmlGridLicenseFeatureCode_t;$/;"	t	typeref:enum:__anon180
nvmlHwbcEntry_st	/usr/local/cuda/include/nvml.h	/^typedef struct nvmlHwbcEntry_st $/;"	s
nvmlHwbcEntry_t	/usr/local/cuda/include/nvml.h	/^} nvmlHwbcEntry_t;$/;"	t	typeref:struct:nvmlHwbcEntry_st
nvmlInforomObject_enum	/usr/local/cuda/include/nvml.h	/^typedef enum nvmlInforomObject_enum $/;"	g
nvmlInforomObject_t	/usr/local/cuda/include/nvml.h	/^} nvmlInforomObject_t;$/;"	t	typeref:enum:nvmlInforomObject_enum
nvmlInit	/usr/local/cuda/include/nvml.h	100;"	d
nvmlInit	/usr/local/cuda/include/nvml.h	5621;"	d
nvmlLedColor_enum	/usr/local/cuda/include/nvml.h	/^typedef enum nvmlLedColor_enum $/;"	g
nvmlLedColor_t	/usr/local/cuda/include/nvml.h	/^} nvmlLedColor_t;$/;"	t	typeref:enum:nvmlLedColor_enum
nvmlLedState_st	/usr/local/cuda/include/nvml.h	/^typedef struct nvmlLedState_st $/;"	s
nvmlLedState_t	/usr/local/cuda/include/nvml.h	/^} nvmlLedState_t;$/;"	t	typeref:struct:nvmlLedState_st
nvmlMemoryErrorType_enum	/usr/local/cuda/include/nvml.h	/^typedef enum nvmlMemoryErrorType_enum$/;"	g
nvmlMemoryErrorType_t	/usr/local/cuda/include/nvml.h	/^} nvmlMemoryErrorType_t;$/;"	t	typeref:enum:nvmlMemoryErrorType_enum
nvmlMemoryLocation_enum	/usr/local/cuda/include/nvml.h	/^typedef enum nvmlMemoryLocation_enum$/;"	g
nvmlMemoryLocation_t	/usr/local/cuda/include/nvml.h	/^} nvmlMemoryLocation_t;$/;"	t	typeref:enum:nvmlMemoryLocation_enum
nvmlMemory_st	/usr/local/cuda/include/nvml.h	/^typedef struct nvmlMemory_st $/;"	s
nvmlMemory_t	/usr/local/cuda/include/nvml.h	/^} nvmlMemory_t;$/;"	t	typeref:struct:nvmlMemory_st
nvmlNvLinkCapability_enum	/usr/local/cuda/include/nvml.h	/^typedef enum nvmlNvLinkCapability_enum$/;"	g
nvmlNvLinkCapability_t	/usr/local/cuda/include/nvml.h	/^} nvmlNvLinkCapability_t;$/;"	t	typeref:enum:nvmlNvLinkCapability_enum
nvmlNvLinkErrorCounter_enum	/usr/local/cuda/include/nvml.h	/^typedef enum nvmlNvLinkErrorCounter_enum$/;"	g
nvmlNvLinkErrorCounter_t	/usr/local/cuda/include/nvml.h	/^} nvmlNvLinkErrorCounter_t;$/;"	t	typeref:enum:nvmlNvLinkErrorCounter_enum
nvmlNvLinkUtilizationControl_st	/usr/local/cuda/include/nvml.h	/^typedef struct nvmlNvLinkUtilizationControl_st$/;"	s
nvmlNvLinkUtilizationControl_t	/usr/local/cuda/include/nvml.h	/^} nvmlNvLinkUtilizationControl_t;$/;"	t	typeref:struct:nvmlNvLinkUtilizationControl_st
nvmlNvLinkUtilizationCountPktTypes_enum	/usr/local/cuda/include/nvml.h	/^typedef enum nvmlNvLinkUtilizationCountPktTypes_enum$/;"	g
nvmlNvLinkUtilizationCountPktTypes_t	/usr/local/cuda/include/nvml.h	/^} nvmlNvLinkUtilizationCountPktTypes_t;$/;"	t	typeref:enum:nvmlNvLinkUtilizationCountPktTypes_enum
nvmlNvLinkUtilizationCountUnits_enum	/usr/local/cuda/include/nvml.h	/^typedef enum nvmlNvLinkUtilizationCountUnits_enum$/;"	g
nvmlNvLinkUtilizationCountUnits_t	/usr/local/cuda/include/nvml.h	/^} nvmlNvLinkUtilizationCountUnits_t;$/;"	t	typeref:enum:nvmlNvLinkUtilizationCountUnits_enum
nvmlPSUInfo_st	/usr/local/cuda/include/nvml.h	/^typedef struct nvmlPSUInfo_st $/;"	s
nvmlPSUInfo_t	/usr/local/cuda/include/nvml.h	/^} nvmlPSUInfo_t;$/;"	t	typeref:struct:nvmlPSUInfo_st
nvmlPStates_enum	/usr/local/cuda/include/nvml.h	/^typedef enum nvmlPStates_enum $/;"	g
nvmlPageRetirementCause_enum	/usr/local/cuda/include/nvml.h	/^typedef enum nvmlPageRetirementCause_enum$/;"	g
nvmlPageRetirementCause_t	/usr/local/cuda/include/nvml.h	/^} nvmlPageRetirementCause_t;$/;"	t	typeref:enum:nvmlPageRetirementCause_enum
nvmlPciInfo_st	/usr/local/cuda/include/nvml.h	/^typedef struct nvmlPciInfo_st$/;"	s
nvmlPciInfo_t	/usr/local/cuda/include/nvml.h	/^} nvmlPciInfo_t;$/;"	t	typeref:struct:nvmlPciInfo_st
nvmlPcieUtilCounter_enum	/usr/local/cuda/include/nvml.h	/^typedef enum nvmlPcieUtilCounter_enum$/;"	g
nvmlPcieUtilCounter_t	/usr/local/cuda/include/nvml.h	/^} nvmlPcieUtilCounter_t;$/;"	t	typeref:enum:nvmlPcieUtilCounter_enum
nvmlPerfPolicyType_enum	/usr/local/cuda/include/nvml.h	/^typedef enum nvmlPerfPolicyType_enum$/;"	g
nvmlPerfPolicyType_t	/usr/local/cuda/include/nvml.h	/^}nvmlPerfPolicyType_t;$/;"	t	typeref:enum:nvmlPerfPolicyType_enum
nvmlProcessInfo_st	/usr/local/cuda/include/nvml.h	/^typedef struct nvmlProcessInfo_st$/;"	s
nvmlProcessInfo_t	/usr/local/cuda/include/nvml.h	/^} nvmlProcessInfo_t;$/;"	t	typeref:struct:nvmlProcessInfo_st
nvmlProcessUtilizationSample_st	/usr/local/cuda/include/nvml.h	/^typedef struct nvmlProcessUtilizationSample_st$/;"	s
nvmlProcessUtilizationSample_t	/usr/local/cuda/include/nvml.h	/^} nvmlProcessUtilizationSample_t;$/;"	t	typeref:struct:nvmlProcessUtilizationSample_st
nvmlPstates_t	/usr/local/cuda/include/nvml.h	/^} nvmlPstates_t;$/;"	t	typeref:enum:nvmlPStates_enum
nvmlRestrictedAPI_enum	/usr/local/cuda/include/nvml.h	/^typedef enum nvmlRestrictedAPI_enum$/;"	g
nvmlRestrictedAPI_t	/usr/local/cuda/include/nvml.h	/^} nvmlRestrictedAPI_t;$/;"	t	typeref:enum:nvmlRestrictedAPI_enum
nvmlReturn	/usr/local/cuda/include/nvml.h	/^    nvmlReturn_t nvmlReturn;    \/\/!< Return code for retrieving this value. This must be checked before looking at value, as value is undefined if nvmlReturn != NVML_SUCCESS$/;"	m	struct:nvmlFieldValue_st
nvmlReturn_enum	/usr/local/cuda/include/nvml.h	/^typedef enum nvmlReturn_enum $/;"	g
nvmlReturn_t	/usr/local/cuda/include/nvml.h	/^} nvmlReturn_t;$/;"	t	typeref:enum:nvmlReturn_enum
nvmlSample_st	/usr/local/cuda/include/nvml.h	/^typedef struct nvmlSample_st $/;"	s
nvmlSample_t	/usr/local/cuda/include/nvml.h	/^}nvmlSample_t;$/;"	t	typeref:struct:nvmlSample_st
nvmlSamplingType_enum	/usr/local/cuda/include/nvml.h	/^typedef enum nvmlSamplingType_enum$/;"	g
nvmlSamplingType_t	/usr/local/cuda/include/nvml.h	/^}nvmlSamplingType_t;$/;"	t	typeref:enum:nvmlSamplingType_enum
nvmlTemperatureSensors_enum	/usr/local/cuda/include/nvml.h	/^typedef enum nvmlTemperatureSensors_enum $/;"	g
nvmlTemperatureSensors_t	/usr/local/cuda/include/nvml.h	/^} nvmlTemperatureSensors_t;$/;"	t	typeref:enum:nvmlTemperatureSensors_enum
nvmlTemperatureThresholds_enum	/usr/local/cuda/include/nvml.h	/^typedef enum nvmlTemperatureThresholds_enum$/;"	g
nvmlTemperatureThresholds_t	/usr/local/cuda/include/nvml.h	/^} nvmlTemperatureThresholds_t;$/;"	t	typeref:enum:nvmlTemperatureThresholds_enum
nvmlUnitFanInfo_st	/usr/local/cuda/include/nvml.h	/^typedef struct nvmlUnitFanInfo_st $/;"	s
nvmlUnitFanInfo_t	/usr/local/cuda/include/nvml.h	/^} nvmlUnitFanInfo_t;$/;"	t	typeref:struct:nvmlUnitFanInfo_st
nvmlUnitFanSpeeds_st	/usr/local/cuda/include/nvml.h	/^typedef struct nvmlUnitFanSpeeds_st $/;"	s
nvmlUnitFanSpeeds_t	/usr/local/cuda/include/nvml.h	/^} nvmlUnitFanSpeeds_t;$/;"	t	typeref:struct:nvmlUnitFanSpeeds_st
nvmlUnitInfo_st	/usr/local/cuda/include/nvml.h	/^typedef struct nvmlUnitInfo_st $/;"	s
nvmlUnitInfo_t	/usr/local/cuda/include/nvml.h	/^} nvmlUnitInfo_t;$/;"	t	typeref:struct:nvmlUnitInfo_st
nvmlUnit_t	/usr/local/cuda/include/nvml.h	/^typedef struct nvmlUnit_st* nvmlUnit_t;$/;"	t	typeref:struct:nvmlUnit_st
nvmlUtilization_st	/usr/local/cuda/include/nvml.h	/^typedef struct nvmlUtilization_st $/;"	s
nvmlUtilization_t	/usr/local/cuda/include/nvml.h	/^} nvmlUtilization_t;$/;"	t	typeref:struct:nvmlUtilization_st
nvmlValueType_enum	/usr/local/cuda/include/nvml.h	/^typedef enum nvmlValueType_enum $/;"	g
nvmlValueType_t	/usr/local/cuda/include/nvml.h	/^}nvmlValueType_t;$/;"	t	typeref:enum:nvmlValueType_enum
nvmlValue_st	/usr/local/cuda/include/nvml.h	/^typedef union nvmlValue_st$/;"	u
nvmlValue_t	/usr/local/cuda/include/nvml.h	/^}nvmlValue_t;$/;"	t	typeref:union:nvmlValue_st
nvmlVgpuGuestInfoState_enum	/usr/local/cuda/include/nvml.h	/^typedef enum nvmlVgpuGuestInfoState_enum$/;"	g
nvmlVgpuGuestInfoState_t	/usr/local/cuda/include/nvml.h	/^} nvmlVgpuGuestInfoState_t;$/;"	t	typeref:enum:nvmlVgpuGuestInfoState_enum
nvmlVgpuInstanceUtilizationSample_st	/usr/local/cuda/include/nvml.h	/^typedef struct nvmlVgpuInstanceUtilizationSample_st$/;"	s
nvmlVgpuInstanceUtilizationSample_t	/usr/local/cuda/include/nvml.h	/^} nvmlVgpuInstanceUtilizationSample_t;$/;"	t	typeref:struct:nvmlVgpuInstanceUtilizationSample_st
nvmlVgpuInstance_t	/usr/local/cuda/include/nvml.h	/^typedef unsigned int nvmlVgpuInstance_t;$/;"	t
nvmlVgpuProcessUtilizationSample_st	/usr/local/cuda/include/nvml.h	/^typedef struct nvmlVgpuProcessUtilizationSample_st$/;"	s
nvmlVgpuProcessUtilizationSample_t	/usr/local/cuda/include/nvml.h	/^} nvmlVgpuProcessUtilizationSample_t;$/;"	t	typeref:struct:nvmlVgpuProcessUtilizationSample_st
nvmlVgpuTypeId_t	/usr/local/cuda/include/nvml.h	/^typedef unsigned int nvmlVgpuTypeId_t;$/;"	t
nvmlVgpuVmIdType	/usr/local/cuda/include/nvml.h	/^typedef enum nvmlVgpuVmIdType {$/;"	g
nvmlVgpuVmIdType_t	/usr/local/cuda/include/nvml.h	/^} nvmlVgpuVmIdType_t;$/;"	t	typeref:enum:nvmlVgpuVmIdType
nvmlViolationTime_st	/usr/local/cuda/include/nvml.h	/^typedef struct nvmlViolationTime_st$/;"	s
nvmlViolationTime_t	/usr/local/cuda/include/nvml.h	/^}nvmlViolationTime_t;$/;"	t	typeref:struct:nvmlViolationTime_st
nvrtcGetTypeName	/usr/local/cuda/include/nvrtc.h	/^nvrtcResult nvrtcGetTypeName(std::string *result)$/;"	f
nvrtcProgram	/usr/local/cuda/include/nvrtc.h	/^typedef struct _nvrtcProgram *nvrtcProgram;$/;"	t	typeref:struct:_nvrtcProgram
nvrtcResult	/usr/local/cuda/include/nvrtc.h	/^} nvrtcResult;$/;"	t	typeref:enum:__anon181
nvtxColorType_t	/usr/local/cuda/include/nvToolsExt.h	/^typedef enum nvtxColorType_t$/;"	g
nvtxColorType_t	/usr/local/cuda/include/nvToolsExt.h	/^} nvtxColorType_t;$/;"	t	typeref:enum:nvtxColorType_t
nvtxDomainCreate	/usr/local/cuda/include/nvToolsExt.h	1540;"	d
nvtxDomainCreate	/usr/local/cuda/include/nvToolsExt.h	1550;"	d
nvtxDomainHandle_t	/usr/local/cuda/include/nvToolsExt.h	/^typedef struct nvtxDomainHandle* nvtxDomainHandle_t;$/;"	t	typeref:struct:nvtxDomainHandle
nvtxDomainNameCategory	/usr/local/cuda/include/nvToolsExt.h	1542;"	d
nvtxDomainNameCategory	/usr/local/cuda/include/nvToolsExt.h	1552;"	d
nvtxDomainRegisterString	/usr/local/cuda/include/nvToolsExt.h	1541;"	d
nvtxDomainRegisterString	/usr/local/cuda/include/nvToolsExt.h	1551;"	d
nvtxEventAttributes_t	/usr/local/cuda/include/nvToolsExt.h	/^typedef struct nvtxEventAttributes_v2 nvtxEventAttributes_t;$/;"	t	typeref:struct:nvtxEventAttributes_v2
nvtxEventAttributes_v2	/usr/local/cuda/include/nvToolsExt.h	/^typedef struct nvtxEventAttributes_v2$/;"	s
nvtxEventAttributes_v2	/usr/local/cuda/include/nvToolsExt.h	/^} nvtxEventAttributes_v2;$/;"	t	typeref:struct:nvtxEventAttributes_v2
nvtxInitializationAttributes_t	/usr/local/cuda/include/nvToolsExt.h	/^typedef struct nvtxInitializationAttributes_v2 nvtxInitializationAttributes_t;$/;"	t	typeref:struct:nvtxInitializationAttributes_v2
nvtxInitializationAttributes_v2	/usr/local/cuda/include/nvToolsExt.h	/^typedef struct nvtxInitializationAttributes_v2$/;"	s
nvtxInitializationAttributes_v2	/usr/local/cuda/include/nvToolsExt.h	/^} nvtxInitializationAttributes_v2;$/;"	t	typeref:struct:nvtxInitializationAttributes_v2
nvtxInitializationMode_t	/usr/local/cuda/include/nvToolsExt.h	/^typedef enum nvtxInitializationMode_t$/;"	g
nvtxInitializationMode_t	/usr/local/cuda/include/nvToolsExt.h	/^} nvtxInitializationMode_t;$/;"	t	typeref:enum:nvtxInitializationMode_t
nvtxMark	/usr/local/cuda/include/nvToolsExt.h	1534;"	d
nvtxMark	/usr/local/cuda/include/nvToolsExt.h	1544;"	d
nvtxMessageType_t	/usr/local/cuda/include/nvToolsExt.h	/^typedef enum nvtxMessageType_t$/;"	g
nvtxMessageType_t	/usr/local/cuda/include/nvToolsExt.h	/^} nvtxMessageType_t;$/;"	t	typeref:enum:nvtxMessageType_t
nvtxMessageValue_t	/usr/local/cuda/include/nvToolsExt.h	/^typedef union nvtxMessageValue_t$/;"	u
nvtxMessageValue_t	/usr/local/cuda/include/nvToolsExt.h	/^} nvtxMessageValue_t;$/;"	t	typeref:union:nvtxMessageValue_t
nvtxNameCategory	/usr/local/cuda/include/nvToolsExt.h	1537;"	d
nvtxNameCategory	/usr/local/cuda/include/nvToolsExt.h	1547;"	d
nvtxNameCuContext	/usr/local/cuda/include/nvToolsExtCuda.h	150;"	d
nvtxNameCuContext	/usr/local/cuda/include/nvToolsExtCuda.h	155;"	d
nvtxNameCuDevice	/usr/local/cuda/include/nvToolsExtCuda.h	149;"	d
nvtxNameCuDevice	/usr/local/cuda/include/nvToolsExtCuda.h	154;"	d
nvtxNameCuEvent	/usr/local/cuda/include/nvToolsExtCuda.h	152;"	d
nvtxNameCuEvent	/usr/local/cuda/include/nvToolsExtCuda.h	157;"	d
nvtxNameCuStream	/usr/local/cuda/include/nvToolsExtCuda.h	151;"	d
nvtxNameCuStream	/usr/local/cuda/include/nvToolsExtCuda.h	156;"	d
nvtxNameCudaDevice	/usr/local/cuda/include/nvToolsExtCudaRt.h	127;"	d
nvtxNameCudaDevice	/usr/local/cuda/include/nvToolsExtCudaRt.h	131;"	d
nvtxNameCudaEvent	/usr/local/cuda/include/nvToolsExtCudaRt.h	129;"	d
nvtxNameCudaEvent	/usr/local/cuda/include/nvToolsExtCudaRt.h	133;"	d
nvtxNameCudaStream	/usr/local/cuda/include/nvToolsExtCudaRt.h	128;"	d
nvtxNameCudaStream	/usr/local/cuda/include/nvToolsExtCudaRt.h	132;"	d
nvtxNameOsThread	/usr/local/cuda/include/nvToolsExt.h	1538;"	d
nvtxNameOsThread	/usr/local/cuda/include/nvToolsExt.h	1548;"	d
nvtxPayloadType_t	/usr/local/cuda/include/nvToolsExt.h	/^typedef enum nvtxPayloadType_t$/;"	g
nvtxPayloadType_t	/usr/local/cuda/include/nvToolsExt.h	/^} nvtxPayloadType_t;$/;"	t	typeref:enum:nvtxPayloadType_t
nvtxRangeId_t	/usr/local/cuda/include/nvToolsExt.h	/^typedef uint64_t nvtxRangeId_t;$/;"	t
nvtxRangePush	/usr/local/cuda/include/nvToolsExt.h	1536;"	d
nvtxRangePush	/usr/local/cuda/include/nvToolsExt.h	1546;"	d
nvtxRangeStart	/usr/local/cuda/include/nvToolsExt.h	1535;"	d
nvtxRangeStart	/usr/local/cuda/include/nvToolsExt.h	1545;"	d
nvtxResourceAttributes_t	/usr/local/cuda/include/nvToolsExt.h	/^typedef struct nvtxResourceAttributes_v0 nvtxResourceAttributes_t;$/;"	t	typeref:struct:nvtxResourceAttributes_v0
nvtxResourceAttributes_v0	/usr/local/cuda/include/nvToolsExt.h	/^typedef struct nvtxResourceAttributes_v0$/;"	s
nvtxResourceAttributes_v0	/usr/local/cuda/include/nvToolsExt.h	/^} nvtxResourceAttributes_v0;$/;"	t	typeref:struct:nvtxResourceAttributes_v0
nvtxResourceCUDARTType_t	/usr/local/cuda/include/nvToolsExtCudaRt.h	/^typedef enum nvtxResourceCUDARTType_t$/;"	g
nvtxResourceCUDARTType_t	/usr/local/cuda/include/nvToolsExtCudaRt.h	/^} nvtxResourceCUDARTType_t;$/;"	t	typeref:enum:nvtxResourceCUDARTType_t
nvtxResourceCUDAType_t	/usr/local/cuda/include/nvToolsExtCuda.h	/^typedef enum nvtxResourceCUDAType_t$/;"	g
nvtxResourceCUDAType_t	/usr/local/cuda/include/nvToolsExtCuda.h	/^} nvtxResourceCUDAType_t;$/;"	t	typeref:enum:nvtxResourceCUDAType_t
nvtxResourceGenericType_t	/usr/local/cuda/include/nvToolsExt.h	/^typedef enum nvtxResourceGenericType_t$/;"	g
nvtxResourceGenericType_t	/usr/local/cuda/include/nvToolsExt.h	/^} nvtxResourceGenericType_t;$/;"	t	typeref:enum:nvtxResourceGenericType_t
nvtxResourceHandle_t	/usr/local/cuda/include/nvToolsExt.h	/^typedef struct nvtxResourceHandle* nvtxResourceHandle_t;$/;"	t	typeref:struct:nvtxResourceHandle
nvtxResourceSyncAndroidType_t	/usr/local/cuda/include/nvToolsExtSync.h	/^typedef enum nvtxResourceSyncLinuxType_t nvtxResourceSyncAndroidType_t;$/;"	t	typeref:enum:nvtxResourceSyncLinuxType_t
nvtxResourceSyncLinuxType_t	/usr/local/cuda/include/nvToolsExtSync.h	/^typedef enum nvtxResourceSyncLinuxType_t$/;"	g
nvtxResourceSyncLinuxType_t	/usr/local/cuda/include/nvToolsExtSync.h	/^} nvtxResourceSyncLinuxType_t;$/;"	t	typeref:enum:nvtxResourceSyncLinuxType_t
nvtxResourceSyncPosixThreadType_t	/usr/local/cuda/include/nvToolsExtSync.h	/^typedef enum nvtxResourceSyncPosixThreadType_t$/;"	g
nvtxResourceSyncPosixThreadType_t	/usr/local/cuda/include/nvToolsExtSync.h	/^} nvtxResourceSyncPosixThreadType_t;$/;"	t	typeref:enum:nvtxResourceSyncPosixThreadType_t
nvtxResourceSyncWindowsType_t	/usr/local/cuda/include/nvToolsExtSync.h	/^typedef enum nvtxResourceSyncWindowsType_t$/;"	g
nvtxResourceSyncWindowsType_t	/usr/local/cuda/include/nvToolsExtSync.h	/^} nvtxResourceSyncWindowsType_t;$/;"	t	typeref:enum:nvtxResourceSyncWindowsType_t
nvtxStringHandle_t	/usr/local/cuda/include/nvToolsExt.h	/^typedef struct nvtxStringHandle* nvtxStringHandle_t;$/;"	t	typeref:struct:nvtxStringHandle
nvtxSyncUserAttributes_t	/usr/local/cuda/include/nvToolsExtSync.h	/^typedef struct nvtxSyncUserAttributes_v0 nvtxSyncUserAttributes_t;$/;"	t	typeref:struct:nvtxSyncUserAttributes_v0
nvtxSyncUserAttributes_v0	/usr/local/cuda/include/nvToolsExtSync.h	/^typedef struct nvtxSyncUserAttributes_v0$/;"	s
nvtxSyncUserAttributes_v0	/usr/local/cuda/include/nvToolsExtSync.h	/^} nvtxSyncUserAttributes_v0;$/;"	t	typeref:struct:nvtxSyncUserAttributes_v0
nvtxSyncUser_t	/usr/local/cuda/include/nvToolsExtSync.h	/^typedef struct nvtxSyncUser* nvtxSyncUser_t;$/;"	t	typeref:struct:nvtxSyncUser
oSizeInBlocks	/usr/local/cuda/include/nppi_compression_functions.h	/^    NppiSize oSizeInBlocks; \/**< Size of component with 1x1 subsampling (usually luma) in DCT blocks. *\/$/;"	m	struct:__anon164
offset	/usr/local/cuda/include/curand_mtgp32.h	/^    int offset;$/;"	m	struct:curandStateMtgp32
offsetToDctParts	/usr/local/cuda/include/dynlink_cuviddec.h	/^    unsigned int offsetToDctParts;$/;"	m	struct:_CUVIDVP9PICPARAMS
one_hot_encode	src/utils.c	/^float **one_hot_encode(float *a, int n, int k)$/;"	f
operation	/usr/local/cuda/include/cuda.h	/^        CUstreamBatchMemOpType operation;$/;"	m	struct:CUstreamBatchMemOpParams_union::CUstreamMemOpFlushRemoteWritesParams_st
operation	/usr/local/cuda/include/cuda.h	/^        CUstreamBatchMemOpType operation;$/;"	m	struct:CUstreamBatchMemOpParams_union::CUstreamMemOpWaitValueParams_st
operation	/usr/local/cuda/include/cuda.h	/^        CUstreamBatchMemOpType operation;$/;"	m	struct:CUstreamBatchMemOpParams_union::CUstreamMemOpWriteValueParams_st
operation	/usr/local/cuda/include/cuda.h	/^    CUstreamBatchMemOpType operation;$/;"	m	union:CUstreamBatchMemOpParams_union
operator !=	/usr/local/cuda/include/cuda_fp16.hpp	/^__device__ __forceinline__ bool operator!=(const __half &lh, const __half &rh) { return __hne(lh, rh); }$/;"	f
operator ()	/usr/local/cuda/include/cuda_runtime.h	/^  inline __host__ CUDART_DEVICE size_t operator()(int)$/;"	f	class:__cudaOccupancyB2DHelper
operator *	/usr/local/cuda/include/cuda_fp16.hpp	/^__device__ __forceinline__ __half operator*(const __half &lh, const __half &rh) { return __hmul(lh, rh); }$/;"	f
operator *=	/usr/local/cuda/include/cuda_fp16.hpp	/^__device__ __forceinline__ __half &operator*=(__half &lh, const __half &rh) { lh = __hmul(lh, rh); return lh; }$/;"	f
operator +	/usr/local/cuda/include/cuda_fp16.hpp	/^__device__ __forceinline__ __half operator+(const __half &h) { return h; }$/;"	f
operator +	/usr/local/cuda/include/cuda_fp16.hpp	/^__device__ __forceinline__ __half operator+(const __half &lh, const __half &rh) { return __hadd(lh, rh); }$/;"	f
operator ++	/usr/local/cuda/include/cuda_fp16.hpp	/^__device__ __forceinline__ __half  operator++(__half &h, int) { __half ret = h; __half_raw one; one.x = 0x3C00; h += one; return ret; }$/;"	f
operator ++	/usr/local/cuda/include/cuda_fp16.hpp	/^__device__ __forceinline__ __half &operator++(__half &h)      { __half_raw one; one.x = 0x3C00; h += one; return h; }$/;"	f
operator +=	/usr/local/cuda/include/cuda_fp16.hpp	/^__device__ __forceinline__ __half &operator+=(__half &lh, const __half &rh) { lh = __hadd(lh, rh); return lh; }$/;"	f
operator -	/usr/local/cuda/include/cuda_fp16.hpp	/^__device__ __forceinline__ __half operator-(const __half &h) { return __hneg(h); }$/;"	f
operator -	/usr/local/cuda/include/cuda_fp16.hpp	/^__device__ __forceinline__ __half operator-(const __half &lh, const __half &rh) { return __hsub(lh, rh); }$/;"	f
operator --	/usr/local/cuda/include/cuda_fp16.hpp	/^__device__ __forceinline__ __half  operator--(__half &h, int) { __half ret = h; __half_raw one; one.x = 0x3C00; h -= one; return ret; }$/;"	f
operator --	/usr/local/cuda/include/cuda_fp16.hpp	/^__device__ __forceinline__ __half &operator--(__half &h)      { __half_raw one; one.x = 0x3C00; h -= one; return h; }$/;"	f
operator -=	/usr/local/cuda/include/cuda_fp16.hpp	/^__device__ __forceinline__ __half &operator-=(__half &lh, const __half &rh) { lh = __hsub(lh, rh); return lh; }$/;"	f
operator /	/usr/local/cuda/include/cuda_fp16.hpp	/^__device__ __forceinline__ __half operator\/(const __half &lh, const __half &rh) { return __hdiv(lh, rh); }$/;"	f
operator /=	/usr/local/cuda/include/cuda_fp16.hpp	/^__device__ __forceinline__ __half &operator\/=(__half &lh, const __half &rh) { lh = __hdiv(lh, rh); return lh; }$/;"	f
operator <	/usr/local/cuda/include/cuda_fp16.hpp	/^__device__ __forceinline__ bool operator< (const __half &lh, const __half &rh) { return __hlt(lh, rh); }$/;"	f
operator <=	/usr/local/cuda/include/cuda_fp16.hpp	/^__device__ __forceinline__ bool operator<=(const __half &lh, const __half &rh) { return __hle(lh, rh); }$/;"	f
operator ==	/usr/local/cuda/include/cuda_fp16.hpp	/^__device__ __forceinline__ bool operator==(const __half &lh, const __half &rh) { return __heq(lh, rh); }$/;"	f
operator >	/usr/local/cuda/include/cuda_fp16.hpp	/^__device__ __forceinline__ bool operator> (const __half &lh, const __half &rh) { return __hgt(lh, rh); }$/;"	f
operator >=	/usr/local/cuda/include/cuda_fp16.hpp	/^__device__ __forceinline__ bool operator>=(const __half &lh, const __half &rh) { return __hge(lh, rh); }$/;"	f
operator uint3	/usr/local/cuda/include/vector_types.h	/^    __host__ __device__ operator uint3(void) { uint3 t; t.x = x; t.y = y; t.z = z; return t; }$/;"	f	struct:dim3
opt	/usr/local/cuda/include/nvgraph.h	/^       void * opt; \/\/ optional parameter that can be used for preconditioning in the future$/;"	m	struct:SpectralClusteringParameter
option_find	src/option_list.c	/^char *option_find(list *l, char *key)$/;"	f
option_find_float	src/option_list.c	/^float option_find_float(list *l, char *key, float def)$/;"	f
option_find_float_quiet	src/option_list.c	/^float option_find_float_quiet(list *l, char *key, float def)$/;"	f
option_find_int	src/option_list.c	/^int option_find_int(list *l, char *key, int def)$/;"	f
option_find_int_quiet	src/option_list.c	/^int option_find_int_quiet(list *l, char *key, int def)$/;"	f
option_find_str	src/option_list.c	/^char *option_find_str(list *l, char *key, char *def)$/;"	f
option_insert	src/option_list.c	/^void option_insert(list *l, char *key, char *val)$/;"	f
option_unused	src/option_list.c	/^void option_unused(list *l)$/;"	f
options	src/parser.c	/^    list *options;$/;"	m	struct:__anon9	file:
or_image	src/data.c	/^void or_image(image src, image dest, int c)$/;"	f
order	src/stb_image.h	/^   int scan_n, order[4];$/;"	m	struct:__anon16
os	/usr/local/cuda/include/cufftw.h	/^    int os;$/;"	m	struct:__anon84
os	/usr/local/cuda/include/cufftw.h	/^    size_t os;$/;"	m	struct:__anon85
out	src/stb_image.h	/^   stbi_uc *idata, *expanded, *out;$/;"	m	struct:__anon22
out	src/stb_image.h	/^   stbi_uc *out;                 \/\/ output buffer (always 4 components)$/;"	m	struct:__anon26
outfile	src/stb_image_write.h	/^static int outfile(char const *filename, int rgb_dir, int vdir, int x, int y, int comp, int expand_mono, void *data, int alpha, int pad, const char *fmt, ...)$/;"	f
output	/usr/local/cuda/include/curand_philox4x32_x.h	/^   uint4 output;$/;"	m	struct:curandStatePhilox4_32_10
output	src/binary_convolution.h	/^    float *output;      \/\/ output values$/;"	m	struct:__anon1
output	src/common.h	/^    dim3 output;$/;"	m	struct:__anon6
output_flag_present_flag	/usr/local/cuda/include/dynlink_cuviddec.h	/^    unsigned char output_flag_present_flag;$/;"	m	struct:_CUVIDHEVCPICPARAMS
overlap	/usr/local/cuda/include/dynlink_cuviddec.h	/^    int overlap;$/;"	m	struct:_CUVIDVC1PICPARAMS
overlap	src/box.c	/^float overlap(float x1, float w1, float x2, float w2)$/;"	f
p2pToken	/usr/local/cuda/include/cuda.h	/^    unsigned long long p2pToken;$/;"	m	struct:CUDA_POINTER_ATTRIBUTE_P2P_TOKENS_st
pArray	/usr/local/cuda/include/cudaEGL.h	/^        CUarray pArray[MAX_PLANES];     \/**< Array of CUarray corresponding to each plane*\/$/;"	m	union:CUeglFrame_st::__anon47
pBitstreamData	/usr/local/cuda/include/dynlink_cuviddec.h	/^    const unsigned char *pBitstreamData;   \/**< Ptr to bitstream data for this picture (slice-layer) *\/$/;"	m	struct:_CUVIDPICPARAMS
pCoeffs	/usr/local/cuda/include/nppi_geometry_transforms.h	/^    Npp64f * pCoeffs;   \/* device memory pointer to the tranformation matrix with double precision floating-point coefficient values to be used for this image *\/$/;"	m	struct:__anon170
pCpuScan	/usr/local/cuda/include/nppi_compression_functions.h	/^    const Npp8u * pCpuScan;$/;"	m	struct:__anon167
pDst	/usr/local/cuda/include/nppi_color_conversion.h	/^    void * pDst;        \/* device memory pointer *\/$/;"	m	struct:__anon163
pDst	/usr/local/cuda/include/nppi_geometry_transforms.h	/^    void * pDst;        \/* device memory pointer *\/$/;"	m	struct:__anon168
pDst	/usr/local/cuda/include/nppi_geometry_transforms.h	/^    void * pDst;        \/* device memory pointer *\/$/;"	m	struct:__anon169
pDst	/usr/local/cuda/include/nppi_geometry_transforms.h	/^    void * pDst;        \/* device memory pointer *\/$/;"	m	struct:__anon170
pExtVideoInfo	/usr/local/cuda/include/dynlink_nvcuvid.h	/^    CUVIDEOFORMATEX *pExtVideoInfo;             \/**< [Optional] sequence header data from system layer *\/$/;"	m	struct:_CUVIDPARSERPARAMS
pFrame	/usr/local/cuda/include/nppi_compression_functions.h	/^    NppiJpegFrameDescr * pFrame; \/**< This field and its contents are never written *\/$/;"	m	struct:__anon166
pGpuScan	/usr/local/cuda/include/nppi_compression_functions.h	/^    Npp8u * pGpuScan;$/;"	m	struct:__anon167
pIdx	/usr/local/cuda/include/curand_mtgp32.h	/^    int pIdx;$/;"	m	struct:curandStateMtgp32
pMb2SliceGroupMap	/usr/local/cuda/include/dynlink_cuviddec.h	/^        const unsigned char *pMb2SliceGroupMap;$/;"	m	union:_CUVIDH264PICPARAMS::__anon116
pNextLayer	/usr/local/cuda/include/dynlink_cuviddec.h	/^    struct _CUVIDPICPARAMS *pNextLayer; \/**< Points to the picparams for the next layer to be decoded. Linked list ends at the target layer. *\/$/;"	m	struct:_CUVIDH264SVCEXT	typeref:struct:_CUVIDH264SVCEXT::_CUVIDPICPARAMS
pPitch	/usr/local/cuda/include/cudaEGL.h	/^        void*   pPitch[MAX_PLANES];     \/**< Array of Pointers corresponding to each plane*\/$/;"	m	union:CUeglFrame_st::__anon47
pScan	/usr/local/cuda/include/nppi_compression_functions.h	/^    NppiJpegScanDescr * pScan; \/**< This field is never written. `*pScan` is written$/;"	m	struct:__anon166
pSliceDataOffsets	/usr/local/cuda/include/dynlink_cuviddec.h	/^    const unsigned int *pSliceDataOffsets; \/**< nNumSlices entries, contains offset of each slice within the bitstream data buffer *\/$/;"	m	struct:_CUVIDPICPARAMS
pSrc	/usr/local/cuda/include/nppi_color_conversion.h	/^    const void * pSrc;  \/* device memory pointer *\/$/;"	m	struct:__anon163
pSrc	/usr/local/cuda/include/nppi_geometry_transforms.h	/^    const void * pSrc;  \/* device memory pointer *\/$/;"	m	struct:__anon168
pSrc	/usr/local/cuda/include/nppi_geometry_transforms.h	/^    const void * pSrc;  \/* device memory pointer *\/$/;"	m	struct:__anon170
pSrc	/usr/local/cuda/include/nppi_geometry_transforms.h	/^    const void * pSrc;  \/* device memory pointer, ignored for in place versions *\/$/;"	m	struct:__anon169
pTwist	/usr/local/cuda/include/nppi_color_conversion.h	/^    Npp32f * pTwist; \/* device memory pointer to the color twist matrix with floating-point coefficient values to be used for this image *\/$/;"	m	struct:__anon163
pUserData	/usr/local/cuda/include/dynlink_nvcuvid.h	/^    void *pUserData;                            \/**< Parameter passed in to the data handlers  *\/$/;"	m	struct:_CUVIDSOURCEPARAMS
pUserData	/usr/local/cuda/include/dynlink_nvcuvid.h	/^    void *pUserData;                        \/**< User data for callbacks *\/$/;"	m	struct:_CUVIDPARSERPARAMS
pValue	/usr/local/cuda/include/nvToolsExt.h	/^        const void* pValue;$/;"	m	union:nvtxResourceAttributes_v0::identifier_t
pad	/usr/local/cuda/include/cuda.h	/^    cuuint64_t pad[6];$/;"	m	union:CUstreamBatchMemOpParams_union
pad	/usr/local/cuda/include/nvgraph.h	/^	size_t pad[128];$/;"	m	struct:__anon178
pad	src/binary_convolution.h	/^    int pad;$/;"	m	struct:__anon1
pageableMemoryAccess	/usr/local/cuda/include/driver_types.h	/^    int    pageableMemoryAccess;       \/**< Device supports coherently accessing pageable memory without calling cudaHostRegister on it *\/$/;"	m	struct:cudaDeviceProp
pal	src/stb_image.h	/^   stbi_uc  pal[256][4];$/;"	m	struct:__anon26
panscan_flag	/usr/local/cuda/include/dynlink_cuviddec.h	/^    int panscan_flag;$/;"	m	struct:_CUVIDVC1PICPARAMS
para_rec	/usr/local/cuda/include/curand_mtgp32_kernel.h	/^QUALIFIERS_MTGP32 unsigned int para_rec(mtgp32_kernel_params_t * k,unsigned int X1, unsigned int X2, unsigned int Y, int bid) {$/;"	f
param_tbl	/usr/local/cuda/include/curand_mtgp32.h	/^    unsigned int param_tbl[CURAND_NUM_MTGP32_PARAMS][TBL_SIZE];$/;"	m	struct:mtgp32_kernel_params
parse	src/stb_image.h	/^   int parse, step;$/;"	m	struct:__anon26
parse_activation	src/parser.c	/^layer parse_activation(list *options, size_params params)$/;"	f
parse_avgpool	src/parser.c	/^avgpool_layer parse_avgpool(list *options, size_params params)$/;"	f
parse_batchnorm	src/parser.c	/^layer parse_batchnorm(list *options, size_params params)$/;"	f
parse_connected	src/parser.c	/^layer parse_connected(list *options, size_params params)$/;"	f
parse_convolutional	src/parser.c	/^convolutional_layer parse_convolutional(list *options, size_params params)$/;"	f
parse_cost	src/parser.c	/^cost_layer parse_cost(list *options, size_params params)$/;"	f
parse_crnn	src/parser.c	/^layer parse_crnn(list *options, size_params params)$/;"	f
parse_crop	src/parser.c	/^crop_layer parse_crop(list *options, size_params params)$/;"	f
parse_csv_line	src/utils.c	/^list *parse_csv_line(char *line)$/;"	f
parse_data	src/parser.c	/^void parse_data(char *data, float *a, int n)$/;"	f
parse_deconvolutional	src/parser.c	/^layer parse_deconvolutional(list *options, size_params params)$/;"	f
parse_detection	src/parser.c	/^detection_layer parse_detection(list *options, size_params params)$/;"	f
parse_dropout	src/parser.c	/^dropout_layer parse_dropout(list *options, size_params params)$/;"	f
parse_fields	src/utils.c	/^float *parse_fields(char *line, int n)$/;"	f
parse_gru	src/parser.c	/^layer parse_gru(list *options, size_params params)$/;"	f
parse_local	src/parser.c	/^local_layer parse_local(list *options, size_params params)$/;"	f
parse_lstm	src/parser.c	/^layer parse_lstm(list *options, size_params params)$/;"	f
parse_maxpool	src/parser.c	/^maxpool_layer parse_maxpool(list *options, size_params params)$/;"	f
parse_net_options	src/parser.c	/^void parse_net_options(list *options, network *net)$/;"	f
parse_network_cfg	src/parser.c	/^network parse_network_cfg(char *filename)$/;"	f
parse_normalization	src/parser.c	/^layer parse_normalization(list *options, size_params params)$/;"	f
parse_region	src/parser.c	/^layer parse_region(list *options, size_params params)$/;"	f
parse_reorg	src/parser.c	/^layer parse_reorg(list *options, size_params params)$/;"	f
parse_rnn	src/parser.c	/^layer parse_rnn(list *options, size_params params)$/;"	f
parse_route	src/parser.c	/^route_layer parse_route(list *options, size_params params, network net)$/;"	f
parse_shortcut	src/parser.c	/^layer parse_shortcut(list *options, size_params params, network net)$/;"	f
parse_softmax	src/parser.c	/^softmax_layer parse_softmax(list *options, size_params params)$/;"	f
partitionedGCConfig	/usr/local/cuda/include/cuda_occupancy.h	/^    cudaOccPartitionedGCConfig partitionedGCConfig; $/;"	m	struct:cudaOccFuncAttributes
partitionedGCConfig	/usr/local/cuda/include/cuda_occupancy.h	/^    cudaOccPartitionedGCConfig partitionedGCConfig;$/;"	m	struct:cudaOccResult
payload	/usr/local/cuda/include/dynlink_nvcuvid.h	/^    const unsigned char *payload;   \/**< Pointer to packet payload data (may be NULL if EOS flag is set) *\/$/;"	m	struct:_CUVIDSOURCEDATAPACKET
payload	/usr/local/cuda/include/nvToolsExt.h	/^    } payload;$/;"	m	struct:nvtxEventAttributes_v2	typeref:union:nvtxEventAttributes_v2::payload_t
payloadType	/usr/local/cuda/include/nvToolsExt.h	/^    int32_t payloadType;            \/* nvtxPayloadType_t *\/$/;"	m	struct:nvtxEventAttributes_v2
payload_size	/usr/local/cuda/include/dynlink_nvcuvid.h	/^    unsigned long payload_size;     \/**< number of bytes in the payload (may be zero if EOS flag is set) *\/$/;"	m	struct:_CUVIDSOURCEDATAPACKET
payload_t	/usr/local/cuda/include/nvToolsExt.h	/^    union payload_t$/;"	u	struct:nvtxEventAttributes_v2
pciBusID	/usr/local/cuda/include/driver_types.h	/^    int    pciBusID;                   \/**< PCI bus ID of the device *\/$/;"	m	struct:cudaDeviceProp
pciDeviceID	/usr/local/cuda/include/driver_types.h	/^    int    pciDeviceID;                \/**< PCI device ID of the device *\/$/;"	m	struct:cudaDeviceProp
pciDeviceId	/usr/local/cuda/include/nvml.h	/^    unsigned int pciDeviceId;        \/\/!< The combined 16-bit device id and 16-bit vendor id$/;"	m	struct:nvmlPciInfo_st
pciDomainID	/usr/local/cuda/include/driver_types.h	/^    int    pciDomainID;                \/**< PCI domain ID of the device *\/$/;"	m	struct:cudaDeviceProp
pciSubSystemId	/usr/local/cuda/include/nvml.h	/^    unsigned int pciSubSystemId;     \/\/!< The 32-bit Sub System Device ID$/;"	m	struct:nvmlPciInfo_st
pcm_enabled_flag	/usr/local/cuda/include/dynlink_cuviddec.h	/^    unsigned char pcm_enabled_flag;$/;"	m	struct:_CUVIDHEVCPICPARAMS
pcm_loop_filter_disabled_flag	/usr/local/cuda/include/dynlink_cuviddec.h	/^    unsigned char pcm_loop_filter_disabled_flag;$/;"	m	struct:_CUVIDHEVCPICPARAMS
pcm_sample_bit_depth_chroma_minus1	/usr/local/cuda/include/dynlink_cuviddec.h	/^    unsigned char pcm_sample_bit_depth_chroma_minus1;$/;"	m	struct:_CUVIDHEVCPICPARAMS
pcm_sample_bit_depth_luma_minus1	/usr/local/cuda/include/dynlink_cuviddec.h	/^    unsigned char pcm_sample_bit_depth_luma_minus1;$/;"	m	struct:_CUVIDHEVCPICPARAMS
pfnAudioDataHandler	/usr/local/cuda/include/dynlink_nvcuvid.h	/^    PFNVIDSOURCECALLBACK pfnAudioDataHandler;   \/**< Called to deliver video packets  *\/$/;"	m	struct:_CUVIDSOURCEPARAMS
pfnDecodePicture	/usr/local/cuda/include/dynlink_nvcuvid.h	/^    PFNVIDDECODECALLBACK pfnDecodePicture;      \/**< Called when a picture is ready to be decoded (decode order) *\/$/;"	m	struct:_CUVIDPARSERPARAMS
pfnDisplayPicture	/usr/local/cuda/include/dynlink_nvcuvid.h	/^    PFNVIDDISPLAYCALLBACK pfnDisplayPicture;    \/**< Called whenever a picture is ready to be displayed (display order)  *\/$/;"	m	struct:_CUVIDPARSERPARAMS
pfnSequenceCallback	/usr/local/cuda/include/dynlink_nvcuvid.h	/^    PFNVIDSEQUENCECALLBACK pfnSequenceCallback; \/**< Called before decoding frames and\/or whenever there is a format change *\/$/;"	m	struct:_CUVIDPARSERPARAMS
pfnVideoDataHandler	/usr/local/cuda/include/dynlink_nvcuvid.h	/^    PFNVIDSOURCECALLBACK pfnVideoDataHandler;   \/**< Called to deliver audio packets  *\/$/;"	m	struct:_CUVIDSOURCEPARAMS
pic_height_in_luma_samples	/usr/local/cuda/include/dynlink_cuviddec.h	/^    int pic_height_in_luma_samples;$/;"	m	struct:_CUVIDHEVCPICPARAMS
pic_init_qp_minus26	/usr/local/cuda/include/dynlink_cuviddec.h	/^    int pic_init_qp_minus26;$/;"	m	struct:_CUVIDH264PICPARAMS
pic_init_qs_minus26	/usr/local/cuda/include/dynlink_cuviddec.h	/^    signed char pic_init_qs_minus26;$/;"	m	struct:_CUVIDH264PICPARAMS
pic_order_cnt_type	/usr/local/cuda/include/dynlink_cuviddec.h	/^    int pic_order_cnt_type;$/;"	m	struct:_CUVIDH264PICPARAMS
pic_order_present_flag	/usr/local/cuda/include/dynlink_cuviddec.h	/^    int pic_order_present_flag;$/;"	m	struct:_CUVIDH264PICPARAMS
pic_width_in_luma_samples	/usr/local/cuda/include/dynlink_cuviddec.h	/^    int pic_width_in_luma_samples;$/;"	m	struct:_CUVIDHEVCPICPARAMS
picture_coding_type	/usr/local/cuda/include/dynlink_cuviddec.h	/^    int picture_coding_type;$/;"	m	struct:_CUVIDMPEG2PICPARAMS
picture_index	/usr/local/cuda/include/dynlink_nvcuvid.h	/^    int picture_index;         \/**<                 *\/$/;"	m	struct:_CUVIDPARSERDISPINFO
pid	/usr/local/cuda/include/nvml.h	/^    unsigned int       pid;             \/\/!< Owning process ID$/;"	m	struct:nvmlEncoderSessionInfo_st
pid	/usr/local/cuda/include/nvml.h	/^    unsigned int pid;                               \/\/!< PID of process running within the vGPU VM$/;"	m	struct:nvmlVgpuProcessUtilizationSample_st
pid	/usr/local/cuda/include/nvml.h	/^    unsigned int pid;                   \/\/!< PID of process$/;"	m	struct:nvmlProcessUtilizationSample_st
pid	/usr/local/cuda/include/nvml.h	/^    unsigned int pid;                 \/\/!< Process ID$/;"	m	struct:nvmlProcessInfo_st
pitch	/usr/local/cuda/include/cudaEGL.h	/^    unsigned int pitch;                 \/**< Pitch of first plane *\/$/;"	m	struct:CUeglFrame_st
pitch	/usr/local/cuda/include/driver_types.h	/^    size_t  pitch;    \/**< Pitch of allocated memory in bytes *\/$/;"	m	struct:cudaPitchedPtr
pitch2D	/usr/local/cuda/include/cuda.h	/^        } pitch2D;$/;"	m	union:CUDA_RESOURCE_DESC_st::__anon41	typeref:struct:CUDA_RESOURCE_DESC_st::__anon41::__anon45
pitch2D	/usr/local/cuda/include/driver_types.h	/^		} pitch2D;$/;"	m	union:cudaResourceDesc::__anon109	typeref:struct:cudaResourceDesc::__anon109::__anon113
pitchInBytes	/usr/local/cuda/include/cuda.h	/^            size_t pitchInBytes;              \/**< Pitch between two rows in bytes *\/$/;"	m	struct:CUDA_RESOURCE_DESC_st::__anon41::__anon45
pitchInBytes	/usr/local/cuda/include/driver_types.h	/^			size_t pitchInBytes;               \/**< Pitch between two rows in bytes *\/$/;"	m	struct:cudaResourceDesc::__anon109::__anon113
pktfilter	/usr/local/cuda/include/nvml.h	/^    nvmlNvLinkUtilizationCountPktTypes_t pktfilter;$/;"	m	struct:nvmlNvLinkUtilizationControl_st
place_image	src/image.c	/^void place_image(image im, int w, int h, int dx, int dy, image canvas)$/;"	f
planeCount	/usr/local/cuda/include/cudaEGL.h	/^    unsigned int planeCount;            \/**< Number of planes *\/$/;"	m	struct:CUeglFrame_st
platform_id	src/gemm_fpga.c	/^static cl_platform_id platform_id = NULL;$/;"	v	file:
plse_activate	src/activations.h	/^static inline float plse_activate(float x)$/;"	f
plse_gradient	src/activations.h	/^static inline float plse_gradient(float x){return (x < 0 || x > 1) ? .01 : .125;}$/;"	f
pm	src/utils.c	/^void pm(int M, int N, float *A)$/;"	f
poly_sha1	/usr/local/cuda/include/curand_mtgp32.h	/^    unsigned char poly_sha1[21]; \/*< SHA1 digest *\/$/;"	m	struct:mtgp32_params_fast
pop_column	src/matrix.c	/^float *pop_column(matrix *m, int c)$/;"	f
pos	/usr/local/cuda/include/curand_mtgp32.h	/^    int pos;			\/*< pick up position. *\/$/;"	m	struct:mtgp32_params_fast
pos_tbl	/usr/local/cuda/include/curand_mtgp32.h	/^    unsigned int pos_tbl[CURAND_NUM_MTGP32_PARAMS];$/;"	m	struct:mtgp32_kernel_params
postprocflag	/usr/local/cuda/include/dynlink_cuviddec.h	/^    int postprocflag;$/;"	m	struct:_CUVIDVC1PICPARAMS
pow	/usr/local/cuda/include/math_functions.hpp	/^__forceinline__ __host__ __device__ __cudart_builtin__ double pow(double a, int b)     { return powi(a, b); }$/;"	f
pow	/usr/local/cuda/include/math_functions.hpp	/^__forceinline__ __host__ __device__ __cudart_builtin__ float     pow(float a, int b)     { return powif(a, b); }$/;"	f
pow	/usr/local/cuda/include/math_functions.hpp	/^__host__ __device__ __cudart_builtin__ double    pow(double a, int b)    { return powi(a, b); }$/;"	f
pow	/usr/local/cuda/include/math_functions.hpp	/^__host__ __device__ __cudart_builtin__ float     pow(float a, float b)   { return powf(a, b); }$/;"	f
pow	/usr/local/cuda/include/math_functions.hpp	/^__host__ __device__ __cudart_builtin__ float     pow(float a, int b)     { return powif(a, b); }$/;"	f
pow_cpu	src/blas.c	/^void pow_cpu(int N, float ALPHA, float *X, int INCX, float *Y, int INCY)$/;"	f
power	/usr/local/cuda/include/nvml.h	/^    unsigned int power;              \/\/!< PSU power draw (W)$/;"	m	struct:nvmlPSUInfo_st
powi	/usr/local/cuda/include/math_functions.hpp	/^__MATH_FUNCTIONS_DECL__ double powi(double a, int b) \/* __THROW *\/$/;"	f
powif	/usr/local/cuda/include/math_functions.hpp	/^__MATH_FUNCTIONS_DECL__ float powif(float a, int b) \/* __THROW *\/$/;"	f
pps_beta_offset_div2	/usr/local/cuda/include/dynlink_cuviddec.h	/^    signed char pps_beta_offset_div2;$/;"	m	struct:_CUVIDHEVCPICPARAMS
pps_cb_qp_offset	/usr/local/cuda/include/dynlink_cuviddec.h	/^    signed char pps_cb_qp_offset;$/;"	m	struct:_CUVIDHEVCPICPARAMS
pps_cr_qp_offset	/usr/local/cuda/include/dynlink_cuviddec.h	/^    signed char pps_cr_qp_offset;$/;"	m	struct:_CUVIDHEVCPICPARAMS
pps_deblocking_filter_disabled_flag	/usr/local/cuda/include/dynlink_cuviddec.h	/^    unsigned char pps_deblocking_filter_disabled_flag;$/;"	m	struct:_CUVIDHEVCPICPARAMS
pps_slice_chroma_qp_offsets_present_flag	/usr/local/cuda/include/dynlink_cuviddec.h	/^    unsigned char pps_slice_chroma_qp_offsets_present_flag;$/;"	m	struct:_CUVIDHEVCPICPARAMS
pps_tc_offset_div2	/usr/local/cuda/include/dynlink_cuviddec.h	/^    signed char pps_tc_offset_div2;$/;"	m	struct:_CUVIDHEVCPICPARAMS
precalc_xorwow_matrix	/usr/local/cuda/include/curand_precalc.h	/^static __device__ unsigned int precalc_xorwow_matrix[8][800] = {$/;"	v
precalc_xorwow_matrix_host	/usr/local/cuda/include/curand_precalc.h	/^static unsigned int precalc_xorwow_matrix_host[8][800] = {$/;"	v
precalc_xorwow_offset_matrix	/usr/local/cuda/include/curand_precalc.h	/^static __device__ unsigned int precalc_xorwow_offset_matrix[8][800] = {$/;"	v
precalc_xorwow_offset_matrix_host	/usr/local/cuda/include/curand_precalc.h	/^static unsigned int precalc_xorwow_offset_matrix_host[8][800] = {$/;"	v
precise_double_flag	/usr/local/cuda/include/curand_mtgp32.h	/^    int precise_double_flag;$/;"	m	struct:curandStateMtgp32
predictions	src/demo.c	/^static float **predictions;$/;"	v	file:
predictions2	src/demo.c	/^static float **predictions2;$/;"	v	file:
preferredShmemCarveout	/usr/local/cuda/include/driver_types.h	/^   int preferredShmemCarveout;$/;"	m	struct:cudaFuncAttributes
prefix	src/stb_image.h	/^   stbi__int16 prefix;$/;"	m	struct:__anon25
print_image	src/image.c	/^void print_image(image m)$/;"	f
print_letters	src/data.c	/^void print_letters(float *pred, int n)$/;"	f
print_matrix	src/matrix.c	/^void print_matrix(matrix m)$/;"	f
print_network	src/network.c	/^void print_network(network net)$/;"	f
print_statistics	src/utils.c	/^void print_statistics(float *a, int n)$/;"	f
probability	/usr/local/cuda/include/curand_discrete.h	/^    curandDistribution_t probability;$/;"	m	struct:curandDistributionShift_st
probs	src/box.c	/^    float **probs;$/;"	m	struct:__anon2	file:
probs	src/demo.c	/^static float **probs;$/;"	v	file:
probs2	src/demo.c	/^static float **probs2;$/;"	v	file:
processName	/usr/local/cuda/include/nvml.h	/^    char processName[NVML_VGPU_NAME_BUFFER_SIZE];   \/\/!< Name of process running within the vGPU VM$/;"	m	struct:nvmlVgpuProcessUtilizationSample_st
profile	/usr/local/cuda/include/dynlink_cuviddec.h	/^    int profile;$/;"	m	struct:_CUVIDVC1PICPARAMS
profile	/usr/local/cuda/include/dynlink_cuviddec.h	/^    unsigned short profile : 3;$/;"	m	struct:_CUVIDVP9PICPARAMS
profile_idc	/usr/local/cuda/include/dynlink_cuviddec.h	/^    unsigned char profile_idc;$/;"	m	struct:_CUVIDH264SVCEXT
program	src/gemm_fpga.c	/^static cl_program program = NULL;$/;"	v	file:
progressive	src/stb_image.h	/^   int            progressive;$/;"	m	struct:__anon16
progressive_fcm	/usr/local/cuda/include/dynlink_cuviddec.h	/^    int progressive_fcm;    \/**< Progressive frame *\/$/;"	m	struct:_CUVIDVC1PICPARAMS
progressive_frame	/usr/local/cuda/include/dynlink_cuviddec.h	/^    int progressive_frame;  \/**< Input is progressive (deinterlace_mode will be ignored)  *\/$/;"	m	struct:_CUVIDPROCPARAMS
progressive_frame	/usr/local/cuda/include/dynlink_nvcuvid.h	/^    int progressive_frame;     \/**<                 *\/$/;"	m	struct:_CUVIDPARSERDISPINFO
progressive_sequence	/usr/local/cuda/include/dynlink_nvcuvid.h	/^    unsigned char progressive_sequence;     \/**< 0=interlaced, 1=progressive *\/$/;"	m	struct:__anon123
pruneInfo_t	/usr/local/cuda/include/cusparse.h	/^typedef struct pruneInfo *pruneInfo_t;$/;"	t	typeref:struct:pruneInfo
psf	/usr/local/cuda/include/dynlink_cuviddec.h	/^    int psf;$/;"	m	struct:_CUVIDVC1PICPARAMS
ptr	/usr/local/cuda/include/driver_types.h	/^    void   *ptr;      \/**< Pointer to allocated memory *\/$/;"	m	struct:cudaPitchedPtr
ptxVersion	/usr/local/cuda/include/driver_types.h	/^   int ptxVersion;$/;"	m	struct:cudaFuncAttributes
pull_batchnorm_layer	src/batchnorm_layer.c	/^void pull_batchnorm_layer(layer l)$/;"	f
pull_connected_layer	src/connected_layer.c	/^void pull_connected_layer(layer l)$/;"	f
pull_cost_layer	src/cost_layer.c	/^void pull_cost_layer(cost_layer l)$/;"	f
pull_crnn_layer	src/crnn_layer.c	/^void pull_crnn_layer(layer l)$/;"	f
pull_gru_layer	src/gru_layer.c	/^void pull_gru_layer(layer l)$/;"	f
pull_local_layer	src/local_layer.c	/^void pull_local_layer(local_layer l)$/;"	f
pull_rnn_layer	src/rnn_layer.c	/^void pull_rnn_layer(layer l)$/;"	f
pull_softmax_layer_output	src/softmax_layer.c	/^void pull_softmax_layer_output(const softmax_layer layer)$/;"	f
pulldown	/usr/local/cuda/include/dynlink_cuviddec.h	/^    int pulldown;$/;"	m	struct:_CUVIDVC1PICPARAMS
push_batchnorm_layer	src/batchnorm_layer.c	/^void push_batchnorm_layer(layer l)$/;"	f
push_connected_layer	src/connected_layer.c	/^void push_connected_layer(layer l)$/;"	f
push_cost_layer	src/cost_layer.c	/^void push_cost_layer(cost_layer l)$/;"	f
push_crnn_layer	src/crnn_layer.c	/^void push_crnn_layer(layer l)$/;"	f
push_gru_layer	src/gru_layer.c	/^void push_gru_layer(layer l)$/;"	f
push_local_layer	src/local_layer.c	/^void push_local_layer(local_layer l)$/;"	f
push_rnn_layer	src/rnn_layer.c	/^void push_rnn_layer(layer l)$/;"	f
pvReserved2	/usr/local/cuda/include/dynlink_nvcuvid.h	/^    void *pvReserved2[7];                       \/**< Reserved for future use - set to NULL *\/$/;"	m	struct:_CUVIDPARSERPARAMS
pvReserved2	/usr/local/cuda/include/dynlink_nvcuvid.h	/^    void *pvReserved2[8];                       \/**< Reserved for future use - set to NULL *\/$/;"	m	struct:_CUVIDSOURCEPARAMS
px	src/binary_convolution.h	/^    int px;     \/\/ padded x (use this for striding in padded input and output arrays)$/;"	m	struct:__anon1
py	src/binary_convolution.h	/^    int py;     \/\/ padded y (use this for striding in padded input and output arrays)$/;"	m	struct:__anon1
q_scale_type	/usr/local/cuda/include/dynlink_cuviddec.h	/^    int q_scale_type;$/;"	m	struct:_CUVIDMPEG2PICPARAMS
qpChAc	/usr/local/cuda/include/dynlink_cuviddec.h	/^    int qpChAc;$/;"	m	struct:_CUVIDVP9PICPARAMS
qpChDc	/usr/local/cuda/include/dynlink_cuviddec.h	/^    int qpChDc;$/;"	m	struct:_CUVIDVP9PICPARAMS
qpYAc	/usr/local/cuda/include/dynlink_cuviddec.h	/^    int qpYAc;$/;"	m	struct:_CUVIDVP9PICPARAMS
qpYDc	/usr/local/cuda/include/dynlink_cuviddec.h	/^    int qpYDc;$/;"	m	struct:_CUVIDVP9PICPARAMS
qpprime_y_zero_transform_bypass_flag	/usr/local/cuda/include/dynlink_cuviddec.h	/^    unsigned char qpprime_y_zero_transform_bypass_flag;$/;"	m	struct:_CUVIDH264PICPARAMS
quant_type	/usr/local/cuda/include/dynlink_cuviddec.h	/^    int quant_type;$/;"	m	struct:_CUVIDMPEG4PICPARAMS
quantizer	/usr/local/cuda/include/dynlink_cuviddec.h	/^    int quantizer;$/;"	m	struct:_CUVIDVC1PICPARAMS
quarter_sample	/usr/local/cuda/include/dynlink_cuviddec.h	/^    int quarter_sample;$/;"	m	struct:_CUVIDMPEG4PICPARAMS
ramp_activate	src/activations.h	/^static inline float ramp_activate(float x){return x*(x>0)+.1*x;}$/;"	f
ramp_gradient	src/activations.h	/^static inline float ramp_gradient(float x){return (x>0)+.1;}$/;"	f
rand_int	src/utils.c	/^int rand_int(int min, int max)$/;"	f
rand_normal	src/utils.c	/^float rand_normal()$/;"	f
rand_scale	src/utils.c	/^float rand_scale(float s)$/;"	f
rand_size_t	src/utils.c	/^size_t rand_size_t()$/;"	f
rand_uniform	src/utils.c	/^float rand_uniform(float min, float max)$/;"	f
random_augment_args	src/image.c	/^augment_args random_augment_args(image im, float angle, float aspect, int low, int high, int w, int h)$/;"	f
random_augment_image	src/image.c	/^image random_augment_image(image im, float angle, float aspect, int low, int high, int w, int h)$/;"	f
random_crop_image	src/image.c	/^image random_crop_image(image im, int w, int h)$/;"	f
random_distort_image	src/image.c	/^void random_distort_image(image im, float hue, float saturation, float exposure)$/;"	f
random_matrix	src/gemm.c	/^float *random_matrix(int rows, int cols)$/;"	f
randomize_boxes	src/data.c	/^void randomize_boxes(box_label *b, int n)$/;"	f
randomize_data	src/data.c	/^void randomize_data(data d)$/;"	f
range_mapuv	/usr/local/cuda/include/dynlink_cuviddec.h	/^    int range_mapuv;$/;"	m	struct:_CUVIDVC1PICPARAMS
range_mapuv_flag	/usr/local/cuda/include/dynlink_cuviddec.h	/^    int range_mapuv_flag;$/;"	m	struct:_CUVIDVC1PICPARAMS
range_mapy	/usr/local/cuda/include/dynlink_cuviddec.h	/^    int range_mapy;$/;"	m	struct:_CUVIDVC1PICPARAMS
range_mapy_flag	/usr/local/cuda/include/dynlink_cuviddec.h	/^    int range_mapy_flag;$/;"	m	struct:_CUVIDVC1PICPARAMS
rangered	/usr/local/cuda/include/dynlink_cuviddec.h	/^    int rangered;$/;"	m	struct:_CUVIDVC1PICPARAMS
rangeredfrm	/usr/local/cuda/include/dynlink_cuviddec.h	/^    int rangeredfrm;    \/\/ range reduction state$/;"	m	struct:_CUVIDVC1PICPARAMS
ratio	src/stb_image.h	/^   int flags, bgindex, ratio, transparent, eflags;$/;"	m	struct:__anon26
raw_coeff	src/stb_image.h	/^      void *raw_data, *raw_coeff;$/;"	m	struct:__anon16::__anon17
raw_data	src/stb_image.h	/^      void *raw_data, *raw_coeff;$/;"	m	struct:__anon16::__anon17
raw_input_dptr	/usr/local/cuda/include/dynlink_cuviddec.h	/^    unsigned long long raw_input_dptr;  \/**< Input CUdeviceptr for raw YUV extensions *\/$/;"	m	struct:_CUVIDPROCPARAMS
raw_input_format	/usr/local/cuda/include/dynlink_cuviddec.h	/^    unsigned int raw_input_format;      \/**< Reserved for future use (set to zero) *\/$/;"	m	struct:_CUVIDPROCPARAMS
raw_input_pitch	/usr/local/cuda/include/dynlink_cuviddec.h	/^    unsigned int raw_input_pitch;       \/**< pitch in bytes of raw YUV input (should be aligned appropriately) *\/$/;"	m	struct:_CUVIDPROCPARAMS
raw_output_dptr	/usr/local/cuda/include/dynlink_cuviddec.h	/^    unsigned long long raw_output_dptr; \/**< Reserved for future use (set to zero) *\/$/;"	m	struct:_CUVIDPROCPARAMS
raw_output_pitch	/usr/local/cuda/include/dynlink_cuviddec.h	/^    unsigned int raw_output_pitch;      \/**< Reserved for future use (set to zero) *\/$/;"	m	struct:_CUVIDPROCPARAMS
raw_seqhdr_data	/usr/local/cuda/include/dynlink_nvcuvid.h	/^    unsigned char raw_seqhdr_data[1024];$/;"	m	struct:__anon128
rcbrt	/usr/local/cuda/include/math_functions.hpp	/^__MATH_FUNCTIONS_DECL__ float rcbrt(float a)$/;"	f
rcbrt	/usr/local/cuda/include/math_functions_dbl_ptx3.hpp	/^__MATH_FUNCTIONS_DBL_PTX3_DECL__ double rcbrt(double a)$/;"	f
rcbrtf	/usr/local/cuda/include/math_functions.hpp	/^__MATH_FUNCTIONS_DECL__ float rcbrtf(float a) \/*__THROW *\/$/;"	f
re	/usr/local/cuda/include/nppdefs.h	/^    Npp32f  re;     \/**<  Real part *\/$/;"	m	struct:NPP_ALIGN_8
re	/usr/local/cuda/include/nppdefs.h	/^    Npp32s  re;     \/**<  Real part *\/$/;"	m	struct:NPP_ALIGN_8
re	/usr/local/cuda/include/nppdefs.h	/^    Npp32u  re;     \/**<  Real part *\/$/;"	m	struct:NPP_ALIGN_8
re	/usr/local/cuda/include/nppdefs.h	/^    Npp64f  re;     \/**<  Real part *\/$/;"	m	struct:NPP_ALIGN_16
re	/usr/local/cuda/include/nppdefs.h	/^    Npp64s  re;     \/**<  Real part *\/$/;"	m	struct:NPP_ALIGN_16
read	src/stb_image.h	/^   int      (*read)  (void *user,char *data,int size);   \/\/ fill 'data' with 'size' bytes.  return number of bytes actually read$/;"	m	struct:__anon12
readMode	/usr/local/cuda/include/texture_types.h	/^    enum cudaTextureReadMode    readMode;$/;"	m	struct:cudaTextureDesc	typeref:enum:cudaTextureDesc::cudaTextureReadMode
read_all	src/utils.c	/^void read_all(int fd, char *buffer, size_t bytes)$/;"	f
read_all_fail	src/utils.c	/^int read_all_fail(int fd, char *buffer, size_t bytes)$/;"	f
read_boxes	src/data.c	/^box_label *read_boxes(char *filename, int *n)$/;"	f
read_boxes_remapping	src/data.c	/^box_label *read_boxes_remapping(char *filename, int *n, int *id_remap, int classes) \/\/add$/;"	f
read_cfg	src/parser.c	/^list *read_cfg(char *filename)$/;"	f
read_data_cfg	src/option_list.c	/^list *read_data_cfg(char *filename)$/;"	f
read_from_callbacks	src/stb_image.h	/^   int read_from_callbacks;$/;"	m	struct:__anon13
read_int	src/utils.c	/^int read_int(int fd)$/;"	f
read_intlist	src/utils.c	/^int *read_intlist(char *gpu_list, int *ngpus, int d)$/;"	f
read_map	src/utils.c	/^int *read_map(char *filename)$/;"	f
read_option	src/option_list.c	/^int read_option(char *s, list *options)$/;"	f
read_tree	src/tree.c	/^tree *read_tree(char *filename)$/;"	f
redundant_pic_cnt_present_flag	/usr/local/cuda/include/dynlink_cuviddec.h	/^    int redundant_pic_cnt_present_flag;$/;"	m	struct:_CUVIDH264PICPARAMS
refFrameSignBias	/usr/local/cuda/include/dynlink_cuviddec.h	/^    unsigned char  refFrameSignBias[4];$/;"	m	struct:_CUVIDVP9PICPARAMS
ref_layer_chroma_phase_x_plus1_flag	/usr/local/cuda/include/dynlink_cuviddec.h	/^    unsigned char ref_layer_chroma_phase_x_plus1_flag;$/;"	m	struct:_CUVIDH264SVCEXT
ref_layer_chroma_phase_y_plus1	/usr/local/cuda/include/dynlink_cuviddec.h	/^    unsigned char ref_layer_chroma_phase_y_plus1;$/;"	m	struct:_CUVIDH264SVCEXT
ref_pic_flag	/usr/local/cuda/include/dynlink_cuviddec.h	/^    int ref_pic_flag;                      \/**< This picture is a reference picture *\/$/;"	m	struct:_CUVIDPICPARAMS
ref_pic_flag	/usr/local/cuda/include/dynlink_cuviddec.h	/^    int ref_pic_flag;       \/**< Set to 1 for I,P frames *\/$/;"	m	struct:_CUVIDVC1PICPARAMS
ref_pic_flag	/usr/local/cuda/include/dynlink_cuviddec.h	/^    int ref_pic_flag;$/;"	m	struct:_CUVIDH264PICPARAMS
refdist_flag	/usr/local/cuda/include/dynlink_cuviddec.h	/^    int refdist_flag;$/;"	m	struct:_CUVIDVC1PICPARAMS
referenceTime	/usr/local/cuda/include/nvml.h	/^    unsigned long long referenceTime;  \/\/!< referenceTime represents CPU timestamp in microseconds$/;"	m	struct:nvmlViolationTime_st
refreshEntropyProbs	/usr/local/cuda/include/dynlink_cuviddec.h	/^    unsigned short refreshEntropyProbs : 1;$/;"	m	struct:_CUVIDVP9PICPARAMS
registerFile	/usr/local/cuda/include/nvml.h	/^    unsigned long long registerFile; \/\/!< Register file errors$/;"	m	struct:nvmlEccErrorCounts_st
registered	/usr/local/cuda/include/nvToolsExt.h	/^    nvtxStringHandle_t registered;$/;"	m	union:nvtxMessageValue_t
regsPerBlock	/usr/local/cuda/include/cuda.h	/^    int regsPerBlock;           \/**< 32-bit registers available per block *\/$/;"	m	struct:CUdevprop_st
regsPerBlock	/usr/local/cuda/include/cuda_occupancy.h	/^    int    regsPerBlock;                \/\/ Maximum number of registers per block$/;"	m	struct:cudaOccDeviceProp
regsPerBlock	/usr/local/cuda/include/driver_types.h	/^    int    regsPerBlock;               \/**< 32-bit registers available per block *\/$/;"	m	struct:cudaDeviceProp
regsPerBlock	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    int regsPerBlock;           \/**< 32-bit registers available per block *\/$/;"	m	struct:CUdevprop_st
regsPerMultiprocessor	/usr/local/cuda/include/cuda_occupancy.h	/^    int    regsPerMultiprocessor;       \/\/ Maximum number of registers per SM$/;"	m	struct:cudaOccDeviceProp
regsPerMultiprocessor	/usr/local/cuda/include/driver_types.h	/^    int    regsPerMultiprocessor;      \/**< 32-bit registers available per multiprocessor *\/$/;"	m	struct:cudaDeviceProp
relie_activate	src/activations.h	/^static inline float relie_activate(float x){return (x>0) ? x : .01*x;}$/;"	f
relie_gradient	src/activations.h	/^static inline float relie_gradient(float x){return (x>0) ? 1 : .01;}$/;"	f
relu_activate	src/activations.h	/^static inline float relu_activate(float x){return x*(x>0);}$/;"	f
relu_gradient	src/activations.h	/^static inline float relu_gradient(float x){return (x>0);}$/;"	f
remainder	/usr/local/cuda/include/math_functions.hpp	/^__MATH_FUNCTIONS_DECL__ float remainder(float a, float b)$/;"	f
remquo	/usr/local/cuda/include/math_functions.hpp	/^__MATH_FUNCTIONS_DECL__ float remquo(float a, float b, int *quo)$/;"	f
renderer	src/sdl_image.c	/^static SDL_Renderer *renderer;$/;"	v	file:
rendererThread	src/sdl_image.c	/^static int rendererThread(void *args){$/;"	f	file:
rendererThreadIFtype	src/sdl_image.c	/^} rendererThreadIFtype;$/;"	t	typeref:struct:__anon10	file:
reorg_cpu	src/blas.c	/^void reorg_cpu(float *x, int w, int h, int c, int batch, int stride, int forward, float *out)$/;"	f
repeat_first_field	/usr/local/cuda/include/dynlink_nvcuvid.h	/^    int repeat_first_field;    \/**< Number of additional fields (1=ivtc, 2=frame doubling, 4=frame tripling, -1=unpaired field)  *\/$/;"	m	struct:_CUVIDPARSERDISPINFO
requestEnd	src/common.h	/^    struct timespec requestEnd;$/;"	m	struct:__anon4	typeref:struct:__anon4::timespec
requestStart	src/common.h	/^    struct timespec requestStart;$/;"	m	struct:__anon4	typeref:struct:__anon4::timespec
res	/usr/local/cuda/include/cuda.h	/^    } res;$/;"	m	struct:CUDA_RESOURCE_DESC_st	typeref:union:CUDA_RESOURCE_DESC_st::__anon41
res	/usr/local/cuda/include/driver_types.h	/^	} res;$/;"	m	struct:cudaResourceDesc	typeref:union:cudaResourceDesc::__anon109
resType	/usr/local/cuda/include/cuda.h	/^    CUresourcetype resType;                   \/**< Resource type *\/$/;"	m	struct:CUDA_RESOURCE_DESC_st
resType	/usr/local/cuda/include/driver_types.h	/^	enum cudaResourceType resType;             \/**< Resource type *\/$/;"	m	struct:cudaResourceDesc	typeref:enum:cudaResourceDesc::cudaResourceType
resample	src/stb_image.h	/^   resample_row_func resample;$/;"	m	struct:__anon18
resample_row_1	src/stb_image.h	/^static stbi_uc *resample_row_1(stbi_uc *out, stbi_uc *in_near, stbi_uc *in_far, int w, int hs)$/;"	f
resample_row_func	src/stb_image.h	/^typedef stbi_uc *(*resample_row_func)(stbi_uc *out, stbi_uc *in0, stbi_uc *in1,$/;"	t
resample_row_hv_2_kernel	src/stb_image.h	/^   stbi_uc *(*resample_row_hv_2_kernel)(stbi_uc *out, stbi_uc *in_near, stbi_uc *in_far, int w, int hs);$/;"	m	struct:__anon16
rescale_weights	src/convolutional_layer.c	/^void rescale_weights(convolutional_layer l, float scale, float trans)$/;"	f
reserved	/usr/local/cuda/include/cuda.h	/^            int reserved[32];$/;"	m	struct:CUDA_RESOURCE_DESC_st::__anon41::__anon46
reserved	/usr/local/cuda/include/cuda.h	/^        } reserved;$/;"	m	union:CUDA_RESOURCE_DESC_st::__anon41	typeref:struct:CUDA_RESOURCE_DESC_st::__anon41::__anon46
reserved	/usr/local/cuda/include/cuda.h	/^    char reserved[CU_IPC_HANDLE_SIZE];$/;"	m	struct:CUipcEventHandle_st
reserved	/usr/local/cuda/include/cuda.h	/^    char reserved[CU_IPC_HANDLE_SIZE];$/;"	m	struct:CUipcMemHandle_st
reserved	/usr/local/cuda/include/cuda.h	/^    int reserved[12];$/;"	m	struct:CUDA_TEXTURE_DESC_st
reserved	/usr/local/cuda/include/cuda.h	/^    unsigned int reserved[16];$/;"	m	struct:CUDA_RESOURCE_VIEW_DESC_st
reserved	/usr/local/cuda/include/cudnn.h	/^    int                             reserved[3];$/;"	m	struct:__anon67
reserved	/usr/local/cuda/include/cudnn.h	/^    int                             reserved[3];$/;"	m	struct:__anon70
reserved	/usr/local/cuda/include/cudnn.h	/^    int                         reserved[3];$/;"	m	struct:__anon64
reserved	/usr/local/cuda/include/driver_types.h	/^    char reserved[CUDA_IPC_HANDLE_SIZE];$/;"	m	struct:cudaIpcEventHandle_st
reserved	/usr/local/cuda/include/driver_types.h	/^    char reserved[CUDA_IPC_HANDLE_SIZE];$/;"	m	struct:cudaIpcMemHandle_st
reserved	/usr/local/cuda/include/nvml.h	/^    unsigned int reserved[5];                   \/\/!< Reserved for future use$/;"	m	struct:nvmlAccountingStats_st
reserved0	/usr/local/cuda/include/cuda.h	/^    void *reserved0;            \/**< Must be NULL *\/$/;"	m	struct:CUDA_MEMCPY3D_st
reserved0	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    void *reserved0;            \/**< Must be NULL *\/$/;"	m	struct:CUDA_MEMCPY3D_st
reserved0	/usr/local/cuda/include/nvToolsExt.h	/^    int32_t reserved0;$/;"	m	struct:nvtxEventAttributes_v2
reserved1	/usr/local/cuda/include/cuda.h	/^    void *reserved1;            \/**< Must be NULL *\/$/;"	m	struct:CUDA_MEMCPY3D_st
reserved1	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    void *reserved1;            \/**< Must be NULL *\/$/;"	m	struct:CUDA_MEMCPY3D_st
reserved1	/usr/local/cuda/include/dynlink_cuviddec.h	/^    unsigned char reserved1[14];$/;"	m	struct:_CUVIDHEVCPICPARAMS
reserved1	/usr/local/cuda/include/dynlink_nvcuvid.h	/^    unsigned char reserved1;                \/**< Reserved for future use *\/$/;"	m	struct:__anon123
reserved1	/usr/local/cuda/include/dynlink_nvcuvid.h	/^    unsigned int reserved1;     \/**< Reserved for future use *\/$/;"	m	struct:__anon129
reserved128Bits	/usr/local/cuda/include/dynlink_cuviddec.h	/^    unsigned int reserved128Bits[4];$/;"	m	struct:_CUVIDVP9PICPARAMS
reserved16Bits	/usr/local/cuda/include/dynlink_cuviddec.h	/^    unsigned short reserved16Bits;$/;"	m	struct:_CUVIDVP9PICPARAMS
reserved2	/usr/local/cuda/include/dynlink_nvcuvid.h	/^    unsigned int reserved2;     \/**< Reserved for future use *\/$/;"	m	struct:__anon129
reserved2Bits	/usr/local/cuda/include/dynlink_cuviddec.h	/^    unsigned short reserved2Bits : 2;$/;"	m	struct:_CUVIDVP9PICPARAMS
reserved3	/usr/local/cuda/include/dynlink_cuviddec.h	/^    unsigned int reserved3[15];$/;"	m	struct:_CUVIDHEVCPICPARAMS
reserved4	/usr/local/cuda/include/dynlink_cuviddec.h	/^    unsigned int reserved4[12];$/;"	m	struct:_CUVIDHEVCPICPARAMS
reserved4Bits	/usr/local/cuda/include/dynlink_cuviddec.h	/^    unsigned char reserved4Bits : 4;$/;"	m	struct:_CUVIDVP9PICPARAMS
reservedSegment16Bits	/usr/local/cuda/include/dynlink_cuviddec.h	/^    unsigned char reservedSegment16Bits[2];$/;"	m	struct:_CUVIDVP9PICPARAMS
reserved_flags	/usr/local/cuda/include/dynlink_cuviddec.h	/^    unsigned int reserved_flags;        \/**< Reserved for future use (set to zero) *\/$/;"	m	struct:_CUVIDPROCPARAMS
reserved_zero	/usr/local/cuda/include/dynlink_cuviddec.h	/^    unsigned int reserved_zero;         \/**< Reserved (set to zero) *\/$/;"	m	struct:_CUVIDPROCPARAMS
reserved_zero_bits	/usr/local/cuda/include/dynlink_nvcuvid.h	/^        unsigned char reserved_zero_bits    : 4;$/;"	m	struct:__anon123::__anon127
resetFrameContext	/usr/local/cuda/include/dynlink_cuviddec.h	/^    unsigned int resetFrameContext;$/;"	m	struct:_CUVIDVP9PICPARAMS
reset_momentum	src/network.c	/^void reset_momentum(network net)$/;"	f
reset_network_state	src/network.c	/^void reset_network_state(network net, int b)$/;"	f
reset_rnn	src/network.c	/^void reset_rnn(network *net)$/;"	f
residual_colour_transform_flag	/usr/local/cuda/include/dynlink_cuviddec.h	/^    unsigned char residual_colour_transform_flag;$/;"	m	struct:_CUVIDH264PICPARAMS
resize_avgpool_layer	src/avgpool_layer.c	/^void resize_avgpool_layer(avgpool_layer *l, int w, int h)$/;"	f
resize_batchnorm_layer	src/batchnorm_layer.c	/^void resize_batchnorm_layer(layer *layer, int w, int h)$/;"	f
resize_convolutional_layer	src/convolutional_layer.c	/^void resize_convolutional_layer(convolutional_layer *l, int w, int h)$/;"	f
resize_cost_layer	src/cost_layer.c	/^void resize_cost_layer(cost_layer *l, int inputs)$/;"	f
resize_crop_layer	src/crop_layer.c	/^void resize_crop_layer(layer *l, int w, int h)$/;"	f
resize_deconvolutional_layer	src/deconvolutional_layer.c	/^void resize_deconvolutional_layer(layer *l, int h, int w)$/;"	f
resize_dropout_layer	src/dropout_layer.c	/^void resize_dropout_layer(dropout_layer *l, int inputs)$/;"	f
resize_image	src/image.c	/^image resize_image(image im, int w, int h)$/;"	f
resize_matrix	src/matrix.c	/^matrix resize_matrix(matrix m, int size)$/;"	f
resize_max	src/image.c	/^image resize_max(image im, int max)$/;"	f
resize_maxpool_layer	src/maxpool_layer.c	/^void resize_maxpool_layer(maxpool_layer *l, int w, int h)$/;"	f
resize_min	src/image.c	/^image resize_min(image im, int min)$/;"	f
resize_network	src/network.c	/^int resize_network(network *net, int w, int h)$/;"	f
resize_normalization_layer	src/normalization_layer.c	/^void resize_normalization_layer(layer *layer, int w, int h)$/;"	f
resize_region_layer	src/region_layer.c	/^void resize_region_layer(layer *l, int w, int h)$/;"	f
resize_reorg_layer	src/reorg_layer.c	/^void resize_reorg_layer(layer *l, int w, int h)$/;"	f
resize_route_layer	src/route_layer.c	/^void resize_route_layer(route_layer *l, network *net)$/;"	f
resourceHandle	/usr/local/cuda/include/nvToolsExtMeta.h	/^    uint64_t resourceHandle;$/;"	m	struct:NvtxNameResourceA
resourceHandle	/usr/local/cuda/include/nvToolsExtMeta.h	/^    uint64_t resourceHandle;$/;"	m	struct:NvtxNameResourceW
restartInterval	/usr/local/cuda/include/nppi_compression_functions.h	/^    Npp32s restartInterval; \/**< Restart interval in MCUs. Use 0 or -1 when none *\/$/;"	m	struct:__anon165
restart_interval	src/stb_image.h	/^   int restart_interval, todo;$/;"	m	struct:__anon16
resync_marker_disable	/usr/local/cuda/include/dynlink_cuviddec.h	/^    int resync_marker_disable;$/;"	m	struct:_CUVIDMPEG4PICPARAMS
rgb_to_hsv	src/image.c	/^void rgb_to_hsv(image im)$/;"	f
rgb_to_yuv	src/image.c	/^void rgb_to_yuv(image im)$/;"	f
rgbgr_image	src/image.c	/^void rgbgr_image(image im)$/;"	f
rgbgr_weights	src/convolutional_layer.c	/^void rgbgr_weights(convolutional_layer l)$/;"	f
rho	/usr/local/cuda/include/nppdefs.h	/^    Npp32f rho;$/;"	m	struct:__anon148
right	/usr/local/cuda/include/dynlink_cuviddec.h	/^        short right;$/;"	m	struct:_CUVIDDECODECREATEINFO::__anon114
right	/usr/local/cuda/include/dynlink_cuviddec.h	/^        short right;$/;"	m	struct:_CUVIDDECODECREATEINFO::__anon115
right	/usr/local/cuda/include/dynlink_nvcuvid.h	/^        int right;                          \/**< right position of display rect  *\/$/;"	m	struct:__anon123::__anon125
rint	/usr/local/cuda/include/math_functions.hpp	/^__MATH_FUNCTIONS_DECL__ float rint(float a)$/;"	f
rotate_crop_image	src/image.c	/^image rotate_crop_image(image im, float rad, float s, int w, int h, float dx, float dy, float aspect)$/;"	f
rotate_image	src/image.c	/^image rotate_image(image im, float rad)$/;"	f
rotate_image_cw	src/image.c	/^void rotate_image_cw(image im, int times)$/;"	f
round	/usr/local/cuda/include/math_functions.hpp	/^__MATH_FUNCTIONS_DECL__ float round(float a)$/;"	f
route_layer	src/route_layer.h	/^typedef layer route_layer;$/;"	t
row_height_minus1	/usr/local/cuda/include/dynlink_cuviddec.h	/^    unsigned short row_height_minus1[21];$/;"	m	struct:_CUVIDHEVCPICPARAMS
rsqrt	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ double rsqrt(double x)$/;"	f
rsqrt	/usr/local/cuda/include/math_functions.hpp	/^__MATH_FUNCTIONS_DECL__ float rsqrt(float a)$/;"	f
rsqrtf	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ float rsqrtf(float x)$/;"	f
run_compare	src/compare.c	/^void run_compare(int argc, char **argv)$/;"	f
running	src/demo.c	/^static int running = 0;$/;"	v	file:
s	/usr/local/cuda/include/curand_mtgp32.h	/^    unsigned int s[MTGP32_STATE_SIZE];$/;"	m	struct:curandStateMtgp32
s	src/stb_image.h	/^   stbi__context *s;$/;"	m	struct:__anon16
s	src/stb_image.h	/^   stbi__context *s;$/;"	m	struct:__anon22
s1	/usr/local/cuda/include/curand_kernel.h	/^    double s1[3];$/;"	m	struct:curandStateMRG32k3a
s2	/usr/local/cuda/include/curand_kernel.h	/^    double s2[3];$/;"	m	struct:curandStateMRG32k3a
sRGB	/usr/local/cuda/include/texture_types.h	/^    int                          sRGB;$/;"	m	struct:textureReference
sRGB	/usr/local/cuda/include/texture_types.h	/^    int                         sRGB;$/;"	m	struct:cudaTextureDesc
sampleValue	/usr/local/cuda/include/nvml.h	/^    nvmlValue_t sampleValue;        \/\/!< Sample Value$/;"	m	struct:nvmlSample_st
sample_adaptive_offset_enabled_flag	/usr/local/cuda/include/dynlink_cuviddec.h	/^    unsigned char sample_adaptive_offset_enabled_flag;$/;"	m	struct:_CUVIDHEVCPICPARAMS
sample_array	src/utils.c	/^int sample_array(float *a, int n)$/;"	f
samplespersec	/usr/local/cuda/include/dynlink_nvcuvid.h	/^    unsigned int samplespersec; \/**< sampling frequency *\/$/;"	m	struct:__anon129
saturate	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ float saturate(float a)$/;"	f
saturate_exposure_image	src/image.c	/^void saturate_exposure_image(image im, float sat, float exposure)$/;"	f
saturate_image	src/image.c	/^void saturate_image(image im, float sat)$/;"	f
save_batchnorm_weights	src/parser.c	/^void save_batchnorm_weights(layer l, FILE *fp)$/;"	f
save_connected_weights	src/parser.c	/^void save_connected_weights(layer l, FILE *fp)$/;"	f
save_convolutional_weights	src/parser.c	/^void save_convolutional_weights(layer l, FILE *fp)$/;"	f
save_convolutional_weights_binary	src/parser.c	/^void save_convolutional_weights_binary(layer l, FILE *fp)$/;"	f
save_image	src/image.c	/^void save_image(image im, const char *name)$/;"	f
save_image_jpg	src/image.c	/^void save_image_jpg(image p, const char *name)$/;"	f
save_image_png	src/image.c	/^void save_image_png(image im, const char *name)$/;"	f
save_weights	src/parser.c	/^void save_weights(network net, char *filename)$/;"	f
save_weights_upto	src/parser.c	/^void save_weights_upto(network net, char *filename, int cutoff)$/;"	f
scal_cpu	src/blas.c	/^void scal_cpu(int N, float ALPHA, float *X, int INCX)$/;"	f
scalbln	/usr/local/cuda/include/math_functions.hpp	/^__MATH_FUNCTIONS_DECL__ float scalbln(float a, long int b)$/;"	f
scalbn	/usr/local/cuda/include/math_functions.hpp	/^__MATH_FUNCTIONS_DECL__ float scalbn(float a, int b)$/;"	f
scale_array	src/utils.c	/^void scale_array(float *a, int n, float s)$/;"	f
scale_bias	src/convolutional_layer.c	/^void scale_bias(float *output, float *scales, int batch, int n, int size)$/;"	f
scale_data_rows	src/data.c	/^void scale_data_rows(data d, float s)$/;"	f
scale_image	src/image.c	/^void scale_image(image m, float s)$/;"	f
scale_image_channel	src/image.c	/^void scale_image_channel(image im, int c, float v)$/;"	f
scale_matrix	src/matrix.c	/^void scale_matrix(matrix m, float scale)$/;"	f
scaled_ref_layer_bottom_offset	/usr/local/cuda/include/dynlink_cuviddec.h	/^    short scaled_ref_layer_bottom_offset;$/;"	m	struct:_CUVIDH264SVCEXT
scaled_ref_layer_left_offset	/usr/local/cuda/include/dynlink_cuviddec.h	/^    short scaled_ref_layer_left_offset;$/;"	m	struct:_CUVIDH264SVCEXT
scaled_ref_layer_right_offset	/usr/local/cuda/include/dynlink_cuviddec.h	/^    short scaled_ref_layer_right_offset;$/;"	m	struct:_CUVIDH264SVCEXT
scaled_ref_layer_top_offset	/usr/local/cuda/include/dynlink_cuviddec.h	/^    short scaled_ref_layer_top_offset;$/;"	m	struct:_CUVIDH264SVCEXT
scaling_list_enable_flag	/usr/local/cuda/include/dynlink_cuviddec.h	/^    unsigned char scaling_list_enable_flag;$/;"	m	struct:_CUVIDHEVCPICPARAMS
scan_n	src/stb_image.h	/^   int scan_n, order[4];$/;"	m	struct:__anon16
scrambled_sobol_c32	/usr/local/cuda/include/sobol_direction_vectors.h	/^static unsigned int scrambled_sobol_c32[SOBOL_D];$/;"	v
scrambled_sobol_c_host	/usr/local/cuda/include/sobol_direction_vectors.h	/^static unsigned int scrambled_sobol_c_host[SOBOL_D * 2] = {$/;"	v
scrambled_sobol_v32	/usr/local/cuda/include/sobol_direction_vectors.h	/^static unsigned int scrambled_sobol_v32[SOBOL_D][32];$/;"	v
scrambled_sobol_v_host	/usr/local/cuda/include/sobol_direction_vectors.h	/^static unsigned int scrambled_sobol_v_host[SOBOL_D][SOBOL_L * 2] = {$/;"	v
sdlDestroyAllWindows	src/sdl_image.c	/^void sdlDestroyAllWindows(){$/;"	f
sdlNamedWindow	src/sdl_image.c	/^void sdlNamedWindow(const char *name, int win_w, int win_h){$/;"	f
sdlQF_mutex	src/sdl_image.c	/^static SDL_mutex *sdlQF_mutex;$/;"	v	file:
sdlShowImage	src/sdl_image.c	/^int sdlShowImage(IplImage *p, unsigned int width, unsigned int height){$/;"	f
sdlShowImage	src/sdl_image.c	/^int sdlShowImage(image p, unsigned int width, unsigned int height){$/;"	f
sdlWaitKey	src/sdl_image.c	/^int sdlWaitKey(){$/;"	f
sec	src/utils.c	/^float sec(clock_t clocks)$/;"	f
second_chroma_qp_index_offset	/usr/local/cuda/include/dynlink_cuviddec.h	/^    int second_chroma_qp_index_offset;$/;"	m	struct:_CUVIDH264PICPARAMS
second_field	/usr/local/cuda/include/dynlink_cuviddec.h	/^    int second_field;                     \/**< Second field of a complementary field pair *\/$/;"	m	struct:_CUVIDPICPARAMS
second_field	/usr/local/cuda/include/dynlink_cuviddec.h	/^    int second_field;       \/**< Output the second field (ignored if deinterlace mode is Weave) *\/$/;"	m	struct:_CUVIDPROCPARAMS
section	src/parser.c	/^}section;$/;"	t	typeref:struct:__anon9	file:
segmentEnabled	/usr/local/cuda/include/dynlink_cuviddec.h	/^    unsigned char segmentEnabled : 1;$/;"	m	struct:_CUVIDVP9PICPARAMS
segmentFeatureData	/usr/local/cuda/include/dynlink_cuviddec.h	/^    short segmentFeatureData[8][4];$/;"	m	struct:_CUVIDVP9PICPARAMS
segmentFeatureEnable	/usr/local/cuda/include/dynlink_cuviddec.h	/^    unsigned char segmentFeatureEnable[8][4];$/;"	m	struct:_CUVIDVP9PICPARAMS
segmentFeatureMode	/usr/local/cuda/include/dynlink_cuviddec.h	/^    unsigned char segmentFeatureMode : 1;$/;"	m	struct:_CUVIDVP9PICPARAMS
segmentMapTemporalUpdate	/usr/local/cuda/include/dynlink_cuviddec.h	/^    unsigned char segmentMapTemporalUpdate : 1;$/;"	m	struct:_CUVIDVP9PICPARAMS
segmentMapUpdate	/usr/local/cuda/include/dynlink_cuviddec.h	/^    unsigned char segmentMapUpdate : 1;$/;"	m	struct:_CUVIDVP9PICPARAMS
segment_pred_probs	/usr/local/cuda/include/dynlink_cuviddec.h	/^    unsigned char segment_pred_probs[3];$/;"	m	struct:_CUVIDVP9PICPARAMS
self_host_ptr	/usr/local/cuda/include/curand_discrete.h	/^    curandDiscreteDistribution_t self_host_ptr;$/;"	m	struct:curandDiscreteDistribution_st
separate_colour_plane_flag	/usr/local/cuda/include/dynlink_cuviddec.h	/^    unsigned char separate_colour_plane_flag;$/;"	m	struct:_CUVIDHEVCPICPARAMS
seqhdr_data_length	/usr/local/cuda/include/dynlink_nvcuvid.h	/^    unsigned int seqhdr_data_length;          \/**< Additional bytes following (CUVIDEOFORMATEX)  *\/$/;"	m	struct:__anon123
serial	/usr/local/cuda/include/nvml.h	/^    char serial[96];                    \/\/!< Product serial number$/;"	m	struct:nvmlUnitInfo_st
sessionId	/usr/local/cuda/include/nvml.h	/^    unsigned int       sessionId;       \/\/!< Unique session ID$/;"	m	struct:nvmlEncoderSessionInfo_st
set_batch_network	src/network.c	/^void set_batch_network(network *net, int b)$/;"	f
set_pixel	src/image.c	/^void set_pixel(image m, int x, int y, int c, float val)$/;"	f
set_temp_network	src/network.c	/^void set_temp_network(network net, float t)$/;"	f
sh1	/usr/local/cuda/include/curand_mtgp32.h	/^    int sh1;			\/*< shift value 1. 0 < sh1 < 32. *\/$/;"	m	struct:mtgp32_params_fast
sh1_tbl	/usr/local/cuda/include/curand_mtgp32.h	/^    unsigned int sh1_tbl[CURAND_NUM_MTGP32_PARAMS];$/;"	m	struct:mtgp32_kernel_params
sh2	/usr/local/cuda/include/curand_mtgp32.h	/^    int sh2;			\/*< shift value 2. 0 < sh2 < 32. *\/$/;"	m	struct:mtgp32_params_fast
sh2_tbl	/usr/local/cuda/include/curand_mtgp32.h	/^    unsigned int sh2_tbl[CURAND_NUM_MTGP32_PARAMS];$/;"	m	struct:mtgp32_kernel_params
sharedMem	/usr/local/cuda/include/driver_types.h	/^    size_t sharedMem;    \/**< Shared memory *\/$/;"	m	struct:cudaLaunchParams
sharedMemBytes	/usr/local/cuda/include/cuda.h	/^    unsigned int sharedMemBytes; \/**< Dynamic shared-memory size per thread block in bytes *\/$/;"	m	struct:CUDA_LAUNCH_PARAMS_st
sharedMemPerBlock	/usr/local/cuda/include/cuda.h	/^    int sharedMemPerBlock;      \/**< Shared memory available per block in bytes *\/$/;"	m	struct:CUdevprop_st
sharedMemPerBlock	/usr/local/cuda/include/cuda_occupancy.h	/^    size_t sharedMemPerBlock;           \/\/ Maximum shared memory size per block$/;"	m	struct:cudaOccDeviceProp
sharedMemPerBlock	/usr/local/cuda/include/driver_types.h	/^    size_t sharedMemPerBlock;          \/**< Shared memory available per block in bytes *\/$/;"	m	struct:cudaDeviceProp
sharedMemPerBlock	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    int sharedMemPerBlock;      \/**< Shared memory available per block in bytes *\/$/;"	m	struct:CUdevprop_st
sharedMemPerBlockOptin	/usr/local/cuda/include/cuda_occupancy.h	/^    size_t sharedMemPerBlockOptin;      \/\/ Maximum optin shared memory size per block$/;"	m	struct:cudaOccDeviceProp
sharedMemPerBlockOptin	/usr/local/cuda/include/driver_types.h	/^    size_t sharedMemPerBlockOptin;     \/**< Per device maximum shared memory per block usable by special opt in *\/$/;"	m	struct:cudaDeviceProp
sharedMemPerMultiprocessor	/usr/local/cuda/include/cuda_occupancy.h	/^    size_t sharedMemPerMultiprocessor;  \/\/ Maximum shared memory size per SM$/;"	m	struct:cudaOccDeviceProp
sharedMemPerMultiprocessor	/usr/local/cuda/include/driver_types.h	/^    size_t sharedMemPerMultiprocessor; \/**< Shared memory available per multiprocessor in bytes *\/$/;"	m	struct:cudaDeviceProp
sharedSizeBytes	/usr/local/cuda/include/cuda_occupancy.h	/^    size_t sharedSizeBytes; \/\/ Number of static shared memory used$/;"	m	struct:cudaOccFuncAttributes
sharedSizeBytes	/usr/local/cuda/include/driver_types.h	/^   size_t sharedSizeBytes;$/;"	m	struct:cudaFuncAttributes
shfl	/usr/local/cuda/include/cooperative_groups.h	/^    _CG_QUALIFIER __half shfl(__half var, int srcRank) const {$/;"	f	class:__thread_block_tile_base
shfl	/usr/local/cuda/include/cooperative_groups.h	/^    _CG_QUALIFIER __half2 shfl(__half2 var, int srcRank) const {$/;"	f	class:__thread_block_tile_base
shfl	/usr/local/cuda/include/cooperative_groups.h	/^    _CG_QUALIFIER double shfl(double var, int srcRank) const {$/;"	f	class:__thread_block_tile_base
shfl	/usr/local/cuda/include/cooperative_groups.h	/^    _CG_QUALIFIER float shfl(float var, int srcRank) const {$/;"	f	class:__thread_block_tile_base
shfl	/usr/local/cuda/include/cooperative_groups.h	/^    _CG_QUALIFIER int shfl(int var, int srcRank) const {$/;"	f	class:__thread_block_tile_base
shfl	/usr/local/cuda/include/cooperative_groups.h	/^    _CG_QUALIFIER long long shfl(long long var, int srcRank) const {$/;"	f	class:__thread_block_tile_base
shfl	/usr/local/cuda/include/cooperative_groups.h	/^    _CG_QUALIFIER long shfl(long var, int srcRank) const {$/;"	f	class:__thread_block_tile_base
shfl	/usr/local/cuda/include/cooperative_groups.h	/^    _CG_QUALIFIER unsigned int shfl(unsigned int var, int srcRank) const {$/;"	f	class:__thread_block_tile_base
shfl	/usr/local/cuda/include/cooperative_groups.h	/^    _CG_QUALIFIER unsigned long long shfl(unsigned long long var, int srcRank) const {$/;"	f	class:__thread_block_tile_base
shfl	/usr/local/cuda/include/cooperative_groups.h	/^    _CG_QUALIFIER unsigned long shfl(unsigned long var, int srcRank) const {$/;"	f	class:__thread_block_tile_base
shfl_down	/usr/local/cuda/include/cooperative_groups.h	/^    _CG_QUALIFIER __half shfl_down(__half var, unsigned int delta) const {$/;"	f	class:__thread_block_tile_base
shfl_down	/usr/local/cuda/include/cooperative_groups.h	/^    _CG_QUALIFIER __half2 shfl_down(__half2 var, unsigned int delta) const {$/;"	f	class:__thread_block_tile_base
shfl_down	/usr/local/cuda/include/cooperative_groups.h	/^    _CG_QUALIFIER double shfl_down(double var, unsigned int delta) const {$/;"	f	class:__thread_block_tile_base
shfl_down	/usr/local/cuda/include/cooperative_groups.h	/^    _CG_QUALIFIER float shfl_down(float var, unsigned int delta) const {$/;"	f	class:__thread_block_tile_base
shfl_down	/usr/local/cuda/include/cooperative_groups.h	/^    _CG_QUALIFIER int shfl_down(int var, unsigned int delta) const {$/;"	f	class:__thread_block_tile_base
shfl_down	/usr/local/cuda/include/cooperative_groups.h	/^    _CG_QUALIFIER long long shfl_down(long long var, unsigned int delta) const {$/;"	f	class:__thread_block_tile_base
shfl_down	/usr/local/cuda/include/cooperative_groups.h	/^    _CG_QUALIFIER long shfl_down(long var, unsigned int delta) const {$/;"	f	class:__thread_block_tile_base
shfl_down	/usr/local/cuda/include/cooperative_groups.h	/^    _CG_QUALIFIER unsigned int shfl_down(unsigned int var, unsigned int delta) const {$/;"	f	class:__thread_block_tile_base
shfl_down	/usr/local/cuda/include/cooperative_groups.h	/^    _CG_QUALIFIER unsigned long long shfl_down(unsigned long long var, unsigned int delta) const {$/;"	f	class:__thread_block_tile_base
shfl_down	/usr/local/cuda/include/cooperative_groups.h	/^    _CG_QUALIFIER unsigned long shfl_down(unsigned long var, unsigned int delta) const {$/;"	f	class:__thread_block_tile_base
shfl_up	/usr/local/cuda/include/cooperative_groups.h	/^    _CG_QUALIFIER __half shfl_up(__half var, unsigned int delta) const {$/;"	f	class:__thread_block_tile_base
shfl_up	/usr/local/cuda/include/cooperative_groups.h	/^    _CG_QUALIFIER __half2 shfl_up(__half2 var, unsigned int delta) const {$/;"	f	class:__thread_block_tile_base
shfl_up	/usr/local/cuda/include/cooperative_groups.h	/^    _CG_QUALIFIER double shfl_up(double var, unsigned int delta) const {$/;"	f	class:__thread_block_tile_base
shfl_up	/usr/local/cuda/include/cooperative_groups.h	/^    _CG_QUALIFIER float shfl_up(float var, unsigned int delta) const {$/;"	f	class:__thread_block_tile_base
shfl_up	/usr/local/cuda/include/cooperative_groups.h	/^    _CG_QUALIFIER int shfl_up(int var, unsigned int delta) const {$/;"	f	class:__thread_block_tile_base
shfl_up	/usr/local/cuda/include/cooperative_groups.h	/^    _CG_QUALIFIER long long shfl_up(long long var, unsigned int delta) const {$/;"	f	class:__thread_block_tile_base
shfl_up	/usr/local/cuda/include/cooperative_groups.h	/^    _CG_QUALIFIER long shfl_up(long var, unsigned int delta) const {$/;"	f	class:__thread_block_tile_base
shfl_up	/usr/local/cuda/include/cooperative_groups.h	/^    _CG_QUALIFIER unsigned int shfl_up(unsigned int var, unsigned int delta) const {$/;"	f	class:__thread_block_tile_base
shfl_up	/usr/local/cuda/include/cooperative_groups.h	/^    _CG_QUALIFIER unsigned long long shfl_up(unsigned long long var, unsigned int delta) const {$/;"	f	class:__thread_block_tile_base
shfl_up	/usr/local/cuda/include/cooperative_groups.h	/^    _CG_QUALIFIER unsigned long shfl_up(unsigned long var, unsigned int delta) const {$/;"	f	class:__thread_block_tile_base
shfl_xor	/usr/local/cuda/include/cooperative_groups.h	/^    _CG_QUALIFIER __half shfl_xor(__half var, unsigned int laneMask) const {$/;"	f	class:__thread_block_tile_base
shfl_xor	/usr/local/cuda/include/cooperative_groups.h	/^    _CG_QUALIFIER __half2 shfl_xor(__half2 var, unsigned int laneMask) const {$/;"	f	class:__thread_block_tile_base
shfl_xor	/usr/local/cuda/include/cooperative_groups.h	/^    _CG_QUALIFIER double shfl_xor(double var, unsigned int laneMask) const {$/;"	f	class:__thread_block_tile_base
shfl_xor	/usr/local/cuda/include/cooperative_groups.h	/^    _CG_QUALIFIER float shfl_xor(float var, unsigned int laneMask) const {$/;"	f	class:__thread_block_tile_base
shfl_xor	/usr/local/cuda/include/cooperative_groups.h	/^    _CG_QUALIFIER int shfl_xor(int var, unsigned int laneMask) const {$/;"	f	class:__thread_block_tile_base
shfl_xor	/usr/local/cuda/include/cooperative_groups.h	/^    _CG_QUALIFIER long long shfl_xor(long long var, unsigned int laneMask) const {$/;"	f	class:__thread_block_tile_base
shfl_xor	/usr/local/cuda/include/cooperative_groups.h	/^    _CG_QUALIFIER long shfl_xor(long var, unsigned int laneMask) const {$/;"	f	class:__thread_block_tile_base
shfl_xor	/usr/local/cuda/include/cooperative_groups.h	/^    _CG_QUALIFIER unsigned int shfl_xor(unsigned int var, unsigned int laneMask) const {$/;"	f	class:__thread_block_tile_base
shfl_xor	/usr/local/cuda/include/cooperative_groups.h	/^    _CG_QUALIFIER unsigned long long shfl_xor(unsigned long long var, unsigned int laneMask) const {$/;"	f	class:__thread_block_tile_base
shfl_xor	/usr/local/cuda/include/cooperative_groups.h	/^    _CG_QUALIFIER unsigned long shfl_xor(unsigned long var, unsigned int laneMask) const {$/;"	f	class:__thread_block_tile_base
shift	/usr/local/cuda/include/curand_discrete.h	/^    unsigned int shift;$/;"	m	struct:curandDistributionM2Shift_st
shift	/usr/local/cuda/include/curand_discrete.h	/^    unsigned int shift;$/;"	m	struct:curandDistributionShift_st
shmemLimitConfig	/usr/local/cuda/include/cuda_occupancy.h	/^    cudaOccFuncShmemConfig shmemLimitConfig;$/;"	m	struct:cudaOccFuncAttributes
short1	/usr/local/cuda/include/vector_types.h	/^struct __device_builtin__ short1$/;"	s
short1	/usr/local/cuda/include/vector_types.h	/^typedef __device_builtin__ struct short1 short1;$/;"	t	typeref:struct:short1
short2	/usr/local/cuda/include/vector_types.h	/^typedef __device_builtin__ struct short2 short2;$/;"	t	typeref:struct:short2
short3	/usr/local/cuda/include/vector_types.h	/^struct __device_builtin__ short3$/;"	s
short3	/usr/local/cuda/include/vector_types.h	/^typedef __device_builtin__ struct short3 short3;$/;"	t	typeref:struct:short3
short4	/usr/local/cuda/include/vector_types.h	/^typedef __device_builtin__ struct short4 short4;$/;"	t	typeref:struct:short4
short_video_header	/usr/local/cuda/include/dynlink_cuviddec.h	/^    int short_video_header;$/;"	m	struct:_CUVIDMPEG4PICPARAMS
shortcut_cpu	src/blas.c	/^void shortcut_cpu(int batch, int w1, int h1, int c1, float *add, int w2, int h2, int c2, float *out)$/;"	f
showFrame	/usr/local/cuda/include/dynlink_cuviddec.h	/^    unsigned short showFrame : 1;$/;"	m	struct:_CUVIDVP9PICPARAMS
show_frame	/usr/local/cuda/include/dynlink_cuviddec.h	/^            unsigned char show_frame : 1;$/;"	m	struct:_CUVIDVP8PICPARAMS::__anon118::__anon119
show_image	src/image.c	/^void show_image(image p, const char *name)$/;"	f
show_image_collapsed	src/image.c	/^void show_image_collapsed(image p, char *name)$/;"	f
show_image_cv	src/image.c	/^void show_image_cv(image p, const char *name, IplImage *disp)$/;"	f
show_image_layers	src/image.c	/^void show_image_layers(image p, char *name)$/;"	f
show_image_normalized	src/image.c	/^void show_image_normalized(image im, const char *name)$/;"	f
show_images	src/image.c	/^void show_images(image *ims, int n, char *window)$/;"	f
shuffle	src/utils.c	/^void shuffle(void *arr, size_t n, size_t size)$/;"	f
sign_data_hiding_enabled_flag	/usr/local/cuda/include/dynlink_cuviddec.h	/^    unsigned char sign_data_hiding_enabled_flag;$/;"	m	struct:_CUVIDHEVCPICPARAMS
signbit	/usr/local/cuda/include/math_functions.hpp	/^__forceinline__ __host__ __device__ __cudart_builtin__ int signbit(double x) throw() { return __signbit(x); }$/;"	f
signbit	/usr/local/cuda/include/math_functions.hpp	/^__forceinline__ __host__ __device__ __cudart_builtin__ int signbit(double x) { return __signbit(x); }$/;"	f
signbit	/usr/local/cuda/include/math_functions.hpp	/^__forceinline__ __host__ __device__ __cudart_builtin__ int signbit(double x) { return __signbitd(x); }$/;"	f
signbit	/usr/local/cuda/include/math_functions.hpp	/^__forceinline__ __host__ __device__ __cudart_builtin__ int signbit(float x) { return __signbitf(x); }$/;"	f
signbit	/usr/local/cuda/include/math_functions.hpp	/^__forceinline__ __host__ __device__ __cudart_builtin__ int signbit(long double x) { return __signbitl(x);}$/;"	f
signbit	/usr/local/cuda/include/math_functions.hpp	/^__host__ __device__ __cudart_builtin__ int signbit(double x) { return __signbit(x); }$/;"	f
signbit	/usr/local/cuda/include/math_functions.hpp	/^__host__ __device__ __cudart_builtin__ int signbit(float x) { return __signbitf(x); }$/;"	f
signbit	/usr/local/cuda/include/math_functions.hpp	/^__host__ __device__ __cudart_builtin__ int signbit(long double x) { return __signbitl((double)x);}$/;"	f
signbit	/usr/local/cuda/include/math_functions.hpp	/^static __inline__ __host__ __device__ bool signbit(double x)$/;"	f
signbit	/usr/local/cuda/include/math_functions.hpp	/^static __inline__ __host__ __device__ bool signbit(float x)$/;"	f
signbit	/usr/local/cuda/include/math_functions.hpp	/^static __inline__ __host__ __device__ bool signbit(long double x)$/;"	f
signbit	/usr/local/cuda/include/math_functions.hpp	/^static __inline__ __host__ __device__ int signbit(double a)$/;"	f
signbit	/usr/local/cuda/include/math_functions.hpp	/^static __inline__ __host__ __device__ int signbit(float a)$/;"	f
signbit	/usr/local/cuda/include/math_functions.hpp	/^static __inline__ __host__ __device__ int signbit(long double a)$/;"	f
signbit	/usr/local/cuda/include/math_functions.hpp	128;"	d
sin	/usr/local/cuda/include/math_functions.hpp	/^__host__ __device__ __cudart_builtin__ float     sin(float in)           { return sinf(in); }$/;"	f
sincos	/usr/local/cuda/include/math_functions.hpp	/^__MATH_FUNCTIONS_DECL__ void sincos(float a, float *sptr, float *cptr)$/;"	f
sincospi	/usr/local/cuda/include/math_functions.hpp	/^__MATH_FUNCTIONS_DECL__ void sincospi(float a, float *sptr, float *cptr)$/;"	f
sincospi	/usr/local/cuda/include/math_functions_dbl_ptx3.hpp	/^__MATH_FUNCTIONS_DBL_PTX3_DECL__ void sincospi(double a, double *sptr, double *cptr)$/;"	f
sincospif	/usr/local/cuda/include/math_functions.hpp	/^__MATH_FUNCTIONS_DECL__ void sincospif(float a, float *sptr, float *cptr)  \/* __THROW *\/$/;"	f
singleToDoublePrecisionPerfRatio	/usr/local/cuda/include/driver_types.h	/^    int    singleToDoublePrecisionPerfRatio; \/**< Ratio of single precision performance (in floating-point operations per second) to double precision performance *\/$/;"	m	struct:cudaDeviceProp
single_temper_tbl	/usr/local/cuda/include/curand_mtgp32.h	/^    unsigned int single_temper_tbl[CURAND_NUM_MTGP32_PARAMS][TBL_SIZE];$/;"	m	struct:mtgp32_kernel_params
sinh	/usr/local/cuda/include/math_functions.hpp	/^__host__ __device__ __cudart_builtin__ float     sinh(float in)          { return sinhf(in); }$/;"	f
sinpi	/usr/local/cuda/include/math_functions.hpp	/^__MATH_FUNCTIONS_DECL__ float sinpi(float a)$/;"	f
sinpi	/usr/local/cuda/include/math_functions_dbl_ptx3.hpp	/^__MATH_FUNCTIONS_DBL_PTX3_DECL__ double sinpi(double a)$/;"	f
sinpif	/usr/local/cuda/include/math_functions.hpp	/^__MATH_FUNCTIONS_DECL__ float sinpif(float a) \/* __THROW *\/$/;"	f
size	/usr/local/cuda/include/cooperative_groups.h	/^    _CG_QUALIFIER unsigned int size() const {$/;"	f	class:__thread_block_tile_base
size	/usr/local/cuda/include/cooperative_groups.h	/^    _CG_QUALIFIER unsigned int size() const {$/;"	f	class:coalesced_group
size	/usr/local/cuda/include/cooperative_groups.h	/^    _CG_QUALIFIER unsigned int size() const {$/;"	f	class:grid_group
size	/usr/local/cuda/include/cooperative_groups.h	/^    _CG_QUALIFIER unsigned int size() const {$/;"	f	class:multi_grid_group
size	/usr/local/cuda/include/cooperative_groups.h	/^    _CG_QUALIFIER unsigned int size() const {$/;"	f	class:thread_block
size	/usr/local/cuda/include/cooperative_groups.h	/^_CG_QUALIFIER unsigned int thread_group::size() const$/;"	f	class:thread_group
size	/usr/local/cuda/include/cooperative_groups_helpers.h	/^        _CG_STATIC_QUALIFIER unsigned int size()$/;"	f	namespace:__internal::cta
size	/usr/local/cuda/include/cooperative_groups_helpers.h	/^        _CG_STATIC_QUALIFIER unsigned int size(const unsigned long long handle)$/;"	f	namespace:__internal::grid
size	/usr/local/cuda/include/cooperative_groups_helpers.h	/^        _CG_STATIC_QUALIFIER unsigned int size(const unsigned long long handle)$/;"	f	namespace:__internal::multi_grid
size	/usr/local/cuda/include/cudalibxt.h	/^    size_t size[MAX_CUDA_DESCRIPTOR_GPUS];   \/\/array of data sizes, one per GPU$/;"	m	struct:cudaXtDesc_t
size	/usr/local/cuda/include/cufftXt.h	/^    long long int size;$/;"	m	struct:cufftXt1dFactors_t
size	/usr/local/cuda/include/nvToolsExt.h	/^    uint16_t size;$/;"	m	struct:nvtxEventAttributes_v2
size	/usr/local/cuda/include/nvToolsExt.h	/^    uint16_t size;$/;"	m	struct:nvtxInitializationAttributes_v2
size	/usr/local/cuda/include/nvToolsExt.h	/^    uint16_t size;$/;"	m	struct:nvtxResourceAttributes_v0
size	/usr/local/cuda/include/nvToolsExtSync.h	/^    uint16_t size;$/;"	m	struct:nvtxSyncUserAttributes_v0
size	src/stb_image.h	/^   stbi_uc  size[257];$/;"	m	struct:__anon15
size	src/stb_image.h	/^   stbi_uc  size[288];$/;"	m	struct:__anon19
size	src/stb_image.h	/^   stbi_uc size,type,channel;$/;"	m	struct:__anon24
sizeInBytes	/usr/local/cuda/include/cuda.h	/^            size_t sizeInBytes;               \/**< Size in bytes *\/$/;"	m	struct:CUDA_RESOURCE_DESC_st::__anon41::__anon44
sizeInBytes	/usr/local/cuda/include/driver_types.h	/^			size_t sizeInBytes;                \/**< Size in bytes *\/$/;"	m	struct:cudaResourceDesc::__anon109::__anon112
size_params	src/parser.c	/^typedef struct size_params{$/;"	s	file:
size_params	src/parser.c	/^} size_params;$/;"	t	typeref:struct:size_params	file:
size_t	/usr/local/cuda/include/cuda_runtime.h	/^typedef unsigned size_t;$/;"	t
skip	src/stb_image.h	/^   void     (*skip)  (void *user,int n);                 \/\/ skip the next 'n' bytes, or 'unget' the last -n bytes if negative$/;"	m	struct:__anon12
skipahead	/usr/local/cuda/include/curand_kernel.h	/^QUALIFIERS void skipahead(unsigned int n, T state)$/;"	f
skipahead	/usr/local/cuda/include/curand_kernel.h	/^QUALIFIERS void skipahead(unsigned long long n, T state)$/;"	f
skipahead	/usr/local/cuda/include/curand_kernel.h	/^QUALIFIERS void skipahead(unsigned long long n, curandStateMRG32k3a_t *state)$/;"	f
skipahead	/usr/local/cuda/include/curand_kernel.h	/^QUALIFIERS void skipahead(unsigned long long n, curandStatePhilox4_32_10_t *state)$/;"	f
skipahead	/usr/local/cuda/include/curand_kernel.h	/^QUALIFIERS void skipahead(unsigned long long n, curandStateTest_t *state)$/;"	f
skipahead	/usr/local/cuda/include/curand_kernel.h	/^QUALIFIERS void skipahead(unsigned long long n, curandStateXORWOW_t *state)$/;"	f
skipahead_sequence	/usr/local/cuda/include/curand_kernel.h	/^QUALIFIERS void skipahead_sequence(unsigned long long n, curandStateMRG32k3a_t *state)$/;"	f
skipahead_sequence	/usr/local/cuda/include/curand_kernel.h	/^QUALIFIERS void skipahead_sequence(unsigned long long n, curandStatePhilox4_32_10_t *state)$/;"	f
skipahead_sequence	/usr/local/cuda/include/curand_kernel.h	/^QUALIFIERS void skipahead_sequence(unsigned long long n, curandStateXORWOW_t *state)$/;"	f
skipahead_subsequence	/usr/local/cuda/include/curand_kernel.h	/^QUALIFIERS void skipahead_subsequence(unsigned long long n, curandStateMRG32k3a_t *state)$/;"	f
slice_group_change_rate_minus1	/usr/local/cuda/include/dynlink_cuviddec.h	/^    unsigned int slice_group_change_rate_minus1;$/;"	m	struct:_CUVIDH264PICPARAMS
slice_group_map_addr	/usr/local/cuda/include/dynlink_cuviddec.h	/^        unsigned long long slice_group_map_addr;$/;"	m	union:_CUVIDH264PICPARAMS::__anon116
slice_group_map_type	/usr/local/cuda/include/dynlink_cuviddec.h	/^    unsigned char slice_group_map_type;$/;"	m	struct:_CUVIDH264PICPARAMS
slice_header_restriction_flag	/usr/local/cuda/include/dynlink_cuviddec.h	/^    unsigned char slice_header_restriction_flag;$/;"	m	struct:_CUVIDH264SVCEXT
slice_segment_header_extension_present_flag	/usr/local/cuda/include/dynlink_cuviddec.h	/^    unsigned char slice_segment_header_extension_present_flag;$/;"	m	struct:_CUVIDHEVCPICPARAMS
sllVal	/usr/local/cuda/include/nvml.h	/^    signed long long sllVal;        \/\/!< If the value is signed long long$/;"	m	union:nvmlValue_st
smUtil	/usr/local/cuda/include/nvml.h	/^    nvmlValue_t smUtil;                 \/\/!< SM (3D\/Compute) Util Value$/;"	m	struct:nvmlVgpuInstanceUtilizationSample_st
smUtil	/usr/local/cuda/include/nvml.h	/^    unsigned int smUtil;                            \/\/!< SM (3D\/Compute) Util Value$/;"	m	struct:nvmlVgpuProcessUtilizationSample_st
smUtil	/usr/local/cuda/include/nvml.h	/^    unsigned int smUtil;                \/\/!< SM (3D\/Compute) Util Value$/;"	m	struct:nvmlProcessUtilizationSample_st
smooth_data	src/data.c	/^void smooth_data(data d)$/;"	f
smooth_l1_cpu	src/blas.c	/^void smooth_l1_cpu(int n, float *pred, float *truth, float *delta, float *error)$/;"	f
sobol_v32	/usr/local/cuda/include/sobol_direction_vectors.h	/^static unsigned int sobol_v32[SOBOL_D][32];$/;"	v
sobol_v_host	/usr/local/cuda/include/sobol_direction_vectors.h	/^static unsigned int sobol_v_host[SOBOL_D][SOBOL_L * 2] = {$/;"	v
softmax	src/blas.c	/^void softmax(float *input, int n, float temp, int stride, float *output)$/;"	f
softmax_cpu	src/blas.c	/^void softmax_cpu(float *input, int n, int batch, int batch_offset, int groups, int group_offset, int stride, float temp, float *output)$/;"	f
softmax_layer	src/softmax_layer.h	/^typedef layer softmax_layer;$/;"	t
sorta_shuffle	src/utils.c	/^void sorta_shuffle(void *arr, size_t n, size_t size, size_t sections)$/;"	f
sortable_bbox	src/box.c	/^} sortable_bbox;$/;"	t	typeref:struct:__anon2	file:
sortable_bbox	src/compare.c	/^} sortable_bbox;$/;"	t	typeref:struct:__anon7	file:
source_indices	/usr/local/cuda/include/nvgraph.h	/^  int *source_indices; \/\/ rowInd$/;"	m	struct:nvgraphCOOTopology32I_st
source_indices	/usr/local/cuda/include/nvgraph.h	/^  int *source_indices; \/\/ rowInd$/;"	m	struct:nvgraphCSCTopology32I_st
source_offsets	/usr/local/cuda/include/nvgraph.h	/^  int *source_offsets; \/\/ rowPtr$/;"	m	struct:nvgraphCSRTopology32I_st
spec_end	src/stb_image.h	/^   int            spec_end;$/;"	m	struct:__anon16
spec_start	src/stb_image.h	/^   int            spec_start;$/;"	m	struct:__anon16
speed	/usr/local/cuda/include/nvml.h	/^    unsigned int speed;              \/\/!< Fan speed (RPM)$/;"	m	struct:nvmlUnitFanInfo_st
split_data	src/data.c	/^data *split_data(data d, int part, int total)$/;"	f
split_str	src/utils.c	/^list *split_str(char *s, char delim)$/;"	f
sps_temporal_mvp_enabled_flag	/usr/local/cuda/include/dynlink_cuviddec.h	/^    unsigned char sps_temporal_mvp_enabled_flag;$/;"	m	struct:_CUVIDHEVCPICPARAMS
sqrt	/usr/local/cuda/include/math_functions.hpp	/^__host__ __device__ __cudart_builtin__ float     sqrt(float in)          { return sqrtf(in); }$/;"	f
srcArray	/usr/local/cuda/include/cuda.h	/^    CUarray srcArray;           \/**< Source array reference *\/$/;"	m	struct:CUDA_MEMCPY2D_st
srcArray	/usr/local/cuda/include/cuda.h	/^    CUarray srcArray;           \/**< Source array reference *\/$/;"	m	struct:CUDA_MEMCPY3D_PEER_st
srcArray	/usr/local/cuda/include/cuda.h	/^    CUarray srcArray;           \/**< Source array reference *\/$/;"	m	struct:CUDA_MEMCPY3D_st
srcArray	/usr/local/cuda/include/driver_types.h	/^    cudaArray_t            srcArray;  \/**< Source memory address *\/$/;"	m	struct:cudaMemcpy3DParms
srcArray	/usr/local/cuda/include/driver_types.h	/^    cudaArray_t            srcArray;  \/**< Source memory address *\/$/;"	m	struct:cudaMemcpy3DPeerParms
srcArray	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    CUarray srcArray;           \/**< Source array reference *\/$/;"	m	struct:CUDA_MEMCPY2D_st
srcArray	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    CUarray srcArray;           \/**< Source array reference *\/$/;"	m	struct:CUDA_MEMCPY3D_PEER_st
srcArray	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    CUarray srcArray;           \/**< Source array reference *\/$/;"	m	struct:CUDA_MEMCPY3D_st
srcContext	/usr/local/cuda/include/cuda.h	/^    CUcontext srcContext;       \/**< Source context (ignored with srcMemoryType is ::CU_MEMORYTYPE_ARRAY) *\/$/;"	m	struct:CUDA_MEMCPY3D_PEER_st
srcContext	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    CUcontext srcContext;       \/**< Source context (ignored with srcMemoryType is ::CU_MEMORYTYPE_ARRAY) *\/$/;"	m	struct:CUDA_MEMCPY3D_PEER_st
srcDevice	/usr/local/cuda/include/cuda.h	/^    CUdeviceptr srcDevice;      \/**< Source device pointer *\/$/;"	m	struct:CUDA_MEMCPY2D_st
srcDevice	/usr/local/cuda/include/cuda.h	/^    CUdeviceptr srcDevice;      \/**< Source device pointer *\/$/;"	m	struct:CUDA_MEMCPY3D_PEER_st
srcDevice	/usr/local/cuda/include/cuda.h	/^    CUdeviceptr srcDevice;      \/**< Source device pointer *\/$/;"	m	struct:CUDA_MEMCPY3D_st
srcDevice	/usr/local/cuda/include/driver_types.h	/^    int                    srcDevice; \/**< Source device *\/$/;"	m	struct:cudaMemcpy3DPeerParms
srcDevice	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    CUdeviceptr srcDevice;      \/**< Source device pointer *\/$/;"	m	struct:CUDA_MEMCPY2D_st
srcDevice	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    CUdeviceptr srcDevice;      \/**< Source device pointer *\/$/;"	m	struct:CUDA_MEMCPY3D_PEER_st
srcDevice	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    CUdeviceptr srcDevice;      \/**< Source device pointer *\/$/;"	m	struct:CUDA_MEMCPY3D_st
srcHeight	/usr/local/cuda/include/cuda.h	/^    size_t srcHeight;           \/**< Source height (ignored when src is array; may be 0 if Depth==1) *\/$/;"	m	struct:CUDA_MEMCPY3D_PEER_st
srcHeight	/usr/local/cuda/include/cuda.h	/^    size_t srcHeight;           \/**< Source height (ignored when src is array; may be 0 if Depth==1) *\/$/;"	m	struct:CUDA_MEMCPY3D_st
srcHeight	/usr/local/cuda/include/cuda.h	/^    unsigned int srcHeight;     \/**< Source height (ignored when src is array; may be 0 if Depth==1) *\/$/;"	m	struct:CUDA_MEMCPY3D_st
srcHeight	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    size_t srcHeight;           \/**< Source height (ignored when src is array; may be 0 if Depth==1) *\/$/;"	m	struct:CUDA_MEMCPY3D_PEER_st
srcHeight	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    size_t srcHeight;           \/**< Source height (ignored when src is array; may be 0 if Depth==1) *\/$/;"	m	struct:CUDA_MEMCPY3D_st
srcHeight	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    unsigned int srcHeight;     \/**< Source height (ignored when src is array; may be 0 if Depth==1) *\/$/;"	m	struct:CUDA_MEMCPY3D_st
srcHost	/usr/local/cuda/include/cuda.h	/^    const void *srcHost;        \/**< Source host pointer *\/$/;"	m	struct:CUDA_MEMCPY2D_st
srcHost	/usr/local/cuda/include/cuda.h	/^    const void *srcHost;        \/**< Source host pointer *\/$/;"	m	struct:CUDA_MEMCPY3D_PEER_st
srcHost	/usr/local/cuda/include/cuda.h	/^    const void *srcHost;        \/**< Source host pointer *\/$/;"	m	struct:CUDA_MEMCPY3D_st
srcHost	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    const void *srcHost;        \/**< Source host pointer *\/$/;"	m	struct:CUDA_MEMCPY2D_st
srcHost	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    const void *srcHost;        \/**< Source host pointer *\/$/;"	m	struct:CUDA_MEMCPY3D_PEER_st
srcHost	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    const void *srcHost;        \/**< Source host pointer *\/$/;"	m	struct:CUDA_MEMCPY3D_st
srcLOD	/usr/local/cuda/include/cuda.h	/^    size_t srcLOD;              \/**< Source LOD *\/$/;"	m	struct:CUDA_MEMCPY3D_PEER_st
srcLOD	/usr/local/cuda/include/cuda.h	/^    size_t srcLOD;              \/**< Source LOD *\/$/;"	m	struct:CUDA_MEMCPY3D_st
srcLOD	/usr/local/cuda/include/cuda.h	/^    unsigned int srcLOD;        \/**< Source LOD *\/$/;"	m	struct:CUDA_MEMCPY3D_st
srcLOD	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    size_t srcLOD;              \/**< Source LOD *\/$/;"	m	struct:CUDA_MEMCPY3D_PEER_st
srcLOD	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    size_t srcLOD;              \/**< Source LOD *\/$/;"	m	struct:CUDA_MEMCPY3D_st
srcLOD	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    unsigned int srcLOD;        \/**< Source LOD *\/$/;"	m	struct:CUDA_MEMCPY3D_st
srcMemoryType	/usr/local/cuda/include/cuda.h	/^    CUmemorytype srcMemoryType; \/**< Source memory type (host, device, array) *\/$/;"	m	struct:CUDA_MEMCPY2D_st
srcMemoryType	/usr/local/cuda/include/cuda.h	/^    CUmemorytype srcMemoryType; \/**< Source memory type (host, device, array) *\/$/;"	m	struct:CUDA_MEMCPY3D_PEER_st
srcMemoryType	/usr/local/cuda/include/cuda.h	/^    CUmemorytype srcMemoryType; \/**< Source memory type (host, device, array) *\/$/;"	m	struct:CUDA_MEMCPY3D_st
srcMemoryType	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    CUmemorytype srcMemoryType; \/**< Source memory type (host, device, array) *\/$/;"	m	struct:CUDA_MEMCPY2D_st
srcMemoryType	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    CUmemorytype srcMemoryType; \/**< Source memory type (host, device, array) *\/$/;"	m	struct:CUDA_MEMCPY3D_PEER_st
srcMemoryType	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    CUmemorytype srcMemoryType; \/**< Source memory type (host, device, array) *\/$/;"	m	struct:CUDA_MEMCPY3D_st
srcPitch	/usr/local/cuda/include/cuda.h	/^    size_t srcPitch;            \/**< Source pitch (ignored when src is array) *\/$/;"	m	struct:CUDA_MEMCPY2D_st
srcPitch	/usr/local/cuda/include/cuda.h	/^    size_t srcPitch;            \/**< Source pitch (ignored when src is array) *\/$/;"	m	struct:CUDA_MEMCPY3D_PEER_st
srcPitch	/usr/local/cuda/include/cuda.h	/^    size_t srcPitch;            \/**< Source pitch (ignored when src is array) *\/$/;"	m	struct:CUDA_MEMCPY3D_st
srcPitch	/usr/local/cuda/include/cuda.h	/^    unsigned int srcPitch;      \/**< Source pitch (ignored when src is array) *\/$/;"	m	struct:CUDA_MEMCPY2D_st
srcPitch	/usr/local/cuda/include/cuda.h	/^    unsigned int srcPitch;      \/**< Source pitch (ignored when src is array) *\/$/;"	m	struct:CUDA_MEMCPY3D_st
srcPitch	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    size_t srcPitch;            \/**< Source pitch (ignored when src is array) *\/$/;"	m	struct:CUDA_MEMCPY2D_st
srcPitch	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    size_t srcPitch;            \/**< Source pitch (ignored when src is array) *\/$/;"	m	struct:CUDA_MEMCPY3D_PEER_st
srcPitch	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    size_t srcPitch;            \/**< Source pitch (ignored when src is array) *\/$/;"	m	struct:CUDA_MEMCPY3D_st
srcPitch	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    unsigned int srcPitch;      \/**< Source pitch (ignored when src is array) *\/$/;"	m	struct:CUDA_MEMCPY2D_st
srcPitch	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    unsigned int srcPitch;      \/**< Source pitch (ignored when src is array) *\/$/;"	m	struct:CUDA_MEMCPY3D_st
srcPos	/usr/local/cuda/include/driver_types.h	/^    struct cudaPos         srcPos;    \/**< Source position offset *\/$/;"	m	struct:cudaMemcpy3DParms	typeref:struct:cudaMemcpy3DParms::cudaPos
srcPos	/usr/local/cuda/include/driver_types.h	/^    struct cudaPos         srcPos;    \/**< Source position offset *\/$/;"	m	struct:cudaMemcpy3DPeerParms	typeref:struct:cudaMemcpy3DPeerParms::cudaPos
srcPtr	/usr/local/cuda/include/driver_types.h	/^    struct cudaPitchedPtr  srcPtr;    \/**< Pitched source memory address *\/$/;"	m	struct:cudaMemcpy3DParms	typeref:struct:cudaMemcpy3DParms::cudaPitchedPtr
srcPtr	/usr/local/cuda/include/driver_types.h	/^    struct cudaPitchedPtr  srcPtr;    \/**< Pitched source memory address *\/$/;"	m	struct:cudaMemcpy3DPeerParms	typeref:struct:cudaMemcpy3DPeerParms::cudaPitchedPtr
srcXInBytes	/usr/local/cuda/include/cuda.h	/^    size_t srcXInBytes;         \/**< Source X in bytes *\/$/;"	m	struct:CUDA_MEMCPY2D_st
srcXInBytes	/usr/local/cuda/include/cuda.h	/^    size_t srcXInBytes;         \/**< Source X in bytes *\/$/;"	m	struct:CUDA_MEMCPY3D_PEER_st
srcXInBytes	/usr/local/cuda/include/cuda.h	/^    size_t srcXInBytes;         \/**< Source X in bytes *\/$/;"	m	struct:CUDA_MEMCPY3D_st
srcXInBytes	/usr/local/cuda/include/cuda.h	/^    unsigned int srcXInBytes;   \/**< Source X in bytes *\/$/;"	m	struct:CUDA_MEMCPY2D_st
srcXInBytes	/usr/local/cuda/include/cuda.h	/^    unsigned int srcXInBytes;   \/**< Source X in bytes *\/$/;"	m	struct:CUDA_MEMCPY3D_st
srcXInBytes	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    size_t srcXInBytes;         \/**< Source X in bytes *\/$/;"	m	struct:CUDA_MEMCPY2D_st
srcXInBytes	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    size_t srcXInBytes;         \/**< Source X in bytes *\/$/;"	m	struct:CUDA_MEMCPY3D_PEER_st
srcXInBytes	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    size_t srcXInBytes;         \/**< Source X in bytes *\/$/;"	m	struct:CUDA_MEMCPY3D_st
srcXInBytes	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    unsigned int srcXInBytes;   \/**< Source X in bytes *\/$/;"	m	struct:CUDA_MEMCPY2D_st
srcXInBytes	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    unsigned int srcXInBytes;   \/**< Source X in bytes *\/$/;"	m	struct:CUDA_MEMCPY3D_st
srcY	/usr/local/cuda/include/cuda.h	/^    size_t srcY;                \/**< Source Y *\/$/;"	m	struct:CUDA_MEMCPY2D_st
srcY	/usr/local/cuda/include/cuda.h	/^    size_t srcY;                \/**< Source Y *\/$/;"	m	struct:CUDA_MEMCPY3D_PEER_st
srcY	/usr/local/cuda/include/cuda.h	/^    size_t srcY;                \/**< Source Y *\/$/;"	m	struct:CUDA_MEMCPY3D_st
srcY	/usr/local/cuda/include/cuda.h	/^    unsigned int srcY;          \/**< Source Y *\/$/;"	m	struct:CUDA_MEMCPY2D_st
srcY	/usr/local/cuda/include/cuda.h	/^    unsigned int srcY;          \/**< Source Y *\/$/;"	m	struct:CUDA_MEMCPY3D_st
srcY	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    size_t srcY;                \/**< Source Y *\/$/;"	m	struct:CUDA_MEMCPY2D_st
srcY	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    size_t srcY;                \/**< Source Y *\/$/;"	m	struct:CUDA_MEMCPY3D_PEER_st
srcY	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    size_t srcY;                \/**< Source Y *\/$/;"	m	struct:CUDA_MEMCPY3D_st
srcY	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    unsigned int srcY;          \/**< Source Y *\/$/;"	m	struct:CUDA_MEMCPY2D_st
srcY	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    unsigned int srcY;          \/**< Source Y *\/$/;"	m	struct:CUDA_MEMCPY3D_st
srcZ	/usr/local/cuda/include/cuda.h	/^    size_t srcZ;                \/**< Source Z *\/$/;"	m	struct:CUDA_MEMCPY3D_PEER_st
srcZ	/usr/local/cuda/include/cuda.h	/^    size_t srcZ;                \/**< Source Z *\/$/;"	m	struct:CUDA_MEMCPY3D_st
srcZ	/usr/local/cuda/include/cuda.h	/^    unsigned int srcZ;          \/**< Source Z *\/$/;"	m	struct:CUDA_MEMCPY3D_st
srcZ	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    size_t srcZ;                \/**< Source Z *\/$/;"	m	struct:CUDA_MEMCPY3D_PEER_st
srcZ	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    size_t srcZ;                \/**< Source Z *\/$/;"	m	struct:CUDA_MEMCPY3D_st
srcZ	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    unsigned int srcZ;          \/**< Source Z *\/$/;"	m	struct:CUDA_MEMCPY3D_st
stair_activate	src/activations.h	/^static inline float stair_activate(float x)$/;"	f
stair_gradient	src/activations.h	/^static inline float stair_gradient(float x)$/;"	f
startTime	/usr/local/cuda/include/nvml.h	/^    unsigned long long startTime;               \/\/!< CPU Timestamp in usec representing start time for the process$/;"	m	struct:nvmlAccountingStats_st
start_timer	src/common.c	/^void start_timer(Timer *timer) {$/;"	f
start_x	src/stb_image.h	/^   int start_x, start_y;$/;"	m	struct:__anon26
start_y	src/stb_image.h	/^   int start_x, start_y;$/;"	m	struct:__anon26
state	/usr/local/cuda/include/nvml.h	/^    char state[256];                 \/\/!< The power supply state$/;"	m	struct:nvmlPSUInfo_st
state	/usr/local/cuda/include/nvml.h	/^    nvmlFanState_t state;            \/\/!< Flag that indicates whether fan is working properly$/;"	m	struct:nvmlUnitFanInfo_st
statistics_connected_layer	src/connected_layer.c	/^void statistics_connected_layer(layer l)$/;"	f
status	/usr/local/cuda/include/cudnn.h	/^    cudnnStatus_t                   status;$/;"	m	struct:__anon67
status	/usr/local/cuda/include/cudnn.h	/^    cudnnStatus_t                   status;$/;"	m	struct:__anon70
status	/usr/local/cuda/include/cudnn.h	/^    cudnnStatus_t               status;$/;"	m	struct:__anon64
stb_image_write_test	src/stb_image_write.h	/^typedef int stb_image_write_test[sizeof(stbiw_uint32)==4 ? 1 : -1];$/;"	t
stbi__DNL	src/stb_image.h	2764;"	d
stbi__EOI	src/stb_image.h	2766;"	d
stbi__SOF	src/stb_image.h	2767;"	d
stbi__SOF_progressive	src/stb_image.h	2770;"	d
stbi__SOI	src/stb_image.h	2765;"	d
stbi__SOS	src/stb_image.h	2768;"	d
stbi__YCbCr_to_RGB_row	src/stb_image.h	/^static void stbi__YCbCr_to_RGB_row(stbi_uc *out, const stbi_uc *y, const stbi_uc *pcb, const stbi_uc *pcr, int count, int step)$/;"	f
stbi__YCbCr_to_RGB_simd	src/stb_image.h	/^static void stbi__YCbCr_to_RGB_simd(stbi_uc *out, stbi_uc const *y, stbi_uc const *pcb, stbi_uc const *pcr, int count, int step)$/;"	f
stbi__at_eof	src/stb_image.h	/^stbi_inline static int stbi__at_eof(stbi__context *s)$/;"	f
stbi__bit_reverse	src/stb_image.h	/^stbi_inline static int stbi__bit_reverse(int v, int bits)$/;"	f
stbi__bitcount	src/stb_image.h	/^static int stbi__bitcount(unsigned int a)$/;"	f
stbi__bitreverse16	src/stb_image.h	/^stbi_inline static int stbi__bitreverse16(int n)$/;"	f
stbi__bmask	src/stb_image.h	/^static stbi__uint32 stbi__bmask[17]={0,1,3,7,15,31,63,127,255,511,1023,2047,4095,8191,16383,32767,65535};$/;"	v
stbi__bmp_info	src/stb_image.h	/^static int stbi__bmp_info(stbi__context *s, int *x, int *y, int *comp)$/;"	f
stbi__bmp_load	src/stb_image.h	/^static stbi_uc *stbi__bmp_load(stbi__context *s, int *x, int *y, int *comp, int req_comp)$/;"	f
stbi__bmp_test	src/stb_image.h	/^static int stbi__bmp_test(stbi__context *s)$/;"	f
stbi__bmp_test_raw	src/stb_image.h	/^static int stbi__bmp_test_raw(stbi__context *s)$/;"	f
stbi__build_fast_ac	src/stb_image.h	/^static void stbi__build_fast_ac(stbi__int16 *fast_ac, stbi__huffman *h)$/;"	f
stbi__build_huffman	src/stb_image.h	/^static int stbi__build_huffman(stbi__huffman *h, int *count)$/;"	f
stbi__check_png_header	src/stb_image.h	/^static int stbi__check_png_header(stbi__context *s)$/;"	f
stbi__clamp	src/stb_image.h	/^stbi_inline static stbi_uc stbi__clamp(int x)$/;"	f
stbi__cleanup_jpeg	src/stb_image.h	/^static void stbi__cleanup_jpeg(stbi__jpeg *j)$/;"	f
stbi__compute_huffman_codes	src/stb_image.h	/^static int stbi__compute_huffman_codes(stbi__zbuf *a)$/;"	f
stbi__compute_transparency	src/stb_image.h	/^static int stbi__compute_transparency(stbi__png *z, stbi_uc tc[3], int out_n)$/;"	f
stbi__compute_y	src/stb_image.h	/^static stbi_uc stbi__compute_y(int r, int g, int b)$/;"	f
stbi__context	src/stb_image.h	/^} stbi__context;$/;"	t	typeref:struct:__anon13
stbi__convert_format	src/stb_image.h	/^static unsigned char *stbi__convert_format(unsigned char *data, int img_n, int req_comp, unsigned int x, unsigned int y)$/;"	f
stbi__copyval	src/stb_image.h	/^static void stbi__copyval(int channel,stbi_uc *dest,const stbi_uc *src)$/;"	f
stbi__cpuid3	src/stb_image.h	/^static int stbi__cpuid3(void)$/;"	f
stbi__create_png_image	src/stb_image.h	/^static int stbi__create_png_image(stbi__png *a, stbi_uc *image_data, stbi__uint32 image_data_len, int out_n, int depth, int color, int interlaced)$/;"	f
stbi__create_png_image_raw	src/stb_image.h	/^static int stbi__create_png_image_raw(stbi__png *a, stbi_uc *raw, stbi__uint32 raw_len, int out_n, stbi__uint32 x, stbi__uint32 y, int depth, int color)$/;"	f
stbi__de_iphone	src/stb_image.h	/^static void stbi__de_iphone(stbi__png *z)$/;"	f
stbi__de_iphone_flag	src/stb_image.h	/^static int stbi__de_iphone_flag = 0;$/;"	v
stbi__decode_jpeg_header	src/stb_image.h	/^static int stbi__decode_jpeg_header(stbi__jpeg *z, int scan)$/;"	f
stbi__decode_jpeg_image	src/stb_image.h	/^static int stbi__decode_jpeg_image(stbi__jpeg *j)$/;"	f
stbi__depth_scale_table	src/stb_image.h	/^static stbi_uc stbi__depth_scale_table[9] = { 0, 0xff, 0x55, 0, 0x11, 0,0,0, 0x01 };$/;"	v
stbi__div16	src/stb_image.h	2886;"	d
stbi__div4	src/stb_image.h	2837;"	d
stbi__do_png	src/stb_image.h	/^static unsigned char *stbi__do_png(stbi__png *p, int *x, int *y, int *n, int req_comp)$/;"	f
stbi__do_zlib	src/stb_image.h	/^static int stbi__do_zlib(stbi__zbuf *a, char *obuf, int olen, int exp, int parse_header)$/;"	f
stbi__err	src/stb_image.h	/^static int stbi__err(const char *str)$/;"	f
stbi__err	src/stb_image.h	897;"	d
stbi__err	src/stb_image.h	899;"	d
stbi__err	src/stb_image.h	901;"	d
stbi__errpf	src/stb_image.h	904;"	d
stbi__errpuc	src/stb_image.h	905;"	d
stbi__expand_png_palette	src/stb_image.h	/^static int stbi__expand_png_palette(stbi__png *a, stbi_uc *palette, int len, int pal_img_n)$/;"	f
stbi__extend_receive	src/stb_image.h	/^stbi_inline static int stbi__extend_receive(stbi__jpeg *j, int n)$/;"	f
stbi__f2f	src/stb_image.h	1905;"	d
stbi__fill_bits	src/stb_image.h	/^static void stbi__fill_bits(stbi__zbuf *z)$/;"	f
stbi__fill_gif_background	src/stb_image.h	/^static void stbi__fill_gif_background(stbi__gif *g)$/;"	f
stbi__float2int	src/stb_image.h	1383;"	d
stbi__float_postprocess	src/stb_image.h	/^static void stbi__float_postprocess(float *result, int *x, int *y, int *comp, int req_comp)$/;"	f
stbi__fopen	src/stb_image.h	/^static FILE *stbi__fopen(char const *filename, char const *mode)$/;"	f
stbi__fsh	src/stb_image.h	1906;"	d
stbi__g_failure_reason	src/stb_image.h	/^static const char *stbi__g_failure_reason;$/;"	v
stbi__get16be	src/stb_image.h	/^static int stbi__get16be(stbi__context *s)$/;"	f
stbi__get16le	src/stb_image.h	/^static int stbi__get16le(stbi__context *s)$/;"	f
stbi__get32be	src/stb_image.h	/^static stbi__uint32 stbi__get32be(stbi__context *s)$/;"	f
stbi__get32le	src/stb_image.h	/^static stbi__uint32 stbi__get32le(stbi__context *s)$/;"	f
stbi__get8	src/stb_image.h	/^stbi_inline static stbi_uc stbi__get8(stbi__context *s)$/;"	f
stbi__get_chunk_header	src/stb_image.h	/^static stbi__pngchunk stbi__get_chunk_header(stbi__context *s)$/;"	f
stbi__get_marker	src/stb_image.h	/^static stbi_uc stbi__get_marker(stbi__jpeg *j)$/;"	f
stbi__getn	src/stb_image.h	/^static int stbi__getn(stbi__context *s, stbi_uc *buffer, int n)$/;"	f
stbi__gif	src/stb_image.h	/^} stbi__gif;$/;"	t	typeref:struct:__anon26
stbi__gif_header	src/stb_image.h	/^static int stbi__gif_header(stbi__context *s, stbi__gif *g, int *comp, int is_info)$/;"	f
stbi__gif_info	src/stb_image.h	/^static int stbi__gif_info(stbi__context *s, int *x, int *y, int *comp)$/;"	f
stbi__gif_info_raw	src/stb_image.h	/^static int stbi__gif_info_raw(stbi__context *s, int *x, int *y, int *comp)$/;"	f
stbi__gif_load	src/stb_image.h	/^static stbi_uc *stbi__gif_load(stbi__context *s, int *x, int *y, int *comp, int req_comp)$/;"	f
stbi__gif_load_next	src/stb_image.h	/^static stbi_uc *stbi__gif_load_next(stbi__context *s, stbi__gif *g, int *comp, int req_comp)$/;"	f
stbi__gif_lzw	src/stb_image.h	/^} stbi__gif_lzw;$/;"	t	typeref:struct:__anon25
stbi__gif_parse_colortable	src/stb_image.h	/^static void stbi__gif_parse_colortable(stbi__context *s, stbi_uc pal[256][4], int num_entries, int transp)$/;"	f
stbi__gif_test	src/stb_image.h	/^static int stbi__gif_test(stbi__context *s)$/;"	f
stbi__gif_test_raw	src/stb_image.h	/^static int stbi__gif_test_raw(stbi__context *s)$/;"	f
stbi__grow_buffer_unsafe	src/stb_image.h	/^static void stbi__grow_buffer_unsafe(stbi__jpeg *j)$/;"	f
stbi__h2l_gamma_i	src/stb_image.h	/^static float stbi__h2l_gamma_i=1.0f\/2.2f, stbi__h2l_scale_i=1.0f;$/;"	v
stbi__h2l_scale_i	src/stb_image.h	/^static float stbi__h2l_gamma_i=1.0f\/2.2f, stbi__h2l_scale_i=1.0f;$/;"	v
stbi__hdr_convert	src/stb_image.h	/^static void stbi__hdr_convert(float *output, stbi_uc *input, int req_comp)$/;"	f
stbi__hdr_gettoken	src/stb_image.h	/^static char *stbi__hdr_gettoken(stbi__context *z, char *buffer)$/;"	f
stbi__hdr_info	src/stb_image.h	/^static int stbi__hdr_info(stbi__context *s, int *x, int *y, int *comp)$/;"	f
stbi__hdr_load	src/stb_image.h	/^static float *stbi__hdr_load(stbi__context *s, int *x, int *y, int *comp, int req_comp)$/;"	f
stbi__hdr_test	src/stb_image.h	/^static int stbi__hdr_test(stbi__context* s)$/;"	f
stbi__hdr_test_core	src/stb_image.h	/^static int stbi__hdr_test_core(stbi__context *s)$/;"	f
stbi__hdr_to_ldr	src/stb_image.h	/^static stbi_uc *stbi__hdr_to_ldr(float   *data, int x, int y, int comp)$/;"	f
stbi__high_bit	src/stb_image.h	/^static int stbi__high_bit(unsigned int z)$/;"	f
stbi__huffman	src/stb_image.h	/^} stbi__huffman;$/;"	t	typeref:struct:__anon15
stbi__idct_block	src/stb_image.h	/^static void stbi__idct_block(stbi_uc *out, int out_stride, short data[64])$/;"	f
stbi__idct_simd	src/stb_image.h	/^static void stbi__idct_simd(stbi_uc *out, int out_stride, short data[64])$/;"	f
stbi__info_main	src/stb_image.h	/^static int stbi__info_main(stbi__context *s, int *x, int *y, int *comp)$/;"	f
stbi__init_zdefaults	src/stb_image.h	/^static void stbi__init_zdefaults(void)$/;"	f
stbi__int16	src/stb_image.h	/^typedef   signed short stbi__int16;$/;"	t
stbi__int16	src/stb_image.h	/^typedef int16_t  stbi__int16;$/;"	t
stbi__int32	src/stb_image.h	/^typedef   signed int   stbi__int32;$/;"	t
stbi__int32	src/stb_image.h	/^typedef int32_t  stbi__int32;$/;"	t
stbi__jbias	src/stb_image.h	/^static int const stbi__jbias[16] = {0,-1,-3,-7,-15,-31,-63,-127,-255,-511,-1023,-2047,-4095,-8191,-16383,-32767};$/;"	v
stbi__jpeg	src/stb_image.h	/^} stbi__jpeg;$/;"	t	typeref:struct:__anon16
stbi__jpeg_decode_block	src/stb_image.h	/^static int stbi__jpeg_decode_block(stbi__jpeg *j, short data[64], stbi__huffman *hdc, stbi__huffman *hac, stbi__int16 *fac, int b, stbi_uc *dequant)$/;"	f
stbi__jpeg_decode_block_prog_ac	src/stb_image.h	/^static int stbi__jpeg_decode_block_prog_ac(stbi__jpeg *j, short data[64], stbi__huffman *hac, stbi__int16 *fac)$/;"	f
stbi__jpeg_decode_block_prog_dc	src/stb_image.h	/^static int stbi__jpeg_decode_block_prog_dc(stbi__jpeg *j, short data[64], stbi__huffman *hdc, int b)$/;"	f
stbi__jpeg_dequantize	src/stb_image.h	/^static void stbi__jpeg_dequantize(short *data, stbi_uc *dequant)$/;"	f
stbi__jpeg_dezigzag	src/stb_image.h	/^static stbi_uc stbi__jpeg_dezigzag[64+15] =$/;"	v
stbi__jpeg_finish	src/stb_image.h	/^static void stbi__jpeg_finish(stbi__jpeg *z)$/;"	f
stbi__jpeg_get_bit	src/stb_image.h	/^stbi_inline static int stbi__jpeg_get_bit(stbi__jpeg *j)$/;"	f
stbi__jpeg_get_bits	src/stb_image.h	/^stbi_inline static int stbi__jpeg_get_bits(stbi__jpeg *j, int n)$/;"	f
stbi__jpeg_huff_decode	src/stb_image.h	/^stbi_inline static int stbi__jpeg_huff_decode(stbi__jpeg *j, stbi__huffman *h)$/;"	f
stbi__jpeg_info	src/stb_image.h	/^static int stbi__jpeg_info(stbi__context *s, int *x, int *y, int *comp)$/;"	f
stbi__jpeg_info_raw	src/stb_image.h	/^static int stbi__jpeg_info_raw(stbi__jpeg *j, int *x, int *y, int *comp)$/;"	f
stbi__jpeg_load	src/stb_image.h	/^static unsigned char *stbi__jpeg_load(stbi__context *s, int *x, int *y, int *comp, int req_comp)$/;"	f
stbi__jpeg_reset	src/stb_image.h	/^static void stbi__jpeg_reset(stbi__jpeg *j)$/;"	f
stbi__jpeg_test	src/stb_image.h	/^static int stbi__jpeg_test(stbi__context *s)$/;"	f
stbi__l2h_gamma	src/stb_image.h	/^static float stbi__l2h_gamma=2.2f, stbi__l2h_scale=1.0f;$/;"	v
stbi__l2h_scale	src/stb_image.h	/^static float stbi__l2h_gamma=2.2f, stbi__l2h_scale=1.0f;$/;"	v
stbi__ldr_to_hdr	src/stb_image.h	/^static float   *stbi__ldr_to_hdr(stbi_uc *data, int x, int y, int comp)$/;"	f
stbi__load_flip	src/stb_image.h	/^static unsigned char *stbi__load_flip(stbi__context *s, int *x, int *y, int *comp, int req_comp)$/;"	f
stbi__load_main	src/stb_image.h	/^static unsigned char *stbi__load_main(stbi__context *s, int *x, int *y, int *comp, int req_comp)$/;"	f
stbi__loadf_main	src/stb_image.h	/^static float *stbi__loadf_main(stbi__context *s, int *x, int *y, int *comp, int req_comp)$/;"	f
stbi__malloc	src/stb_image.h	/^static void *stbi__malloc(size_t size)$/;"	f
stbi__out_gif_code	src/stb_image.h	/^static void stbi__out_gif_code(stbi__gif *g, stbi__uint16 code)$/;"	f
stbi__paeth	src/stb_image.h	/^static int stbi__paeth(int a, int b, int c)$/;"	f
stbi__parse_entropy_coded_data	src/stb_image.h	/^static int stbi__parse_entropy_coded_data(stbi__jpeg *z)$/;"	f
stbi__parse_huffman_block	src/stb_image.h	/^static int stbi__parse_huffman_block(stbi__zbuf *a)$/;"	f
stbi__parse_png_file	src/stb_image.h	/^static int stbi__parse_png_file(stbi__png *z, int scan, int req_comp)$/;"	f
stbi__parse_uncomperssed_block	src/stb_image.h	/^static int stbi__parse_uncomperssed_block(stbi__zbuf *a)$/;"	f
stbi__parse_zlib	src/stb_image.h	/^static int stbi__parse_zlib(stbi__zbuf *a, int parse_header)$/;"	f
stbi__parse_zlib_header	src/stb_image.h	/^static int stbi__parse_zlib_header(stbi__zbuf *a)$/;"	f
stbi__pic_info	src/stb_image.h	/^static int stbi__pic_info(stbi__context *s, int *x, int *y, int *comp)$/;"	f
stbi__pic_is4	src/stb_image.h	/^static int stbi__pic_is4(stbi__context *s,const char *str)$/;"	f
stbi__pic_load	src/stb_image.h	/^static stbi_uc *stbi__pic_load(stbi__context *s,int *px,int *py,int *comp,int req_comp)$/;"	f
stbi__pic_load_core	src/stb_image.h	/^static stbi_uc *stbi__pic_load_core(stbi__context *s,int width,int height,int *comp, stbi_uc *result)$/;"	f
stbi__pic_packet	src/stb_image.h	/^} stbi__pic_packet;$/;"	t	typeref:struct:__anon24
stbi__pic_test	src/stb_image.h	/^static int stbi__pic_test(stbi__context *s)$/;"	f
stbi__pic_test_core	src/stb_image.h	/^static int stbi__pic_test_core(stbi__context *s)$/;"	f
stbi__png	src/stb_image.h	/^} stbi__png;$/;"	t	typeref:struct:__anon22
stbi__png_info	src/stb_image.h	/^static int stbi__png_info(stbi__context *s, int *x, int *y, int *comp)$/;"	f
stbi__png_info_raw	src/stb_image.h	/^static int stbi__png_info_raw(stbi__png *p, int *x, int *y, int *comp)$/;"	f
stbi__png_load	src/stb_image.h	/^static unsigned char *stbi__png_load(stbi__context *s, int *x, int *y, int *comp, int req_comp)$/;"	f
stbi__png_test	src/stb_image.h	/^static int stbi__png_test(stbi__context *s)$/;"	f
stbi__pngchunk	src/stb_image.h	/^} stbi__pngchunk;$/;"	t	typeref:struct:__anon21
stbi__pnm_getinteger	src/stb_image.h	/^static int      stbi__pnm_getinteger(stbi__context *s, char *c)$/;"	f
stbi__pnm_info	src/stb_image.h	/^static int      stbi__pnm_info(stbi__context *s, int *x, int *y, int *comp)$/;"	f
stbi__pnm_isdigit	src/stb_image.h	/^static int      stbi__pnm_isdigit(char c)$/;"	f
stbi__pnm_isspace	src/stb_image.h	/^static int      stbi__pnm_isspace(char c)$/;"	f
stbi__pnm_load	src/stb_image.h	/^static stbi_uc *stbi__pnm_load(stbi__context *s, int *x, int *y, int *comp, int req_comp)$/;"	f
stbi__pnm_skip_whitespace	src/stb_image.h	/^static void     stbi__pnm_skip_whitespace(stbi__context *s, char *c)$/;"	f
stbi__pnm_test	src/stb_image.h	/^static int      stbi__pnm_test(stbi__context *s)$/;"	f
stbi__process_frame_header	src/stb_image.h	/^static int stbi__process_frame_header(stbi__jpeg *z, int scan)$/;"	f
stbi__process_gif_raster	src/stb_image.h	/^static stbi_uc *stbi__process_gif_raster(stbi__context *s, stbi__gif *g)$/;"	f
stbi__process_marker	src/stb_image.h	/^static int stbi__process_marker(stbi__jpeg *z, int m)$/;"	f
stbi__process_scan_header	src/stb_image.h	/^static int stbi__process_scan_header(stbi__jpeg *z)$/;"	f
stbi__psd_info	src/stb_image.h	/^static int stbi__psd_info(stbi__context *s, int *x, int *y, int *comp)$/;"	f
stbi__psd_load	src/stb_image.h	/^static stbi_uc *stbi__psd_load(stbi__context *s, int *x, int *y, int *comp, int req_comp)$/;"	f
stbi__psd_test	src/stb_image.h	/^static int stbi__psd_test(stbi__context *s)$/;"	f
stbi__readval	src/stb_image.h	/^static stbi_uc *stbi__readval(stbi__context *s, int channel, stbi_uc *dest)$/;"	f
stbi__refill_buffer	src/stb_image.h	/^static void stbi__refill_buffer(stbi__context *s)$/;"	f
stbi__resample	src/stb_image.h	/^} stbi__resample;$/;"	t	typeref:struct:__anon18
stbi__resample_row_generic	src/stb_image.h	/^static stbi_uc *stbi__resample_row_generic(stbi_uc *out, stbi_uc *in_near, stbi_uc *in_far, int w, int hs)$/;"	f
stbi__resample_row_h_2	src/stb_image.h	/^static stbi_uc*  stbi__resample_row_h_2(stbi_uc *out, stbi_uc *in_near, stbi_uc *in_far, int w, int hs)$/;"	f
stbi__resample_row_hv_2	src/stb_image.h	/^static stbi_uc *stbi__resample_row_hv_2(stbi_uc *out, stbi_uc *in_near, stbi_uc *in_far, int w, int hs)$/;"	f
stbi__resample_row_hv_2_simd	src/stb_image.h	/^static stbi_uc *stbi__resample_row_hv_2_simd(stbi_uc *out, stbi_uc *in_near, stbi_uc *in_far, int w, int hs)$/;"	f
stbi__resample_row_v_2	src/stb_image.h	/^static stbi_uc* stbi__resample_row_v_2(stbi_uc *out, stbi_uc *in_near, stbi_uc *in_far, int w, int hs)$/;"	f
stbi__rewind	src/stb_image.h	/^static void stbi__rewind(stbi__context *s)$/;"	f
stbi__setup_jpeg	src/stb_image.h	/^static void stbi__setup_jpeg(stbi__jpeg *j)$/;"	f
stbi__shiftsigned	src/stb_image.h	/^static int stbi__shiftsigned(int v, int shift, int bits)$/;"	f
stbi__skip	src/stb_image.h	/^static void stbi__skip(stbi__context *s, int n)$/;"	f
stbi__sse2_available	src/stb_image.h	/^static int stbi__sse2_available()$/;"	f
stbi__start_callbacks	src/stb_image.h	/^static void stbi__start_callbacks(stbi__context *s, stbi_io_callbacks *c, void *user)$/;"	f
stbi__start_file	src/stb_image.h	/^static void stbi__start_file(stbi__context *s, FILE *f)$/;"	f
stbi__start_mem	src/stb_image.h	/^static void stbi__start_mem(stbi__context *s, stbi_uc const *buffer, int len)$/;"	f
stbi__stdio_callbacks	src/stb_image.h	/^static stbi_io_callbacks stbi__stdio_callbacks =$/;"	v
stbi__stdio_eof	src/stb_image.h	/^static int stbi__stdio_eof(void *user)$/;"	f
stbi__stdio_read	src/stb_image.h	/^static int stbi__stdio_read(void *user, char *data, int size)$/;"	f
stbi__stdio_skip	src/stb_image.h	/^static void stbi__stdio_skip(void *user, int n)$/;"	f
stbi__tga_info	src/stb_image.h	/^static int stbi__tga_info(stbi__context *s, int *x, int *y, int *comp)$/;"	f
stbi__tga_load	src/stb_image.h	/^static stbi_uc *stbi__tga_load(stbi__context *s, int *x, int *y, int *comp, int req_comp)$/;"	f
stbi__tga_test	src/stb_image.h	/^static int stbi__tga_test(stbi__context *s)$/;"	f
stbi__uint16	src/stb_image.h	/^typedef uint16_t stbi__uint16;$/;"	t
stbi__uint16	src/stb_image.h	/^typedef unsigned short stbi__uint16;$/;"	t
stbi__uint32	src/stb_image.h	/^typedef uint32_t stbi__uint32;$/;"	t
stbi__uint32	src/stb_image.h	/^typedef unsigned int   stbi__uint32;$/;"	t
stbi__unpremultiply_on_load	src/stb_image.h	/^static int stbi__unpremultiply_on_load = 0;$/;"	v
stbi__vertically_flip_on_load	src/stb_image.h	/^static int stbi__vertically_flip_on_load = 0;$/;"	v
stbi__zbuf	src/stb_image.h	/^} stbi__zbuf;$/;"	t	typeref:struct:__anon20
stbi__zbuild_huffman	src/stb_image.h	/^static int stbi__zbuild_huffman(stbi__zhuffman *z, stbi_uc *sizelist, int num)$/;"	f
stbi__zdefault_distance	src/stb_image.h	/^static stbi_uc stbi__zdefault_length[288], stbi__zdefault_distance[32];$/;"	v
stbi__zdefault_length	src/stb_image.h	/^static stbi_uc stbi__zdefault_length[288], stbi__zdefault_distance[32];$/;"	v
stbi__zdist_base	src/stb_image.h	/^static int stbi__zdist_base[32] = { 1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,$/;"	v
stbi__zdist_extra	src/stb_image.h	/^static int stbi__zdist_extra[32] =$/;"	v
stbi__zexpand	src/stb_image.h	/^static int stbi__zexpand(stbi__zbuf *z, char *zout, int n)  \/\/ need to make room for n bytes$/;"	f
stbi__zget8	src/stb_image.h	/^stbi_inline static stbi_uc stbi__zget8(stbi__zbuf *z)$/;"	f
stbi__zhuffman	src/stb_image.h	/^} stbi__zhuffman;$/;"	t	typeref:struct:__anon19
stbi__zhuffman_decode	src/stb_image.h	/^stbi_inline static int stbi__zhuffman_decode(stbi__zbuf *a, stbi__zhuffman *z)$/;"	f
stbi__zhuffman_decode_slowpath	src/stb_image.h	/^static int stbi__zhuffman_decode_slowpath(stbi__zbuf *a, stbi__zhuffman *z)$/;"	f
stbi__zlength_base	src/stb_image.h	/^static int stbi__zlength_base[31] = {$/;"	v
stbi__zlength_extra	src/stb_image.h	/^static int stbi__zlength_extra[31]=$/;"	v
stbi__zreceive	src/stb_image.h	/^stbi_inline static unsigned int stbi__zreceive(stbi__zbuf *z, int n)$/;"	f
stbi_convert_iphone_png_to_rgb	src/stb_image.h	/^STBIDEF void stbi_convert_iphone_png_to_rgb(int flag_true_if_should_convert)$/;"	f
stbi_failure_reason	src/stb_image.h	/^STBIDEF const char *stbi_failure_reason(void)$/;"	f
stbi_hdr_to_ldr_gamma	src/stb_image.h	/^STBIDEF void   stbi_hdr_to_ldr_gamma(float gamma) { stbi__h2l_gamma_i = 1\/gamma; }$/;"	f
stbi_hdr_to_ldr_scale	src/stb_image.h	/^STBIDEF void   stbi_hdr_to_ldr_scale(float scale) { stbi__h2l_scale_i = 1\/scale; }$/;"	f
stbi_image_free	src/stb_image.h	/^STBIDEF void stbi_image_free(void *retval_from_stbi_load)$/;"	f
stbi_info	src/stb_image.h	/^STBIDEF int stbi_info(char const *filename, int *x, int *y, int *comp)$/;"	f
stbi_info_from_callbacks	src/stb_image.h	/^STBIDEF int stbi_info_from_callbacks(stbi_io_callbacks const *c, void *user, int *x, int *y, int *comp)$/;"	f
stbi_info_from_file	src/stb_image.h	/^STBIDEF int stbi_info_from_file(FILE *f, int *x, int *y, int *comp)$/;"	f
stbi_info_from_memory	src/stb_image.h	/^STBIDEF int stbi_info_from_memory(stbi_uc const *buffer, int len, int *x, int *y, int *comp)$/;"	f
stbi_inline	src/stb_image.h	581;"	d
stbi_inline	src/stb_image.h	583;"	d
stbi_inline	src/stb_image.h	586;"	d
stbi_io_callbacks	src/stb_image.h	/^} stbi_io_callbacks;$/;"	t	typeref:struct:__anon12
stbi_is_hdr	src/stb_image.h	/^STBIDEF int      stbi_is_hdr          (char const *filename)$/;"	f
stbi_is_hdr_from_callbacks	src/stb_image.h	/^STBIDEF int      stbi_is_hdr_from_callbacks(stbi_io_callbacks const *clbk, void *user)$/;"	f
stbi_is_hdr_from_file	src/stb_image.h	/^STBIDEF int      stbi_is_hdr_from_file(FILE *f)$/;"	f
stbi_is_hdr_from_memory	src/stb_image.h	/^STBIDEF int stbi_is_hdr_from_memory(stbi_uc const *buffer, int len)$/;"	f
stbi_ldr_to_hdr_gamma	src/stb_image.h	/^STBIDEF void   stbi_ldr_to_hdr_gamma(float gamma) { stbi__l2h_gamma = gamma; }$/;"	f
stbi_ldr_to_hdr_scale	src/stb_image.h	/^STBIDEF void   stbi_ldr_to_hdr_scale(float scale) { stbi__l2h_scale = scale; }$/;"	f
stbi_load	src/stb_image.h	/^STBIDEF stbi_uc *stbi_load(char const *filename, int *x, int *y, int *comp, int req_comp)$/;"	f
stbi_load_from_callbacks	src/stb_image.h	/^STBIDEF stbi_uc *stbi_load_from_callbacks(stbi_io_callbacks const *clbk, void *user, int *x, int *y, int *comp, int req_comp)$/;"	f
stbi_load_from_file	src/stb_image.h	/^STBIDEF stbi_uc *stbi_load_from_file(FILE *f, int *x, int *y, int *comp, int req_comp)$/;"	f
stbi_load_from_memory	src/stb_image.h	/^STBIDEF stbi_uc *stbi_load_from_memory(stbi_uc const *buffer, int len, int *x, int *y, int *comp, int req_comp)$/;"	f
stbi_loadf	src/stb_image.h	/^STBIDEF float *stbi_loadf(char const *filename, int *x, int *y, int *comp, int req_comp)$/;"	f
stbi_loadf_from_callbacks	src/stb_image.h	/^STBIDEF float *stbi_loadf_from_callbacks(stbi_io_callbacks const *clbk, void *user, int *x, int *y, int *comp, int req_comp)$/;"	f
stbi_loadf_from_file	src/stb_image.h	/^STBIDEF float *stbi_loadf_from_file(FILE *f, int *x, int *y, int *comp, int req_comp)$/;"	f
stbi_loadf_from_memory	src/stb_image.h	/^STBIDEF float *stbi_loadf_from_memory(stbi_uc const *buffer, int len, int *x, int *y, int *comp, int req_comp)$/;"	f
stbi_lrot	src/stb_image.h	617;"	d
stbi_lrot	src/stb_image.h	619;"	d
stbi_set_flip_vertically_on_load	src/stb_image.h	/^STBIDEF void stbi_set_flip_vertically_on_load(int flag_true_if_should_flip)$/;"	f
stbi_set_unpremultiply_on_load	src/stb_image.h	/^STBIDEF void stbi_set_unpremultiply_on_load(int flag_true_if_should_unpremultiply)$/;"	f
stbi_uc	src/stb_image.h	/^typedef unsigned char stbi_uc;$/;"	t
stbi_write_bmp	src/stb_image_write.h	/^int stbi_write_bmp(char const *filename, int x, int y, int comp, const void *data)$/;"	f
stbi_write_hdr	src/stb_image_write.h	/^int stbi_write_hdr(char const *filename, int x, int y, int comp, const float *data)$/;"	f
stbi_write_png	src/stb_image_write.h	/^int stbi_write_png(char const *filename, int x, int y, int comp, const void *data, int stride_bytes)$/;"	f
stbi_write_png_to_mem	src/stb_image_write.h	/^unsigned char *stbi_write_png_to_mem(unsigned char *pixels, int stride_bytes, int x, int y, int n, int *out_len)$/;"	f
stbi_write_tga	src/stb_image_write.h	/^int stbi_write_tga(char const *filename, int x, int y, int comp, const void *data)$/;"	f
stbi_zlib_compress	src/stb_image_write.h	/^unsigned char * stbi_zlib_compress(unsigned char *data, int data_len, int *out_len, int quality)$/;"	f
stbi_zlib_decode_buffer	src/stb_image.h	/^STBIDEF int stbi_zlib_decode_buffer(char *obuffer, int olen, char const *ibuffer, int ilen)$/;"	f
stbi_zlib_decode_malloc	src/stb_image.h	/^STBIDEF char *stbi_zlib_decode_malloc(char const *buffer, int len, int *outlen)$/;"	f
stbi_zlib_decode_malloc_guesssize	src/stb_image.h	/^STBIDEF char *stbi_zlib_decode_malloc_guesssize(const char *buffer, int len, int initial_size, int *outlen)$/;"	f
stbi_zlib_decode_malloc_guesssize_headerflag	src/stb_image.h	/^STBIDEF char *stbi_zlib_decode_malloc_guesssize_headerflag(const char *buffer, int len, int initial_size, int *outlen, int parse_header)$/;"	f
stbi_zlib_decode_noheader_buffer	src/stb_image.h	/^STBIDEF int stbi_zlib_decode_noheader_buffer(char *obuffer, int olen, const char *ibuffer, int ilen)$/;"	f
stbi_zlib_decode_noheader_malloc	src/stb_image.h	/^STBIDEF char *stbi_zlib_decode_noheader_malloc(char const *buffer, int len, int *outlen)$/;"	f
stbiw__ZHASH	src/stb_image_write.h	467;"	d
stbiw__crc32	src/stb_image_write.h	/^unsigned int stbiw__crc32(unsigned char *buffer, int len)$/;"	f
stbiw__linear_to_rgbe	src/stb_image_write.h	/^void stbiw__linear_to_rgbe(unsigned char *rgbe, float *linear)$/;"	f
stbiw__max	src/stb_image_write.h	243;"	d
stbiw__paeth	src/stb_image_write.h	/^static unsigned char stbiw__paeth(int a, int b, int c)$/;"	f
stbiw__sbcount	src/stb_image_write.h	399;"	d
stbiw__sbfree	src/stb_image_write.h	400;"	d
stbiw__sbgrow	src/stb_image_write.h	396;"	d
stbiw__sbgrowf	src/stb_image_write.h	/^static void *stbiw__sbgrowf(void **arr, int increment, int itemsize)$/;"	f
stbiw__sbm	src/stb_image_write.h	391;"	d
stbiw__sbmaybegrow	src/stb_image_write.h	395;"	d
stbiw__sbn	src/stb_image_write.h	392;"	d
stbiw__sbneedgrow	src/stb_image_write.h	394;"	d
stbiw__sbpush	src/stb_image_write.h	398;"	d
stbiw__sbraw	src/stb_image_write.h	390;"	d
stbiw__wp32	src/stb_image_write.h	587;"	d
stbiw__wpcrc	src/stb_image_write.h	/^static void stbiw__wpcrc(unsigned char **data, int len)$/;"	f
stbiw__wpng4	src/stb_image_write.h	586;"	d
stbiw__wptag	src/stb_image_write.h	588;"	d
stbiw__write_dump_data	src/stb_image_write.h	/^void stbiw__write_dump_data(FILE *f, int length, unsigned char *data)$/;"	f
stbiw__write_hdr_scanline	src/stb_image_write.h	/^void stbiw__write_hdr_scanline(FILE *f, int width, int comp, unsigned char *scratch, const float *scanline)$/;"	f
stbiw__write_run_data	src/stb_image_write.h	/^void stbiw__write_run_data(FILE *f, int length, unsigned char databyte)$/;"	f
stbiw__zhash	src/stb_image_write.h	/^static unsigned int stbiw__zhash(unsigned char *data)$/;"	f
stbiw__zlib_add	src/stb_image_write.h	456;"	d
stbiw__zlib_bitrev	src/stb_image_write.h	/^static int stbiw__zlib_bitrev(int code, int codebits)$/;"	f
stbiw__zlib_countm	src/stb_image_write.h	/^static unsigned int stbiw__zlib_countm(unsigned char *a, unsigned char *b, int limit)$/;"	f
stbiw__zlib_flush	src/stb_image_write.h	455;"	d
stbiw__zlib_flushf	src/stb_image_write.h	/^static unsigned char *stbiw__zlib_flushf(unsigned char *data, unsigned int *bitbuffer, int *bitcount)$/;"	f
stbiw__zlib_huff	src/stb_image_write.h	464;"	d
stbiw__zlib_huff1	src/stb_image_write.h	460;"	d
stbiw__zlib_huff2	src/stb_image_write.h	461;"	d
stbiw__zlib_huff3	src/stb_image_write.h	462;"	d
stbiw__zlib_huff4	src/stb_image_write.h	463;"	d
stbiw__zlib_huffa	src/stb_image_write.h	458;"	d
stbiw__zlib_huffb	src/stb_image_write.h	465;"	d
stbiw_uint32	src/stb_image_write.h	/^typedef unsigned int stbiw_uint32;$/;"	t
stddev	/usr/local/cuda/include/curand_discrete.h	/^    double stddev;$/;"	m	struct:curandDiscreteDistribution_st
stddev	/usr/local/cuda/include/curand_globals.h	/^    double stddev;$/;"	m	struct:normal_args_double_st
stddev	/usr/local/cuda/include/curand_globals.h	/^    float stddev;$/;"	m	struct:normal_args_st
step	src/stb_image.h	/^   int parse, step;$/;"	m	struct:__anon26
stop_timer	src/common.c	/^void stop_timer(Timer *timer) {$/;"	f
store_ref_base_pic_flag	/usr/local/cuda/include/dynlink_cuviddec.h	/^    unsigned char store_ref_base_pic_flag;$/;"	m	struct:_CUVIDH264SVCEXT
str	/usr/local/cuda/include/nvToolsExtMeta.h	/^typedef struct NvtxDomainRegisterString  { nvtxDomainHandle_t domain; const void* str; } NvtxDomainRegisterString;$/;"	m	struct:NvtxDomainRegisterString
stream	/usr/local/cuda/include/driver_types.h	/^    cudaStream_t stream; \/**< Stream identifier *\/$/;"	m	struct:cudaLaunchParams
streamPrioritiesSupported	/usr/local/cuda/include/driver_types.h	/^    int    streamPrioritiesSupported;  \/**< Device supports stream priorities *\/$/;"	m	struct:cudaDeviceProp
stride	src/binary_convolution.h	/^    int stride;$/;"	m	struct:__anon1
stringCount	/usr/local/cuda/include/cufftXt.h	/^    long long int stringCount;$/;"	m	struct:cufftXt1dFactors_t
stringLength	/usr/local/cuda/include/cufftXt.h	/^    long long int stringLength;$/;"	m	struct:cufftXt1dFactors_t
stringMask	/usr/local/cuda/include/cufftXt.h	/^    long long int stringMask;$/;"	m	struct:cufftXt1dFactors_t
stringShift	/usr/local/cuda/include/cufftXt.h	/^    int stringShift;$/;"	m	struct:cufftXt1dFactors_t
string_to_layer_type	src/parser.c	/^LAYER_TYPE string_to_layer_type(char * type)$/;"	f
strip	src/utils.c	/^void strip(char *s)$/;"	f
strip_char	src/utils.c	/^void strip_char(char *s, char bad)$/;"	f
strong_intra_smoothing_enabled_flag	/usr/local/cuda/include/dynlink_cuviddec.h	/^    unsigned char strong_intra_smoothing_enabled_flag;$/;"	m	struct:_CUVIDHEVCPICPARAMS
subFormat	/usr/local/cuda/include/cudalibxt.h	/^    int subFormat;              \/\/library specific enumerator of sub formats$/;"	m	struct:cudaLibXtDesc_t
subSamplingX	/usr/local/cuda/include/dynlink_cuviddec.h	/^    unsigned short subSamplingX : 1;$/;"	m	struct:_CUVIDVP9PICPARAMS
subSamplingY	/usr/local/cuda/include/dynlink_cuviddec.h	/^    unsigned short subSamplingY : 1;$/;"	m	struct:_CUVIDVP9PICPARAMS
substringLength	/usr/local/cuda/include/cufftXt.h	/^    long long int substringLength;$/;"	m	struct:cufftXt1dFactors_t
substringMask	/usr/local/cuda/include/cufftXt.h	/^    long long int substringMask;$/;"	m	struct:cufftXt1dFactors_t
substringShift	/usr/local/cuda/include/cufftXt.h	/^    int substringShift;$/;"	m	struct:cufftXt1dFactors_t
succ_high	src/stb_image.h	/^   int            succ_high;$/;"	m	struct:__anon16
succ_low	src/stb_image.h	/^   int            succ_low;$/;"	m	struct:__anon16
suffix	src/stb_image.h	/^   stbi_uc suffix;$/;"	m	struct:__anon25
sum_array	src/utils.c	/^float sum_array(float *a, int n)$/;"	f
surf1DLayeredread	/usr/local/cuda/include/surface_functions.h	/^static __device__  __forceinline__ void surf1DLayeredread(T *res, surface<void, cudaSurfaceType1DLayered> surf, int x, int  layer, int s, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)$/;"	f
surf1DLayeredread	/usr/local/cuda/include/surface_functions.h	/^static __device__ __forceinline__  T surf1DLayeredread(surface<void, cudaSurfaceType1DLayered> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)$/;"	f
surf1DLayeredread	/usr/local/cuda/include/surface_functions.h	/^static __device__ __forceinline__ void surf1DLayeredread(T *res, surface<void, cudaSurfaceType1DLayered> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)$/;"	f
surf1DLayeredread	/usr/local/cuda/include/surface_indirect_functions.h	/^static __device__ T surf1DLayeredread(cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)$/;"	f
surf1DLayeredread	/usr/local/cuda/include/surface_indirect_functions.h	/^static __device__ typename  __nv_isurf_trait<T>::type  surf1DLayeredread(T *ptr, cudaSurfaceObject_t obj, int x, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)$/;"	f
surf1DLayeredwrite	/usr/local/cuda/include/surface_functions.h	/^static __device__ __forceinline__ void surf1DLayeredwrite(T val, surface<void, cudaSurfaceType1DLayered> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)$/;"	f
surf1DLayeredwrite	/usr/local/cuda/include/surface_functions.h	/^static __device__ __forceinline__ void surf1DLayeredwrite(T val, surface<void, cudaSurfaceType1DLayered> surf, int x, int layer, int s, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)$/;"	f
surf1DLayeredwrite	/usr/local/cuda/include/surface_indirect_functions.h	/^static __device__ typename __nv_isurf_trait<T>::type surf1DLayeredwrite(T val, cudaSurfaceObject_t obj, int x, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)$/;"	f
surf1Dread	/usr/local/cuda/include/surface_functions.h	/^static __device__  __forceinline__ void surf1Dread(T *res, surface<void, cudaSurfaceType1D> surf, int x, int s, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)$/;"	f
surf1Dread	/usr/local/cuda/include/surface_functions.h	/^static __device__ __forceinline__  T surf1Dread(surface<void, cudaSurfaceType1D> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)$/;"	f
surf1Dread	/usr/local/cuda/include/surface_functions.h	/^static __device__ __forceinline__ void surf1Dread(T *res, surface<void, cudaSurfaceType1D> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)$/;"	f
surf1Dread	/usr/local/cuda/include/surface_indirect_functions.h	/^static __device__ T surf1Dread(cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)$/;"	f
surf1Dread	/usr/local/cuda/include/surface_indirect_functions.h	/^static __device__ typename __nv_isurf_trait<T>::type  surf1Dread(T *ptr, cudaSurfaceObject_t obj, int x, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)$/;"	f
surf1Dwrite	/usr/local/cuda/include/surface_functions.h	/^static __device__ __forceinline__ void surf1Dwrite(T val, surface<void, cudaSurfaceType1D> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)$/;"	f
surf1Dwrite	/usr/local/cuda/include/surface_functions.h	/^static __device__ __forceinline__ void surf1Dwrite(T val, surface<void, cudaSurfaceType1D> surf, int x, int s, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)$/;"	f
surf1Dwrite	/usr/local/cuda/include/surface_indirect_functions.h	/^static __device__ typename __nv_isurf_trait<T>::type surf1Dwrite(T val, cudaSurfaceObject_t obj, int x, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)$/;"	f
surf2DLayeredread	/usr/local/cuda/include/surface_functions.h	/^static __device__  __forceinline__ void surf2DLayeredread(T *res, surface<void, cudaSurfaceType2DLayered> surf, int x,  int y, int  layer, int s, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)$/;"	f
surf2DLayeredread	/usr/local/cuda/include/surface_functions.h	/^static __device__ __forceinline__  T surf2DLayeredread(surface<void, cudaSurfaceType2DLayered> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)$/;"	f
surf2DLayeredread	/usr/local/cuda/include/surface_functions.h	/^static __device__ __forceinline__ void surf2DLayeredread(T *res, surface<void, cudaSurfaceType2DLayered> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)$/;"	f
surf2DLayeredread	/usr/local/cuda/include/surface_indirect_functions.h	/^static __device__  typename __nv_isurf_trait<T>::type  surf2DLayeredread(T *ptr, cudaSurfaceObject_t obj, int x, int y, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)$/;"	f
surf2DLayeredread	/usr/local/cuda/include/surface_indirect_functions.h	/^static __device__ T surf2DLayeredread(cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)$/;"	f
surf2DLayeredwrite	/usr/local/cuda/include/surface_functions.h	/^static __device__ __forceinline__ void surf2DLayeredwrite(T val, surface<void, cudaSurfaceType2DLayered> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)$/;"	f
surf2DLayeredwrite	/usr/local/cuda/include/surface_functions.h	/^static __device__ __forceinline__ void surf2DLayeredwrite(T val, surface<void, cudaSurfaceType2DLayered> surf, int x, int y, int layer, int s, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)$/;"	f
surf2DLayeredwrite	/usr/local/cuda/include/surface_indirect_functions.h	/^static __device__ typename __nv_isurf_trait<T>::type surf2DLayeredwrite(T val, cudaSurfaceObject_t obj, int x, int y, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)$/;"	f
surf2Dread	/usr/local/cuda/include/surface_functions.h	/^static __device__  __forceinline__ void surf2Dread(T *res, surface<void, cudaSurfaceType2D> surf, int x, int y, int s, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)$/;"	f
surf2Dread	/usr/local/cuda/include/surface_functions.h	/^static __device__ __forceinline__  T surf2Dread(surface<void, cudaSurfaceType2D> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)$/;"	f
surf2Dread	/usr/local/cuda/include/surface_functions.h	/^static __device__ __forceinline__ void surf2Dread(T *res, surface<void, cudaSurfaceType2D> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)$/;"	f
surf2Dread	/usr/local/cuda/include/surface_indirect_functions.h	/^static __device__ T surf2Dread(cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)$/;"	f
surf2Dread	/usr/local/cuda/include/surface_indirect_functions.h	/^static __device__ typename __nv_isurf_trait<T>::type  surf2Dread(T *ptr, cudaSurfaceObject_t obj, int x, int y, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)$/;"	f
surf2Dwrite	/usr/local/cuda/include/surface_functions.h	/^static __device__ __forceinline__ void surf2Dwrite(T val, surface<void, cudaSurfaceType2D> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)$/;"	f
surf2Dwrite	/usr/local/cuda/include/surface_functions.h	/^static __device__ __forceinline__ void surf2Dwrite(T val, surface<void, cudaSurfaceType2D> surf, int x, int y, int s, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)$/;"	f
surf2Dwrite	/usr/local/cuda/include/surface_indirect_functions.h	/^static __device__ typename __nv_isurf_trait<T>::type surf2Dwrite(T val, cudaSurfaceObject_t obj, int x, int y, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)$/;"	f
surf3Dread	/usr/local/cuda/include/surface_functions.h	/^static __device__  __forceinline__ void surf3Dread(T *res, surface<void, cudaSurfaceType3D> surf, int x, int y, int z, int s, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)$/;"	f
surf3Dread	/usr/local/cuda/include/surface_functions.h	/^static __device__ __forceinline__  T surf3Dread(surface<void, cudaSurfaceType3D> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)$/;"	f
surf3Dread	/usr/local/cuda/include/surface_functions.h	/^static __device__ __forceinline__ void surf3Dread(T *res, surface<void, cudaSurfaceType3D> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)$/;"	f
surf3Dread	/usr/local/cuda/include/surface_indirect_functions.h	/^static __device__ T surf3Dread(cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)$/;"	f
surf3Dread	/usr/local/cuda/include/surface_indirect_functions.h	/^static __device__ typename  __nv_isurf_trait<T>::type  surf3Dread(T *ptr, cudaSurfaceObject_t obj, int x, int y, int z, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)$/;"	f
surf3Dwrite	/usr/local/cuda/include/surface_functions.h	/^static __device__ __forceinline__ void surf3Dwrite(T val, surface<void, cudaSurfaceType3D> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)$/;"	f
surf3Dwrite	/usr/local/cuda/include/surface_functions.h	/^static __device__ __forceinline__ void surf3Dwrite(T val, surface<void, cudaSurfaceType3D> surf, int x, int y, int z, int s, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)$/;"	f
surf3Dwrite	/usr/local/cuda/include/surface_indirect_functions.h	/^static __device__ typename __nv_isurf_trait<T>::type surf3Dwrite(T val, cudaSurfaceObject_t obj, int x, int y, int z, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)$/;"	f
surfCubemapLayeredread	/usr/local/cuda/include/surface_functions.h	/^static __device__  __forceinline__ void surfCubemapLayeredread(T *res, surface<void, cudaSurfaceTypeCubemapLayered> surf, int x,  int y, int  layerFace, int s, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)$/;"	f
surfCubemapLayeredread	/usr/local/cuda/include/surface_functions.h	/^static __device__ __forceinline__  T surfCubemapLayeredread(surface<void, cudaSurfaceTypeCubemapLayered> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)$/;"	f
surfCubemapLayeredread	/usr/local/cuda/include/surface_functions.h	/^static __device__ __forceinline__ void surfCubemapLayeredread(T *res, surface<void, cudaSurfaceTypeCubemapLayered> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)$/;"	f
surfCubemapLayeredread	/usr/local/cuda/include/surface_indirect_functions.h	/^static __device__  typename __nv_isurf_trait<T>::type  surfCubemapLayeredread(T *ptr, cudaSurfaceObject_t obj, int x, int y, int layerface, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)$/;"	f
surfCubemapLayeredread	/usr/local/cuda/include/surface_indirect_functions.h	/^static __device__ T surfCubemapLayeredread(cudaSurfaceObject_t surfObject, int x, int y, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)$/;"	f
surfCubemapLayeredwrite	/usr/local/cuda/include/surface_functions.h	/^static __device__ __forceinline__ void surfCubemapLayeredwrite(T val, surface<void, cudaSurfaceTypeCubemapLayered> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)$/;"	f
surfCubemapLayeredwrite	/usr/local/cuda/include/surface_functions.h	/^static __device__ __forceinline__ void surfCubemapLayeredwrite(T val, surface<void, cudaSurfaceTypeCubemapLayered> surf, int x, int y, int layerFace, int s, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)$/;"	f
surfCubemapLayeredwrite	/usr/local/cuda/include/surface_indirect_functions.h	/^static __device__ typename __nv_isurf_trait<T>::type surfCubemapLayeredwrite(T val, cudaSurfaceObject_t obj, int x, int y, int layerface, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)$/;"	f
surfCubemapread	/usr/local/cuda/include/surface_functions.h	/^static __device__  __forceinline__ void surfCubemapread(T *res, surface<void, cudaSurfaceTypeCubemap> surf, int x,  int y, int  face, int s, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)$/;"	f
surfCubemapread	/usr/local/cuda/include/surface_functions.h	/^static __device__ __forceinline__  T surfCubemapread(surface<void, cudaSurfaceTypeCubemap> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)$/;"	f
surfCubemapread	/usr/local/cuda/include/surface_functions.h	/^static __device__ __forceinline__ void surfCubemapread(T *res, surface<void, cudaSurfaceTypeCubemap> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)$/;"	f
surfCubemapread	/usr/local/cuda/include/surface_indirect_functions.h	/^static __device__ T surfCubemapread(cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)$/;"	f
surfCubemapread	/usr/local/cuda/include/surface_indirect_functions.h	/^static __device__ typename __nv_isurf_trait<T>::type  surfCubemapread(T *ptr, cudaSurfaceObject_t obj, int x, int y, int face, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)$/;"	f
surfCubemapwrite	/usr/local/cuda/include/surface_functions.h	/^static __device__ __forceinline__ void surfCubemapwrite(T val, surface<void, cudaSurfaceTypeCubemap> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)$/;"	f
surfCubemapwrite	/usr/local/cuda/include/surface_functions.h	/^static __device__ __forceinline__ void surfCubemapwrite(T val, surface<void, cudaSurfaceTypeCubemap> surf, int x, int y, int face, int s, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)$/;"	f
surfCubemapwrite	/usr/local/cuda/include/surface_indirect_functions.h	/^static __device__ typename __nv_isurf_trait<T>::type surfCubemapwrite(T val, cudaSurfaceObject_t obj, int x, int y, int face, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)$/;"	f
surface	/usr/local/cuda/include/cuda_surface_types.h	/^  __host__ surface(struct cudaChannelFormatDesc desc)$/;"	f	struct:surface
surface	/usr/local/cuda/include/cuda_surface_types.h	/^  __host__ surface(void)$/;"	f	struct:surface
surface	/usr/local/cuda/include/cuda_surface_types.h	/^struct  __device_builtin_surface_type__  surface<void, dim> : public surfaceReference$/;"	s
surface	/usr/local/cuda/include/cuda_surface_types.h	/^struct __device_builtin_surface_type__ surface : public surfaceReference$/;"	s
surfaceAlignment	/usr/local/cuda/include/driver_types.h	/^    size_t surfaceAlignment;           \/**< Alignment requirements for surfaces *\/$/;"	m	struct:cudaDeviceProp
surfaceReference	/usr/local/cuda/include/surface_types.h	/^struct __device_builtin__ surfaceReference$/;"	s
svcext	/usr/local/cuda/include/dynlink_cuviddec.h	/^        CUVIDH264SVCEXT svcext;$/;"	m	union:_CUVIDH264PICPARAMS::__anon117
swap_binary	src/convolutional_layer.c	/^void swap_binary(convolutional_layer *l)$/;"	f
syevjInfo_t	/usr/local/cuda/include/cusolverDn.h	/^typedef struct syevjInfo *syevjInfo_t;$/;"	t	typeref:struct:syevjInfo
sync	/usr/local/cuda/include/cooperative_groups.h	/^    _CG_QUALIFIER void sync() const {$/;"	f	class:__thread_block_tile_base
sync	/usr/local/cuda/include/cooperative_groups.h	/^    _CG_QUALIFIER void sync() const {$/;"	f	class:coalesced_group
sync	/usr/local/cuda/include/cooperative_groups.h	/^    _CG_QUALIFIER void sync() const {$/;"	f	class:grid_group
sync	/usr/local/cuda/include/cooperative_groups.h	/^    _CG_QUALIFIER void sync() const {$/;"	f	class:multi_grid_group
sync	/usr/local/cuda/include/cooperative_groups.h	/^    _CG_QUALIFIER void sync() const {$/;"	f	class:thread_block
sync	/usr/local/cuda/include/cooperative_groups.h	/^_CG_QUALIFIER void thread_group::sync() const$/;"	f	class:thread_group
sync	/usr/local/cuda/include/cooperative_groups.h	/^template <class GroupT> _CG_QUALIFIER void sync(GroupT const &g)$/;"	f
sync	/usr/local/cuda/include/cooperative_groups_helpers.h	/^        _CG_STATIC_QUALIFIER void sync()$/;"	f	namespace:__internal::cta
sync	/usr/local/cuda/include/cooperative_groups_helpers.h	/^        _CG_STATIC_QUALIFIER void sync(const unsigned long long handle)$/;"	f	namespace:__internal::grid
sync	/usr/local/cuda/include/cooperative_groups_helpers.h	/^        _CG_STATIC_QUALIFIER void sync(const unsigned long long handle)$/;"	f	namespace:__internal::multi_grid
syncmarker	/usr/local/cuda/include/dynlink_cuviddec.h	/^    int syncmarker;$/;"	m	struct:_CUVIDVC1PICPARAMS
syncthreads_and	/usr/local/cuda/include/sm_20_intrinsics.hpp	/^__SM_20_INTRINSICS_DECL__ bool syncthreads_and(bool pred)$/;"	f
syncthreads_count	/usr/local/cuda/include/sm_20_intrinsics.hpp	/^__SM_20_INTRINSICS_DECL__ int syncthreads_count(bool pred)$/;"	f
syncthreads_or	/usr/local/cuda/include/sm_20_intrinsics.hpp	/^__SM_20_INTRINSICS_DECL__ bool syncthreads_or(bool pred)$/;"	f
tag	/usr/local/cuda/include/nvgraph.h	/^  nvgraphTag_t tag;$/;"	m	struct:nvgraphCOOTopology32I_st
tan	/usr/local/cuda/include/math_functions.hpp	/^__host__ __device__ __cudart_builtin__ float     tan(float in)           { return tanf(in); }$/;"	f
tanh	/usr/local/cuda/include/math_functions.hpp	/^__host__ __device__ __cudart_builtin__ float     tanh(float in)          { return tanhf(in); }$/;"	f
tanh_activate	src/activations.h	/^static inline float tanh_activate(float x){return (exp(2*x)-1)\/(exp(2*x)+1);}$/;"	f
tanh_gradient	src/activations.h	/^static inline float tanh_gradient(float x){return 1-x*x;}$/;"	f
target_rect	/usr/local/cuda/include/dynlink_cuviddec.h	/^    } target_rect;$/;"	m	struct:_CUVIDDECODECREATEINFO	typeref:struct:_CUVIDDECODECREATEINFO::__anon115
tbl	/usr/local/cuda/include/curand_mtgp32.h	/^    unsigned int tbl[16];		\/*< a small matrix. *\/$/;"	m	struct:mtgp32_params_fast
tccDriver	/usr/local/cuda/include/driver_types.h	/^    int    tccDriver;                  \/**< 1 if device is a Tesla device using TCC driver, 0 otherwise *\/$/;"	m	struct:cudaDeviceProp
tcoeff_level_prediction_flag	/usr/local/cuda/include/dynlink_cuviddec.h	/^    unsigned char tcoeff_level_prediction_flag;$/;"	m	struct:_CUVIDH264SVCEXT
tcuArray3DCreate	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^typedef CUresult  CUDAAPI tcuArray3DCreate(CUarray *pHandle, const CUDA_ARRAY3D_DESCRIPTOR *pAllocateArray);$/;"	t
tcuArray3DGetDescriptor	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^typedef CUresult  CUDAAPI tcuArray3DGetDescriptor(CUDA_ARRAY3D_DESCRIPTOR *pArrayDescriptor, CUarray hArray);$/;"	t
tcuArrayCreate	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^typedef CUresult  CUDAAPI tcuArrayCreate(CUarray *pHandle, const CUDA_ARRAY_DESCRIPTOR *pAllocateArray);$/;"	t
tcuArrayDestroy	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^typedef CUresult  CUDAAPI tcuArrayDestroy(CUarray hArray);$/;"	t
tcuArrayGetDescriptor	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^typedef CUresult  CUDAAPI tcuArrayGetDescriptor(CUDA_ARRAY_DESCRIPTOR *pArrayDescriptor, CUarray hArray);$/;"	t
tcuCtxAttach	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^typedef CUresult  CUDAAPI tcuCtxAttach(CUcontext *pctx, unsigned int flags);$/;"	t
tcuCtxCreate	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^typedef CUresult  CUDAAPI tcuCtxCreate(CUcontext *pctx, unsigned int flags, CUdevice dev);$/;"	t
tcuCtxDestroy	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^typedef CUresult  CUDAAPI tcuCtxDestroy(CUcontext ctx);$/;"	t
tcuCtxDetach	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^typedef CUresult  CUDAAPI tcuCtxDetach(CUcontext ctx);$/;"	t
tcuCtxGetCurrent	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^typedef CUresult  CUDAAPI tcuCtxGetCurrent(CUcontext *pctx);$/;"	t
tcuCtxGetDevice	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^typedef CUresult  CUDAAPI tcuCtxGetDevice(CUdevice *device);$/;"	t
tcuCtxGetLimit	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^typedef CUresult CUDAAPI tcuCtxGetLimit(size_t *pvalue, CUlimit limit);$/;"	t
tcuCtxPopCurrent	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^typedef CUresult  CUDAAPI tcuCtxPopCurrent(CUcontext *pctx);$/;"	t
tcuCtxPushCurrent	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^typedef CUresult  CUDAAPI tcuCtxPushCurrent(CUcontext ctx);$/;"	t
tcuCtxSetCurrent	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^typedef CUresult  CUDAAPI tcuCtxSetCurrent(CUcontext ctx);$/;"	t
tcuCtxSetLimit	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^typedef CUresult CUDAAPI tcuCtxSetLimit(CUlimit limit, size_t value);$/;"	t
tcuCtxSynchronize	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^typedef CUresult  CUDAAPI tcuCtxSynchronize(void);$/;"	t
tcuDeviceComputeCapability	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^typedef CUresult  CUDAAPI tcuDeviceComputeCapability(int *major, int *minor, CUdevice dev);$/;"	t
tcuDeviceGet	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^typedef CUresult  CUDAAPI tcuDeviceGet(CUdevice *device, int ordinal);$/;"	t
tcuDeviceGetAttribute	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^typedef CUresult  CUDAAPI tcuDeviceGetAttribute(int *pi, CUdevice_attribute attrib, CUdevice dev);$/;"	t
tcuDeviceGetCount	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^typedef CUresult  CUDAAPI tcuDeviceGetCount(int *count);$/;"	t
tcuDeviceGetName	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^typedef CUresult  CUDAAPI tcuDeviceGetName(char *name, int len, CUdevice dev);$/;"	t
tcuDeviceGetProperties	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^typedef CUresult  CUDAAPI tcuDeviceGetProperties(CUdevprop *prop, CUdevice dev);$/;"	t
tcuDeviceTotalMem	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    typedef CUresult  CUDAAPI tcuDeviceTotalMem(size_t *bytes, CUdevice dev);$/;"	t
tcuDeviceTotalMem	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    typedef CUresult  CUDAAPI tcuDeviceTotalMem(unsigned int *bytes, CUdevice dev);$/;"	t
tcuDriverGetVersion	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^typedef CUresult  CUDAAPI tcuDriverGetVersion(int *driverVersion);$/;"	t
tcuEventCreate	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^typedef CUresult CUDAAPI tcuEventCreate(CUevent *phEvent, unsigned int Flags);$/;"	t
tcuEventDestroy	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^typedef CUresult CUDAAPI tcuEventDestroy(CUevent hEvent);$/;"	t
tcuEventElapsedTime	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^typedef CUresult CUDAAPI tcuEventElapsedTime(float *pMilliseconds, CUevent hStart, CUevent hEnd);$/;"	t
tcuEventQuery	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^typedef CUresult CUDAAPI tcuEventQuery(CUevent hEvent);$/;"	t
tcuEventRecord	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^typedef CUresult CUDAAPI tcuEventRecord(CUevent hEvent, CUstream hStream);$/;"	t
tcuEventSynchronize	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^typedef CUresult CUDAAPI tcuEventSynchronize(CUevent hEvent);$/;"	t
tcuFuncGetAttribute	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^typedef CUresult CUDAAPI tcuFuncGetAttribute(int *pi, CUfunction_attribute attrib, CUfunction hfunc);$/;"	t
tcuFuncSetBlockShape	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^typedef CUresult CUDAAPI tcuFuncSetBlockShape(CUfunction hfunc, int x, int y, int z);$/;"	t
tcuFuncSetCacheConfig	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^typedef CUresult CUDAAPI tcuFuncSetCacheConfig(CUfunction hfunc, CUfunc_cache config);$/;"	t
tcuFuncSetSharedSize	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^typedef CUresult CUDAAPI tcuFuncSetSharedSize(CUfunction hfunc, unsigned int bytes);$/;"	t
tcuGetExportTable	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^typedef CUresult CUDAAPI tcuGetExportTable(const void **ppExportTable, const CUuuid *pExportTableId);$/;"	t
tcuGraphicsMapResources	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^typedef CUresult CUDAAPI tcuGraphicsMapResources(unsigned int count, CUgraphicsResource *resources, CUstream hStream);$/;"	t
tcuGraphicsResourceGetMappedPointer	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    typedef CUresult CUDAAPI tcuGraphicsResourceGetMappedPointer(CUdeviceptr *pDevPtr, size_t *pSize, CUgraphicsResource resource);$/;"	t
tcuGraphicsResourceGetMappedPointer	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    typedef CUresult CUDAAPI tcuGraphicsResourceGetMappedPointer(CUdeviceptr *pDevPtr, unsigned int *pSize, CUgraphicsResource resource);$/;"	t
tcuGraphicsResourceSetMapFlags	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^typedef CUresult CUDAAPI tcuGraphicsResourceSetMapFlags(CUgraphicsResource resource, unsigned int flags);$/;"	t
tcuGraphicsSubResourceGetMappedArray	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^typedef CUresult CUDAAPI tcuGraphicsSubResourceGetMappedArray(CUarray *pArray, CUgraphicsResource resource, unsigned int arrayIndex, unsigned int mipLevel);$/;"	t
tcuGraphicsUnmapResources	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^typedef CUresult CUDAAPI tcuGraphicsUnmapResources(unsigned int count, CUgraphicsResource *resources, CUstream hStream);$/;"	t
tcuGraphicsUnregisterResource	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^typedef CUresult CUDAAPI tcuGraphicsUnregisterResource(CUgraphicsResource resource);$/;"	t
tcuInit	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^typedef CUresult  CUDAAPI tcuInit(unsigned int Flags);$/;"	t
tcuLaunch	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^typedef CUresult CUDAAPI tcuLaunch(CUfunction f);$/;"	t
tcuLaunchGrid	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^typedef CUresult CUDAAPI tcuLaunchGrid(CUfunction f, int grid_width, int grid_height);$/;"	t
tcuLaunchGridAsync	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^typedef CUresult CUDAAPI tcuLaunchGridAsync(CUfunction f, int grid_width, int grid_height, CUstream hStream);$/;"	t
tcuLaunchKernel	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^typedef CUresult CUDAAPI tcuLaunchKernel(CUfunction f,$/;"	t
tcuMemAlloc	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    typedef CUresult CUDAAPI tcuMemAlloc(CUdeviceptr *dptr, size_t bytesize);$/;"	t
tcuMemAlloc	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    typedef CUresult CUDAAPI tcuMemAlloc(CUdeviceptr *dptr, unsigned int bytesize);$/;"	t
tcuMemAllocHost	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    typedef CUresult CUDAAPI tcuMemAllocHost(void **pp, size_t bytesize);$/;"	t
tcuMemAllocHost	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    typedef CUresult CUDAAPI tcuMemAllocHost(void **pp, unsigned int bytesize);$/;"	t
tcuMemAllocPitch	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    typedef CUresult CUDAAPI tcuMemAllocPitch(CUdeviceptr *dptr,$/;"	t
tcuMemFree	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^typedef CUresult CUDAAPI tcuMemFree(CUdeviceptr dptr);$/;"	t
tcuMemFreeHost	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^typedef CUresult CUDAAPI tcuMemFreeHost(void *p);$/;"	t
tcuMemGetAddressRange	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    typedef CUresult CUDAAPI tcuMemGetAddressRange(CUdeviceptr *pbase, size_t *psize, CUdeviceptr dptr);$/;"	t
tcuMemGetAddressRange	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    typedef CUresult CUDAAPI tcuMemGetAddressRange(CUdeviceptr *pbase, unsigned int *psize, CUdeviceptr dptr);$/;"	t
tcuMemGetInfo	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    typedef CUresult CUDAAPI tcuMemGetInfo(size_t *free, size_t *total);$/;"	t
tcuMemGetInfo	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    typedef CUresult CUDAAPI tcuMemGetInfo(unsigned int *free, unsigned int *total);$/;"	t
tcuMemHostAlloc	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^typedef CUresult CUDAAPI tcuMemHostAlloc(void **pp, size_t bytesize, unsigned int Flags);$/;"	t
tcuMemHostGetDevicePointer	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^typedef CUresult CUDAAPI tcuMemHostGetDevicePointer(CUdeviceptr *pdptr, void *p, unsigned int Flags);$/;"	t
tcuMemHostGetFlags	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^typedef CUresult CUDAAPI tcuMemHostGetFlags(unsigned int *pFlags, void *p);$/;"	t
tcuMemHostRegister	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^typedef CUresult CUDAAPI tcuMemHostRegister(void *p, size_t bytesize, unsigned int Flags);$/;"	t
tcuMemHostUnregister	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^typedef CUresult CUDAAPI tcuMemHostUnregister(void *p);;$/;"	t
tcuMemcpy	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^typedef CUresult CUDAAPI tcuMemcpy(CUdeviceptr dst, CUdeviceptr src, size_t ByteCount);$/;"	t
tcuMemcpy2D	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^typedef CUresult  CUDAAPI tcuMemcpy2D(const CUDA_MEMCPY2D *pCopy);$/;"	t
tcuMemcpy2DAsync	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^typedef CUresult  CUDAAPI tcuMemcpy2DAsync(const CUDA_MEMCPY2D *pCopy, CUstream hStream);$/;"	t
tcuMemcpy2DUnaligned	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^typedef CUresult  CUDAAPI tcuMemcpy2DUnaligned(const CUDA_MEMCPY2D *pCopy);$/;"	t
tcuMemcpy3D	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^typedef CUresult  CUDAAPI tcuMemcpy3D(const CUDA_MEMCPY3D *pCopy);$/;"	t
tcuMemcpy3DAsync	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^typedef CUresult  CUDAAPI tcuMemcpy3DAsync(const CUDA_MEMCPY3D *pCopy, CUstream hStream);$/;"	t
tcuMemcpyAtoA	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    typedef CUresult  CUDAAPI tcuMemcpyAtoA(CUarray dstArray, size_t dstOffset, CUarray srcArray, size_t srcOffset, size_t ByteCount);$/;"	t
tcuMemcpyAtoA	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    typedef CUresult  CUDAAPI tcuMemcpyAtoA(CUarray dstArray, unsigned int dstOffset, CUarray srcArray, unsigned int srcOffset, unsigned int ByteCount);$/;"	t
tcuMemcpyAtoD	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    typedef CUresult  CUDAAPI tcuMemcpyAtoD(CUdeviceptr dstDevice, CUarray srcArray, size_t srcOffset, size_t ByteCount);$/;"	t
tcuMemcpyAtoD	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    typedef CUresult  CUDAAPI tcuMemcpyAtoD(CUdeviceptr dstDevice, CUarray srcArray, unsigned int srcOffset, unsigned int ByteCount);$/;"	t
tcuMemcpyAtoH	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    typedef CUresult  CUDAAPI tcuMemcpyAtoH(void *dstHost, CUarray srcArray, size_t srcOffset, size_t ByteCount);$/;"	t
tcuMemcpyAtoH	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    typedef CUresult  CUDAAPI tcuMemcpyAtoH(void *dstHost, CUarray srcArray, unsigned int srcOffset, unsigned int ByteCount);$/;"	t
tcuMemcpyAtoHAsync	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    typedef CUresult  CUDAAPI tcuMemcpyAtoHAsync(void *dstHost, CUarray srcArray, size_t srcOffset,$/;"	t
tcuMemcpyAtoHAsync	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    typedef CUresult  CUDAAPI tcuMemcpyAtoHAsync(void *dstHost, CUarray srcArray, unsigned int srcOffset,$/;"	t
tcuMemcpyDtoA	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    typedef CUresult  CUDAAPI tcuMemcpyDtoA(CUarray dstArray, size_t dstOffset, CUdeviceptr srcDevice, size_t ByteCount);$/;"	t
tcuMemcpyDtoA	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    typedef CUresult  CUDAAPI tcuMemcpyDtoA(CUarray dstArray, unsigned int dstOffset, CUdeviceptr srcDevice, unsigned int ByteCount);$/;"	t
tcuMemcpyDtoD	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    typedef CUresult  CUDAAPI tcuMemcpyDtoD(CUdeviceptr dstDevice, CUdeviceptr srcDevice, size_t ByteCount);$/;"	t
tcuMemcpyDtoD	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    typedef CUresult  CUDAAPI tcuMemcpyDtoD(CUdeviceptr dstDevice, CUdeviceptr srcDevice, unsigned int ByteCount);$/;"	t
tcuMemcpyDtoDAsync	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    typedef CUresult  CUDAAPI tcuMemcpyDtoDAsync(CUdeviceptr dstDevice,$/;"	t
tcuMemcpyDtoH	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    typedef CUresult  CUDAAPI tcuMemcpyDtoH(void *dstHost, CUdeviceptr srcDevice, size_t ByteCount);$/;"	t
tcuMemcpyDtoH	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    typedef CUresult  CUDAAPI tcuMemcpyDtoH(void *dstHost, CUdeviceptr srcDevice, unsigned int ByteCount);$/;"	t
tcuMemcpyDtoHAsync	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    typedef CUresult  CUDAAPI tcuMemcpyDtoHAsync(void *dstHost,$/;"	t
tcuMemcpyHtoA	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    typedef CUresult  CUDAAPI tcuMemcpyHtoA(CUarray dstArray, size_t dstOffset, const void *srcHost, size_t ByteCount);$/;"	t
tcuMemcpyHtoA	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    typedef CUresult  CUDAAPI tcuMemcpyHtoA(CUarray dstArray, unsigned int dstOffset, const void *srcHost, unsigned int ByteCount);$/;"	t
tcuMemcpyHtoAAsync	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    typedef CUresult  CUDAAPI tcuMemcpyHtoAAsync(CUarray dstArray, size_t dstOffset,$/;"	t
tcuMemcpyHtoAAsync	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    typedef CUresult  CUDAAPI tcuMemcpyHtoAAsync(CUarray dstArray, unsigned int dstOffset,$/;"	t
tcuMemcpyHtoD	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    typedef CUresult  CUDAAPI tcuMemcpyHtoD(CUdeviceptr dstDevice, const void *srcHost, size_t ByteCount);$/;"	t
tcuMemcpyHtoD	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    typedef CUresult  CUDAAPI tcuMemcpyHtoD(CUdeviceptr dstDevice, const void *srcHost, unsigned int ByteCount);$/;"	t
tcuMemcpyHtoDAsync	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    typedef CUresult  CUDAAPI tcuMemcpyHtoDAsync(CUdeviceptr dstDevice,$/;"	t
tcuMemcpyPeer	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^typedef CUresult CUDAAPI tcuMemcpyPeer(CUdeviceptr dstDevice, CUcontext dstContext, CUdeviceptr srcDevice, CUcontext srcContext, size_t ByteCount);$/;"	t
tcuMemsetD16	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^typedef CUresult  CUDAAPI tcuMemsetD16(CUdeviceptr dstDevice, unsigned short us, unsigned int N);$/;"	t
tcuMemsetD2D16	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    typedef CUresult  CUDAAPI tcuMemsetD2D16(CUdeviceptr dstDevice, unsigned int dstPitch, unsigned short us, size_t Width, size_t Height);$/;"	t
tcuMemsetD2D16	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    typedef CUresult  CUDAAPI tcuMemsetD2D16(CUdeviceptr dstDevice, unsigned int dstPitch, unsigned short us, unsigned int Width, unsigned int Height);$/;"	t
tcuMemsetD2D32	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    typedef CUresult  CUDAAPI tcuMemsetD2D32(CUdeviceptr dstDevice, unsigned int dstPitch, unsigned int ui, size_t Width, size_t Height);$/;"	t
tcuMemsetD2D32	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    typedef CUresult  CUDAAPI tcuMemsetD2D32(CUdeviceptr dstDevice, unsigned int dstPitch, unsigned int ui, unsigned int Width, unsigned int Height);$/;"	t
tcuMemsetD2D8	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    typedef CUresult  CUDAAPI tcuMemsetD2D8(CUdeviceptr dstDevice, unsigned int dstPitch, unsigned char uc, size_t Width, size_t Height);$/;"	t
tcuMemsetD2D8	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    typedef CUresult  CUDAAPI tcuMemsetD2D8(CUdeviceptr dstDevice, unsigned int dstPitch, unsigned char uc, unsigned int Width, unsigned int Height);$/;"	t
tcuMemsetD32	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^typedef CUresult  CUDAAPI tcuMemsetD32(CUdeviceptr dstDevice, unsigned int ui, unsigned int N);$/;"	t
tcuMemsetD8	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^typedef CUresult  CUDAAPI tcuMemsetD8(CUdeviceptr dstDevice, unsigned char uc, unsigned int N);$/;"	t
tcuModuleGetFunction	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^typedef CUresult  CUDAAPI tcuModuleGetFunction(CUfunction *hfunc, CUmodule hmod, const char *name);$/;"	t
tcuModuleGetGlobal	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    typedef CUresult  CUDAAPI tcuModuleGetGlobal(CUdeviceptr *dptr, size_t *bytes, CUmodule hmod, const char *name);$/;"	t
tcuModuleGetGlobal	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    typedef CUresult  CUDAAPI tcuModuleGetGlobal(CUdeviceptr *dptr, unsigned int *bytes, CUmodule hmod, const char *name);$/;"	t
tcuModuleGetSurfRef	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^typedef CUresult  CUDAAPI tcuModuleGetSurfRef(CUsurfref *pSurfRef, CUmodule hmod, const char *name);$/;"	t
tcuModuleGetTexRef	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^typedef CUresult  CUDAAPI tcuModuleGetTexRef(CUtexref *pTexRef, CUmodule hmod, const char *name);$/;"	t
tcuModuleLoad	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^typedef CUresult  CUDAAPI tcuModuleLoad(CUmodule *module, const char *fname);$/;"	t
tcuModuleLoadData	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^typedef CUresult  CUDAAPI tcuModuleLoadData(CUmodule *module, const void *image);$/;"	t
tcuModuleLoadDataEx	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^typedef CUresult  CUDAAPI tcuModuleLoadDataEx(CUmodule *module, const void *image, unsigned int numOptions, CUjit_option *options, void **optionValues);$/;"	t
tcuModuleLoadFatBinary	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^typedef CUresult  CUDAAPI tcuModuleLoadFatBinary(CUmodule *module, const void *fatCubin);$/;"	t
tcuModuleUnload	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^typedef CUresult  CUDAAPI tcuModuleUnload(CUmodule hmod);$/;"	t
tcuParamSetSize	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^typedef CUresult  CUDAAPI tcuParamSetSize(CUfunction hfunc, unsigned int numbytes);$/;"	t
tcuParamSetTexRef	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^typedef CUresult  CUDAAPI tcuParamSetTexRef(CUfunction hfunc, int texunit, CUtexref hTexRef);$/;"	t
tcuParamSetf	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^typedef CUresult  CUDAAPI tcuParamSetf(CUfunction hfunc, int offset, float value);$/;"	t
tcuParamSeti	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^typedef CUresult  CUDAAPI tcuParamSeti(CUfunction hfunc, int offset, unsigned int value);$/;"	t
tcuParamSetv	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^typedef CUresult  CUDAAPI tcuParamSetv(CUfunction hfunc, int offset, void *ptr, unsigned int numbytes);$/;"	t
tcuStreamCreate	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^typedef CUresult CUDAAPI  tcuStreamCreate(CUstream *phStream, unsigned int Flags);$/;"	t
tcuStreamDestroy	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^typedef CUresult CUDAAPI  tcuStreamDestroy(CUstream hStream);$/;"	t
tcuStreamQuery	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^typedef CUresult CUDAAPI  tcuStreamQuery(CUstream hStream);$/;"	t
tcuStreamSynchronize	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^typedef CUresult CUDAAPI  tcuStreamSynchronize(CUstream hStream);$/;"	t
tcuSurfRefGetArray	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^typedef CUresult  CUDAAPI tcuSurfRefGetArray(CUarray *phArray, CUsurfref hSurfRef);$/;"	t
tcuSurfRefSetArray	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^typedef CUresult  CUDAAPI tcuSurfRefSetArray(CUsurfref hSurfRef, CUarray hArray, unsigned int Flags);$/;"	t
tcuTexRefCreate	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^typedef CUresult  CUDAAPI tcuTexRefCreate(CUtexref *pTexRef);$/;"	t
tcuTexRefDestroy	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^typedef CUresult  CUDAAPI tcuTexRefDestroy(CUtexref hTexRef);$/;"	t
tcuTexRefGetAddress	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^typedef CUresult  CUDAAPI tcuTexRefGetAddress(CUdeviceptr *pdptr, CUtexref hTexRef);$/;"	t
tcuTexRefGetAddressMode	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^typedef CUresult  CUDAAPI tcuTexRefGetAddressMode(CUaddress_mode *pam, CUtexref hTexRef, int dim);$/;"	t
tcuTexRefGetArray	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^typedef CUresult  CUDAAPI tcuTexRefGetArray(CUarray *phArray, CUtexref hTexRef);$/;"	t
tcuTexRefGetFilterMode	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^typedef CUresult  CUDAAPI tcuTexRefGetFilterMode(CUfilter_mode *pfm, CUtexref hTexRef);$/;"	t
tcuTexRefGetFlags	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^typedef CUresult  CUDAAPI tcuTexRefGetFlags(unsigned int *pFlags, CUtexref hTexRef);$/;"	t
tcuTexRefGetFormat	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^typedef CUresult  CUDAAPI tcuTexRefGetFormat(CUarray_format *pFormat, int *pNumChannels, CUtexref hTexRef);$/;"	t
tcuTexRefSetAddress	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    typedef CUresult  CUDAAPI tcuTexRefSetAddress(size_t *ByteOffset, CUtexref hTexRef, CUdeviceptr dptr, size_t bytes);$/;"	t
tcuTexRefSetAddress	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    typedef CUresult  CUDAAPI tcuTexRefSetAddress(unsigned int *ByteOffset, CUtexref hTexRef, CUdeviceptr dptr, unsigned int bytes);$/;"	t
tcuTexRefSetAddress2D	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    typedef CUresult  CUDAAPI tcuTexRefSetAddress2D(CUtexref hTexRef, const CUDA_ARRAY_DESCRIPTOR *desc, CUdeviceptr dptr, size_t Pitch);$/;"	t
tcuTexRefSetAddress2D	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    typedef CUresult  CUDAAPI tcuTexRefSetAddress2D(CUtexref hTexRef, const CUDA_ARRAY_DESCRIPTOR *desc, CUdeviceptr dptr, unsigned int Pitch);$/;"	t
tcuTexRefSetAddressMode	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^typedef CUresult  CUDAAPI tcuTexRefSetAddressMode(CUtexref hTexRef, int dim, CUaddress_mode am);$/;"	t
tcuTexRefSetArray	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^typedef CUresult  CUDAAPI tcuTexRefSetArray(CUtexref hTexRef, CUarray hArray, unsigned int Flags);$/;"	t
tcuTexRefSetFilterMode	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^typedef CUresult  CUDAAPI tcuTexRefSetFilterMode(CUtexref hTexRef, CUfilter_mode fm);$/;"	t
tcuTexRefSetFlags	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^typedef CUresult  CUDAAPI tcuTexRefSetFlags(CUtexref hTexRef, unsigned int Flags);$/;"	t
tcuTexRefSetFormat	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^typedef CUresult  CUDAAPI tcuTexRefSetFormat(CUtexref hTexRef, CUarray_format fmt, int NumPackedComponents);$/;"	t
tcuvidCreateDecoder	/usr/local/cuda/include/dynlink_cuviddec.h	/^typedef CUresult CUDAAPI tcuvidCreateDecoder(CUvideodecoder *phDecoder, CUVIDDECODECREATEINFO *pdci);$/;"	t
tcuvidCreateVideoParser	/usr/local/cuda/include/dynlink_nvcuvid.h	/^typedef CUresult CUDAAPI tcuvidCreateVideoParser(CUvideoparser *pObj, CUVIDPARSERPARAMS *pParams);$/;"	t
tcuvidCreateVideoSource	/usr/local/cuda/include/dynlink_nvcuvid.h	/^typedef CUresult CUDAAPI tcuvidCreateVideoSource(CUvideosource *pObj, const char *pszFileName, CUVIDSOURCEPARAMS *pParams);$/;"	t
tcuvidCreateVideoSourceW	/usr/local/cuda/include/dynlink_nvcuvid.h	/^typedef CUresult CUDAAPI tcuvidCreateVideoSourceW(CUvideosource *pObj, const wchar_t *pwszFileName, CUVIDSOURCEPARAMS *pParams);$/;"	t
tcuvidCtxLock	/usr/local/cuda/include/dynlink_cuviddec.h	/^typedef CUresult CUDAAPI tcuvidCtxLock(CUvideoctxlock lck, unsigned int reserved_flags);$/;"	t
tcuvidCtxLockCreate	/usr/local/cuda/include/dynlink_cuviddec.h	/^typedef CUresult CUDAAPI tcuvidCtxLockCreate(CUvideoctxlock *pLock, CUcontext ctx);$/;"	t
tcuvidCtxLockDestroy	/usr/local/cuda/include/dynlink_cuviddec.h	/^typedef CUresult CUDAAPI tcuvidCtxLockDestroy(CUvideoctxlock lck);$/;"	t
tcuvidCtxUnlock	/usr/local/cuda/include/dynlink_cuviddec.h	/^typedef CUresult CUDAAPI tcuvidCtxUnlock(CUvideoctxlock lck, unsigned int reserved_flags);$/;"	t
tcuvidDecodePicture	/usr/local/cuda/include/dynlink_cuviddec.h	/^typedef CUresult CUDAAPI tcuvidDecodePicture(CUvideodecoder hDecoder, CUVIDPICPARAMS *pPicParams);$/;"	t
tcuvidDestroyDecoder	/usr/local/cuda/include/dynlink_cuviddec.h	/^typedef CUresult CUDAAPI tcuvidDestroyDecoder(CUvideodecoder hDecoder);$/;"	t
tcuvidDestroyVideoParser	/usr/local/cuda/include/dynlink_nvcuvid.h	/^typedef CUresult CUDAAPI tcuvidDestroyVideoParser(CUvideoparser obj);$/;"	t
tcuvidDestroyVideoSource	/usr/local/cuda/include/dynlink_nvcuvid.h	/^typedef CUresult CUDAAPI tcuvidDestroyVideoSource(CUvideosource obj);$/;"	t
tcuvidGetSourceAudioFormat	/usr/local/cuda/include/dynlink_nvcuvid.h	/^typedef CUresult CUDAAPI tcuvidGetSourceAudioFormat(CUvideosource obj, CUAUDIOFORMAT *paudfmt, unsigned int flags);$/;"	t
tcuvidGetSourceVideoFormat	/usr/local/cuda/include/dynlink_nvcuvid.h	/^typedef CUresult CUDAAPI tcuvidGetSourceVideoFormat(CUvideosource obj, CUVIDEOFORMAT *pvidfmt, unsigned int flags);$/;"	t
tcuvidGetVideoSourceState	/usr/local/cuda/include/dynlink_nvcuvid.h	/^typedef cudaVideoState CUDAAPI tcuvidGetVideoSourceState(CUvideosource obj);$/;"	t
tcuvidMapVideoFrame	/usr/local/cuda/include/dynlink_cuviddec.h	/^typedef CUresult CUDAAPI tcuvidMapVideoFrame(CUvideodecoder hDecoder, int nPicIdx,$/;"	t
tcuvidMapVideoFrame	/usr/local/cuda/include/dynlink_cuviddec.h	764;"	d
tcuvidMapVideoFrame64	/usr/local/cuda/include/dynlink_cuviddec.h	/^typedef CUresult CUDAAPI tcuvidMapVideoFrame64(CUvideodecoder hDecoder, int nPicIdx, unsigned long long *pDevPtr,$/;"	t
tcuvidParseVideoData	/usr/local/cuda/include/dynlink_nvcuvid.h	/^typedef CUresult CUDAAPI tcuvidParseVideoData(CUvideoparser obj, CUVIDSOURCEDATAPACKET *pPacket);$/;"	t
tcuvidSetVideoSourceState	/usr/local/cuda/include/dynlink_nvcuvid.h	/^typedef CUresult CUDAAPI tcuvidSetVideoSourceState(CUvideosource obj, cudaVideoState state);$/;"	t
tcuvidUnmapVideoFrame	/usr/local/cuda/include/dynlink_cuviddec.h	/^typedef CUresult CUDAAPI tcuvidUnmapVideoFrame(CUvideodecoder hDecoder, unsigned int DevPtr);$/;"	t
tcuvidUnmapVideoFrame	/usr/local/cuda/include/dynlink_cuviddec.h	765;"	d
tcuvidUnmapVideoFrame64	/usr/local/cuda/include/dynlink_cuviddec.h	/^typedef CUresult CUDAAPI tcuvidUnmapVideoFrame64(CUvideodecoder hDecoder, unsigned long long DevPtr);$/;"	t
temper	/usr/local/cuda/include/curand_mtgp32_kernel.h	/^QUALIFIERS_MTGP32 unsigned int temper(mtgp32_kernel_params_t * k,unsigned int V, unsigned int T, int bid) {$/;"	f
temper_single	/usr/local/cuda/include/curand_mtgp32_kernel.h	/^QUALIFIERS_MTGP32 unsigned int temper_single(mtgp32_kernel_params_t * k,unsigned int V, unsigned int T, int bid) {$/;"	f
temper_tbl	/usr/local/cuda/include/curand_mtgp32.h	/^    unsigned int temper_tbl[CURAND_NUM_MTGP32_PARAMS][TBL_SIZE];$/;"	m	struct:mtgp32_kernel_params
test_box	src/box.c	/^void test_box()$/;"	f
test_dintersect	src/box.c	/^void test_dintersect()$/;"	f
test_dunion	src/box.c	/^void test_dunion()$/;"	f
test_gpu_accuracy	src/gemm.c	/^void test_gpu_accuracy(int TA, int TB, int m, int k, int n)$/;"	f
test_gpu_blas	src/gemm.c	/^int test_gpu_blas()$/;"	f
test_resize	src/image.c	/^void test_resize(char *filename)$/;"	f
tex1D	/usr/local/cuda/include/texture_fetch_functions.h	/^static __forceinline__ __device__ typename __nv_tex_rmet_ret<T>::type tex1D(texture<T, cudaTextureType1D, cudaReadModeElementType> t, float x)$/;"	f
tex1D	/usr/local/cuda/include/texture_fetch_functions.h	/^static __forceinline__ __device__ typename __nv_tex_rmnf_ret<T>::type tex1D(texture<T, cudaTextureType1D, cudaReadModeNormalizedFloat> t, float x)$/;"	f
tex1D	/usr/local/cuda/include/texture_indirect_functions.h	/^static __device__  T tex1D(cudaTextureObject_t texObject, float x)$/;"	f
tex1D	/usr/local/cuda/include/texture_indirect_functions.h	/^static __device__ typename __nv_itex_trait<T>::type tex1D(T *ptr, cudaTextureObject_t obj, float x)$/;"	f
tex1DGrad	/usr/local/cuda/include/texture_fetch_functions.h	/^static __forceinline__ __device__ typename __nv_tex_rmet_ret<T>::type tex1DGrad(texture<T, cudaTextureType1D, cudaReadModeElementType> t, float x, float dPdx, float dPdy)$/;"	f
tex1DGrad	/usr/local/cuda/include/texture_fetch_functions.h	/^static __forceinline__ __device__ typename __nv_tex_rmnf_ret<T>::type tex1DGrad(texture<T, cudaTextureType1D, cudaReadModeNormalizedFloat> t, float x, float dPdx, float dPdy)$/;"	f
tex1DGrad	/usr/local/cuda/include/texture_indirect_functions.h	/^static __device__  T tex1DGrad(cudaTextureObject_t texObject, float x, float dPdx, float dPdy)$/;"	f
tex1DGrad	/usr/local/cuda/include/texture_indirect_functions.h	/^static __device__ typename __nv_itex_trait<T>::type tex1DGrad(T *ptr, cudaTextureObject_t obj, float x, float dPdx, float dPdy)$/;"	f
tex1DLayered	/usr/local/cuda/include/texture_fetch_functions.h	/^static __forceinline__ __device__ typename __nv_tex_rmet_ret<T>::type tex1DLayered(texture<T, cudaTextureType1DLayered, cudaReadModeElementType> t, float x, int layer)$/;"	f
tex1DLayered	/usr/local/cuda/include/texture_fetch_functions.h	/^static __forceinline__ __device__ typename __nv_tex_rmnf_ret<T>::type tex1DLayered(texture<T, cudaTextureType1DLayered, cudaReadModeNormalizedFloat> t, float x, int layer)$/;"	f
tex1DLayered	/usr/local/cuda/include/texture_indirect_functions.h	/^static __device__  T tex1DLayered(cudaTextureObject_t texObject, float x, int layer)$/;"	f
tex1DLayered	/usr/local/cuda/include/texture_indirect_functions.h	/^static __device__ typename __nv_itex_trait<T>::type tex1DLayered(T *ptr, cudaTextureObject_t obj, float x, int layer)$/;"	f
tex1DLayeredGrad	/usr/local/cuda/include/texture_fetch_functions.h	/^static __forceinline__ __device__ typename __nv_tex_rmet_ret<T>::type tex1DLayeredGrad(texture<T, cudaTextureType1DLayered, cudaReadModeElementType> t, float x, int layer, float dPdx, float dPdy)$/;"	f
tex1DLayeredGrad	/usr/local/cuda/include/texture_fetch_functions.h	/^static __forceinline__ __device__ typename __nv_tex_rmnf_ret<T>::type tex1DLayeredGrad(texture<T, cudaTextureType1DLayered, cudaReadModeNormalizedFloat> t, float x, int layer, float dPdx, float dPdy)$/;"	f
tex1DLayeredGrad	/usr/local/cuda/include/texture_indirect_functions.h	/^static __device__  T tex1DLayeredGrad(cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy)$/;"	f
tex1DLayeredGrad	/usr/local/cuda/include/texture_indirect_functions.h	/^static __device__ typename __nv_itex_trait<T>::type tex1DLayeredGrad(T *ptr, cudaTextureObject_t obj, float x, int layer, float dPdx, float dPdy)$/;"	f
tex1DLayeredLod	/usr/local/cuda/include/texture_fetch_functions.h	/^static __forceinline__ __device__ typename __nv_tex_rmet_ret<T>::type tex1DLayeredLod(texture<T, cudaTextureType1DLayered, cudaReadModeElementType> t, float x, int layer, float level)$/;"	f
tex1DLayeredLod	/usr/local/cuda/include/texture_fetch_functions.h	/^static __forceinline__ __device__ typename __nv_tex_rmnf_ret<T>::type tex1DLayeredLod(texture<T, cudaTextureType1DLayered, cudaReadModeNormalizedFloat> t, float x, int layer, float level)$/;"	f
tex1DLayeredLod	/usr/local/cuda/include/texture_indirect_functions.h	/^static __device__  T tex1DLayeredLod(cudaTextureObject_t texObject, float x, int layer, float level)$/;"	f
tex1DLayeredLod	/usr/local/cuda/include/texture_indirect_functions.h	/^static __device__ typename __nv_itex_trait<T>::type tex1DLayeredLod(T *ptr, cudaTextureObject_t obj, float x, int layer, float level)$/;"	f
tex1DLod	/usr/local/cuda/include/texture_fetch_functions.h	/^static __forceinline__ __device__ typename __nv_tex_rmet_ret<T>::type tex1DLod(texture<T, cudaTextureType1D, cudaReadModeElementType> t, float x, float level)$/;"	f
tex1DLod	/usr/local/cuda/include/texture_fetch_functions.h	/^static __forceinline__ __device__ typename __nv_tex_rmnf_ret<T>::type tex1DLod(texture<T, cudaTextureType1D, cudaReadModeNormalizedFloat> t, float x, float level)$/;"	f
tex1DLod	/usr/local/cuda/include/texture_indirect_functions.h	/^static __device__  T tex1DLod(cudaTextureObject_t texObject, float x, float level)$/;"	f
tex1DLod	/usr/local/cuda/include/texture_indirect_functions.h	/^static __device__ typename __nv_itex_trait<T>::type tex1DLod(T *ptr, cudaTextureObject_t obj, float x, float level)$/;"	f
tex1Dfetch	/usr/local/cuda/include/texture_fetch_functions.h	/^static __forceinline__ __device__  typename __nv_tex_rmet_ret<T>::type tex1Dfetch(texture<T, cudaTextureType1D, cudaReadModeElementType> t, int x)$/;"	f
tex1Dfetch	/usr/local/cuda/include/texture_fetch_functions.h	/^static __forceinline__ __device__ typename __nv_tex_rmnf_ret<T>::type tex1Dfetch(texture<T, cudaTextureType1D, cudaReadModeNormalizedFloat> t, int x) $/;"	f
tex1Dfetch	/usr/local/cuda/include/texture_indirect_functions.h	/^static __device__ T tex1Dfetch(cudaTextureObject_t texObject, int x)$/;"	f
tex1Dfetch	/usr/local/cuda/include/texture_indirect_functions.h	/^static __device__ typename __nv_itex_trait<T>::type tex1Dfetch(T *ptr, cudaTextureObject_t obj, int x)$/;"	f
tex2D	/usr/local/cuda/include/texture_fetch_functions.h	/^static __forceinline__ __device__ typename __nv_tex_rmet_ret<T>::type tex2D(texture<T, cudaTextureType2D, cudaReadModeElementType> t, float x, float y)$/;"	f
tex2D	/usr/local/cuda/include/texture_fetch_functions.h	/^static __forceinline__ __device__ typename __nv_tex_rmnf_ret<T>::type tex2D(texture<T, cudaTextureType2D, cudaReadModeNormalizedFloat> t, float x, float y)$/;"	f
tex2D	/usr/local/cuda/include/texture_indirect_functions.h	/^static __device__  T tex2D(cudaTextureObject_t texObject, float x, float y)$/;"	f
tex2D	/usr/local/cuda/include/texture_indirect_functions.h	/^static __device__ typename __nv_itex_trait<T>::type tex2D(T *ptr, cudaTextureObject_t obj, float x, float y)$/;"	f
tex2DGrad	/usr/local/cuda/include/texture_fetch_functions.h	/^static __forceinline__ __device__ typename __nv_tex_rmet_ret<T>::type tex2DGrad(texture<T, cudaTextureType2D, cudaReadModeElementType> t, float x, float y, float2 dPdx, float2 dPdy)$/;"	f
tex2DGrad	/usr/local/cuda/include/texture_fetch_functions.h	/^static __forceinline__ __device__ typename __nv_tex_rmnf_ret<T>::type tex2DGrad(texture<T, cudaTextureType2D, cudaReadModeNormalizedFloat> t, float x, float y, float2 dPdx, float2 dPdy)$/;"	f
tex2DGrad	/usr/local/cuda/include/texture_indirect_functions.h	/^static __device__  T tex2DGrad(cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy)$/;"	f
tex2DGrad	/usr/local/cuda/include/texture_indirect_functions.h	/^static __device__ typename __nv_itex_trait<T>::type tex2DGrad(T *ptr, cudaTextureObject_t obj, float x, float y, float2 dPdx, float2 dPdy)$/;"	f
tex2DLayered	/usr/local/cuda/include/texture_fetch_functions.h	/^static __forceinline__ __device__ typename __nv_tex_rmet_ret<T>::type tex2DLayered(texture<T, cudaTextureType2DLayered, cudaReadModeElementType> t, float x, float y, int layer)$/;"	f
tex2DLayered	/usr/local/cuda/include/texture_fetch_functions.h	/^static __forceinline__ __device__ typename __nv_tex_rmnf_ret<T>::type tex2DLayered(texture<T, cudaTextureType2DLayered, cudaReadModeNormalizedFloat> t, float x, float y, int layer)$/;"	f
tex2DLayered	/usr/local/cuda/include/texture_indirect_functions.h	/^static __device__  T tex2DLayered(cudaTextureObject_t texObject, float x, float y, int layer)$/;"	f
tex2DLayered	/usr/local/cuda/include/texture_indirect_functions.h	/^static __device__ typename __nv_itex_trait<T>::type tex2DLayered(T *ptr, cudaTextureObject_t obj, float x, float y, int layer)$/;"	f
tex2DLayeredGrad	/usr/local/cuda/include/texture_fetch_functions.h	/^static __forceinline__ __device__ typename __nv_tex_rmet_ret<T>::type tex2DLayeredGrad(texture<T, cudaTextureType2DLayered, cudaReadModeElementType> t, float x, float y, int layer, float2 dPdx, float2 dPdy)$/;"	f
tex2DLayeredGrad	/usr/local/cuda/include/texture_fetch_functions.h	/^static __forceinline__ __device__ typename __nv_tex_rmnf_ret<T>::type tex2DLayeredGrad(texture<T, cudaTextureType2DLayered, cudaReadModeNormalizedFloat> t, float x, float y, int layer, float2 dPdx, float2 dPdy)$/;"	f
tex2DLayeredGrad	/usr/local/cuda/include/texture_indirect_functions.h	/^static __device__  T tex2DLayeredGrad(cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy)$/;"	f
tex2DLayeredGrad	/usr/local/cuda/include/texture_indirect_functions.h	/^static __device__ typename __nv_itex_trait<T>::type tex2DLayeredGrad(T * ptr, cudaTextureObject_t obj, float x, float y, int layer, float2 dPdx, float2 dPdy)$/;"	f
tex2DLayeredLod	/usr/local/cuda/include/texture_fetch_functions.h	/^static __forceinline__ __device__ typename __nv_tex_rmet_ret<T>::type tex2DLayeredLod(texture<T, cudaTextureType2DLayered, cudaReadModeElementType> t, float x, float y, int layer, float level)$/;"	f
tex2DLayeredLod	/usr/local/cuda/include/texture_fetch_functions.h	/^static __forceinline__ __device__ typename __nv_tex_rmnf_ret<T>::type tex2DLayeredLod(texture<T, cudaTextureType2DLayered, cudaReadModeNormalizedFloat> t, float x, float y, int layer, float level)$/;"	f
tex2DLayeredLod	/usr/local/cuda/include/texture_indirect_functions.h	/^static __device__  T tex2DLayeredLod(cudaTextureObject_t texObject, float x, float y, int layer, float level)$/;"	f
tex2DLayeredLod	/usr/local/cuda/include/texture_indirect_functions.h	/^static __device__ typename __nv_itex_trait<T>::type tex2DLayeredLod(T *ptr, cudaTextureObject_t obj, float x, float y, int layer, float level)$/;"	f
tex2DLod	/usr/local/cuda/include/texture_fetch_functions.h	/^static __forceinline__ __device__ typename __nv_tex_rmet_ret<T>::type tex2DLod(texture<T, cudaTextureType2D, cudaReadModeElementType> t, float x, float y, float level)$/;"	f
tex2DLod	/usr/local/cuda/include/texture_fetch_functions.h	/^static __forceinline__ __device__ typename __nv_tex_rmnf_ret<T>::type tex2DLod(texture<T, cudaTextureType2D, cudaReadModeNormalizedFloat> t, float x, float y, float level)$/;"	f
tex2DLod	/usr/local/cuda/include/texture_indirect_functions.h	/^static __device__  T tex2DLod(cudaTextureObject_t texObject, float x, float y, float level)$/;"	f
tex2DLod	/usr/local/cuda/include/texture_indirect_functions.h	/^static __device__ typename __nv_itex_trait<T>::type tex2DLod(T *ptr, cudaTextureObject_t obj, float x, float y, float level)$/;"	f
tex2Dgather	/usr/local/cuda/include/texture_fetch_functions.h	/^static __device__ __forceinline__  typename __nv_tex2dgather_rmnf_ret<T>::type tex2Dgather(texture<T, cudaTextureType2D, cudaReadModeNormalizedFloat> t, float x, float y, int comp = 0)$/;"	f
tex2Dgather	/usr/local/cuda/include/texture_fetch_functions.h	/^static __device__ __forceinline__ typename __nv_tex2dgather_ret<T>::type tex2Dgather(texture<T, cudaTextureType2D, cudaReadModeElementType> t, float x, float y, int comp=0)$/;"	f
tex2Dgather	/usr/local/cuda/include/texture_indirect_functions.h	/^static __device__  T tex2Dgather(cudaTextureObject_t to, float x, float y, int comp = 0)$/;"	f
tex2Dgather	/usr/local/cuda/include/texture_indirect_functions.h	/^static __device__ typename __nv_itex_trait<T>::type tex2Dgather(T *ptr, cudaTextureObject_t obj, float x, float y, int comp = 0)$/;"	f
tex3D	/usr/local/cuda/include/texture_fetch_functions.h	/^static __forceinline__ __device__ typename __nv_tex_rmet_ret<T>::type tex3D(texture<T, cudaTextureType3D, cudaReadModeElementType> t, float x, float y, float z)$/;"	f
tex3D	/usr/local/cuda/include/texture_fetch_functions.h	/^static __forceinline__ __device__ typename __nv_tex_rmnf_ret<T>::type tex3D(texture<T, cudaTextureType3D, cudaReadModeNormalizedFloat> t, float x, float y, float z)$/;"	f
tex3D	/usr/local/cuda/include/texture_indirect_functions.h	/^static __device__  T tex3D(cudaTextureObject_t texObject, float x, float y, float z)$/;"	f
tex3D	/usr/local/cuda/include/texture_indirect_functions.h	/^static __device__ typename __nv_itex_trait<T>::type tex3D(T *ptr, cudaTextureObject_t obj, float x, float y, float z)$/;"	f
tex3DGrad	/usr/local/cuda/include/texture_fetch_functions.h	/^static __forceinline__ __device__ typename __nv_tex_rmet_ret<T>::type tex3DGrad(texture<T, cudaTextureType3D, cudaReadModeElementType> t, float x, float y, float z, float4 dPdx, float4 dPdy)$/;"	f
tex3DGrad	/usr/local/cuda/include/texture_fetch_functions.h	/^static __forceinline__ __device__ typename __nv_tex_rmnf_ret<T>::type tex3DGrad(texture<T, cudaTextureType3D, cudaReadModeNormalizedFloat> t, float x, float y, float z, float4 dPdx, float4 dPdy)$/;"	f
tex3DGrad	/usr/local/cuda/include/texture_indirect_functions.h	/^static __device__  T tex3DGrad(cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy)$/;"	f
tex3DGrad	/usr/local/cuda/include/texture_indirect_functions.h	/^static __device__ typename __nv_itex_trait<T>::type tex3DGrad(T *ptr, cudaTextureObject_t obj, float x, float y, float z, float4 dPdx, float4 dPdy)$/;"	f
tex3DLod	/usr/local/cuda/include/texture_fetch_functions.h	/^static __forceinline__ __device__ typename __nv_tex_rmet_ret<T>::type tex3DLod(texture<T, cudaTextureType3D, cudaReadModeElementType> t, float x, float y, float z, float level)$/;"	f
tex3DLod	/usr/local/cuda/include/texture_fetch_functions.h	/^static __forceinline__ __device__ typename __nv_tex_rmnf_ret<T>::type tex3DLod(texture<T, cudaTextureType3D, cudaReadModeNormalizedFloat> t, float x, float y, float z, float level)$/;"	f
tex3DLod	/usr/local/cuda/include/texture_indirect_functions.h	/^static __device__  T tex3DLod(cudaTextureObject_t texObject, float x, float y, float z, float level)$/;"	f
tex3DLod	/usr/local/cuda/include/texture_indirect_functions.h	/^static __device__ typename __nv_itex_trait<T>::type tex3DLod(T *ptr, cudaTextureObject_t obj, float x, float y, float z, float level)$/;"	f
texCubemap	/usr/local/cuda/include/texture_fetch_functions.h	/^static __forceinline__ __device__ typename __nv_tex_rmet_ret<T>::type texCubemap(texture<T, cudaTextureTypeCubemap, cudaReadModeElementType> t, float x, float y, float z)$/;"	f
texCubemap	/usr/local/cuda/include/texture_fetch_functions.h	/^static __forceinline__ __device__ typename __nv_tex_rmnf_ret<T>::type texCubemap(texture<T, cudaTextureTypeCubemap, cudaReadModeNormalizedFloat> t, float x, float y, float z)$/;"	f
texCubemap	/usr/local/cuda/include/texture_indirect_functions.h	/^static __device__  T texCubemap(cudaTextureObject_t texObject, float x, float y, float z)$/;"	f
texCubemap	/usr/local/cuda/include/texture_indirect_functions.h	/^static __device__ typename __nv_itex_trait<T>::type texCubemap(T *ptr, cudaTextureObject_t obj, float x, float y, float z)$/;"	f
texCubemapGrad	/usr/local/cuda/include/texture_fetch_functions.h	/^static __forceinline__ __device__ typename __nv_tex_rmet_ret<T>::type texCubemapGrad(texture<T, cudaTextureTypeCubemap, cudaReadModeElementType> t, float x, float y, float z, float4 dPdx, float4 dPdy)$/;"	f
texCubemapGrad	/usr/local/cuda/include/texture_fetch_functions.h	/^static __forceinline__ __device__ typename __nv_tex_rmnf_ret<T>::type texCubemapGrad(texture<T, cudaTextureTypeCubemap, cudaReadModeNormalizedFloat> t, float x, float y, float z, float4 dPdx, float4 dPdy)$/;"	f
texCubemapGrad	/usr/local/cuda/include/texture_indirect_functions.h	/^static __device__  T texCubemapGrad(cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy)$/;"	f
texCubemapGrad	/usr/local/cuda/include/texture_indirect_functions.h	/^static __device__ typename __nv_itex_trait<T>::type texCubemapGrad(T *ptr, cudaTextureObject_t obj, float x, float y, float z, float4 dPdx, float4 dPdy)$/;"	f
texCubemapLayered	/usr/local/cuda/include/texture_fetch_functions.h	/^static __forceinline__ __device__ typename __nv_tex_rmet_ret<T>::type texCubemapLayered(texture<T, cudaTextureTypeCubemapLayered, cudaReadModeElementType> t, float x, float y, float z, int layer)$/;"	f
texCubemapLayered	/usr/local/cuda/include/texture_fetch_functions.h	/^static __forceinline__ __device__ typename __nv_tex_rmnf_ret<T>::type texCubemapLayered(texture<T, cudaTextureTypeCubemapLayered, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer)$/;"	f
texCubemapLayered	/usr/local/cuda/include/texture_indirect_functions.h	/^static __device__  T texCubemapLayered(cudaTextureObject_t texObject, float x, float y, float z, int layer)$/;"	f
texCubemapLayered	/usr/local/cuda/include/texture_indirect_functions.h	/^static __device__ typename __nv_itex_trait<T>::type texCubemapLayered(T *ptr, cudaTextureObject_t obj, float x, float y, float z, int layer)$/;"	f
texCubemapLayeredGrad	/usr/local/cuda/include/texture_fetch_functions.h	/^static __forceinline__ __device__ typename __nv_tex_rmet_ret<T>::type texCubemapLayeredGrad(texture<T, cudaTextureTypeCubemapLayered, cudaReadModeElementType> t, float x, float y, float z, int layer, float4 dPdx, float4 dPdy)$/;"	f
texCubemapLayeredGrad	/usr/local/cuda/include/texture_fetch_functions.h	/^static __forceinline__ __device__ typename __nv_tex_rmnf_ret<T>::type texCubemapLayeredGrad(texture<T, cudaTextureTypeCubemapLayered, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer, float4 dPdx, float4 dPdy) $/;"	f
texCubemapLayeredGrad	/usr/local/cuda/include/texture_indirect_functions.h	/^static __device__  T texCubemapLayeredGrad(cudaTextureObject_t texObject, float x, float y, float z, int layer, float4 dPdx, float4 dPdy)$/;"	f
texCubemapLayeredGrad	/usr/local/cuda/include/texture_indirect_functions.h	/^static __device__ typename __nv_itex_trait<T>::type texCubemapLayeredGrad(T *ptr, cudaTextureObject_t obj, float x, float y, float z, int layer, float4 dPdx, float4 dPdy)$/;"	f
texCubemapLayeredLod	/usr/local/cuda/include/texture_fetch_functions.h	/^static __forceinline__ __device__ typename __nv_tex_rmet_ret<T>::type texCubemapLayeredLod(texture<T, cudaTextureTypeCubemapLayered, cudaReadModeElementType> t, float x, float y, float z, int layer, float level)$/;"	f
texCubemapLayeredLod	/usr/local/cuda/include/texture_fetch_functions.h	/^static __forceinline__ __device__ typename __nv_tex_rmnf_ret<T>::type texCubemapLayeredLod(texture<T, cudaTextureTypeCubemapLayered, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer, float level)$/;"	f
texCubemapLayeredLod	/usr/local/cuda/include/texture_indirect_functions.h	/^static __device__  T texCubemapLayeredLod(cudaTextureObject_t texObject, float x, float y, float z, int layer, float level)$/;"	f
texCubemapLayeredLod	/usr/local/cuda/include/texture_indirect_functions.h	/^static __device__ typename __nv_itex_trait<T>::type texCubemapLayeredLod(T *ptr, cudaTextureObject_t obj, float x, float y, float z, int layer, float level)$/;"	f
texCubemapLod	/usr/local/cuda/include/texture_fetch_functions.h	/^static __forceinline__ __device__ typename __nv_tex_rmet_ret<T>::type texCubemapLod(texture<T, cudaTextureTypeCubemap, cudaReadModeElementType> t, float x, float y, float z, float level)$/;"	f
texCubemapLod	/usr/local/cuda/include/texture_fetch_functions.h	/^static __forceinline__ __device__ typename __nv_tex_rmnf_ret<T>::type texCubemapLod(texture<T, cudaTextureTypeCubemap, cudaReadModeNormalizedFloat> t, float x, float y, float z, float level)$/;"	f
texCubemapLod	/usr/local/cuda/include/texture_indirect_functions.h	/^static __device__  T texCubemapLod(cudaTextureObject_t texObject, float x, float y, float z, float level)$/;"	f
texCubemapLod	/usr/local/cuda/include/texture_indirect_functions.h	/^static __device__ typename __nv_itex_trait<T>::type texCubemapLod(T *ptr, cudaTextureObject_t obj, float x, float y, float z, float level)$/;"	f
texture	/usr/local/cuda/include/cuda_texture_types.h	/^  __host__ texture(int                          norm,$/;"	f	struct:texture
texture	/usr/local/cuda/include/cuda_texture_types.h	/^  __host__ texture(int                         norm  = 0,$/;"	f	struct:texture
texture	/usr/local/cuda/include/cuda_texture_types.h	/^struct __device_builtin_texture_type__ texture : public textureReference$/;"	s
texture	src/sdl_image.c	/^static SDL_Texture  *texture;$/;"	v	file:
textureAlign	/usr/local/cuda/include/cuda.h	/^    int textureAlign;           \/**< Alignment requirement for textures *\/$/;"	m	struct:CUdevprop_st
textureAlign	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    int textureAlign;           \/**< Alignment requirement for textures *\/$/;"	m	struct:CUdevprop_st
textureAlignment	/usr/local/cuda/include/driver_types.h	/^    size_t textureAlignment;           \/**< Alignment requirement for textures *\/$/;"	m	struct:cudaDeviceProp
texturePitchAlignment	/usr/local/cuda/include/driver_types.h	/^    size_t texturePitchAlignment;      \/**< Pitch alignment requirement for texture references bound to pitched memory *\/$/;"	m	struct:cudaDeviceProp
textureReference	/usr/local/cuda/include/texture_types.h	/^struct __device_builtin__ textureReference$/;"	s
tfcntrflag	/usr/local/cuda/include/dynlink_cuviddec.h	/^    int tfcntrflag;$/;"	m	struct:_CUVIDVC1PICPARAMS
tgamma	/usr/local/cuda/include/math_functions.hpp	/^__MATH_FUNCTIONS_DECL__ float tgamma(float a)$/;"	f
th_id	src/sdl_image.c	/^static SDL_Thread *th_id;$/;"	v	file:
theta	/usr/local/cuda/include/nppdefs.h	/^    Npp32f theta;$/;"	m	struct:__anon148
this_grid	/usr/local/cuda/include/cooperative_groups.h	/^_CG_QUALIFIER grid_group this_grid()$/;"	f
this_multi_grid	/usr/local/cuda/include/cooperative_groups.h	/^_CG_QUALIFIER multi_grid_group this_multi_grid()$/;"	f
this_thread	/usr/local/cuda/include/cooperative_groups.h	/^_CG_QUALIFIER thread_group this_thread()$/;"	f
this_thread_block	/usr/local/cuda/include/cooperative_groups.h	/^_CG_QUALIFIER thread_block this_thread_block()$/;"	f
threadIdx	/usr/local/cuda/include/device_launch_parameters.h	/^uint3 __device_builtin__ __STORAGE__ threadIdx;$/;"	v
thread_block	/usr/local/cuda/include/cooperative_groups.h	/^    _CG_QUALIFIER thread_block() : thread_group(__internal::ThreadBlock) {$/;"	f	class:thread_block
thread_block	/usr/local/cuda/include/cooperative_groups.h	/^class thread_block : public thread_group$/;"	c
thread_block_tile	/usr/local/cuda/include/cooperative_groups.h	/^template <> class thread_block_tile<16> : public __thread_block_tile_base<16> { };$/;"	c
thread_block_tile	/usr/local/cuda/include/cooperative_groups.h	/^template <> class thread_block_tile<1>  : public __thread_block_tile_base<1> { };$/;"	c
thread_block_tile	/usr/local/cuda/include/cooperative_groups.h	/^template <> class thread_block_tile<2>  : public __thread_block_tile_base<2> { };$/;"	c
thread_block_tile	/usr/local/cuda/include/cooperative_groups.h	/^template <> class thread_block_tile<32> : public __thread_block_tile_base<32> { };$/;"	c
thread_block_tile	/usr/local/cuda/include/cooperative_groups.h	/^template <> class thread_block_tile<4>  : public __thread_block_tile_base<4> { };$/;"	c
thread_block_tile	/usr/local/cuda/include/cooperative_groups.h	/^template <> class thread_block_tile<8>  : public __thread_block_tile_base<8> { };$/;"	c
thread_group	/usr/local/cuda/include/cooperative_groups.h	/^    _CG_QUALIFIER thread_group(__internal::groupType type) {$/;"	f	class:thread_group
thread_group	/usr/local/cuda/include/cooperative_groups.h	/^class thread_group$/;"	c
thread_index	/usr/local/cuda/include/cooperative_groups.h	/^    _CG_QUALIFIER dim3 thread_index() const {$/;"	f	class:thread_block
thread_index	/usr/local/cuda/include/cooperative_groups_helpers.h	/^        _CG_STATIC_QUALIFIER dim3 thread_index()$/;"	f	namespace:__internal::cta
thread_rank	/usr/local/cuda/include/cooperative_groups.h	/^    _CG_QUALIFIER unsigned int thread_rank() const {$/;"	f	class:__thread_block_tile_base
thread_rank	/usr/local/cuda/include/cooperative_groups.h	/^    _CG_QUALIFIER unsigned int thread_rank() const {$/;"	f	class:coalesced_group
thread_rank	/usr/local/cuda/include/cooperative_groups.h	/^    _CG_QUALIFIER unsigned int thread_rank() const {$/;"	f	class:grid_group
thread_rank	/usr/local/cuda/include/cooperative_groups.h	/^    _CG_QUALIFIER unsigned int thread_rank() const {$/;"	f	class:multi_grid_group
thread_rank	/usr/local/cuda/include/cooperative_groups.h	/^    _CG_QUALIFIER unsigned int thread_rank() const {$/;"	f	class:thread_block
thread_rank	/usr/local/cuda/include/cooperative_groups.h	/^_CG_QUALIFIER unsigned int thread_group::thread_rank() const$/;"	f	class:thread_group
thread_rank	/usr/local/cuda/include/cooperative_groups.h	/^template <class GroupT> _CG_QUALIFIER unsigned int thread_rank(GroupT const& g)$/;"	f
thread_rank	/usr/local/cuda/include/cooperative_groups_helpers.h	/^        _CG_STATIC_QUALIFIER unsigned int thread_rank()$/;"	f	namespace:__internal::cta
thread_rank	/usr/local/cuda/include/cooperative_groups_helpers.h	/^        _CG_STATIC_QUALIFIER unsigned int thread_rank(const unsigned long long handle)$/;"	f	namespace:__internal::grid
thread_rank	/usr/local/cuda/include/cooperative_groups_helpers.h	/^        _CG_STATIC_QUALIFIER unsigned int thread_rank(const unsigned long long handle)$/;"	f	namespace:__internal::multi_grid
three_way_max	src/image.c	/^float three_way_max(float a, float b, float c)$/;"	f
three_way_min	src/image.c	/^float three_way_min(float a, float b, float c)$/;"	f
threshold_image	src/image.c	/^image threshold_image(image im, float thresh)$/;"	f
tile_images	src/image.c	/^image tile_images(image a, image b, int dx)$/;"	f
tiled_partition	/usr/local/cuda/include/cooperative_groups.h	/^_CG_QUALIFIER coalesced_group tiled_partition(const coalesced_group& parent, unsigned int tilesz)$/;"	f
tiled_partition	/usr/local/cuda/include/cooperative_groups.h	/^_CG_QUALIFIER thread_block_tile<Size> tiled_partition(const ParentT& g)$/;"	f
tiled_partition	/usr/local/cuda/include/cooperative_groups.h	/^_CG_QUALIFIER thread_group tiled_partition(const thread_block& parent, unsigned int tilesz)$/;"	f
tiled_partition	/usr/local/cuda/include/cooperative_groups.h	/^_CG_QUALIFIER thread_group tiled_partition(const thread_group& parent, unsigned int tilesz)$/;"	f
tiled_partition_impl	/usr/local/cuda/include/cooperative_groups.h	/^        _CG_QUALIFIER tiled_partition_impl(thread_block const &) : thread_block_tile<Size>() {}$/;"	f	struct:__internal::tiled_partition_impl
tiled_partition_impl	/usr/local/cuda/include/cooperative_groups.h	/^        _CG_QUALIFIER tiled_partition_impl(thread_block_tile<16> const&) : thread_block_tile<Size>() {}$/;"	f	struct:__internal::tiled_partition_impl
tiled_partition_impl	/usr/local/cuda/include/cooperative_groups.h	/^        _CG_QUALIFIER tiled_partition_impl(thread_block_tile<1> const&) : thread_block_tile<1>() {}$/;"	f	struct:__internal::tiled_partition_impl
tiled_partition_impl	/usr/local/cuda/include/cooperative_groups.h	/^        _CG_QUALIFIER tiled_partition_impl(thread_block_tile<2> const&) : thread_block_tile<Size>() {}$/;"	f	struct:__internal::tiled_partition_impl
tiled_partition_impl	/usr/local/cuda/include/cooperative_groups.h	/^        _CG_QUALIFIER tiled_partition_impl(thread_block_tile<32> const&) : thread_block_tile<Size>() {}$/;"	f	struct:__internal::tiled_partition_impl
tiled_partition_impl	/usr/local/cuda/include/cooperative_groups.h	/^        _CG_QUALIFIER tiled_partition_impl(thread_block_tile<4> const&) : thread_block_tile<Size>() {}$/;"	f	struct:__internal::tiled_partition_impl
tiled_partition_impl	/usr/local/cuda/include/cooperative_groups.h	/^        _CG_QUALIFIER tiled_partition_impl(thread_block_tile<8> const&) : thread_block_tile<Size>() {}$/;"	f	struct:__internal::tiled_partition_impl
tiled_partition_impl	/usr/local/cuda/include/cooperative_groups.h	/^    struct tiled_partition_impl<1, thread_block_tile<1> > : public thread_block_tile<1> {$/;"	s	namespace:__internal
tiled_partition_impl	/usr/local/cuda/include/cooperative_groups.h	/^    struct tiled_partition_impl<Size, thread_block> : public thread_block_tile<Size> {$/;"	s	namespace:__internal
tiled_partition_impl	/usr/local/cuda/include/cooperative_groups.h	/^    struct tiled_partition_impl<Size, thread_block_tile<16> > : public thread_block_tile<Size> {$/;"	s	namespace:__internal
tiled_partition_impl	/usr/local/cuda/include/cooperative_groups.h	/^    struct tiled_partition_impl<Size, thread_block_tile<2> > : public thread_block_tile<Size> {$/;"	s	namespace:__internal
tiled_partition_impl	/usr/local/cuda/include/cooperative_groups.h	/^    struct tiled_partition_impl<Size, thread_block_tile<32> > : public thread_block_tile<Size> {$/;"	s	namespace:__internal
tiled_partition_impl	/usr/local/cuda/include/cooperative_groups.h	/^    struct tiled_partition_impl<Size, thread_block_tile<4> > : public thread_block_tile<Size> {$/;"	s	namespace:__internal
tiled_partition_impl	/usr/local/cuda/include/cooperative_groups.h	/^    struct tiled_partition_impl<Size, thread_block_tile<8> > : public thread_block_tile<Size> {$/;"	s	namespace:__internal
tiles_enabled_flag	/usr/local/cuda/include/dynlink_cuviddec.h	/^    unsigned char tiles_enabled_flag;$/;"	m	struct:_CUVIDHEVCPICPARAMS
time	/usr/local/cuda/include/cudnn.h	/^    float                           time;$/;"	m	struct:__anon67
time	/usr/local/cuda/include/cudnn.h	/^    float                           time;$/;"	m	struct:__anon70
time	/usr/local/cuda/include/cudnn.h	/^    float                       time;$/;"	m	struct:__anon64
time	/usr/local/cuda/include/nvml.h	/^    unsigned long long time;                    \/\/!< Amount of time in ms during which the compute context was active. The time is reported as 0 if $/;"	m	struct:nvmlAccountingStats_st
timeStamp	/usr/local/cuda/include/nvml.h	/^    unsigned long long timeStamp;                   \/\/!< CPU Timestamp in microseconds$/;"	m	struct:nvmlVgpuProcessUtilizationSample_st
timeStamp	/usr/local/cuda/include/nvml.h	/^    unsigned long long timeStamp;       \/\/!< CPU Timestamp in microseconds$/;"	m	struct:nvmlProcessUtilizationSample_st
timeStamp	/usr/local/cuda/include/nvml.h	/^    unsigned long long timeStamp;       \/\/!< CPU Timestamp in microseconds$/;"	m	struct:nvmlSample_st
timeStamp	/usr/local/cuda/include/nvml.h	/^    unsigned long long timeStamp;       \/\/!< CPU Timestamp in microseconds$/;"	m	struct:nvmlVgpuInstanceUtilizationSample_st
time_gpu	src/gemm.c	/^void time_gpu(int TA, int TB, int m, int k, int n)$/;"	f
time_gpu_random_matrix	src/gemm.c	/^void time_gpu_random_matrix(int TA, int TB, int m, int k, int n)$/;"	f
time_random_matrix	src/gemm.c	/^void time_random_matrix(int TA, int TB, int m, int k, int n)$/;"	f
time_steps	src/parser.c	/^    int time_steps;$/;"	m	struct:size_params	file:
timestamp	/usr/local/cuda/include/dynlink_nvcuvid.h	/^    CUvideotimestamp timestamp;     \/**< Presentation timestamp (10MHz clock), only valid if CUVID_PKT_TIMESTAMP flag is set *\/$/;"	m	struct:_CUVIDSOURCEDATAPACKET
timestamp	/usr/local/cuda/include/dynlink_nvcuvid.h	/^    CUvideotimestamp timestamp; \/**<     *\/$/;"	m	struct:_CUVIDPARSERDISPINFO
timestamp	/usr/local/cuda/include/nvml.h	/^    long long timestamp;        \/\/!< CPU Timestamp of this value in microseconds since 1970$/;"	m	struct:nvmlFieldValue_st
tisnan	src/region_layer.c	/^float tisnan(float x)$/;"	f
tmp_tbl	/usr/local/cuda/include/curand_mtgp32.h	/^    unsigned int tmp_tbl[16];	\/*< a small matrix for tempering. *\/$/;"	m	struct:mtgp32_params_fast
todo	src/stb_image.h	/^   int restart_interval, todo;$/;"	m	struct:__anon16
top	/usr/local/cuda/include/dynlink_cuviddec.h	/^        short top;$/;"	m	struct:_CUVIDDECODECREATEINFO::__anon114
top	/usr/local/cuda/include/dynlink_cuviddec.h	/^        short top;$/;"	m	struct:_CUVIDDECODECREATEINFO::__anon115
top	/usr/local/cuda/include/dynlink_nvcuvid.h	/^        int top;                            \/**< top position of display rect  *\/$/;"	m	struct:__anon123::__anon125
top_field_first	/usr/local/cuda/include/dynlink_cuviddec.h	/^    int top_field_first;    \/**< Input frame is top field first (1st field is top, 2nd field is bottom) *\/$/;"	m	struct:_CUVIDPROCPARAMS
top_field_first	/usr/local/cuda/include/dynlink_cuviddec.h	/^    int top_field_first;$/;"	m	struct:_CUVIDMPEG2PICPARAMS
top_field_first	/usr/local/cuda/include/dynlink_cuviddec.h	/^    int top_field_first;$/;"	m	struct:_CUVIDMPEG4PICPARAMS
top_field_first	/usr/local/cuda/include/dynlink_nvcuvid.h	/^    int top_field_first;       \/**<                 *\/$/;"	m	struct:_CUVIDPARSERDISPINFO
top_k	src/utils.c	/^void top_k(float *a, int n, int k, int *index)$/;"	f
top_predictions	src/network.c	/^void top_predictions(network net, int k, int *index)$/;"	f
total	/usr/local/cuda/include/nvml.h	/^    unsigned long long total;        \/\/!< Total installed FB memory (in bytes)$/;"	m	struct:nvmlMemory_st
totalConstMem	/usr/local/cuda/include/driver_types.h	/^    size_t totalConstMem;              \/**< Constant memory available on device in bytes *\/$/;"	m	struct:cudaDeviceProp
totalConstantMemory	/usr/local/cuda/include/cuda.h	/^    int totalConstantMemory;    \/**< Constant memory available on device in bytes *\/$/;"	m	struct:CUdevprop_st
totalConstantMemory	/usr/local/cuda/include/dynlink_cuda_cuda.h	/^    int totalConstantMemory;    \/**< Constant memory available on device in bytes *\/$/;"	m	struct:CUdevprop_st
totalGlobalMem	/usr/local/cuda/include/driver_types.h	/^    size_t totalGlobalMem;             \/**< Global memory available on device in bytes *\/$/;"	m	struct:cudaDeviceProp
total_compares	src/compare.c	/^int total_compares = 0;$/;"	v
tq	src/stb_image.h	/^      int tq;$/;"	m	struct:__anon16::__anon17
train_compare	src/compare.c	/^void train_compare(char *cfgfile, char *weightfile)$/;"	f
train_network	src/network.c	/^float train_network(network net, data d)$/;"	f
train_network_datum	src/network.c	/^float train_network_datum(network net)$/;"	f
train_network_sgd	src/network.c	/^float train_network_sgd(network net, data d, int n)$/;"	f
transfer_characteristics	/usr/local/cuda/include/dynlink_nvcuvid.h	/^        unsigned char transfer_characteristics;$/;"	m	struct:__anon123::__anon127
transform_8x8_mode_flag	/usr/local/cuda/include/dynlink_cuviddec.h	/^    int transform_8x8_mode_flag;$/;"	m	struct:_CUVIDH264PICPARAMS
transform_skip_enabled_flag	/usr/local/cuda/include/dynlink_cuviddec.h	/^    unsigned char transform_skip_enabled_flag;$/;"	m	struct:_CUVIDHEVCPICPARAMS
translate_array	src/utils.c	/^void translate_array(float *a, int n, float s)$/;"	f
translate_data_rows	src/data.c	/^void translate_data_rows(data d, float s)$/;"	f
translate_image	src/image.c	/^void translate_image(image m, float s)$/;"	f
translate_image_channel	src/image.c	/^void translate_image_channel(image im, int c, float v)$/;"	f
transparent	src/stb_image.h	/^   int flags, bgindex, ratio, transparent, eflags;$/;"	m	struct:__anon26
transpose_image	src/image.c	/^void transpose_image(image im)$/;"	f
transpose_matrix	src/parser.c	/^void transpose_matrix(float *a, int rows, int cols)$/;"	f
transquant_bypass_enabled_flag	/usr/local/cuda/include/dynlink_cuviddec.h	/^    unsigned char transquant_bypass_enabled_flag;$/;"	m	struct:_CUVIDHEVCPICPARAMS
trb	/usr/local/cuda/include/dynlink_cuviddec.h	/^    int trb[2];$/;"	m	struct:_CUVIDMPEG4PICPARAMS
trd	/usr/local/cuda/include/dynlink_cuviddec.h	/^    int trd[2];$/;"	m	struct:_CUVIDMPEG4PICPARAMS
trunc	/usr/local/cuda/include/math_functions.hpp	/^__MATH_FUNCTIONS_DECL__ float trunc(float a)$/;"	f
type	/usr/local/cuda/include/nvml.h	/^    nvmlBridgeChipType_t type;                  \/\/!< Type of Bridge Chip $/;"	m	struct:nvmlBridgeChipInfo_st
type	/usr/local/cuda/include/surface_indirect_functions.h	/^template<> struct __nv_isurf_trait<char1> { typedef void type; };$/;"	t	struct:__nv_isurf_trait
type	/usr/local/cuda/include/surface_indirect_functions.h	/^template<> struct __nv_isurf_trait<char2> { typedef void type; };$/;"	t	struct:__nv_isurf_trait
type	/usr/local/cuda/include/surface_indirect_functions.h	/^template<> struct __nv_isurf_trait<char4> { typedef void type; };$/;"	t	struct:__nv_isurf_trait
type	/usr/local/cuda/include/surface_indirect_functions.h	/^template<> struct __nv_isurf_trait<char> { typedef void type; };$/;"	t	struct:__nv_isurf_trait
type	/usr/local/cuda/include/surface_indirect_functions.h	/^template<> struct __nv_isurf_trait<float1> { typedef void type; };$/;"	t	struct:__nv_isurf_trait
type	/usr/local/cuda/include/surface_indirect_functions.h	/^template<> struct __nv_isurf_trait<float2> { typedef void type; };$/;"	t	struct:__nv_isurf_trait
type	/usr/local/cuda/include/surface_indirect_functions.h	/^template<> struct __nv_isurf_trait<float4> { typedef void type; };$/;"	t	struct:__nv_isurf_trait
type	/usr/local/cuda/include/surface_indirect_functions.h	/^template<> struct __nv_isurf_trait<float> { typedef void type; };$/;"	t	struct:__nv_isurf_trait
type	/usr/local/cuda/include/surface_indirect_functions.h	/^template<> struct __nv_isurf_trait<int1> { typedef void type; };$/;"	t	struct:__nv_isurf_trait
type	/usr/local/cuda/include/surface_indirect_functions.h	/^template<> struct __nv_isurf_trait<int2> { typedef void type; };$/;"	t	struct:__nv_isurf_trait
type	/usr/local/cuda/include/surface_indirect_functions.h	/^template<> struct __nv_isurf_trait<int4> { typedef void type; };$/;"	t	struct:__nv_isurf_trait
type	/usr/local/cuda/include/surface_indirect_functions.h	/^template<> struct __nv_isurf_trait<int> { typedef void type; };$/;"	t	struct:__nv_isurf_trait
type	/usr/local/cuda/include/surface_indirect_functions.h	/^template<> struct __nv_isurf_trait<long long> { typedef void type; };$/;"	t	struct:__nv_isurf_trait
type	/usr/local/cuda/include/surface_indirect_functions.h	/^template<> struct __nv_isurf_trait<longlong1> { typedef void type; };$/;"	t	struct:__nv_isurf_trait
type	/usr/local/cuda/include/surface_indirect_functions.h	/^template<> struct __nv_isurf_trait<longlong2> { typedef void type; };$/;"	t	struct:__nv_isurf_trait
type	/usr/local/cuda/include/surface_indirect_functions.h	/^template<> struct __nv_isurf_trait<short1> { typedef void type; };$/;"	t	struct:__nv_isurf_trait
type	/usr/local/cuda/include/surface_indirect_functions.h	/^template<> struct __nv_isurf_trait<short2> { typedef void type; };$/;"	t	struct:__nv_isurf_trait
type	/usr/local/cuda/include/surface_indirect_functions.h	/^template<> struct __nv_isurf_trait<short4> { typedef void type; };$/;"	t	struct:__nv_isurf_trait
type	/usr/local/cuda/include/surface_indirect_functions.h	/^template<> struct __nv_isurf_trait<short> { typedef void type; };$/;"	t	struct:__nv_isurf_trait
type	/usr/local/cuda/include/surface_indirect_functions.h	/^template<> struct __nv_isurf_trait<signed char> { typedef void type; };$/;"	t	struct:__nv_isurf_trait
type	/usr/local/cuda/include/surface_indirect_functions.h	/^template<> struct __nv_isurf_trait<uchar1> { typedef void type; };$/;"	t	struct:__nv_isurf_trait
type	/usr/local/cuda/include/surface_indirect_functions.h	/^template<> struct __nv_isurf_trait<uchar2> { typedef void type; };$/;"	t	struct:__nv_isurf_trait
type	/usr/local/cuda/include/surface_indirect_functions.h	/^template<> struct __nv_isurf_trait<uchar4> { typedef void type; };$/;"	t	struct:__nv_isurf_trait
type	/usr/local/cuda/include/surface_indirect_functions.h	/^template<> struct __nv_isurf_trait<uint1> { typedef void type; };$/;"	t	struct:__nv_isurf_trait
type	/usr/local/cuda/include/surface_indirect_functions.h	/^template<> struct __nv_isurf_trait<uint2> { typedef void type; };$/;"	t	struct:__nv_isurf_trait
type	/usr/local/cuda/include/surface_indirect_functions.h	/^template<> struct __nv_isurf_trait<uint4> { typedef void type; };$/;"	t	struct:__nv_isurf_trait
type	/usr/local/cuda/include/surface_indirect_functions.h	/^template<> struct __nv_isurf_trait<ulonglong1> { typedef void type; };$/;"	t	struct:__nv_isurf_trait
type	/usr/local/cuda/include/surface_indirect_functions.h	/^template<> struct __nv_isurf_trait<ulonglong2> { typedef void type; };$/;"	t	struct:__nv_isurf_trait
type	/usr/local/cuda/include/surface_indirect_functions.h	/^template<> struct __nv_isurf_trait<unsigned char> { typedef void type; };$/;"	t	struct:__nv_isurf_trait
type	/usr/local/cuda/include/surface_indirect_functions.h	/^template<> struct __nv_isurf_trait<unsigned int> { typedef void type; };$/;"	t	struct:__nv_isurf_trait
type	/usr/local/cuda/include/surface_indirect_functions.h	/^template<> struct __nv_isurf_trait<unsigned long long> { typedef void type; };$/;"	t	struct:__nv_isurf_trait
type	/usr/local/cuda/include/surface_indirect_functions.h	/^template<> struct __nv_isurf_trait<unsigned short> { typedef void type; };$/;"	t	struct:__nv_isurf_trait
type	/usr/local/cuda/include/surface_indirect_functions.h	/^template<> struct __nv_isurf_trait<ushort1> { typedef void type; };$/;"	t	struct:__nv_isurf_trait
type	/usr/local/cuda/include/surface_indirect_functions.h	/^template<> struct __nv_isurf_trait<ushort2> { typedef void type; };$/;"	t	struct:__nv_isurf_trait
type	/usr/local/cuda/include/surface_indirect_functions.h	/^template<> struct __nv_isurf_trait<ushort4> { typedef void type; };$/;"	t	struct:__nv_isurf_trait
type	/usr/local/cuda/include/texture_fetch_functions.h	/^template <> struct __nv_tex2dgather_ret<char1> { typedef char4 type; };$/;"	t	struct:__nv_tex2dgather_ret
type	/usr/local/cuda/include/texture_fetch_functions.h	/^template <> struct __nv_tex2dgather_ret<char2> { typedef char4 type; };$/;"	t	struct:__nv_tex2dgather_ret
type	/usr/local/cuda/include/texture_fetch_functions.h	/^template <> struct __nv_tex2dgather_ret<char3> { typedef char4 type; };$/;"	t	struct:__nv_tex2dgather_ret
type	/usr/local/cuda/include/texture_fetch_functions.h	/^template <> struct __nv_tex2dgather_ret<char4> { typedef char4 type; };$/;"	t	struct:__nv_tex2dgather_ret
type	/usr/local/cuda/include/texture_fetch_functions.h	/^template <> struct __nv_tex2dgather_ret<char> { typedef char4 type; };$/;"	t	struct:__nv_tex2dgather_ret
type	/usr/local/cuda/include/texture_fetch_functions.h	/^template <> struct __nv_tex2dgather_ret<float1> { typedef float4 type; };$/;"	t	struct:__nv_tex2dgather_ret
type	/usr/local/cuda/include/texture_fetch_functions.h	/^template <> struct __nv_tex2dgather_ret<float2> { typedef float4 type; };$/;"	t	struct:__nv_tex2dgather_ret
type	/usr/local/cuda/include/texture_fetch_functions.h	/^template <> struct __nv_tex2dgather_ret<float3> { typedef float4 type; };$/;"	t	struct:__nv_tex2dgather_ret
type	/usr/local/cuda/include/texture_fetch_functions.h	/^template <> struct __nv_tex2dgather_ret<float4> { typedef float4 type; };$/;"	t	struct:__nv_tex2dgather_ret
type	/usr/local/cuda/include/texture_fetch_functions.h	/^template <> struct __nv_tex2dgather_ret<float> { typedef float4 type; };$/;"	t	struct:__nv_tex2dgather_ret
type	/usr/local/cuda/include/texture_fetch_functions.h	/^template <> struct __nv_tex2dgather_ret<int1> { typedef int4 type; };$/;"	t	struct:__nv_tex2dgather_ret
type	/usr/local/cuda/include/texture_fetch_functions.h	/^template <> struct __nv_tex2dgather_ret<int2> { typedef int4 type; };$/;"	t	struct:__nv_tex2dgather_ret
type	/usr/local/cuda/include/texture_fetch_functions.h	/^template <> struct __nv_tex2dgather_ret<int3> { typedef int4 type; };$/;"	t	struct:__nv_tex2dgather_ret
type	/usr/local/cuda/include/texture_fetch_functions.h	/^template <> struct __nv_tex2dgather_ret<int4> { typedef int4 type; };$/;"	t	struct:__nv_tex2dgather_ret
type	/usr/local/cuda/include/texture_fetch_functions.h	/^template <> struct __nv_tex2dgather_ret<int> { typedef int4 type; };$/;"	t	struct:__nv_tex2dgather_ret
type	/usr/local/cuda/include/texture_fetch_functions.h	/^template <> struct __nv_tex2dgather_ret<short1> { typedef short4 type; };$/;"	t	struct:__nv_tex2dgather_ret
type	/usr/local/cuda/include/texture_fetch_functions.h	/^template <> struct __nv_tex2dgather_ret<short2> { typedef short4 type; };$/;"	t	struct:__nv_tex2dgather_ret
type	/usr/local/cuda/include/texture_fetch_functions.h	/^template <> struct __nv_tex2dgather_ret<short3> { typedef short4 type; };$/;"	t	struct:__nv_tex2dgather_ret
type	/usr/local/cuda/include/texture_fetch_functions.h	/^template <> struct __nv_tex2dgather_ret<short4> { typedef short4 type; };$/;"	t	struct:__nv_tex2dgather_ret
type	/usr/local/cuda/include/texture_fetch_functions.h	/^template <> struct __nv_tex2dgather_ret<short> { typedef short4 type; };$/;"	t	struct:__nv_tex2dgather_ret
type	/usr/local/cuda/include/texture_fetch_functions.h	/^template <> struct __nv_tex2dgather_ret<signed char> { typedef char4 type; };$/;"	t	struct:__nv_tex2dgather_ret
type	/usr/local/cuda/include/texture_fetch_functions.h	/^template <> struct __nv_tex2dgather_ret<uchar1> { typedef uchar4 type; };$/;"	t	struct:__nv_tex2dgather_ret
type	/usr/local/cuda/include/texture_fetch_functions.h	/^template <> struct __nv_tex2dgather_ret<uchar2> { typedef uchar4 type; };$/;"	t	struct:__nv_tex2dgather_ret
type	/usr/local/cuda/include/texture_fetch_functions.h	/^template <> struct __nv_tex2dgather_ret<uchar3> { typedef uchar4 type; };$/;"	t	struct:__nv_tex2dgather_ret
type	/usr/local/cuda/include/texture_fetch_functions.h	/^template <> struct __nv_tex2dgather_ret<uchar4> { typedef uchar4 type; };$/;"	t	struct:__nv_tex2dgather_ret
type	/usr/local/cuda/include/texture_fetch_functions.h	/^template <> struct __nv_tex2dgather_ret<uint1> { typedef uint4 type; };$/;"	t	struct:__nv_tex2dgather_ret
type	/usr/local/cuda/include/texture_fetch_functions.h	/^template <> struct __nv_tex2dgather_ret<uint2> { typedef uint4 type; };$/;"	t	struct:__nv_tex2dgather_ret
type	/usr/local/cuda/include/texture_fetch_functions.h	/^template <> struct __nv_tex2dgather_ret<uint3> { typedef uint4 type; };$/;"	t	struct:__nv_tex2dgather_ret
type	/usr/local/cuda/include/texture_fetch_functions.h	/^template <> struct __nv_tex2dgather_ret<uint4> { typedef uint4 type; };$/;"	t	struct:__nv_tex2dgather_ret
type	/usr/local/cuda/include/texture_fetch_functions.h	/^template <> struct __nv_tex2dgather_ret<unsigned char> { typedef uchar4 type; };$/;"	t	struct:__nv_tex2dgather_ret
type	/usr/local/cuda/include/texture_fetch_functions.h	/^template <> struct __nv_tex2dgather_ret<unsigned int> { typedef uint4 type; };$/;"	t	struct:__nv_tex2dgather_ret
type	/usr/local/cuda/include/texture_fetch_functions.h	/^template <> struct __nv_tex2dgather_ret<unsigned short> { typedef ushort4 type; };$/;"	t	struct:__nv_tex2dgather_ret
type	/usr/local/cuda/include/texture_fetch_functions.h	/^template <> struct __nv_tex2dgather_ret<ushort1> { typedef ushort4 type; };$/;"	t	struct:__nv_tex2dgather_ret
type	/usr/local/cuda/include/texture_fetch_functions.h	/^template <> struct __nv_tex2dgather_ret<ushort2> { typedef ushort4 type; };$/;"	t	struct:__nv_tex2dgather_ret
type	/usr/local/cuda/include/texture_fetch_functions.h	/^template <> struct __nv_tex2dgather_ret<ushort3> { typedef ushort4 type; };$/;"	t	struct:__nv_tex2dgather_ret
type	/usr/local/cuda/include/texture_fetch_functions.h	/^template <> struct __nv_tex2dgather_ret<ushort4> { typedef ushort4 type; };$/;"	t	struct:__nv_tex2dgather_ret
type	/usr/local/cuda/include/texture_fetch_functions.h	/^template <> struct __nv_tex_rmnf_ret<char1> { typedef float1 type; };$/;"	t	struct:__nv_tex_rmnf_ret
type	/usr/local/cuda/include/texture_fetch_functions.h	/^template <> struct __nv_tex_rmnf_ret<char2> { typedef float2 type; };$/;"	t	struct:__nv_tex_rmnf_ret
type	/usr/local/cuda/include/texture_fetch_functions.h	/^template <> struct __nv_tex_rmnf_ret<char4> { typedef float4 type; };$/;"	t	struct:__nv_tex_rmnf_ret
type	/usr/local/cuda/include/texture_fetch_functions.h	/^template <> struct __nv_tex_rmnf_ret<char> { typedef float type; };$/;"	t	struct:__nv_tex_rmnf_ret
type	/usr/local/cuda/include/texture_fetch_functions.h	/^template <> struct __nv_tex_rmnf_ret<short1> { typedef float1 type; };$/;"	t	struct:__nv_tex_rmnf_ret
type	/usr/local/cuda/include/texture_fetch_functions.h	/^template <> struct __nv_tex_rmnf_ret<short2> { typedef float2 type; };$/;"	t	struct:__nv_tex_rmnf_ret
type	/usr/local/cuda/include/texture_fetch_functions.h	/^template <> struct __nv_tex_rmnf_ret<short4> { typedef float4 type; };$/;"	t	struct:__nv_tex_rmnf_ret
type	/usr/local/cuda/include/texture_fetch_functions.h	/^template <> struct __nv_tex_rmnf_ret<short> { typedef float type; };$/;"	t	struct:__nv_tex_rmnf_ret
type	/usr/local/cuda/include/texture_fetch_functions.h	/^template <> struct __nv_tex_rmnf_ret<signed char> { typedef float type; };$/;"	t	struct:__nv_tex_rmnf_ret
type	/usr/local/cuda/include/texture_fetch_functions.h	/^template <> struct __nv_tex_rmnf_ret<uchar1> { typedef float1 type; };$/;"	t	struct:__nv_tex_rmnf_ret
type	/usr/local/cuda/include/texture_fetch_functions.h	/^template <> struct __nv_tex_rmnf_ret<uchar2> { typedef float2 type; };$/;"	t	struct:__nv_tex_rmnf_ret
type	/usr/local/cuda/include/texture_fetch_functions.h	/^template <> struct __nv_tex_rmnf_ret<uchar4> { typedef float4 type; };$/;"	t	struct:__nv_tex_rmnf_ret
type	/usr/local/cuda/include/texture_fetch_functions.h	/^template <> struct __nv_tex_rmnf_ret<unsigned char> { typedef float type; };$/;"	t	struct:__nv_tex_rmnf_ret
type	/usr/local/cuda/include/texture_fetch_functions.h	/^template <> struct __nv_tex_rmnf_ret<unsigned short> { typedef float type; };$/;"	t	struct:__nv_tex_rmnf_ret
type	/usr/local/cuda/include/texture_fetch_functions.h	/^template <> struct __nv_tex_rmnf_ret<ushort1> { typedef float1 type; };$/;"	t	struct:__nv_tex_rmnf_ret
type	/usr/local/cuda/include/texture_fetch_functions.h	/^template <> struct __nv_tex_rmnf_ret<ushort2> { typedef float2 type; };$/;"	t	struct:__nv_tex_rmnf_ret
type	/usr/local/cuda/include/texture_fetch_functions.h	/^template <> struct __nv_tex_rmnf_ret<ushort4> { typedef float4 type; };$/;"	t	struct:__nv_tex_rmnf_ret
type	/usr/local/cuda/include/texture_fetch_functions.h	/^template <typename T> struct __nv_tex_rmet_cast { typedef T* type;  };$/;"	t	struct:__nv_tex_rmet_cast
type	/usr/local/cuda/include/texture_fetch_functions.h	/^template<> struct __nv_tex2dgather_rmnf_ret<char1> { typedef float4 type; };$/;"	t	struct:__nv_tex2dgather_rmnf_ret
type	/usr/local/cuda/include/texture_fetch_functions.h	/^template<> struct __nv_tex2dgather_rmnf_ret<char2> { typedef float4 type; };$/;"	t	struct:__nv_tex2dgather_rmnf_ret
type	/usr/local/cuda/include/texture_fetch_functions.h	/^template<> struct __nv_tex2dgather_rmnf_ret<char3> { typedef float4 type; };$/;"	t	struct:__nv_tex2dgather_rmnf_ret
type	/usr/local/cuda/include/texture_fetch_functions.h	/^template<> struct __nv_tex2dgather_rmnf_ret<char4> { typedef float4 type; };$/;"	t	struct:__nv_tex2dgather_rmnf_ret
type	/usr/local/cuda/include/texture_fetch_functions.h	/^template<> struct __nv_tex2dgather_rmnf_ret<char> { typedef float4 type; };$/;"	t	struct:__nv_tex2dgather_rmnf_ret
type	/usr/local/cuda/include/texture_fetch_functions.h	/^template<> struct __nv_tex2dgather_rmnf_ret<short1> { typedef float4 type; };$/;"	t	struct:__nv_tex2dgather_rmnf_ret
type	/usr/local/cuda/include/texture_fetch_functions.h	/^template<> struct __nv_tex2dgather_rmnf_ret<short2> { typedef float4 type; };$/;"	t	struct:__nv_tex2dgather_rmnf_ret
type	/usr/local/cuda/include/texture_fetch_functions.h	/^template<> struct __nv_tex2dgather_rmnf_ret<short3> { typedef float4 type; };$/;"	t	struct:__nv_tex2dgather_rmnf_ret
type	/usr/local/cuda/include/texture_fetch_functions.h	/^template<> struct __nv_tex2dgather_rmnf_ret<short4> { typedef float4 type; };$/;"	t	struct:__nv_tex2dgather_rmnf_ret
type	/usr/local/cuda/include/texture_fetch_functions.h	/^template<> struct __nv_tex2dgather_rmnf_ret<signed char> { typedef float4 type; };$/;"	t	struct:__nv_tex2dgather_rmnf_ret
type	/usr/local/cuda/include/texture_fetch_functions.h	/^template<> struct __nv_tex2dgather_rmnf_ret<signed short> { typedef float4 type; };$/;"	t	struct:__nv_tex2dgather_rmnf_ret
type	/usr/local/cuda/include/texture_fetch_functions.h	/^template<> struct __nv_tex2dgather_rmnf_ret<uchar1> { typedef float4 type; };$/;"	t	struct:__nv_tex2dgather_rmnf_ret
type	/usr/local/cuda/include/texture_fetch_functions.h	/^template<> struct __nv_tex2dgather_rmnf_ret<uchar2> { typedef float4 type; };$/;"	t	struct:__nv_tex2dgather_rmnf_ret
type	/usr/local/cuda/include/texture_fetch_functions.h	/^template<> struct __nv_tex2dgather_rmnf_ret<uchar3> { typedef float4 type; };$/;"	t	struct:__nv_tex2dgather_rmnf_ret
type	/usr/local/cuda/include/texture_fetch_functions.h	/^template<> struct __nv_tex2dgather_rmnf_ret<uchar4> { typedef float4 type; };$/;"	t	struct:__nv_tex2dgather_rmnf_ret
type	/usr/local/cuda/include/texture_fetch_functions.h	/^template<> struct __nv_tex2dgather_rmnf_ret<unsigned char> { typedef float4 type; };$/;"	t	struct:__nv_tex2dgather_rmnf_ret
type	/usr/local/cuda/include/texture_fetch_functions.h	/^template<> struct __nv_tex2dgather_rmnf_ret<unsigned short> { typedef float4 type; };$/;"	t	struct:__nv_tex2dgather_rmnf_ret
type	/usr/local/cuda/include/texture_fetch_functions.h	/^template<> struct __nv_tex2dgather_rmnf_ret<ushort1> { typedef float4 type; };$/;"	t	struct:__nv_tex2dgather_rmnf_ret
type	/usr/local/cuda/include/texture_fetch_functions.h	/^template<> struct __nv_tex2dgather_rmnf_ret<ushort2> { typedef float4 type; };$/;"	t	struct:__nv_tex2dgather_rmnf_ret
type	/usr/local/cuda/include/texture_fetch_functions.h	/^template<> struct __nv_tex2dgather_rmnf_ret<ushort3> { typedef float4 type; };$/;"	t	struct:__nv_tex2dgather_rmnf_ret
type	/usr/local/cuda/include/texture_fetch_functions.h	/^template<> struct __nv_tex2dgather_rmnf_ret<ushort4> { typedef float4 type; };$/;"	t	struct:__nv_tex2dgather_rmnf_ret
type	/usr/local/cuda/include/texture_fetch_functions.h	/^template<> struct __nv_tex_rmet_cast<long1> { typedef int1 *type; };$/;"	t	struct:__nv_tex_rmet_cast
type	/usr/local/cuda/include/texture_fetch_functions.h	/^template<> struct __nv_tex_rmet_cast<long2> { typedef int2 *type; };$/;"	t	struct:__nv_tex_rmet_cast
type	/usr/local/cuda/include/texture_fetch_functions.h	/^template<> struct __nv_tex_rmet_cast<long4> { typedef int4 *type; };$/;"	t	struct:__nv_tex_rmet_cast
type	/usr/local/cuda/include/texture_fetch_functions.h	/^template<> struct __nv_tex_rmet_cast<long> { typedef int *type; };$/;"	t	struct:__nv_tex_rmet_cast
type	/usr/local/cuda/include/texture_fetch_functions.h	/^template<> struct __nv_tex_rmet_cast<ulong1> { typedef uint1 *type; };$/;"	t	struct:__nv_tex_rmet_cast
type	/usr/local/cuda/include/texture_fetch_functions.h	/^template<> struct __nv_tex_rmet_cast<ulong2> { typedef uint2 *type; };$/;"	t	struct:__nv_tex_rmet_cast
type	/usr/local/cuda/include/texture_fetch_functions.h	/^template<> struct __nv_tex_rmet_cast<ulong4> { typedef uint4 *type; };$/;"	t	struct:__nv_tex_rmet_cast
type	/usr/local/cuda/include/texture_fetch_functions.h	/^template<> struct __nv_tex_rmet_cast<unsigned long> { typedef unsigned int *type; };$/;"	t	struct:__nv_tex_rmet_cast
type	/usr/local/cuda/include/texture_fetch_functions.h	/^template<> struct __nv_tex_rmet_ret<char1> { typedef char1 type; };$/;"	t	struct:__nv_tex_rmet_ret
type	/usr/local/cuda/include/texture_fetch_functions.h	/^template<> struct __nv_tex_rmet_ret<char2> { typedef char2 type; };$/;"	t	struct:__nv_tex_rmet_ret
type	/usr/local/cuda/include/texture_fetch_functions.h	/^template<> struct __nv_tex_rmet_ret<char4> { typedef char4 type; };$/;"	t	struct:__nv_tex_rmet_ret
type	/usr/local/cuda/include/texture_fetch_functions.h	/^template<> struct __nv_tex_rmet_ret<char> { typedef char type; };$/;"	t	struct:__nv_tex_rmet_ret
type	/usr/local/cuda/include/texture_fetch_functions.h	/^template<> struct __nv_tex_rmet_ret<float1> { typedef float1 type; };$/;"	t	struct:__nv_tex_rmet_ret
type	/usr/local/cuda/include/texture_fetch_functions.h	/^template<> struct __nv_tex_rmet_ret<float2> { typedef float2 type; };$/;"	t	struct:__nv_tex_rmet_ret
type	/usr/local/cuda/include/texture_fetch_functions.h	/^template<> struct __nv_tex_rmet_ret<float4> { typedef float4 type; };$/;"	t	struct:__nv_tex_rmet_ret
type	/usr/local/cuda/include/texture_fetch_functions.h	/^template<> struct __nv_tex_rmet_ret<float> { typedef float type; };$/;"	t	struct:__nv_tex_rmet_ret
type	/usr/local/cuda/include/texture_fetch_functions.h	/^template<> struct __nv_tex_rmet_ret<int1> { typedef int1 type; };$/;"	t	struct:__nv_tex_rmet_ret
type	/usr/local/cuda/include/texture_fetch_functions.h	/^template<> struct __nv_tex_rmet_ret<int2> { typedef int2 type; };$/;"	t	struct:__nv_tex_rmet_ret
type	/usr/local/cuda/include/texture_fetch_functions.h	/^template<> struct __nv_tex_rmet_ret<int4> { typedef int4 type; };$/;"	t	struct:__nv_tex_rmet_ret
type	/usr/local/cuda/include/texture_fetch_functions.h	/^template<> struct __nv_tex_rmet_ret<int> { typedef int type; };$/;"	t	struct:__nv_tex_rmet_ret
type	/usr/local/cuda/include/texture_fetch_functions.h	/^template<> struct __nv_tex_rmet_ret<long1> { typedef long1 type; };$/;"	t	struct:__nv_tex_rmet_ret
type	/usr/local/cuda/include/texture_fetch_functions.h	/^template<> struct __nv_tex_rmet_ret<long2> { typedef long2 type; };$/;"	t	struct:__nv_tex_rmet_ret
type	/usr/local/cuda/include/texture_fetch_functions.h	/^template<> struct __nv_tex_rmet_ret<long4> { typedef long4 type; };$/;"	t	struct:__nv_tex_rmet_ret
type	/usr/local/cuda/include/texture_fetch_functions.h	/^template<> struct __nv_tex_rmet_ret<long> { typedef long type; };$/;"	t	struct:__nv_tex_rmet_ret
type	/usr/local/cuda/include/texture_fetch_functions.h	/^template<> struct __nv_tex_rmet_ret<short1> { typedef short1 type; };$/;"	t	struct:__nv_tex_rmet_ret
type	/usr/local/cuda/include/texture_fetch_functions.h	/^template<> struct __nv_tex_rmet_ret<short2> { typedef short2 type; };$/;"	t	struct:__nv_tex_rmet_ret
type	/usr/local/cuda/include/texture_fetch_functions.h	/^template<> struct __nv_tex_rmet_ret<short4> { typedef short4 type; };$/;"	t	struct:__nv_tex_rmet_ret
type	/usr/local/cuda/include/texture_fetch_functions.h	/^template<> struct __nv_tex_rmet_ret<short> { typedef short type; };$/;"	t	struct:__nv_tex_rmet_ret
type	/usr/local/cuda/include/texture_fetch_functions.h	/^template<> struct __nv_tex_rmet_ret<signed char> { typedef signed char type; };$/;"	t	struct:__nv_tex_rmet_ret
type	/usr/local/cuda/include/texture_fetch_functions.h	/^template<> struct __nv_tex_rmet_ret<uchar1> { typedef uchar1 type; };$/;"	t	struct:__nv_tex_rmet_ret
type	/usr/local/cuda/include/texture_fetch_functions.h	/^template<> struct __nv_tex_rmet_ret<uchar2> { typedef uchar2 type; };$/;"	t	struct:__nv_tex_rmet_ret
type	/usr/local/cuda/include/texture_fetch_functions.h	/^template<> struct __nv_tex_rmet_ret<uchar4> { typedef uchar4 type; };$/;"	t	struct:__nv_tex_rmet_ret
type	/usr/local/cuda/include/texture_fetch_functions.h	/^template<> struct __nv_tex_rmet_ret<uint1> { typedef uint1 type; };$/;"	t	struct:__nv_tex_rmet_ret
type	/usr/local/cuda/include/texture_fetch_functions.h	/^template<> struct __nv_tex_rmet_ret<uint2> { typedef uint2 type; };$/;"	t	struct:__nv_tex_rmet_ret
type	/usr/local/cuda/include/texture_fetch_functions.h	/^template<> struct __nv_tex_rmet_ret<uint4> { typedef uint4 type; };$/;"	t	struct:__nv_tex_rmet_ret
type	/usr/local/cuda/include/texture_fetch_functions.h	/^template<> struct __nv_tex_rmet_ret<ulong1> { typedef ulong1 type; };$/;"	t	struct:__nv_tex_rmet_ret
type	/usr/local/cuda/include/texture_fetch_functions.h	/^template<> struct __nv_tex_rmet_ret<ulong2> { typedef ulong2 type; };$/;"	t	struct:__nv_tex_rmet_ret
type	/usr/local/cuda/include/texture_fetch_functions.h	/^template<> struct __nv_tex_rmet_ret<ulong4> { typedef ulong4 type; };$/;"	t	struct:__nv_tex_rmet_ret
type	/usr/local/cuda/include/texture_fetch_functions.h	/^template<> struct __nv_tex_rmet_ret<unsigned char> { typedef unsigned char type; };$/;"	t	struct:__nv_tex_rmet_ret
type	/usr/local/cuda/include/texture_fetch_functions.h	/^template<> struct __nv_tex_rmet_ret<unsigned int> { typedef unsigned int type; };$/;"	t	struct:__nv_tex_rmet_ret
type	/usr/local/cuda/include/texture_fetch_functions.h	/^template<> struct __nv_tex_rmet_ret<unsigned long> { typedef unsigned long type; };$/;"	t	struct:__nv_tex_rmet_ret
type	/usr/local/cuda/include/texture_fetch_functions.h	/^template<> struct __nv_tex_rmet_ret<unsigned short> { typedef unsigned short type; };$/;"	t	struct:__nv_tex_rmet_ret
type	/usr/local/cuda/include/texture_fetch_functions.h	/^template<> struct __nv_tex_rmet_ret<ushort1> { typedef ushort1 type; };$/;"	t	struct:__nv_tex_rmet_ret
type	/usr/local/cuda/include/texture_fetch_functions.h	/^template<> struct __nv_tex_rmet_ret<ushort2> { typedef ushort2 type; };$/;"	t	struct:__nv_tex_rmet_ret
type	/usr/local/cuda/include/texture_fetch_functions.h	/^template<> struct __nv_tex_rmet_ret<ushort4> { typedef ushort4 type; };$/;"	t	struct:__nv_tex_rmet_ret
type	/usr/local/cuda/include/texture_indirect_functions.h	/^template<> struct __nv_itex_trait<char1> { typedef void type; };$/;"	t	struct:__nv_itex_trait
type	/usr/local/cuda/include/texture_indirect_functions.h	/^template<> struct __nv_itex_trait<char2> { typedef void type; };$/;"	t	struct:__nv_itex_trait
type	/usr/local/cuda/include/texture_indirect_functions.h	/^template<> struct __nv_itex_trait<char4> { typedef void type; };$/;"	t	struct:__nv_itex_trait
type	/usr/local/cuda/include/texture_indirect_functions.h	/^template<> struct __nv_itex_trait<char> { typedef void type; };$/;"	t	struct:__nv_itex_trait
type	/usr/local/cuda/include/texture_indirect_functions.h	/^template<> struct __nv_itex_trait<float1> { typedef void type; };$/;"	t	struct:__nv_itex_trait
type	/usr/local/cuda/include/texture_indirect_functions.h	/^template<> struct __nv_itex_trait<float2> { typedef void type; };$/;"	t	struct:__nv_itex_trait
type	/usr/local/cuda/include/texture_indirect_functions.h	/^template<> struct __nv_itex_trait<float4> { typedef void type; };$/;"	t	struct:__nv_itex_trait
type	/usr/local/cuda/include/texture_indirect_functions.h	/^template<> struct __nv_itex_trait<float> { typedef void type; };$/;"	t	struct:__nv_itex_trait
type	/usr/local/cuda/include/texture_indirect_functions.h	/^template<> struct __nv_itex_trait<int1> { typedef void type; };$/;"	t	struct:__nv_itex_trait
type	/usr/local/cuda/include/texture_indirect_functions.h	/^template<> struct __nv_itex_trait<int2> { typedef void type; };$/;"	t	struct:__nv_itex_trait
type	/usr/local/cuda/include/texture_indirect_functions.h	/^template<> struct __nv_itex_trait<int4> { typedef void type; };$/;"	t	struct:__nv_itex_trait
type	/usr/local/cuda/include/texture_indirect_functions.h	/^template<> struct __nv_itex_trait<int> { typedef void type; };$/;"	t	struct:__nv_itex_trait
type	/usr/local/cuda/include/texture_indirect_functions.h	/^template<> struct __nv_itex_trait<long1> { typedef void type; };$/;"	t	struct:__nv_itex_trait
type	/usr/local/cuda/include/texture_indirect_functions.h	/^template<> struct __nv_itex_trait<long2> { typedef void type; };$/;"	t	struct:__nv_itex_trait
type	/usr/local/cuda/include/texture_indirect_functions.h	/^template<> struct __nv_itex_trait<long4> { typedef void type; };$/;"	t	struct:__nv_itex_trait
type	/usr/local/cuda/include/texture_indirect_functions.h	/^template<> struct __nv_itex_trait<long> { typedef void type; };$/;"	t	struct:__nv_itex_trait
type	/usr/local/cuda/include/texture_indirect_functions.h	/^template<> struct __nv_itex_trait<short1> { typedef void type; };$/;"	t	struct:__nv_itex_trait
type	/usr/local/cuda/include/texture_indirect_functions.h	/^template<> struct __nv_itex_trait<short2> { typedef void type; };$/;"	t	struct:__nv_itex_trait
type	/usr/local/cuda/include/texture_indirect_functions.h	/^template<> struct __nv_itex_trait<short4> { typedef void type; };$/;"	t	struct:__nv_itex_trait
type	/usr/local/cuda/include/texture_indirect_functions.h	/^template<> struct __nv_itex_trait<short> { typedef void type; };$/;"	t	struct:__nv_itex_trait
type	/usr/local/cuda/include/texture_indirect_functions.h	/^template<> struct __nv_itex_trait<signed char> { typedef void type; };$/;"	t	struct:__nv_itex_trait
type	/usr/local/cuda/include/texture_indirect_functions.h	/^template<> struct __nv_itex_trait<uchar1> { typedef void type; };$/;"	t	struct:__nv_itex_trait
type	/usr/local/cuda/include/texture_indirect_functions.h	/^template<> struct __nv_itex_trait<uchar2> { typedef void type; };$/;"	t	struct:__nv_itex_trait
type	/usr/local/cuda/include/texture_indirect_functions.h	/^template<> struct __nv_itex_trait<uchar4> { typedef void type; };$/;"	t	struct:__nv_itex_trait
type	/usr/local/cuda/include/texture_indirect_functions.h	/^template<> struct __nv_itex_trait<uint1> { typedef void type; };$/;"	t	struct:__nv_itex_trait
type	/usr/local/cuda/include/texture_indirect_functions.h	/^template<> struct __nv_itex_trait<uint2> { typedef void type; };$/;"	t	struct:__nv_itex_trait
type	/usr/local/cuda/include/texture_indirect_functions.h	/^template<> struct __nv_itex_trait<uint4> { typedef void type; };$/;"	t	struct:__nv_itex_trait
type	/usr/local/cuda/include/texture_indirect_functions.h	/^template<> struct __nv_itex_trait<ulong1> { typedef void type; };$/;"	t	struct:__nv_itex_trait
type	/usr/local/cuda/include/texture_indirect_functions.h	/^template<> struct __nv_itex_trait<ulong2> { typedef void type; };$/;"	t	struct:__nv_itex_trait
type	/usr/local/cuda/include/texture_indirect_functions.h	/^template<> struct __nv_itex_trait<ulong4> { typedef void type; };$/;"	t	struct:__nv_itex_trait
type	/usr/local/cuda/include/texture_indirect_functions.h	/^template<> struct __nv_itex_trait<unsigned char> { typedef void type; };$/;"	t	struct:__nv_itex_trait
type	/usr/local/cuda/include/texture_indirect_functions.h	/^template<> struct __nv_itex_trait<unsigned int> { typedef void type; };$/;"	t	struct:__nv_itex_trait
type	/usr/local/cuda/include/texture_indirect_functions.h	/^template<> struct __nv_itex_trait<unsigned long> { typedef void type; };$/;"	t	struct:__nv_itex_trait
type	/usr/local/cuda/include/texture_indirect_functions.h	/^template<> struct __nv_itex_trait<unsigned short> { typedef void type; };$/;"	t	struct:__nv_itex_trait
type	/usr/local/cuda/include/texture_indirect_functions.h	/^template<> struct __nv_itex_trait<ushort1> { typedef void type; };$/;"	t	struct:__nv_itex_trait
type	/usr/local/cuda/include/texture_indirect_functions.h	/^template<> struct __nv_itex_trait<ushort2> { typedef void type; };$/;"	t	struct:__nv_itex_trait
type	/usr/local/cuda/include/texture_indirect_functions.h	/^template<> struct __nv_itex_trait<ushort4> { typedef void type; };$/;"	t	struct:__nv_itex_trait
type	src/parser.c	/^    char *type;$/;"	m	struct:__anon9	file:
type	src/stb_image.h	/^   stbi__uint32 type;$/;"	m	struct:__anon21
type	src/stb_image.h	/^   stbi_uc size,type,channel;$/;"	m	struct:__anon24
uReserved1	/usr/local/cuda/include/dynlink_nvcuvid.h	/^    unsigned int uReserved1[5];             \/**< Reserved for future use - set to 0 *\/$/;"	m	struct:_CUVIDPARSERPARAMS
uReserved1	/usr/local/cuda/include/dynlink_nvcuvid.h	/^    unsigned int uReserved1[7];                 \/**< Reserved for future use - set to zero  *\/$/;"	m	struct:_CUVIDSOURCEPARAMS
uchar1	/usr/local/cuda/include/vector_types.h	/^struct __device_builtin__ uchar1$/;"	s
uchar1	/usr/local/cuda/include/vector_types.h	/^typedef __device_builtin__ struct uchar1 uchar1;$/;"	t	typeref:struct:uchar1
uchar2	/usr/local/cuda/include/vector_types.h	/^typedef __device_builtin__ struct uchar2 uchar2;$/;"	t	typeref:struct:uchar2
uchar3	/usr/local/cuda/include/vector_types.h	/^struct __device_builtin__ uchar3$/;"	s
uchar3	/usr/local/cuda/include/vector_types.h	/^typedef __device_builtin__ struct uchar3 uchar3;$/;"	t	typeref:struct:uchar3
uchar4	/usr/local/cuda/include/vector_types.h	/^typedef __device_builtin__ struct uchar4 uchar4;$/;"	t	typeref:struct:uchar4
uiVal	/usr/local/cuda/include/nvml.h	/^    unsigned int uiVal;             \/\/!< If the value is unsigned int$/;"	m	union:nvmlValue_st
uiValue	/usr/local/cuda/include/nvToolsExt.h	/^        uint32_t uiValue;$/;"	m	union:nvtxEventAttributes_v2::payload_t
uint1	/usr/local/cuda/include/vector_types.h	/^struct __device_builtin__ uint1$/;"	s
uint1	/usr/local/cuda/include/vector_types.h	/^typedef __device_builtin__ struct uint1 uint1;$/;"	t	typeref:struct:uint1
uint2	/usr/local/cuda/include/vector_types.h	/^typedef __device_builtin__ struct uint2 uint2;$/;"	t	typeref:struct:uint2
uint2double	/usr/local/cuda/include/device_double_functions.hpp	/^__DEVICE_DOUBLE_FUNCTIONS_DECL__ double uint2double(unsigned int a, enum cudaRoundMode mode)$/;"	f
uint2float	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ float uint2float(unsigned int a, enum cudaRoundMode mode)$/;"	f
uint3	/usr/local/cuda/include/vector_types.h	/^struct __device_builtin__ uint3$/;"	s
uint3	/usr/local/cuda/include/vector_types.h	/^typedef __device_builtin__ struct uint3 uint3;$/;"	t	typeref:struct:uint3
uint4	/usr/local/cuda/include/vector_types.h	/^typedef __device_builtin__ struct uint4 uint4;$/;"	t	typeref:struct:uint4
uint_as_float	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ float uint_as_float(unsigned int a)$/;"	f
ulClockRate	/usr/local/cuda/include/dynlink_nvcuvid.h	/^    unsigned int ulClockRate;                   \/**< Timestamp units in Hz (0=default=10000000Hz)  *\/$/;"	m	struct:_CUVIDSOURCEPARAMS
ulClockRate	/usr/local/cuda/include/dynlink_nvcuvid.h	/^    unsigned int ulClockRate;               \/**< Timestamp units in Hz (0=default=10000000Hz) *\/$/;"	m	struct:_CUVIDPARSERPARAMS
ulCreationFlags	/usr/local/cuda/include/dynlink_cuviddec.h	/^    unsigned long ulCreationFlags;      \/**< Decoder creation flags (cudaVideoCreateFlags_XXX) *\/$/;"	m	struct:_CUVIDDECODECREATEINFO
ulErrorThreshold	/usr/local/cuda/include/dynlink_nvcuvid.h	/^    unsigned int ulErrorThreshold;          \/**< % Error threshold (0-100) for calling pfnDecodePicture (100=always call pfnDecodePicture even if picture bitstream is fully corrupted) *\/$/;"	m	struct:_CUVIDPARSERPARAMS
ulHeight	/usr/local/cuda/include/dynlink_cuviddec.h	/^    unsigned long ulHeight;             \/**< Coded Sequence Height *\/$/;"	m	struct:_CUVIDDECODECREATEINFO
ulMaxDisplayDelay	/usr/local/cuda/include/dynlink_nvcuvid.h	/^    unsigned int ulMaxDisplayDelay;         \/**< Max display queue delay (improves pipelining of decode with display) - 0=no delay (recommended values: 2..4) *\/$/;"	m	struct:_CUVIDPARSERPARAMS
ulMaxNumDecodeSurfaces	/usr/local/cuda/include/dynlink_nvcuvid.h	/^    unsigned int ulMaxNumDecodeSurfaces;    \/**< Max # of decode surfaces (parser will cycle through these) *\/$/;"	m	struct:_CUVIDPARSERPARAMS
ulNumDecodeSurfaces	/usr/local/cuda/include/dynlink_cuviddec.h	/^    unsigned long ulNumDecodeSurfaces;  \/**< Maximum number of internal decode surfaces *\/$/;"	m	struct:_CUVIDDECODECREATEINFO
ulNumOutputSurfaces	/usr/local/cuda/include/dynlink_cuviddec.h	/^    unsigned long ulNumOutputSurfaces;         \/**< Maximum number of output surfaces simultaneously mapped *\/$/;"	m	struct:_CUVIDDECODECREATEINFO
ulTargetHeight	/usr/local/cuda/include/dynlink_cuviddec.h	/^    unsigned long ulTargetHeight;              \/**< Post-processed Output Height (Should be aligbed to 2) *\/$/;"	m	struct:_CUVIDDECODECREATEINFO
ulTargetWidth	/usr/local/cuda/include/dynlink_cuviddec.h	/^    unsigned long ulTargetWidth;               \/**< Post-processed Output Width (Should be aligned to 2) *\/$/;"	m	struct:_CUVIDDECODECREATEINFO
ulVal	/usr/local/cuda/include/nvml.h	/^    unsigned long ulVal;            \/\/!< If the value is unsigned long$/;"	m	union:nvmlValue_st
ulWidth	/usr/local/cuda/include/dynlink_cuviddec.h	/^    unsigned long ulWidth;              \/**< Coded Sequence Width *\/$/;"	m	struct:_CUVIDDECODECREATEINFO
ull2double	/usr/local/cuda/include/device_double_functions.hpp	/^__DEVICE_DOUBLE_FUNCTIONS_DECL__ double ull2double(unsigned long long int a, enum cudaRoundMode mode)$/;"	f
ullVal	/usr/local/cuda/include/nvml.h	/^    unsigned long long ullVal;      \/\/!< If the value is unsigned long long$/;"	m	union:nvmlValue_st
ullValue	/usr/local/cuda/include/nvToolsExt.h	/^        uint64_t ullValue;$/;"	m	union:nvtxEventAttributes_v2::payload_t
ullValue	/usr/local/cuda/include/nvToolsExt.h	/^        uint64_t ullValue;$/;"	m	union:nvtxResourceAttributes_v0::identifier_t
ullmax	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ unsigned long long ullmax(unsigned long long x,$/;"	f
ullmax	/usr/local/cuda/include/math_functions.hpp	/^__HELPER_FUNC_LINKAGE unsigned long long int ullmax(unsigned long long int a,$/;"	f
ullmin	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ unsigned long long ullmin(unsigned long long x,$/;"	f
ullmin	/usr/local/cuda/include/math_functions.hpp	/^__HELPER_FUNC_LINKAGE unsigned long long int ullmin(unsigned long long int a,$/;"	f
ulong1	/usr/local/cuda/include/vector_types.h	/^struct __device_builtin__ ulong1$/;"	s
ulong1	/usr/local/cuda/include/vector_types.h	/^typedef __device_builtin__ struct ulong1 ulong1;$/;"	t	typeref:struct:ulong1
ulong2	/usr/local/cuda/include/vector_types.h	/^typedef __device_builtin__ struct ulong2 ulong2;$/;"	t	typeref:struct:ulong2
ulong3	/usr/local/cuda/include/vector_types.h	/^struct __device_builtin__ ulong3$/;"	s
ulong3	/usr/local/cuda/include/vector_types.h	/^typedef __device_builtin__ struct ulong3 ulong3;$/;"	t	typeref:struct:ulong3
ulong4	/usr/local/cuda/include/vector_types.h	/^typedef __device_builtin__ struct ulong4 ulong4;$/;"	t	typeref:struct:ulong4
ulonglong1	/usr/local/cuda/include/vector_types.h	/^struct __device_builtin__ ulonglong1$/;"	s
ulonglong1	/usr/local/cuda/include/vector_types.h	/^typedef __device_builtin__ struct ulonglong1 ulonglong1;$/;"	t	typeref:struct:ulonglong1
ulonglong2	/usr/local/cuda/include/vector_types.h	/^typedef __device_builtin__ struct ulonglong2 ulonglong2;$/;"	t	typeref:struct:ulonglong2
ulonglong3	/usr/local/cuda/include/vector_types.h	/^struct __device_builtin__ ulonglong3$/;"	s
ulonglong3	/usr/local/cuda/include/vector_types.h	/^typedef __device_builtin__ struct ulonglong3 ulonglong3;$/;"	t	typeref:struct:ulonglong3
ulonglong4	/usr/local/cuda/include/vector_types.h	/^typedef __device_builtin__ struct ulonglong4 ulonglong4;$/;"	t	typeref:struct:ulonglong4
umax	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ unsigned int umax(unsigned int x, unsigned int y)$/;"	f
umax	/usr/local/cuda/include/math_functions.hpp	/^__HELPER_FUNC_LINKAGE unsigned int umax(unsigned int a, unsigned int b)$/;"	f
umin	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ unsigned int umin(unsigned int x, unsigned int y)$/;"	f
umin	/usr/local/cuda/include/math_functions.hpp	/^__HELPER_FUNC_LINKAGE unsigned umin(unsigned int a, unsigned int b)$/;"	f
umul24	/usr/local/cuda/include/device_functions.hpp	/^__DEVICE_FUNCTIONS_STATIC_DECL__ unsigned int umul24(unsigned int a, unsigned int b)$/;"	f
unicode	/usr/local/cuda/include/nvToolsExt.h	/^    const wchar_t* unicode;$/;"	m	union:nvtxMessageValue_t
unifiedAddressing	/usr/local/cuda/include/driver_types.h	/^    int    unifiedAddressing;          \/**< Device shares a unified address space with the host *\/$/;"	m	struct:cudaDeviceProp
uniform_spacing_flag	/usr/local/cuda/include/dynlink_cuviddec.h	/^    unsigned char uniform_spacing_flag;$/;"	m	struct:_CUVIDHEVCPICPARAMS
units	/usr/local/cuda/include/nvml.h	/^    nvmlNvLinkUtilizationCountUnits_t units;$/;"	m	struct:nvmlNvLinkUtilizationControl_st
unpaired_field	/usr/local/cuda/include/dynlink_cuviddec.h	/^    int unpaired_field;     \/**< Input only contains one field (2nd field is invalid) *\/$/;"	m	struct:_CUVIDPROCPARAMS
unused	/usr/local/cuda/include/nvml.h	/^    unsigned int unused;        \/\/!< Currently unused. This should be initialized to 0 by the caller before any API call$/;"	m	struct:nvmlFieldValue_st
update_connected_layer	src/connected_layer.c	/^void update_connected_layer(layer l, update_args a)$/;"	f
update_connected_layer_gpu	src/connected_layer.c	/^void update_connected_layer_gpu(layer l, update_args a)$/;"	f
update_convolutional_layer	src/convolutional_layer.c	/^void update_convolutional_layer(convolutional_layer l, update_args a)$/;"	f
update_crnn_layer	src/crnn_layer.c	/^void update_crnn_layer(layer l, update_args a)$/;"	f
update_crnn_layer_gpu	src/crnn_layer.c	/^void update_crnn_layer_gpu(layer l, update_args a)$/;"	f
update_deconvolutional_layer	src/deconvolutional_layer.c	/^void update_deconvolutional_layer(layer l, update_args a)$/;"	f
update_gru_layer	src/gru_layer.c	/^void update_gru_layer(layer l, update_args a)$/;"	f
update_gru_layer_gpu	src/gru_layer.c	/^void update_gru_layer_gpu(layer l, update_args a)$/;"	f
update_local_layer	src/local_layer.c	/^void update_local_layer(local_layer l, update_args a)$/;"	f
update_local_layer_gpu	src/local_layer.c	/^void update_local_layer_gpu(local_layer l, update_args a)$/;"	f
update_lstm_layer	src/lstm_layer.c	/^void update_lstm_layer(layer l, update_args a)$/;"	f
update_lstm_layer_gpu	src/lstm_layer.c	/^void update_lstm_layer_gpu(layer l, update_args a)$/;"	f
update_mb_segmentation_data	/usr/local/cuda/include/dynlink_cuviddec.h	/^            unsigned char update_mb_segmentation_data : 1;    \/**< Must be 0 if segmentation is not enabled *\/$/;"	m	struct:_CUVIDVP8PICPARAMS::__anon118::__anon119
update_network	src/network.c	/^void update_network(network net)$/;"	f
update_rnn_layer	src/rnn_layer.c	/^void update_rnn_layer(layer l, update_args a)$/;"	f
update_rnn_layer_gpu	src/rnn_layer.c	/^void update_rnn_layer_gpu(layer l, update_args a)$/;"	f
used	/usr/local/cuda/include/nvml.h	/^    unsigned long long used;         \/\/!< Allocated FB memory (in bytes). Note that the driver\/GPU always sets aside a small amount of memory for bookkeeping$/;"	m	struct:nvmlMemory_st
used	src/option_list.h	/^    int used;$/;"	m	struct:__anon8
usedGpuMemory	/usr/local/cuda/include/nvml.h	/^    unsigned long long usedGpuMemory; \/\/!< Amount of used GPU memory in bytes.$/;"	m	struct:nvmlProcessInfo_st
used_for_reference	/usr/local/cuda/include/dynlink_cuviddec.h	/^    int used_for_reference;     \/**< 0=unused, 1=top_field, 2=bottom_field, 3=both_fields *\/$/;"	m	struct:_CUVIDH264DPBENTRY
ushort1	/usr/local/cuda/include/vector_types.h	/^struct __device_builtin__ ushort1$/;"	s
ushort1	/usr/local/cuda/include/vector_types.h	/^typedef __device_builtin__ struct ushort1 ushort1;$/;"	t	typeref:struct:ushort1
ushort2	/usr/local/cuda/include/vector_types.h	/^typedef __device_builtin__ struct ushort2 ushort2;$/;"	t	typeref:struct:ushort2
ushort3	/usr/local/cuda/include/vector_types.h	/^struct __device_builtin__ ushort3$/;"	s
ushort3	/usr/local/cuda/include/vector_types.h	/^typedef __device_builtin__ struct ushort3 ushort3;$/;"	t	typeref:struct:ushort3
ushort4	/usr/local/cuda/include/vector_types.h	/^typedef __device_builtin__ struct ushort4 ushort4;$/;"	t	typeref:struct:ushort4
v	/usr/local/cuda/include/curand_kernel.h	/^    unsigned int d, v[5];$/;"	m	struct:curandStateXORWOW
v	/usr/local/cuda/include/curand_kernel.h	/^    unsigned int v;$/;"	m	struct:curandStateTest
v	src/stb_image.h	/^      int h,v;$/;"	m	struct:__anon16::__anon17
vResolution	/usr/local/cuda/include/nvml.h	/^    unsigned int       vResolution;     \/\/!< Current encode vertical resolution$/;"	m	struct:nvmlEncoderSessionInfo_st
vaSpaceToken	/usr/local/cuda/include/cuda.h	/^    unsigned int vaSpaceToken;$/;"	m	struct:CUDA_POINTER_ATTRIBUTE_P2P_TOKENS_st
val	src/option_list.h	/^    char *val;$/;"	m	struct:__anon8
validate_compare	src/compare.c	/^void validate_compare(char *filename, char *weightfile)$/;"	f
validate_uint32	src/stb_image.h	/^typedef unsigned char validate_uint32[sizeof(stbi__uint32)==4 ? 1 : -1];$/;"	t
value	/usr/local/cuda/include/cuda.h	/^            cuuint32_t value;$/;"	m	union:CUstreamBatchMemOpParams_union::CUstreamMemOpWaitValueParams_st::__anon39
value	/usr/local/cuda/include/cuda.h	/^            cuuint32_t value;$/;"	m	union:CUstreamBatchMemOpParams_union::CUstreamMemOpWriteValueParams_st::__anon40
value	/usr/local/cuda/include/nvml.h	/^    nvmlValue_t value;          \/\/!< Value for this field. This is only valid if nvmlReturn == NVML_SUCCESS$/;"	m	struct:nvmlFieldValue_st
value	src/stb_image.h	/^   stbi__uint16 value[288];$/;"	m	struct:__anon19
value64	/usr/local/cuda/include/cuda.h	/^            cuuint64_t value64;$/;"	m	union:CUstreamBatchMemOpParams_union::CUstreamMemOpWaitValueParams_st::__anon39
value64	/usr/local/cuda/include/cuda.h	/^            cuuint64_t value64;$/;"	m	union:CUstreamBatchMemOpParams_union::CUstreamMemOpWriteValueParams_st::__anon40
valueType	/usr/local/cuda/include/nvml.h	/^    nvmlValueType_t valueType;  \/\/!< Type of the value stored in value$/;"	m	struct:nvmlFieldValue_st
values	src/stb_image.h	/^   stbi_uc  values[256];$/;"	m	struct:__anon15
variance_array	src/utils.c	/^float variance_array(float *a, int n)$/;"	f
variance_cpu	src/blas.c	/^void variance_cpu(float *x, float *mean, int batch, int filters, int spatial, float *variance)$/;"	f
variance_delta_cpu	src/batchnorm_layer.c	/^void  variance_delta_cpu(float *x, float *delta, float *mean, float *variance, int batch, int filters, int spatial, float *variance_delta)$/;"	f
vc1	/usr/local/cuda/include/dynlink_cuviddec.h	/^        CUVIDVC1PICPARAMS vc1;$/;"	m	union:_CUVIDPICPARAMS::__anon120
version	/usr/local/cuda/include/cudalibxt.h	/^    int version;                             \/\/descriptor version$/;"	m	struct:cudaXtDesc_t
version	/usr/local/cuda/include/cudalibxt.h	/^    int version;                \/\/descriptor version$/;"	m	struct:cudaLibXtDesc_t
version	/usr/local/cuda/include/dynlink_cuviddec.h	/^            unsigned char version : 3;$/;"	m	struct:_CUVIDVP8PICPARAMS::__anon118::__anon119
version	/usr/local/cuda/include/fatBinaryCtl.h	/^  int version;$/;"	m	struct:__anon134
version	/usr/local/cuda/include/nvToolsExt.h	/^    uint16_t version;$/;"	m	struct:nvtxEventAttributes_v2
version	/usr/local/cuda/include/nvToolsExt.h	/^    uint16_t version;$/;"	m	struct:nvtxInitializationAttributes_v2
version	/usr/local/cuda/include/nvToolsExt.h	/^    uint16_t version;$/;"	m	struct:nvtxResourceAttributes_v0
version	/usr/local/cuda/include/nvToolsExtSync.h	/^    uint16_t version;$/;"	m	struct:nvtxSyncUserAttributes_v0
vgpuInstance	/usr/local/cuda/include/nvml.h	/^    nvmlVgpuInstance_t vgpuInstance;                \/\/!< vGPU Instance$/;"	m	struct:nvmlVgpuProcessUtilizationSample_st
vgpuInstance	/usr/local/cuda/include/nvml.h	/^    nvmlVgpuInstance_t vgpuInstance;    \/\/!< Owning vGPU instance ID (only valid on vGPU hosts, otherwise zero)$/;"	m	struct:nvmlEncoderSessionInfo_st
vgpuInstance	/usr/local/cuda/include/nvml.h	/^    nvmlVgpuInstance_t vgpuInstance;    \/\/!< vGPU Instance$/;"	m	struct:nvmlVgpuInstanceUtilizationSample_st
vidLock	/usr/local/cuda/include/dynlink_cuviddec.h	/^    CUvideoctxlock vidLock;                    \/**< If non-NULL, context lock used for synchronizing ownership of the cuda context *\/$/;"	m	struct:_CUVIDDECODECREATEINFO
video_format	/usr/local/cuda/include/dynlink_nvcuvid.h	/^        unsigned char video_format          : 3;$/;"	m	struct:__anon123::__anon127
video_full_range_flag	/usr/local/cuda/include/dynlink_nvcuvid.h	/^        unsigned char video_full_range_flag : 1;$/;"	m	struct:__anon123::__anon127
video_object_layer_height	/usr/local/cuda/include/dynlink_cuviddec.h	/^    int video_object_layer_height;$/;"	m	struct:_CUVIDMPEG4PICPARAMS
video_object_layer_width	/usr/local/cuda/include/dynlink_cuviddec.h	/^    int video_object_layer_width;$/;"	m	struct:_CUVIDMPEG4PICPARAMS
video_signal_description	/usr/local/cuda/include/dynlink_nvcuvid.h	/^    } video_signal_description;$/;"	m	struct:__anon123	typeref:struct:__anon123::__anon127
view_id	/usr/local/cuda/include/dynlink_cuviddec.h	/^    int view_id;$/;"	m	struct:_CUVIDH264MVCEXT
violationTime	/usr/local/cuda/include/nvml.h	/^    unsigned long long violationTime;  \/\/!< violationTime in Nanoseconds$/;"	m	struct:nvmlViolationTime_st
visualize_convolutional_layer	src/convolutional_layer.c	/^image *visualize_convolutional_layer(convolutional_layer l, char *window, image *prev_weights)$/;"	f
visualize_network	src/network.c	/^void visualize_network(network net)$/;"	f
voltage	/usr/local/cuda/include/nvml.h	/^    unsigned int voltage;            \/\/!< PSU voltage (V)$/;"	m	struct:nvmlPSUInfo_st
vop_coded	/usr/local/cuda/include/dynlink_cuviddec.h	/^    int vop_coded;$/;"	m	struct:_CUVIDMPEG4PICPARAMS
vop_coding_type	/usr/local/cuda/include/dynlink_cuviddec.h	/^    int vop_coding_type;$/;"	m	struct:_CUVIDMPEG4PICPARAMS
vop_fcode_backward	/usr/local/cuda/include/dynlink_cuviddec.h	/^    int vop_fcode_backward;$/;"	m	struct:_CUVIDMPEG4PICPARAMS
vop_fcode_forward	/usr/local/cuda/include/dynlink_cuviddec.h	/^    int vop_fcode_forward;$/;"	m	struct:_CUVIDMPEG4PICPARAMS
vop_rounding_type	/usr/local/cuda/include/dynlink_cuviddec.h	/^    int vop_rounding_type;$/;"	m	struct:_CUVIDMPEG4PICPARAMS
vop_time_increment_bitcount	/usr/local/cuda/include/dynlink_cuviddec.h	/^    int vop_time_increment_bitcount;$/;"	m	struct:_CUVIDMPEG4PICPARAMS
vp8	/usr/local/cuda/include/dynlink_cuviddec.h	/^        CUVIDVP8PICPARAMS vp8;$/;"	m	union:_CUVIDPICPARAMS::__anon120
vp9	/usr/local/cuda/include/dynlink_cuviddec.h	/^        CUVIDVP9PICPARAMS vp9;$/;"	m	union:_CUVIDPICPARAMS::__anon120
vs	src/stb_image.h	/^   int hs,vs;   \/\/ expansion factor in each axis$/;"	m	struct:__anon18
vstransform	/usr/local/cuda/include/dynlink_cuviddec.h	/^    int vstransform;$/;"	m	struct:_CUVIDVC1PICPARAMS
w	/usr/local/cuda/include/driver_types.h	/^    int                        w; \/**< w *\/$/;"	m	struct:cudaChannelFormatDesc
w	src/binary_convolution.h	/^    int w;       \/\/ width, x$/;"	m	struct:__anon1
w	src/parser.c	/^    int w;$/;"	m	struct:size_params	file:
w	src/stb_image.h	/^   int w,h;$/;"	m	struct:__anon26
w2	src/stb_image.h	/^      int x,y,w2,h2;$/;"	m	struct:__anon16::__anon17
wFrameTagFlags	/usr/local/cuda/include/dynlink_cuviddec.h	/^        unsigned char wFrameTagFlags;$/;"	m	union:_CUVIDVP8PICPARAMS::__anon118
w_lores	src/stb_image.h	/^   int w_lores; \/\/ horizontal pixels pre-expansion$/;"	m	struct:__anon18
waitValue	/usr/local/cuda/include/cuda.h	/^    } waitValue;$/;"	m	union:CUstreamBatchMemOpParams_union	typeref:struct:CUstreamBatchMemOpParams_union::CUstreamMemOpWaitValueParams_st
warpSize	/usr/local/cuda/include/cuda_fp16.h	1025;"	d
warpSize	/usr/local/cuda/include/cuda_fp16.h	987;"	d
warpSize	/usr/local/cuda/include/cuda_occupancy.h	/^    int    warpSize;                    \/\/ Warp size$/;"	m	struct:cudaOccDeviceProp
warpSize	/usr/local/cuda/include/device_launch_parameters.h	/^int __device_builtin__ __STORAGE__ warpSize;$/;"	v
warpSize	/usr/local/cuda/include/driver_types.h	/^    int    warpSize;                   \/**< Warp size in threads *\/$/;"	m	struct:cudaDeviceProp
warpSize	/usr/local/cuda/include/sm_30_intrinsics.h	226;"	d
warpSize	/usr/local/cuda/include/sm_30_intrinsics.h	88;"	d
warpSize	/usr/local/cuda/include/sm_30_intrinsics.hpp	589;"	d
warpSize	/usr/local/cuda/include/sm_30_intrinsics.hpp	87;"	d
warpsz	/usr/local/cuda/include/cooperative_groups_helpers.h	/^    _CG_STATIC_QUALIFIER unsigned int warpsz()$/;"	f	namespace:__internal
weighted_bipred_flag	/usr/local/cuda/include/dynlink_cuviddec.h	/^    unsigned char weighted_bipred_flag;$/;"	m	struct:_CUVIDHEVCPICPARAMS
weighted_bipred_idc	/usr/local/cuda/include/dynlink_cuviddec.h	/^    int weighted_bipred_idc;$/;"	m	struct:_CUVIDH264PICPARAMS
weighted_delta_cpu	src/blas.c	/^void weighted_delta_cpu(float *a, float *b, float *s, float *da, float *db, float *ds, int n, float *dc)$/;"	f
weighted_pred_flag	/usr/local/cuda/include/dynlink_cuviddec.h	/^    int weighted_pred_flag;$/;"	m	struct:_CUVIDH264PICPARAMS
weighted_pred_flag	/usr/local/cuda/include/dynlink_cuviddec.h	/^    unsigned char weighted_pred_flag;$/;"	m	struct:_CUVIDHEVCPICPARAMS
weighted_sum_cpu	src/blas.c	/^void weighted_sum_cpu(float *a, float *b, float *s, int n, float *c)$/;"	f
weights	src/binary_convolution.h	/^    float *weights;     \/\/ weight or filter values$/;"	m	struct:__anon1
weights	src/common.h	/^	dim3 weights;$/;"	m	struct:__anon6
what_time_is_it_now	src/utils.c	/^double what_time_is_it_now()$/;"	f
width	/usr/local/cuda/include/cuda.h	/^            size_t width;                     \/**< Width of the array in elements *\/$/;"	m	struct:CUDA_RESOURCE_DESC_st::__anon41::__anon45
width	/usr/local/cuda/include/cuda.h	/^    size_t width;                  \/**< Width of the resource view *\/$/;"	m	struct:CUDA_RESOURCE_VIEW_DESC_st
width	/usr/local/cuda/include/cudaEGL.h	/^    unsigned int width;                 \/**< Width of first plane *\/$/;"	m	struct:CUeglFrame_st
width	/usr/local/cuda/include/driver_types.h	/^			size_t width;                      \/**< Width of the array in elements *\/$/;"	m	struct:cudaResourceDesc::__anon109::__anon113
width	/usr/local/cuda/include/driver_types.h	/^    size_t                      width;            \/**< Width of the resource view *\/$/;"	m	struct:cudaResourceViewDesc
width	/usr/local/cuda/include/driver_types.h	/^    size_t width;     \/**< Width in elements when referring to array memory, in bytes when referring to linear memory *\/$/;"	m	struct:cudaExtent
width	/usr/local/cuda/include/dynlink_cuviddec.h	/^    int width;$/;"	m	struct:_CUVIDVP8PICPARAMS
width	/usr/local/cuda/include/dynlink_cuviddec.h	/^    unsigned int width;$/;"	m	struct:_CUVIDVP9PICPARAMS
width	/usr/local/cuda/include/nppdefs.h	/^    int width;      \/**<  Rectangle width. *\/$/;"	m	struct:__anon150
width	/usr/local/cuda/include/nppdefs.h	/^    int width;  \/**<  Rectangle width. *\/$/;"	m	struct:__anon149
win_h	src/sdl_image.c	/^    int win_h;$/;"	m	struct:__anon10	file:
win_w	src/sdl_image.c	/^    int win_w;$/;"	m	struct:__anon10	file:
window	src/sdl_image.c	/^static SDL_Window   *window;$/;"	v	file:
windows	src/image.c	/^int windows = 0;$/;"	v
write3	src/stb_image_write.h	/^static void write3(FILE *f, unsigned char a, unsigned char b, unsigned char c)$/;"	f
writeValue	/usr/local/cuda/include/cuda.h	/^    } writeValue;$/;"	m	union:CUstreamBatchMemOpParams_union	typeref:struct:CUstreamBatchMemOpParams_union::CUstreamMemOpWriteValueParams_st
write_all	src/utils.c	/^void write_all(int fd, char *buffer, size_t bytes)$/;"	f
write_all_fail	src/utils.c	/^int write_all_fail(int fd, char *buffer, size_t bytes)$/;"	f
write_int	src/utils.c	/^void write_int(int fd, int n)$/;"	f
write_pixels	src/stb_image_write.h	/^static void write_pixels(FILE *f, int rgb_dir, int vdir, int x, int y, int comp, void *data, int write_alpha, int scanline_pad, int expand_mono)$/;"	f
writefv	src/stb_image_write.h	/^static void writefv(FILE *f, const char *fmt, va_list v)$/;"	f
wx	src/binary_convolution.h	/^    int wx;$/;"	m	struct:__anon1
wy	src/binary_convolution.h	/^    int wy;$/;"	m	struct:__anon1
x	/usr/local/cuda/include/curand_kernel.h	/^    unsigned int i, x, c;$/;"	m	struct:curandStateScrambledSobol32
x	/usr/local/cuda/include/curand_kernel.h	/^    unsigned int i, x, c;$/;"	m	struct:curandStateSobol32
x	/usr/local/cuda/include/curand_kernel.h	/^    unsigned long long i, x, c;$/;"	m	struct:curandStateScrambledSobol64
x	/usr/local/cuda/include/curand_kernel.h	/^    unsigned long long i, x, c;$/;"	m	struct:curandStateSobol64
x	/usr/local/cuda/include/driver_types.h	/^    int                        x; \/**< x *\/$/;"	m	struct:cudaChannelFormatDesc
x	/usr/local/cuda/include/driver_types.h	/^    size_t x;     \/**< x *\/$/;"	m	struct:cudaPos
x	/usr/local/cuda/include/dynlink_nvcuvid.h	/^        int x;$/;"	m	struct:__anon123::__anon126
x	/usr/local/cuda/include/nppdefs.h	/^    int x;          \/**<  x-coordinate of upper left corner (lowest memory address). *\/$/;"	m	struct:__anon150
x	/usr/local/cuda/include/nppdefs.h	/^    int x;      \/**<  x-coordinate. *\/$/;"	m	struct:__anon147
x	/usr/local/cuda/include/vector_types.h	/^    double x, y, z;$/;"	m	struct:double3
x	/usr/local/cuda/include/vector_types.h	/^    double x;$/;"	m	struct:double1
x	/usr/local/cuda/include/vector_types.h	/^    float x, y, z;$/;"	m	struct:float3
x	/usr/local/cuda/include/vector_types.h	/^    float x; float y; float __cuda_gnu_arm_ice_workaround[0];$/;"	m	struct:float2
x	/usr/local/cuda/include/vector_types.h	/^    float x;$/;"	m	struct:float1
x	/usr/local/cuda/include/vector_types.h	/^    int x, y, z;$/;"	m	struct:int3
x	/usr/local/cuda/include/vector_types.h	/^    int x;$/;"	m	struct:int1
x	/usr/local/cuda/include/vector_types.h	/^    long int x, y, z;$/;"	m	struct:long3
x	/usr/local/cuda/include/vector_types.h	/^    long int x;$/;"	m	struct:long1
x	/usr/local/cuda/include/vector_types.h	/^    long long int x, y, z;$/;"	m	struct:longlong3
x	/usr/local/cuda/include/vector_types.h	/^    long long int x;$/;"	m	struct:longlong1
x	/usr/local/cuda/include/vector_types.h	/^    short x, y, z;$/;"	m	struct:short3
x	/usr/local/cuda/include/vector_types.h	/^    short x;$/;"	m	struct:short1
x	/usr/local/cuda/include/vector_types.h	/^    signed char x, y, z;$/;"	m	struct:char3
x	/usr/local/cuda/include/vector_types.h	/^    signed char x;$/;"	m	struct:char1
x	/usr/local/cuda/include/vector_types.h	/^    unsigned char x, y, z;$/;"	m	struct:uchar3
x	/usr/local/cuda/include/vector_types.h	/^    unsigned char x;$/;"	m	struct:uchar1
x	/usr/local/cuda/include/vector_types.h	/^    unsigned int x, y, z;$/;"	m	struct:dim3
x	/usr/local/cuda/include/vector_types.h	/^    unsigned int x, y, z;$/;"	m	struct:uint3
x	/usr/local/cuda/include/vector_types.h	/^    unsigned int x;$/;"	m	struct:uint1
x	/usr/local/cuda/include/vector_types.h	/^    unsigned long int x, y, z;$/;"	m	struct:ulong3
x	/usr/local/cuda/include/vector_types.h	/^    unsigned long long int x, y, z;$/;"	m	struct:ulonglong3
x	/usr/local/cuda/include/vector_types.h	/^    unsigned long long int x;$/;"	m	struct:ulonglong1
x	/usr/local/cuda/include/vector_types.h	/^    unsigned long x;$/;"	m	struct:ulong1
x	/usr/local/cuda/include/vector_types.h	/^    unsigned short x, y, z;$/;"	m	struct:ushort3
x	/usr/local/cuda/include/vector_types.h	/^    unsigned short x;$/;"	m	struct:ushort1
x	src/common.h	/^	size_t x;$/;"	m	struct:__anon5
x	src/stb_image.h	/^      int x,y,w2,h2;$/;"	m	struct:__anon16::__anon17
xsize	/usr/local/cuda/include/driver_types.h	/^    size_t  xsize;    \/**< Logical width of allocation in elements *\/$/;"	m	struct:cudaPitchedPtr
y	/usr/local/cuda/include/driver_types.h	/^    int                        y; \/**< y *\/$/;"	m	struct:cudaChannelFormatDesc
y	/usr/local/cuda/include/driver_types.h	/^    size_t y;     \/**< y *\/$/;"	m	struct:cudaPos
y	/usr/local/cuda/include/dynlink_nvcuvid.h	/^        int y;$/;"	m	struct:__anon123::__anon126
y	/usr/local/cuda/include/nppdefs.h	/^    int y;          \/**<  y-coordinate of upper left corner (lowest memory address). *\/$/;"	m	struct:__anon150
y	/usr/local/cuda/include/nppdefs.h	/^    int y;      \/**<  y-coordinate. *\/$/;"	m	struct:__anon147
y	/usr/local/cuda/include/vector_types.h	/^    double x, y, z;$/;"	m	struct:double3
y	/usr/local/cuda/include/vector_types.h	/^    float x, y, z;$/;"	m	struct:float3
y	/usr/local/cuda/include/vector_types.h	/^    float x; float y; float __cuda_gnu_arm_ice_workaround[0];$/;"	m	struct:float2
y	/usr/local/cuda/include/vector_types.h	/^    int x, y, z;$/;"	m	struct:int3
y	/usr/local/cuda/include/vector_types.h	/^    long int x, y, z;$/;"	m	struct:long3
y	/usr/local/cuda/include/vector_types.h	/^    long long int x, y, z;$/;"	m	struct:longlong3
y	/usr/local/cuda/include/vector_types.h	/^    short x, y, z;$/;"	m	struct:short3
y	/usr/local/cuda/include/vector_types.h	/^    signed char x, y, z;$/;"	m	struct:char3
y	/usr/local/cuda/include/vector_types.h	/^    unsigned char x, y, z;$/;"	m	struct:uchar3
y	/usr/local/cuda/include/vector_types.h	/^    unsigned int x, y, z;$/;"	m	struct:dim3
y	/usr/local/cuda/include/vector_types.h	/^    unsigned int x, y, z;$/;"	m	struct:uint3
y	/usr/local/cuda/include/vector_types.h	/^    unsigned long int x, y, z;$/;"	m	struct:ulong3
y	/usr/local/cuda/include/vector_types.h	/^    unsigned long long int x, y, z;$/;"	m	struct:ulonglong3
y	/usr/local/cuda/include/vector_types.h	/^    unsigned short x, y, z;$/;"	m	struct:ushort3
y	src/common.h	/^	size_t y;$/;"	m	struct:__anon5
y	src/stb_image.h	/^      int x,y,w2,h2;$/;"	m	struct:__anon16::__anon17
y0	/usr/local/cuda/include/math_functions.hpp	/^__MATH_FUNCTIONS_DECL__ float y0(float a)$/;"	f
y1	/usr/local/cuda/include/math_functions.hpp	/^__MATH_FUNCTIONS_DECL__ float y1(float a)$/;"	f
yn	/usr/local/cuda/include/math_functions.hpp	/^__MATH_FUNCTIONS_DECL__ float yn(int n, float a)$/;"	f
ypos	src/stb_image.h	/^   int ypos;    \/\/ which pre-expansion row we're on$/;"	m	struct:__anon18
ysize	/usr/local/cuda/include/driver_types.h	/^    size_t  ysize;    \/**< Logical height of allocation in elements *\/$/;"	m	struct:cudaPitchedPtr
ystep	src/stb_image.h	/^   int ystep;   \/\/ how far through vertical expansion we are$/;"	m	struct:__anon18
yuv_to_rgb	src/image.c	/^void yuv_to_rgb(image im)$/;"	f
z	/usr/local/cuda/include/driver_types.h	/^    int                        z; \/**< z *\/$/;"	m	struct:cudaChannelFormatDesc
z	/usr/local/cuda/include/driver_types.h	/^    size_t z;     \/**< z *\/$/;"	m	struct:cudaPos
z	/usr/local/cuda/include/vector_types.h	/^    double x, y, z;$/;"	m	struct:double3
z	/usr/local/cuda/include/vector_types.h	/^    float x, y, z;$/;"	m	struct:float3
z	/usr/local/cuda/include/vector_types.h	/^    int x, y, z;$/;"	m	struct:int3
z	/usr/local/cuda/include/vector_types.h	/^    long int x, y, z;$/;"	m	struct:long3
z	/usr/local/cuda/include/vector_types.h	/^    long long int x, y, z;$/;"	m	struct:longlong3
z	/usr/local/cuda/include/vector_types.h	/^    short x, y, z;$/;"	m	struct:short3
z	/usr/local/cuda/include/vector_types.h	/^    signed char x, y, z;$/;"	m	struct:char3
z	/usr/local/cuda/include/vector_types.h	/^    unsigned char x, y, z;$/;"	m	struct:uchar3
z	/usr/local/cuda/include/vector_types.h	/^    unsigned int x, y, z;$/;"	m	struct:dim3
z	/usr/local/cuda/include/vector_types.h	/^    unsigned int x, y, z;$/;"	m	struct:uint3
z	/usr/local/cuda/include/vector_types.h	/^    unsigned long int x, y, z;$/;"	m	struct:ulong3
z	/usr/local/cuda/include/vector_types.h	/^    unsigned long long int x, y, z;$/;"	m	struct:ulonglong3
z	/usr/local/cuda/include/vector_types.h	/^    unsigned short x, y, z;$/;"	m	struct:ushort3
z	src/common.h	/^	size_t z;$/;"	m	struct:__anon5
z_distance	src/stb_image.h	/^   stbi__zhuffman z_length, z_distance;$/;"	m	struct:__anon20
z_expandable	src/stb_image.h	/^   int   z_expandable;$/;"	m	struct:__anon20
z_length	src/stb_image.h	/^   stbi__zhuffman z_length, z_distance;$/;"	m	struct:__anon20
zbuffer	src/stb_image.h	/^   stbi_uc *zbuffer, *zbuffer_end;$/;"	m	struct:__anon20
zbuffer_end	src/stb_image.h	/^   stbi_uc *zbuffer, *zbuffer_end;$/;"	m	struct:__anon20
zero_objectness	src/region_layer.c	/^void zero_objectness(layer l)$/;"	f
zeta_plane	src/common.h	/^    dim3 zeta_plane;$/;"	m	struct:__anon6
zout	src/stb_image.h	/^   char *zout;$/;"	m	struct:__anon20
zout_end	src/stb_image.h	/^   char *zout_end;$/;"	m	struct:__anon20
zout_start	src/stb_image.h	/^   char *zout_start;$/;"	m	struct:__anon20
